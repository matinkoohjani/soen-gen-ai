idx,code,label
82,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean primeLength(String string) {
        int l = string.length();
        if (l == 0 || l == 1) {
            return false;
        }
        for (int i = 2; i < l; i++) {
            if (l % i == 0) {
                return false;
            }
        }
        return true;
    }
}",human
136,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){
        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();
        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();
        Optional<Integer> s = Optional.empty();
        if (smallest.size() > 0) {
            s = Optional.of(Collections.max(smallest));
        }
        Optional<Integer> l = Optional.empty();
        if (largest.size() > 0) {
            l = Optional.of(Collections.min(largest));
        }
        return Arrays.asList(s, l);
    }
}",human
21,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Double> rescaleToUnit(List<Double> numbers) {
        double min_number = Collections.min(numbers);
        double max_number = Collections.max(numbers);
        List<Double> result = new ArrayList<>();
        for (double x : numbers) {
            result.add((x - min_number) / (max_number - min_number));
        }
        return result;
    }
}",human
153,"import java.util.List;

class Solution {
    public String StrongestExtension(String class_name, List<String> extensions) {
        String strongestExtension = """";
        int maxStrength = Integer.MIN_VALUE;
        
        for (String extension : extensions) {
            int capCount = 0;
            int smallCount = 0;
            
            for (char c : extension.toCharArray()) {
                if (Character.isUpperCase(c)) {
                    capCount++;
                } else if (Character.isLowerCase(c)) {
                    smallCount++;
                }
            }
            
            int strength = capCount - smallCount;
            
            if (strength > maxStrength) {
                maxStrength = strength;
                strongestExtension = extension;
            }
        }
        
        return class_name + ""."" + strongestExtension;
    }
}",lm
37,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> sortEven(List<Integer> l) {
        List<Integer> even = new ArrayList<>();
        for (int i = 0; i < l.size(); i += 2) {
            even.add(l.get(i));
        }
        Collections.sort(even);
        List<Integer> result = l;
        for (int i = 0; i < l.size(); i += 2) {
            result.set(i, even.get(i / 2));
        }
        return result;
    }
}",human
64,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Write a function vowelsCount which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowelsCount(""abcde"")
    2
    >>> vowelsCount(""ACEDY"")
    3
     */
    public int vowelsCount(String s) {
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.toLowerCase(c) == 'a' || Character.toLowerCase(c) == 'e' ||
                    Character.toLowerCase(c) == 'i' || Character.toLowerCase(c) == 'o' ||
                    (Character.toLowerCase(c) == 'u' && i == s.length() - 1)) {
                count++;
            }
        }
        return count;
    }
}",lm
150,"import java.util.*;
import java.lang.*;

class Solution {
    public int xOrY(int n, int x, int y) {
        if (n == 1) {
            return y;
        }
        for (int i = 2; i < n; i++) {
            if (n % i == 0) {
                return y;
            }
        }
        return x;
    }
}",human
108,"import java.util.*;
import java.lang.*;

class Solution {
    public int countNums(List<Integer> arr) {
        int count = 0;
        for (int n: arr) {
            int neg = 1;
            if (n < 0) {
                n = -n;
                neg = -1;
            }
            List<Integer> digits = new ArrayList<>();
            for (char digit : String.valueOf(n).toCharArray()) {
                digits.add(digit - '0');
            }
            digits.set(0, digits.get(0) * neg);
            if (digits.stream().reduce(0, Integer::sum) > 0) {
                count += 1;
            }
        }
        return count;
    }
}",human
32,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
     */
    public double poly(List<Double> xs, double x) {
        double result = 0;
        for (int i = 0; i < xs.size(); i++) {
            result += xs.get(i) * Math.pow(x, i);
        }
        return result;
    }
    
    public double findZero(List<Double> xs) {
        double begin = -1, end = 1;
        while (poly(xs, begin) * poly(xs, end) > 0) {
            begin *= 2;
            end *= 2;
        }
        while (end - begin > 1e-10) {
            double center = (begin + end) / 2;
            if (poly(xs, begin) * poly(xs, center) > 0) {
                begin = center;
            } else {
                end = center;
            }
        }
        return begin;
    }
}",human
59,"import java.util.*;
import java.lang.*;

class Solution {
    public int largestPrimeFactor(int n) {
        int largest = 1;
        for (int j = 2; j <= n; j++) {
            if (n % j == 0) {
                boolean is_prime = j >= 2;
                for (int i = 2; i < j - 1; i++) {
                    if (j % i == 0) {
                        is_prime = false;
                        break;
                    }
                }
                if (is_prime) {
                    largest = Math.max(largest, j);
                }
            }
        }
        return largest;
    }
}",human
13,"import java.util.*;
import java.lang.*;

class Solution {
    public int greatestCommonDivisor(int a, int b) {
        if (a == 0 || b == 0) {
            return a + b;
        }
        if (a == b) {
            return a;
        }
        if (a > b) {
            return greatestCommonDivisor(a % b, b);
        } else {
            return greatestCommonDivisor(a, b % a);
        }
    }
}",human
11,"import java.util.*;
import java.lang.*;

class Solution {
    public String stringXor(String a, String b) {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < a.length(); i++) {
            if (a.charAt(i) == b.charAt(i)) {
                result.append(""0"");
            } else {
                result.append(""1"");
            }
        }
        return result.toString();
    }
}",human
9,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> rollingMax(List<Integer> numbers) {
        List<Integer> result = new ArrayList<>();
        if (numbers.size() == 0) {
            return result;
        }
        int rollingMax = numbers.get(0);
        result.add(rollingMax);

        for (int i = 1; i < numbers.size(); i++) {
            if (numbers.get(i) > rollingMax) {
                rollingMax = numbers.get(i);
            }
            result.add(rollingMax);
        }

        return result;
    }
}",human
72,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean willItFly(List<Integer> q, int w) {
        if (q.stream().reduce(0, Integer::sum) > w) {
            return false;
        }
        int i = 0, j = q.size() - 1;
        while (i < j) {
            if (!Objects.equals(q.get(i), q.get(j))) {
                return false;
            }
            i += 1;
            j -= 1;
        }
        return true;
    }
}",human
116,"import java.util.*;
import java.lang.*;

class Solution {
    /**
     * In this Kata, you have to sort an array of non-negative integers according to
     * number of ones in their binary representation in ascending order.
     * For similar number of ones, sort based on decimal value.
     *
     * @param arr the list of integers to be sorted
     * @return the sorted list of integers
     */
    public List<Integer> sortArray(List<Integer> arr) {
        // Implement your solution here
        
    }
}",lm
22,"import java.util.*;

class Solution {
    /**
     * Filter given list of any values only for integers
     *
     * @param values the list of values to filter
     * @return the list of integers
     */
    public List<Integer> filterIntegers(List<Object> values) {
        List<Integer> integers = new ArrayList<>();

        for (Object value : values) {
            if (value instanceof Integer) {
                integers.add((Integer) value);
            }
        }

        return integers;
    }
}",lm
62,"import java.util.*;

class Solution {
    /**
     * xs represent coefficients of a polynomial.
     * xs[0] + xs[1] * x + xs[2] * x^2 + ....
     * Return derivative of this polynomial in the same form.
     * 
     * @param xs list of integer coefficients representing the polynomial
     * @return the derivative of the polynomial
     */
    public List<Integer> derivative(List<Integer> xs) {
        List<Integer> derivative = new ArrayList<>();
        
        for (int i = 1; i < xs.size(); i++) {
            derivative.add(i * xs.get(i));
        }
        
        return derivative;
    }
}",lm
36,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizzBuzz(50)
    0
    >>> fizzBuzz(78)
    2
    >>> fizzBuzz(79)
    3
     */
    public int fizzBuzz(int n) {
        int count = 0;
        for (int i = 1; i < n; i++) {
            if (i % 11 == 0 || i % 13 == 0) {
                count += countSevens(i);
            }
        }
        return count;
    }

    private int countSevens(int num) {
        int count = 0;
        while (num > 0) {
            if (num % 10 == 7) {
                count++;
            }
            num /= 10;
        }
        return count;
    }
}",lm
12,"import java.util.*;
import java.lang.*;

class Solution {
    public Optional<String> longest(List<String> strings) {
        if (strings.isEmpty()) {
            return Optional.empty();
        }
        String longest = strings.get(0);
        for (String s : strings) {
            if (s.length() > longest.length()) {
                longest = s;
            }
        }
        return Optional.of(longest);
    }
}",human
38,"import java.util.*;

class Solution {
    /**
    returns encoded string by cycling groups of three characters.
     */
    public String encodeCyclic(String s) {
        // split string to groups. Each of length 3.
        List<String> groups = new ArrayList<>();
        for (int i = 0; i < s.length(); i += 3) {
            groups.add(s.substring(i, Math.min(i + 3, s.length())));
        }
        // cycle elements in each group. Unless group has fewer elements than 3.
        for (int i = 0; i < groups.size(); i++) {
            if (groups.get(i).length() == 3) {
                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));
            }
        }
        return String.join("""", groups);
    }

    /**
    takes as input string encoded with encodeCyclic function. Returns decoded string.
     */
    public String decodeCyclic(String s) {
        // TODO: Implement the decoding logic

        return null;
    }
}",lm
97,"import java.util.*;
import java.lang.*;

class Solution {
    public int multiply(int a, int b) {
        return Math.abs(a % 10) * Math.abs(b % 10);
    }
}",human
136,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst) {
        Optional<Integer> largestNegative = Optional.empty();
        Optional<Integer> smallestPositive = Optional.empty();
        
        for (Integer num : lst) {
            if (num < 0 && (!largestNegative.isPresent() || num > largestNegative.get())) {
                largestNegative = Optional.of(num);
            }
            if (num > 0 && (!smallestPositive.isPresent() || num < smallestPositive.get())) {
                smallestPositive = Optional.of(num);
            }
        }
        
        return Arrays.asList(largestNegative, smallestPositive);
    }
}",lm
57,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean monotonic(List<Integer> l) {
        List<Integer> l1 = new ArrayList<>(l), l2 = new ArrayList<>(l);
        Collections.sort(l1);
        l2.sort(Collections.reverseOrder());
        return l.equals(l1) || l.equals(l2);
    }
}",human
20,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Double> findClosestElements(List<Double> numbers) {
        List<Double> closest_pair = new ArrayList<>();
        closest_pair.add(numbers.get(0));
        closest_pair.add(numbers.get(1));
        double distance = Math.abs(numbers.get(1) - numbers.get(0));
        for (int i = 0; i < numbers.size(); i++) {
            for (int j = i + 1; j < numbers.size(); j++) {
                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {
                    closest_pair.clear();
                    closest_pair.add(numbers.get(i));
                    closest_pair.add(numbers.get(j));
                    distance = Math.abs(numbers.get(i) - numbers.get(j));
                }
            }
        }
        Collections.sort(closest_pair);
        return closest_pair;
    }
}",human
117,"import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<String> selectWords(String s, int n) {
        List<String> result = new ArrayList<>();
        
        if (s.isEmpty()) {
            return result;
        }
        
        String[] words = s.split("" "");
        
        for (String word : words) {
            int consonantCount = 0;
            
            for (char c : word.toCharArray()) {
                if (isConsonant(c)) {
                    consonantCount++;
                }
            }
            
            if (consonantCount == n) {
                result.add(word);
            }
        }
        
        return result;
    }
    
    private boolean isConsonant(char c) {
        c = Character.toLowerCase(c);
        return c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u';
    }
}",lm
93,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Write a function that takes a message, and encodes in such a
    way that it swaps case of all letters, replaces all vowels in
    the message with the letter that appears 2 places ahead of that
    vowel in the english alphabet.
    Assume only letters.

    Examples:
    >>> encode(""test"")
    ""TGST""
    >>> encode(""This is a message"")
    ""tHKS KS C MGSSCGG""
     */
    public String encode(String message) {
        StringBuilder encodedMessage = new StringBuilder();

        for (char letter : message.toCharArray()) {
            if (Character.isLetter(letter)) {
                if (Character.isUpperCase(letter)) {
                    encodedMessage.append(Character.toLowerCase(letter));
                } else {
                    encodedMessage.append(Character.toUpperCase(letter));
                }
            } else {
                encodedMessage.append(letter);
            }
        }

        for (int i = 0; i < encodedMessage.length(); i++) {
            char letter = encodedMessage.charAt(i);
            if (isVowel(letter)) {
                encodedMessage.setCharAt(i, (char) (letter + 2));
            }
        }

        return encodedMessage.toString();
    }

    private boolean isVowel(char letter) {
        char lowerCaseLetter = Character.toLowerCase(letter);
        return lowerCaseLetter == 'a' || lowerCaseLetter == 'e' || lowerCaseLetter == 'i' || lowerCaseLetter == 'o' || lowerCaseLetter == 'u';
    }
}",lm
162,"import java.math.BigInteger;
import java.security.*;
import java.util.*;
import java.lang.*;

class Solution {
    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {
        if (text.isEmpty()) {
            return Optional.empty();
        }

        String md5 = new BigInteger(1, java.security.MessageDigest.getInstance(""MD5"").digest(text.getBytes())).toString(16);
        md5 = ""0"".repeat(32 - md5.length()) + md5;
        return Optional.of(md5);
    }
}",human
42,"import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;

class Solution {
    /**
    Return list with elements incremented by 1.
    >>> incrList(Arrays.asList(1, 2, 3))
    [2, 3, 4]
    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
     */
    public List<Integer> incrList(List<Integer> l) {
        return l.stream().map(i -> i + 1).collect(Collectors.toList());
    }
}",lm
66,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
     */
    public int digitSum(String s) {
        int sum = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isUpperCase(c)) {
                sum += (int) c;
            }
        }
        return sum;
    }
}",lm
85,"import java.util.*;
import java.lang.*;

class Solution {
    public int add(List<Integer> lst) {
        int sum = 0;
        for (int i = 1; i < lst.size(); i += 2) {
            if (lst.get(i) % 2 == 0) {
                sum += lst.get(i);
            }
        }
        return sum;
    }
}",human
23,"import java.util.*;
import java.lang.*;

class Solution {
    /**
     * Return length of given string
     * >>> strlen("""")
     * 0
     * >>> strlen(""abc"")
     * 3
     */
    public int strlen(String string) {
        return string.length();
    }
}",lm
68,"import java.util.*;

class Solution {
    public List<Integer> pluck(List<Integer> arr) {
        List<Integer> result = new ArrayList<>();
        
        int smallestEvenIndex = -1;
        int smallestEvenValue = Integer.MAX_VALUE;
        
        for (int i = 0; i < arr.size(); i++) {
            int value = arr.get(i);
            
            if (value % 2 == 0 && value < smallestEvenValue) {
                smallestEvenValue = value;
                smallestEvenIndex = i;
            }
        }
        
        if (smallestEvenIndex != -1) {
            result.add(smallestEvenValue);
            result.add(smallestEvenIndex);
        }
        
        return result;
    }
}",lm
87,"import java.util.*;
import java.lang.*;

class Solution {
    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {
        List<List<Integer>> coords = new ArrayList<>();
        for (int i = 0; i < lst.size(); i++) {
            List<List<Integer>> row = new ArrayList<>();
            for (int j = lst.get(i).size() - 1; j >= 0; j--) {
                if (lst.get(i).get(j) == x) {
                    row.add(Arrays.asList(i, j));
                }
            }
            coords.addAll(row);
        }
        return coords;
    }
}",human
45,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Given length of a side and high return area for a triangle.
    >>> triangleArea(5, 3)
    7.5
     */
    public double triangleArea(double a, double h) {
        // Calculate the area of the triangle using the formula: area = (base * height) / 2
        double area = (a * h) / 2;

        return area;
    }
}",lm
110,"import java.util.*;

class Solution {
    public String exchange(List<Integer> lst1, List<Integer> lst2) {
        // Implementation goes here
    }
}",lm
47,"import java.util.*;
import java.lang.*;

class Solution {
    public double median(List<Integer> l) {
        List<Integer> list = l;
        Collections.sort(list);
        if (l.size() % 2 == 1) {
            return l.get(l.size() / 2);
        } else {
            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;
        }
    }
}",human
131,,lm
135,,lm
48,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean isPalindrome(String text) {
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {
                return false;
            }
        }
        return true;
    }
}",human
120,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> maximum(List<Integer> arr, int k) {
        if (k == 0) {
            return List.of();
        }
        List<Integer> arr_sort = new ArrayList<>(arr);
        Collections.sort(arr_sort);
        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());
    }
}",human
4,"import java.util.*;
import java.lang.*;

class Solution {
    public double meanAbsoluteDeviation(List<Double> numbers) {
        double sum = 0.0;
        for (double num : numbers) {
            sum += num;
        }
        double mean = sum / numbers.size();
        double sum_abs_diff = 0.0;
        for (double num : numbers) {
            sum_abs_diff += Math.abs(num - mean);
        }
        return sum_abs_diff / numbers.size();
    }
}",human
17,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> parseMusic(String string) {
        String[] notes = string.split("" "");
        List<Integer> result = new ArrayList<>();
        for (String s : notes) {
            switch (s) {
                case ""o"" -> result.add(4);
                case ""o|"" -> result.add(2);
                case "".|"" -> result.add(1);
            }
        }
        return result;
    }
}",human
141,"import java.util.*;
import java.lang.*;

class Solution {
    /**
     * Create a function which takes a string representing a file's name, and returns
     * ""Yes"" if the the file's name is valid, and returns ""No"" otherwise.
     * A file's name is considered to be valid if and only if all the following conditions
     * are met:
     * - There should not be more than three digits ('0'-'9') in the file's name.
     * - The file's name contains exactly one dot '.'
     * - The substring before the dot should not be empty, and it starts with a letter from
     * the latin alphapet ('a'-'z' and 'A'-'Z').
     * - The substring after the dot should be one of these: [""txt"", ""exe"", ""dll""]
     * Examples:
     * file_name_check(""example.txt"") # => ""Yes""
     * file_name_check(""1example.dll"") # => ""No"" (the name should start with a latin alphapet letter)
     */
    public String filenameCheck(String file_name) {
        // Check for the number of digits
        int digitCount = 0;
        for (char c : file_name.toCharArray()) {
            if (Character.isDigit(c)) {
                digitCount++;
            }
        }
        if (digitCount > 3) {
            return ""No"";
        }
        
        // Check for the presence of exactly one dot
        int dotCount = 0;
        for (char c : file_name.toCharArray()) {
            if (c == '.') {
                dotCount++;
            }
        }
        if (dotCount != 1) {
            return ""No"";
        }
        
        // Check the substring before the dot
        String[] parts = file_name.split(""\\."");
        if (parts.length != 2 || parts[0].isEmpty() || !Character.isLetter(parts[0].charAt(0))) {
            return ""No"";
        }
        
        // Check the substring after the dot
        String extension = parts[1];
        if (!extension.equals(""txt"") && !extension.equals(""exe"") && !extension.equals(""dll"")) {
            return ""No"";
        }
        
        return ""Yes"";
    }
}",lm
27,"import java.util.*;
import java.lang.*;

class Solution {
    public String flipCase(String string) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < string.length(); i++) {
            if (Character.isLowerCase(string.charAt(i))) {
                sb.append(Character.toUpperCase(string.charAt(i)));
            } else {
                sb.append(Character.toLowerCase(string.charAt(i)));
            }
        }
        return sb.toString();
    }
}",human
156,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> intToMiniRoman(19) == ""xix""
    >>> intToMiniRoman(152) == ""clii""
    >>> intToMiniRoman(426) == ""cdxxvi""
     */
    public String intToMiniRoman(int number) {
        // Your implementation here
    }
}",lm
159,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> eat(int number, int need, int remaining) {
        if (need <= remaining) {
            return Arrays.asList(number + need, remaining - need);
        } else {
            return Arrays.asList(number + remaining, 0);
        }
    }
}",human
145,"import java.util.*;

class Solution {
    /**
     * Write a function which sorts the given list of integers
     * in ascending order according to the sum of their digits.
     * Note: if there are several items with similar sum of their digits,
     * order them based on their index in original list.
     *
     * @param nums the list of integers to be sorted
     * @return the sorted list of integers
     */
    public List<Integer> orderByPoints(List<Integer> nums) {
        Collections.sort(nums, new Comparator<Integer>() {
            @Override
            public int compare(Integer num1, Integer num2) {
                int sum1 = computeDigitSum(num1);
                int sum2 = computeDigitSum(num2);

                if (sum1 == sum2) {
                    return nums.indexOf(num1) - nums.indexOf(num2);
                }

                return sum1 - sum2;
            }
        });

        return nums;
    }

    private int computeDigitSum(int num) {
        int sum = 0;
        num = Math.abs(num);

        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }

        return sum;
    }
}",lm
55,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
     */
    public int fib(int n) {
        if (n <= 1) {
            return n;
        } else {
            return fib(n - 1) + fib(n - 2);
        }
    }
}",lm
1,"import java.util.*;
import java.lang.*;

class Solution {
    public List<String> separateParenGroups(String paren_string) {
        List<String> result = new ArrayList<>();
        StringBuilder sb = new StringBuilder();
        
        int openCount = 0;
        for (char c : paren_string.toCharArray()) {
            if (c == '(') {
                openCount++;
                if (openCount > 1) {
                    sb.append(c);
                }
            } else if (c == ')') {
                openCount--;
                if (openCount > 0) {
                    sb.append(c);
                } else {
                    result.add(sb.toString());
                    sb = new StringBuilder();
                }
            } else if (c != ' ') {
                sb.append(c);
            }
        }
        
        return result;
    }
}",lm
58,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Return sorted unique common elements for two lists.
    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))
    [1, 5, 653]
    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))
    [2, 3]
     */
    public List<Integer> common(List<Integer> l1, List<Integer> l2) {
        List<Integer> commonElements = new ArrayList<>();
      
        for (Integer num : l1) {
            if (l2.contains(num) && !commonElements.contains(num)) {
                commonElements.add(num);
            }
        }
      
        Collections.sort(commonElements);
      
        return commonElements;
    }
}",lm
108,"import java.util.*;

class Solution {
    /**
    Write a function countNums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> countNums(Arrays.asList()) == 0
    >>> countNums(Arrays.asList(-1, 11, -11)) == 1
    >>> countNums(Arrays.asList(1, 1, 2)) == 3
     */
    public int countNums(List<Integer> arr) {
        int count = 0;
        
        for (int num : arr) {
            if (sumDigits(num) > 0) {
                count++;
            }
        }
        
        return count;
    }
    
    private int sumDigits(int num) {
        int sum = 0;
        
        while (num != 0) {
            int digit = num % 10;
            sum += Math.abs(digit);
            num /= 10;
        }
        
        return sum;
    }
}",lm
30,"import java.util.*;

class Solution {
    /**
    Return only positive numbers in the list.
    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))
    [2, 5, 6]
    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))
    [5, 3, 2, 3, 9, 123, 1]
     */
    public List<Integer> getPositive(List<Integer> l) {
        List<Integer> positiveNumbers = new ArrayList<>();

        for (int num : l) {
            if (num > 0) {
                positiveNumbers.add(num);
            }
        }

        return positiveNumbers;
    }
}",lm
75,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean isMultiplyPrime(int a) {
        class IsPrime {
            public static boolean is_prime(int n) {
                for (int j = 2; j < n; j++) {
                    if (n % j == 0) {
                        return false;
                    }
                }
                return true;
            }
        }
        for (int i = 2; i < 101; i++) {
            if (!IsPrime.is_prime(i)) {
                continue;
            }
            for (int j = i; j < 101; j++) {
                if (!IsPrime.is_prime(j)) {
                    continue;
                }
                for (int k = j; k < 101; k++) {
                    if (!IsPrime.is_prime(k)) {
                        continue;
                    }
                    if (i * j * k == a) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}",human
95,"public class Solution {

    public boolean checkDictCase(Map<Object, Object> dict) {
        // Check if the map is empty
        if (dict.isEmpty()) {
            return false;
        }

        boolean lowercase = true;
        boolean uppercase = true;

        // Iterate over the map and check the case of the keys
        for (Object key : dict.keySet()) {
            if (key instanceof String) {
                String keyString = (String) key;
                if (!keyString.equals(keyString.toLowerCase())) {
                    lowercase = false;
                }
                if (!keyString.equals(keyString.toUpperCase())) {
                    uppercase = false;
                }
            } else {
                // The key is not a string, return false
                return false;
            }
        }

        // Return true if all keys are either lowercase or uppercase, false otherwise
        return lowercase || uppercase;
    }
}",lm
22,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> filterIntergers(List<Object> values) {
        List<Integer> result = new ArrayList<>();
        for (Object x : values) {
            if (x instanceof Integer) {
                result.add((Integer) x);
            }
        }
        return result;
    }
}",human
80,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean isHappy(String s) {
        if (s.length() < 3) {
            return false;
        }

        for (int i = 0; i < s.length() - 2; i++) {
            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2)) {
                return false;
            }
        }
        return true;
    }
}",human
135,"import java.util.*;
import java.lang.*;

class Solution {
    public int canArrange(List<Integer> arr) {
        int ind = -1, i = 1;
        while (i < arr.size()) {
            if (arr.get(i) < arr.get(i - 1)) {
                ind = i;
            }
            i += 1;
        }
        return ind;
    }
}",human
117,"import java.util.*;
import java.lang.*;

class Solution {
    public List<String> selectWords(String s, int n) {
        List<String> result = new ArrayList<>();
        for (String word : s.split("" "")) {
            int n_consonants = 0;
            for (char c : word.toCharArray()) {
                c = Character.toLowerCase(c);
                if (""aeiou"".indexOf(c) == -1) {
                    n_consonants += 1;
                }
            }
            if (n_consonants == n) {
                result.add(word);
            }
        }
        return result;
    }
}",human
6,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> parseNestedParens(String paren_string) {
        String[] groups = paren_string.split("" "");
        List<Integer> result = new ArrayList<>(List.of());
        for (String group : groups) {
            if (group.length() > 0) {
                int depth = 0;
                int max_depth = 0;
                for (char c : group.toCharArray()) {
                    if (c == '(') {
                        depth += 1;
                        max_depth = Math.max(depth, max_depth);
                    } else {
                        depth -= 1;
                    }
                }
                result.add(max_depth);
            }
        }
        return result;
    }
}",human
157,"class Solution {
    public boolean rightAngleTriangle(int a, int b, int c) {
        // Check if the given sides form a right-angled triangle
        if (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a) {
            return true;
        } else {
            return false;
        }
    }
}",lm
72,"import java.util.*;

class Solution {
    /**
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    willItFly(Arrays.asList(1, 2), 5) -> false
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    willItFly(Arrays.asList(3, 2, 3), 1) -> false
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    willItFly(Arrays.asList(3, 2, 3), 9) -> true
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    willItFly(Arrays.asList(3), 5) -> true
    # 3 is less than the maximum possible weight, and it's balanced.
     */
    public boolean willItFly(List<Integer> q, int w) {
        // Check if the list is palindromic
        int n = q.size();
        for (int i = 0; i < n / 2; i++) {
            if (!q.get(i).equals(q.get(n - i - 1))) {
                return false;
            }
        }
        
        // Check if the sum of elements is less than or equal to maximum possible weight
        int sum = 0;
        for (int num : q) {
            sum += num;
        }
        return sum <= w;
    }
}",lm
76,,lm
28,"import java.util.*;
import java.lang.*;

class Solution {
    public String concatenate(List<String> strings) {
        return String.join("""", strings);
    }
}",human
35,"import java.util.*;
import java.lang.*;

class Solution {
    public int maxElement(List<Integer> l) {
        return Collections.max(l);
    }
}",human
53,"import java.util.*;
import java.lang.*;

class Solution {
    /**
     * Add two numbers x and y
     *
     * @param x the first number to add
     * @param y the second number to add
     * @return the sum of x and y
     */
    public int add(int x, int y) {
        return x + y;
    }
}",lm
129,"import java.util.*;

class Solution {
    public List<Integer> minPath(List<List<Integer>> grid, int k) {
        // Your code implementation here
        
        List<Integer> path = new ArrayList<>(); // Placeholder for the path
        
        // Your implementation to find the minimum path goes here
        
        
        return path;
    }
}",lm
44,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> changeBase(8, 3)
    ""22""
    >>> changeBase(8, 2)
    ""1000""
    >>> changeBase(7, 2)
    ""111""
     */
    public String changeBase(int x, int base) {
        StringBuilder result = new StringBuilder();
        
        while (x > 0) {
            int remainder = x % base;
            result.insert(0, remainder);
            x = x / base;
        }
        
        return result.toString();
    }
}",lm
67,"import java.util.*;
import java.lang.*;

class Solution {
    public int fruitDistribution(String s, int n) {
        List<Integer> lis = new ArrayList<>();
        for (String i : s.split("" "")) {
            try {
                lis.add(Integer.parseInt(i));
            } catch (NumberFormatException ignored) {

            }
        }
        return n - lis.stream().mapToInt(Integer::intValue).sum();
    }
}",human
34,,lm
3,"import java.util.*;

class Solution {
    public boolean belowZero(List<Integer> operations) {
        int balance = 0;
        
        for (int operation : operations) {
            balance += operation;
            if (balance < 0) {
                return true;
            }
        }
        
        return false;
    }
}",lm
6,"import java.util.*;

class Solution {
    public List<Integer> parseNestedParens(String paren_string) {
        List<Integer> levels = new ArrayList<>();
        int maxLevel = 0;
        int currentLevel = 0;
        
        for (char c : paren_string.toCharArray()) {
            if (c == '(') {
                currentLevel++;
                maxLevel = Math.max(maxLevel, currentLevel);
            } else if (c == ')') {
                currentLevel--;
            } else if (c == ' ') {
                levels.add(maxLevel);
                maxLevel = 0;
                currentLevel = 0;
            }
        }
        
        levels.add(maxLevel);
        
        return levels;
    }
}",lm
77,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Write a function that takes an integer a and returns true
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> true
    iscube(2) ==> false
    iscube(-1) ==> true
    iscube(64) ==> true
    iscube(0) ==> true
    iscube(180) ==> false
     */
    public boolean iscube(int a) {
        double cubeRoot = Math.cbrt(a);
        int cubeRootInt = (int) cubeRoot;
        return (cubeRootInt * cubeRootInt * cubeRootInt) == a;
    }
}",lm
107,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> evenOddPalindrome(int n) {
        int even_palindrome_count = 0, odd_palindrome_count = 0;

        for (int i = 1; i <= n; i++) {
            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {
                if (i % 2 == 1) {
                    odd_palindrome_count += 1;
                } else {
                    even_palindrome_count += 1;
                }
            }
        }
        return Arrays.asList(even_palindrome_count, odd_palindrome_count);
    }
}",human
31,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean isPrime(int n) {
        if (n < 2) {
            return false;
        }
        for (int k = 2; k < n; k++) {
            if (n % k == 0) {
                return false;
            }
        }
         return true;
    }
}",human
148,"import java.util.*;

class Solution {
    /**
     * There are eight planets in our solar system: the closerst to the Sun
     * is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,
     * Uranus, Neptune.
     * Write a function that takes two planet names as strings planet1 and planet2.
     * The function should return a tuple containing all planets whose orbits are
     * located between the orbit of planet1 and the orbit of planet2, sorted by
     * the proximity to the sun.
     * The function should return an empty tuple if planet1 or planet2
     * are not correct planet names.
     *
     * Examples
     * bf(""Jupiter"", ""Neptune"") ==> [""Saturn"", ""Uranus""]
     * bf(""Earth"", ""Mercury"") ==> [""Venus""]
     * bf(""Mercury"", ""Uranus"") ==> [""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn""]
     */
    public List<String> bf(String planet1, String planet2) {
        List<String> planets = Arrays.asList(""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"");
        
        if (!planets.contains(planet1) || !planets.contains(planet2)) {
            return new ArrayList<>();
        }
        
        int startIndex = planets.indexOf(planet1);
        int endIndex = planets.indexOf(planet2);
        
        if (startIndex > endIndex) {
            int temp = startIndex;
            startIndex = endIndex;
            endIndex = temp;
        }
        
        return planets.subList(startIndex + 1, endIndex);
    }
}",lm
79,"import java.util.*;
import java.lang.*;

class Solution {
    public String decimalToBinary(int decimal) {
        return ""db"" + Integer.toBinaryString(decimal) + ""db"";
    }
}",human
56,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean correctBracketing(String brackets) {
        int depth = 0;
        for (char b : brackets.toCharArray()) {
            if (b == '<') {
                depth += 1;
            } else {
                depth -= 1;
            }
            if (depth < 0) {
                return false;
            }
        }
        return depth == 0;
    }
}",human
46,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
     */
    public int fib4(int n) {
        if (n == 0) {
            return 0;
        }
        
        int[] fib4Sequence = new int[Math.max(n+1, 4)];
        
        fib4Sequence[2] = 2;
        
        for (int i = 3; i <= n; i++) {
            fib4Sequence[i] = fib4Sequence[i-1] + fib4Sequence[i-2] + fib4Sequence[i-3] + fib4Sequence[i-4];
        }
        
        return fib4Sequence[n];
    }
}",lm
8,"import java.util.*;
import java.lang.*;

class Solution {
    /**
     * For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
     * Empty sum should be equal to 0 and empty product should be equal to 1.
     *
     * @param numbers the list of integers
     * @return the tuple consisting of sum and product
     */
    public List<Integer> sumProduct(List<Integer> numbers) {
        List<Integer> result = new ArrayList<>();
        int sum = 0;
        int product = 1;

        for (Integer number : numbers) {
            sum += number;
            product *= number;
        }

        result.add(sum);
        result.add(product);

        return result;
    }
}",lm
61,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean correctBracketing(String brackets) {
        int depth = 0;
        for (char b : brackets.toCharArray()) {
            if (b == '(') {
                depth += 1;
            } else {
                depth -= 1;
            }
            if (depth < 0) {
                return false;
            }
        }
        return depth == 0;
    }
}",human
120,"import java.util.*;

class Solution {
    /**
    Given an array arr of integers and a positive integer k, return a sorted list
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
     */
    public List<Integer> maximum(List<Integer> arr, int k) {
        Collections.sort(arr, Collections.reverseOrder());
        return arr.subList(0, k);
    }
}",lm
79,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimalToBinary(15)   // returns ""db1111db""
    decimalToBinary(32)   // returns ""db100000db""
     */
    public String decimalToBinary(int decimal) {
        StringBuilder binary = new StringBuilder();
        binary.append(""db"");

        // Convert decimal to binary
        while (decimal > 0) {
            int remainder = decimal % 2;
            binary.insert(2, remainder);
            decimal /= 2;
        }

        binary.append(""db"");
        return binary.toString();
    }
}",lm
51,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    removeVowels is a function that takes string and returns string without vowels.
    >>> removeVowels("""")
    """"
    >>> removeVowels(""abcdef\nghijklm"")
    ""bcdf\nghjklm""
    >>> removeVowels(""abcdef"")
    ""bcdf""
    >>> removeVowels(""aaaaa"")
    """"
    >>> removeVowels(""aaBAA"")
    ""B""
    >>> removeVowels(""zbcd"")
    ""zbcd""
     */
    public String removeVowels(String text) {
        return text.replaceAll(""[aeiouAEIOU]"", """");
    }
}",lm
20,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    */
    public List<Double> findClosestElements(List<Double> numbers) {
        List<Double> closestElements = new ArrayList<>();
        if (numbers.size() < 2) {
            throw new IllegalArgumentException(""List of numbers must have at least two elements"");
        }
        
        double minDifference = Double.MAX_VALUE;
        double closestNumber1 = numbers.get(0);
        double closestNumber2 = numbers.get(1);
        
        for (int i = 0; i < numbers.size() - 1; i++) {
            for (int j = i + 1; j < numbers.size(); j++) {
                double difference = Math.abs(numbers.get(i) - numbers.get(j));
                
                if (difference < minDifference) {
                    minDifference = difference;
                    closestNumber1 = numbers.get(i);
                    closestNumber2 = numbers.get(j);
                }
            }
        }
        
        closestElements.add(Math.min(closestNumber1, closestNumber2));
        closestElements.add(Math.max(closestNumber1, closestNumber2));
        
        return closestElements;
    }
}",lm
81,"import java.util.*;
import java.lang.*;

class Solution {
    public List<String> numericalLetterGrade(List<Double> grades) {
        List<String> letter_grade = new ArrayList<>();
        for (double gpa : grades) {
            if (gpa == 4.0) {
                letter_grade.add(""A+"");
            } else if (gpa > 3.7) {
                letter_grade.add(""A"");
            } else if (gpa > 3.3) {
                letter_grade.add(""A-"");
            } else if (gpa > 3.0) {
                letter_grade.add(""B+"");
            } else if (gpa > 2.7) {
                letter_grade.add(""B"");
            } else if (gpa > 2.3) {
                letter_grade.add(""B-"");
            } else if (gpa > 2.0) {
                letter_grade.add(""C+"");
            } else if (gpa > 1.7) {
                letter_grade.add(""C"");
            } else if (gpa > 1.3) {
                letter_grade.add(""C-"");
            } else if (gpa > 1.0) {
                letter_grade.add(""D+"");
            } else if (gpa > 0.7) {
                letter_grade.add(""D"");
            } else if (gpa > 0.0) {
                letter_grade.add(""D-"");
            } else {
                letter_grade.add(""E"");
            }
        }
        return letter_grade;
    }
}",human
61,"import java.util.*;

class Solution {
    /**
    brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correctBracketing(""("")
    false
    >>> correctBracketing(""()"")
    true
    >>> correctBracketing(""(()())"")
    true
    >>> correctBracketing("")(()"")
    false
     */
    public boolean correctBracketing(String brackets) {
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < brackets.length(); i++) {
            char bracket = brackets.charAt(i);

            if (bracket == '(') {
                stack.push(bracket);
            } else if (bracket == ')') {
                if (stack.isEmpty()) {
                    return false;
                } else {
                    stack.pop();
                }
            }
        }

        return stack.isEmpty();
    }
}",lm
25,"import java.util.*;

class Solution {
    /**
    Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
     */
    public List<Integer> factorize(int n) {
        List<Integer> factors = new ArrayList<>();
        
        for (int i = 2; i <= n; i++) {
            while (n % i == 0) {
                factors.add(i);
                n /= i;
            }
        }
        
        return factors;
    }
}",lm
121,"import java.util.*;

class Solution {
    public int solution(List<Integer> lst) {
        int sum = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (i % 2 == 0 && lst.get(i) % 2 != 0) {
                sum += lst.get(i);
            }
        }
        return sum;
    }
}",lm
82,"import java.util.*;

class Solution {
    /**
     * Write a function that takes a string and returns true if the string
     * length is a prime number or false otherwise
     * Examples:
     * primeLength(""Hello"") == true
     * primeLength(""abcdcba"") == true
     * primeLength(""kittens"") == true
     * primeLength(""orange"") == false
     */
    public boolean primeLength(String string) {
        int length = string.length();
        if (length < 2) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(length); i++) {
            if (length % i == 0) {
                return false;
            }
        }
        return true;
    }
}",lm
39,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    primeFib returns n-th number that is a Fibonacci number and it's also prime.
    >>> primeFib(1)
    2
    >>> primeFib(2)
    3
    >>> primeFib(3)
    5
    >>> primeFib(4)
    13
    >>> primeFib(5)
    89
     */
    public int primeFib(int n) {
        if (n <= 0) {
            throw new IllegalArgumentException(""n must be a positive integer"");
        }
        List<Integer> fibonacciNumbers = new ArrayList<>();
        fibonacciNumbers.add(0);
        fibonacciNumbers.add(1);
        int count = 2;
        int i = 2;
        while (count <= n) {
            int number = fibonacciNumbers.get(i - 2) + fibonacciNumbers.get(i - 1);
            if (isPrime(number)) {
                fibonacciNumbers.add(number);
                count++;
            }
            i++;
        }
        return fibonacciNumbers.get(n - 1);
    }
    
    private boolean isPrime(int number) {
        if (number < 2) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(number); i++) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }
}",lm
40,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean triplesSumToZero(List<Integer> l) {
        for (int i = 0; i < l.size(); i++) {
            for (int j = i + 1; j < l.size(); j++) {
                for (int k = j + 1; k < l.size(); k++) {
                    if (l.get(i) + l.get(j) + l.get(k) == 0) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}",human
41,"import java.util.*;
import java.lang.*;

class Solution {
    public int carRaceCollision(int n) {
        return n * n;
    }
}",human
92,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean anyInt(Object x, Object y, Object z) {
        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {
            return (int) x + (int) y == (int) z || (int) x + (int) z == (int) y || (int) y + (int) z == (int) x;
        }
        return false;
    }
}",human
54,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean sameChars(String s0, String s1) {
        Set<Character> set0 = new HashSet<>();
        for (char c : s0.toCharArray()) {
            set0.add(c);
        }
        Set<Character> set1 = new HashSet<>();
        for (char c : s1.toCharArray()) {
            set1.add(c);
        }
        return set0.equals(set1);
    }
}",human
130,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> tri(int n) {
        if (n == 0) {
            return List.of(1);
        }
        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));
        for (int i = 2; i <= n; i++) {
            if (i % 2 == 0) {
                my_tri.add(i / 2 + 1);
            } else {
                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);
            }
        }
        return my_tri;
    }
}",human
106,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> f(int n) {
        List<Integer> ret = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            if (i % 2 == 0) {
                int x = 1;
                for (int j = 1; j <= i; j++) {
                    x *= j;
                }
                ret.add(x);
            } else {
                int x = 0;
                for (int j = 1; j <= i; j++) {
                    x += j;
                }
                ret.add(x);
            }
        }
        return ret;
    }
}",human
84,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Given a positive integer N, return the total sum of its digits in binary.

    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".

    Variables:
        @N integer
             Constraints: 0 <= N <= 10000.
    Output:
         a string of binary number
     */
    public String solve(int N) {
        int sum = 0;
        while (N != 0) {
            sum += N % 2;
            N /= 2;
        }
        return Integer.toBinaryString(sum);
    }
}",lm
152,"import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

class Solution {
    /**
     I think we all remember that feeling when the result of some long-awaited
     event is finally known. The feelings and thoughts you have at that moment are
     definitely worth noting down and comparing.
     Your task is to determine if a person correctly guessed the results of a number of matches.
     You are given two arrays of scores and guesses of equal length, where each index shows a match.
     Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
     the value is 0, and if not, the value is the absolute difference between the guess and the score.

     example:

     compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]
     compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]
     */
    public List<Integer> compare(List<Integer> game, List<Integer> guess) {
        List<Integer> differences = new ArrayList<>();
        for (int i = 0; i < game.size(); i++) {
            int score = game.get(i);
            int guessedScore = guess.get(i);
            int difference = Math.abs(score - guessedScore);
            differences.add(difference);
        }
        return differences;
    }
}",lm
122,"import java.util.List;

class Solution {
    public int addElements(List<Integer> arr, int k) {
        int sum = 0;
        for (int i = 0; i < k; i++) {
            int num = arr.get(i);
            if (num >= 10 && num <= 99) {
                sum += num;
            }
        }
        return sum;
    }
}",lm
52,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean belowThreshold(List<Integer> l, int t) {
        for (int e : l) {
            if (e >= t) {
                return false;
            }
        }
        return true;
    }
}",human
100,"import java.util.*;

class Solution {
    public List<Integer> makeAPile(int n) {
        List<Integer> pile = new ArrayList<Integer>();
        pile.add(n);
        
        int stones = n;
        for (int i = 1; i < n; i++) {
            if (stones % 2 == 0) {
                stones += 2;
            } else {
                stones += 1;
            }
            pile.add(stones);
        }
        
        return pile;
    }
}",lm
151,"import java.util.*;
import java.lang.*;

class Solution {
    public int doubleTheDifference(List<Object> lst) {
        return lst.stream().filter(i -> i instanceof Integer p && p > 0 && p % 2 != 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);
    }
}",human
30,"import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;

class Solution {
    public List<Integer> getPositive(List<Integer> l) {
        return l.stream().filter(p -> p > 0).collect(Collectors.toList());
    }
}",human
154,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    cycpatternCheck(""abcd"",""abd"") => false
    cycpatternCheck(""hello"",""ell"") => true
    cycpatternCheck(""whassup"",""psus"") => false
    cycpatternCheck(""abab"",""baa"") => true
    cycpatternCheck(""efef"",""eeff"") => false
    cycpatternCheck(""himenss"",""simen"") => true
     */
    public boolean cycpatternCheck(String a, String b) {
        // code implementation
        // ...
    }
}",lm
28,"import java.util.*;

class Solution {
    /**
    Concatenate list of strings into a single string
    >>> concatenate(List.of())
    """"
    >>> concatenate(Arrays.asList(""a"", ""b"", ""c""))
    ""abc""
     */
    public String concatenate(List<String> strings) {
        StringBuilder sb = new StringBuilder();
        for (String str : strings) {
            sb.append(str);
        }
        return sb.toString();
    }
}",lm
144,"import java.util.*;

class Solution {
    /**
    Your task is to implement a function that will simplify the expression
    x * n. The function returns true if x * n evaluates to a whole number and false
    otherwise. Both x and n are string representations of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x and n are valid fractions, and do not have zero as denominator.

    simplify(""1/5"", ""5/1"") = true
    simplify(""1/6"", ""2/1"") = false
    simplify(""7/10"", ""10/2"") = false
     */
    public boolean simplify(String x, String n) {
        // Convert the fraction strings to integers
        int xNumerator = Integer.parseInt(x.split(""/"")[0]);
        int xDenominator = Integer.parseInt(x.split(""/"")[1]);
        int nNumerator = Integer.parseInt(n.split(""/"")[0]);
        int nDenominator = Integer.parseInt(n.split(""/"")[1]);

        // Multiply the fractions
        int resultNumerator = xNumerator * nNumerator;
        int resultDenominator = xDenominator * nDenominator;

        return resultNumerator % resultDenominator == 0;
    }
}",lm
96,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> countUpTo(int n) {
        List<Integer> primes = new ArrayList<>();
        for (int i = 2; i < n; i++) {
            boolean is_prime = true;
            for (int j = 2; j < i; j++) {
                if (i % j == 0) {
                    is_prime = false;
                    break;
                }
            }
            if (is_prime) {
                primes.add(i);
            }
        }
        return primes;
    }
}",human
59,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largestPrimeFactor(13195)
    29
    >>> largestPrimeFactor(2048)
    2
     */
    public int largestPrimeFactor(int n) {
        int largestFactor = 0;
        
        // Check if 2 is a factor of n
        while (n % 2 == 0) {
            largestFactor = 2;
            n /= 2;
        }
        
        // Check for other factors
        for (int i = 3; i <= Math.sqrt(n); i += 2) {
            while (n % i == 0) {
                largestFactor = i;
                n /= i;
            }
        }
        
        // Check if n is a prime number
        if (n > 2) {
            largestFactor = n;
        }
        
        return largestFactor;
    }
}",lm
50,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    returns encoded string by shifting every character by 5 in the alphabet.
     */
    public String encodeShift(String s) {
        StringBuilder sb = new StringBuilder();
        for (char ch : s.toCharArray()) {
            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));
        }
        return sb.toString();
    }

    public String decodeShift(String s) {
        StringBuilder sb = new StringBuilder();
        for (char ch : s.toCharArray()) {
            sb.append((char) ('a' + ((ch + 21 - 'a') % 26)));
        }
        return sb.toString();
    }
}",human
134,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean checkIfLastCharIsALetter(String txt) {
        String[] words = txt.split("" "", -1);
        String check = words[words.length - 1];
        return check.length() == 1 && Character.isLetter(check.charAt(0));
    }
}",human
54,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Check if two words have the same characters.
    >>> sameChars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
    true
    >>> sameChars(""abcd"", ""dddddddabc"")
    true
    >>> sameChars(""dddddddabc"", ""abcd"")
    true
    >>> sameChars(""eabcd"", ""dddddddabc"")
    false
    >>> sameChars(""abcd"", ""dddddddabce"")
    false
    >>> sameChars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
    false
     */
    public boolean sameChars(String s0, String s1) {
        // Convert the strings to character arrays
        char[] arr0 = s0.toCharArray();
        char[] arr1 = s1.toCharArray();
      
        // Sort the character arrays
        Arrays.sort(arr0);
        Arrays.sort(arr1);
      
        // Check if the sorted arrays are equal
        return Arrays.equals(arr0, arr1);
    }
}",lm
98,"import java.util.*;
import java.lang.*;

class Solution {
    public int countUpper(String s) {
        int count = 0;
        for (int i = 0; i < s.length(); i += 2) {
            if (""AEIOU"".indexOf(s.charAt(i)) != -1) {
                count += 1;
            }
        }
        return count;
    }
}",human
95,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean checkDictCase(Map<Object, Object> dict) {
        if (dict.isEmpty()) {
            return false;
        }
        String state = ""start"";
        for (Map.Entry entry : dict.entrySet()) {
            if (!(entry.getKey() instanceof String key)) {
                state = ""mixed"";
                break;
            }
            boolean is_upper = true, is_lower = true;
            for (char c : key.toCharArray()) {
                if (Character.isLowerCase(c)) {
                    is_upper = false;
                } else if (Character.isUpperCase(c)) {
                    is_lower = false;
                } else {
                    is_upper = false;
                    is_lower = false;
                }
            }
            if (state.equals(""start"")) {
                if (is_upper) {
                    state = ""upper"";
                } else if (is_lower) {
                    state = ""lower"";
                } else {
                    break;
                }
            } else if ((state.equals(""upper"") && !is_upper) || (state.equals(""lower"") && !is_lower)) {
                state = ""mixed"";
                break;
            }
        }
        return state.equals(""upper"") || state.equals(""lower"");
    }
}",human
160,"import java.util.*;
import java.lang.*;

class Solution {
    public int doAlgebra(List<String> operator, List<Integer> operand) {
        List<String> ops = new ArrayList<>(operator);
        List<Integer> nums = new ArrayList<>(operand);
        for (int i = ops.size() - 1; i >= 0; i--) {
            if (ops.get(i).equals(""**"")) {
                nums.set(i, (int) Math.round(Math.pow(nums.get(i), nums.get(i + 1))));
                nums.remove(i + 1);
                ops.remove(i);
            }
        }
        for (int i = 0; i < ops.size(); i++) {
            if (ops.get(i).equals(""*"")) {
                nums.set(i, nums.get(i) * nums.get(i + 1));
                nums.remove(i + 1);
                ops.remove(i);
                i--;
            } else if (ops.get(i).equals(""/"")) {
                nums.set(i, nums.get(i) / nums.get(i + 1));
                nums.remove(i + 1);
                ops.remove(i);
                i--;
            }
        }
        for (int i = 0; i < ops.size(); i++) {
            if (ops.get(i).equals(""+"")) {
                nums.set(i, nums.get(i) + nums.get(i + 1));
                nums.remove(i + 1);
                ops.remove(i);
                i--;
            } else if (ops.get(i).equals(""-"")) {
                nums.set(i, nums.get(i) - nums.get(i + 1));
                nums.remove(i + 1);
                ops.remove(i);
                i--;
            }
        }
        return nums.get(0);
    }
}",human
118,"import java.util.*;
import java.lang.*;

class Solution {
    public String getClosestVowel(String word) {
        if (word.length() < 3) {
            return """";
        }

        String vowels = ""aeiouAEIOU"";
        for (int i = word.length() - 2; i > 0; i--) {
            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {
                return String.valueOf(word.charAt(i));
            }
        }
        return """";
    }
}",human
128,"import java.util.*;
import java.lang.*;

class Solution {
    public Optional<Integer> prodSigns(List<Integer> arr) {
        if (arr.size() == 0) {
            return Optional.empty();
        }
        if (arr.contains(0)) {
            return Optional.of(0);
        }
        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);
        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());
    }
}",human
141,"import java.util.*;
import java.lang.*;

class Solution {
    public String filenameCheck(String file_name) {
        List<String> suf = Arrays.asList(""txt"", ""exe"", ""dll"");
        String[] lst = file_name.split(""\\."" );
        if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty() || !Character.isLetter(lst[0].charAt(0))) {
            return ""No"";
        }
        int t = (int) lst[0].chars().map(x -> (char) x).filter(Character::isDigit).count();
        if (t > 3) {
            return ""No"";
        }
        return ""Yes"";
    }
}",human
57,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic(Arrays.asList(1, 2, 4, 20))
    true
    >>> monotonic(Arrays.asList(1, 20, 4, 10))
    false
    >>> monotonic(Arrays.asList(4, 1, 0, -10))
    true
     */
    public boolean monotonic(List<Integer> l) {
        // Initialize variables for increasing and decreasing flags
        boolean increasing = true;
        boolean decreasing = true;
        
        // Iterate through the list elements
        for (int i = 1; i < l.size(); i++) {
            // Check if the current element is greater than the previous element
            if (l.get(i) < l.get(i - 1)) {
                increasing = false;
            }
            
            // Check if the current element is smaller than the previous element
            if (l.get(i) > l.get(i - 1)) {
                decreasing = false;
            }
        }
        
        // Return true if either increasing or decreasing flag is true
        return increasing || decreasing;
    }
}",lm
127,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return ""YES"",
    otherwise, return ""NO"".
    If the two intervals don't intersect, return ""NO"".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> ""NO""
    intersection((-1, 1), (0, 4)) ==> ""NO""
    intersection((-3, -1), (-5, 5)) ==> ""YES""
     */
    public String intersection(List<Integer> interval1, List<Integer> interval2) {
        int start1 = interval1.get(0);
        int end1 = interval1.get(1);
        int start2 = interval2.get(0);
        int end2 = interval2.get(1);

        // Check if intervals intersect
        if (end1 < start2 || end2 < start1) {
            return ""NO"";
        }

        // Calculate length of intersection
        int intersection_length = Math.min(end1, end2) - Math.max(start1, start2) + 1;

        // Check if length of intersection is prime
        if (isPrime(intersection_length)) {
            return ""YES"";
        } else {
            return ""NO"";
        }
    }

    /**
    Utility function to check if a number is prime.
    */
    private boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }

        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }

        return true;
    }
}",lm
5,"import java.util.*;

class Solution {
    /**
    Insert a number 'delimiter' between every two consecutive elements of input list 'numbers'
    >>> intersperse(List.of(), 4)
    []
    >>> intersperse(Arrays.asList(1, 2, 3), 4)
    [1, 4, 2, 4, 3]
     */
    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {
        List<Integer> result = new ArrayList<>();
        
        if (numbers.isEmpty()) {
            return result;
        }
        
        for (int i = 0; i < numbers.size(); i++) {
            result.add(numbers.get(i));
            if (i < numbers.size() - 1) {
                result.add(delimiter);
            }
        }
        
        return result;
    }
}",lm
78,"import java.util.*;
import java.lang.*;

class Solution {
    public int hexKey(String num) {
        String primes = ""2357BD"";
        int total = 0;
        for (char c : num.toCharArray()) {
            if (primes.indexOf(c) != -1) {
                total += 1;
            }
        }
        return total;
    }
}",human
99,"import java.util.*;
import java.lang.*;

class Solution {
    public int countUpper(String value) {
        if (value.contains(""."")) {
            while (value.charAt(value.length() - 1) == '0') {
                value = value.substring(0, value.length() - 1);
            }
        }
        double num = Double.parseDouble(value);
        int res = 0;
        if (value.substring(Math.max(value.length() - 2, 0)).equals("".5"")) {
            if (num > 0) {
                res = (int) Math.ceil(num);
            } else {
                res = (int) Math.floor(num);
            }
        } else if(value.length() > 0) {
            res = (int) Math.round(num);
        }
        return res;
    }
}",human
101,"import java.util.*;
import java.lang.*;

class Solution {
    public List<String> wordStrings(String s) {
        if (s.length() == 0) {
            return List.of();
        }
        StringBuilder sb = new StringBuilder();

        for (char letter : s.toCharArray()) {
            if (letter == ',') {
                sb.append(' ');
            } else {
                sb.append(letter);
            }
        }

        return new ArrayList<>(Arrays.asList(sb.toString().split(""\s+"" )));
    }
}",human
49,"public class Solution {
    public int modp(int n, int p) {
        // Calculate (2^n) modulo p
        int result = 1;
        for (int i = 0; i < n; i++) {
            result = (result * 2) % p;
        }
        return result;
    }
}",lm
2,"import java.util.*;
import java.lang.*;

class Solution {
    public double truncateNumber(double number) {
        return number % 1.0;
    }
}",human
31,"public class Solution {
    public boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}",lm
40,"import java.util.*;

class Solution {
    /**
    triplesSumToZero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.
    */
    public boolean triplesSumToZero(List<Integer> l) {

        for (int i = 0; i < l.size() - 2; i++) {
            for (int j = i + 1; j < l.size() - 1; j++) {
                for (int k = j + 1; k < l.size(); k++) {
                    if (l.get(i) + l.get(j) + l.get(k) == 0) {
                        return true;
                    }
                }
            }
        }
        
        return false;
    }
}",lm
112,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Object> reverseDelete(String s, String c) {
        StringBuilder sb = new StringBuilder();
        for (char ch : s.toCharArray()) {
            if (c.indexOf(ch) == -1) {
                sb.append(ch);
            }
        }
        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));
    }
}",human
2,"import java.util.*;
import java.lang.*;

class Solution {
    public double truncateNumber(double number) {
        // Finding the integer part
        int integerPart = (int) number;
        
        // Finding the decimal part
        double decimalPart = number - integerPart;
        
        // Returning the decimal part
        return decimalPart;
    }
}",lm
160,"import java.util.*;

class Solution {
    public int doAlgebra(List<String> operator, List<Integer> operand) {
        // Implementation goes here
    }
}",lm
151,"class Solution {
    public int doubleTheDifference(List<Object> lst) {
        // Iterate through the list and calculate the sum of squares of odd numbers
        int sum = 0;
        for (Object num : lst) {
            if (num instanceof Integer) {
                int n = (int) num;
                if (n > 0 && n % 2 != 0) {
                    sum += n * n;
                }
            }
        }
        return sum;
    }
}",lm
65,"import java.util.*;
import java.lang.*;

class Solution {
    public String circularShift(int x, int shift) {
        String s = String.valueOf(x);
        if (shift > s.length()) {
            return new StringBuilder(s).reverse().toString();
        } else {
            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);
        }
    }
}",human
150,"import java.util.*;
import java.lang.*;

class Solution {
    /**
     * A simple program which should return the value of x if n is
     * a prime number and should return the value of y otherwise.
     *
     * Examples:
     * for xOrY(7, 34, 12) == 34
     * for xOrY(15, 8, 5) == 5
     */
    public int xOrY(int n, int x, int y) {
        if (isPrime(n)) {
            return x;
        } else {
            return y;
        }
    }
    
    /**
     * Helper method to check if a number is prime.
     */
    public boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }
}",lm
105,"import java.util.*;
import java.lang.*;

class Solution {
    public List<String> byLength(List<Integer> arr) {
        List<Integer> sorted_arr = new ArrayList<>(arr);
        sorted_arr.sort(Collections.reverseOrder());
        List<String> new_arr = new ArrayList<>();
        for (int var : sorted_arr) {
            if (var >= 1 && var <= 9) {
                switch (var) {
                    case 1 -> new_arr.add(""One"");
                    case 2 -> new_arr.add(""Two"");
                    case 3 -> new_arr.add(""Three"");
                    case 4 -> new_arr.add(""Four"");
                    case 5 -> new_arr.add(""Five"");
                    case 6 -> new_arr.add(""Six"");
                    case 7 -> new_arr.add(""Seven"");
                    case 8 -> new_arr.add(""Eight"");
                    case 9 -> new_arr.add(""Nine"");
                }
            }
        }
        return new_arr;
    }
}",human
16,"import java.util.*;
import java.lang.*;

class Solution {
    public int countDistinctCharacters(String string) {
        Set<Character> set = new HashSet<>();
        for (char c : string.toLowerCase().toCharArray()) {
            set.add(c);
        }
        return set.size();
    }
}",human
14,,lm
102,"import java.util.*;
import java.lang.*;

class Solution {
    public int chooseNum(int x, int y) {
        if (x > y) {
            return -1;
        }
        if (y % 2 == 0) {
            return y;
        }
        if (x == y) {
            return -1;
        }
        return y - 1;
    }
}",human
11,"class Solution {
    public String stringXor(String a, String b) {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < a.length(); i++) {
            if (a.charAt(i) != b.charAt(i)) {
                result.append(""1"");
            } else {
                result.append(""0"");
            }
        }
        return result.toString();
    }
}",lm
45,"import java.util.*;
import java.lang.*;

class Solution {
    public double triangleArea(double a, double h) {
        return a * h / 2;
    }
}",human
115,"import java.util.*;
import java.lang.*;

class Solution {
    public int maxFill(List<List<Integer>> grid, int capacity) {
        int sum = 0;
        for (List<Integer> arr : grid) {
            sum += Math.ceil((double) arr.stream().reduce(Integer::sum).get() / capacity);
        }
        return sum;
    }
}",human
163,"import java.util.*;

class Solution {
    /**
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generateIntegers(2, 8) => [2, 4, 6, 8]
    generateIntegers(8, 2) => [2, 4, 6, 8]
    generateIntegers(10, 14) => []
     */
    public List<Integer> generateIntegers(int a, int b) {
        List<Integer> result = new ArrayList<>();
        for (int i = a; i <= b; i++) {
            if (isEvenDigit(i)) {
                result.add(i);
            }
        }
        return result;
    }
    
    private boolean isEvenDigit(int number) {
        while (number > 0) {
            int digit = number % 10;
            if (digit % 2 != 0) {
                return false;
            }
            number /= 10;
        }
        return true;
    }
}",lm
60,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    sumToN is a function that sums numbers from 1 to n.
    >>> sumToN(30)
    465
    >>> sumToN(100)
    5050
    >>> sumToN(5)
    15
    >>> sumToN(10)
    55
    >>> sumToN(1)
    1
     */
    public int sumToN(int n) {
        int sum = 0;
        for (int i = 1; i <= n; i++) {
            sum += i;
        }
        return sum;
    }
}",lm
33,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> sortThird(List<Integer> l) {
        List<Integer> thirds = new ArrayList<>();
        for (int i = 0; i < l.size(); i += 3) {
            thirds.add(l.get(i));
        }
        Collections.sort(thirds);
        List<Integer> result = l;
        for (int i = 0; i < l.size(); i += 3) {
            result.set(i, thirds.get(i / 3));
        }
        return result;
    }
}",human
19,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sortNumbers(""three one five"")
    ""one three five""
     */
    public String sortNumbers(String numbers) {
        // Convert the space-delimited string to an array of numberals
        String[] numberals = numbers.split("" "");
        
        // Create a map of numberals to their corresponding numerical values
        Map<String, Integer> numeralMap = new HashMap<>();
        numeralMap.put(""zero"", 0);
        numeralMap.put(""one"", 1);
        numeralMap.put(""two"", 2);
        numeralMap.put(""three"", 3);
        numeralMap.put(""four"", 4);
        numeralMap.put(""five"", 5);
        numeralMap.put(""six"", 6);
        numeralMap.put(""seven"", 7);
        numeralMap.put(""eight"", 8);
        numeralMap.put(""nine"", 9);
        
        // Sort the numberals using a custom comparator
        Arrays.sort(numberals, (n1, n2) -> numeralMap.get(n1) - numeralMap.get(n2));
        
        // Join the sorted numberals into a single string
        return String.join("" "", numberals);
    }
}",lm
48,"import java.util.*;

class Solution {
    /**
     * Checks if given string is a palindrome
     * @param text the string to check
     * @return true if the string is a palindrome, false otherwise
     */
    public boolean isPalindrome(String text) {
        // Compare characters from both ends of the string
        int i = 0;
        int j = text.length() - 1;

        while (i < j) {
            // Ignore non-alphanumeric characters
            while (i < j && !Character.isLetterOrDigit(text.charAt(i))) {
                i++;
            }
            while (i < j && !Character.isLetterOrDigit(text.charAt(j))) {
                j--;
            }

            // Compare characters case-insensitively
            if (Character.toLowerCase(text.charAt(i)) != Character.toLowerCase(text.charAt(j))) {
                return false;
            }

            i++;
            j--;
        }

        return true;
    }
}",lm
163,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> generateIntegers(int a, int b) {
        int lower = Math.max(2, Math.min(a, b));
        int upper = Math.min(8, Math.max(a, b));

        List<Integer> result = new ArrayList<>();
        for (int i = lower; i <= upper; i += 2) {
            result.add(i);
        }
        return result;
    }
}",human
89,"import java.util.*;
import java.lang.*;

class Solution {
    public String encrypt(String s) {
        StringBuilder sb = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (Character.isLetter(c)) {
                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));
            } else {
                sb.append(c);
            }
        }
        return sb.toString();
    }
}",human
147,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation:
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
     */
    public int getMaxTriples(int n) {
        // Create an integer array a of length n
        int[] a = new int[n];
        
        // Calculate the value of each a[i] using the given formula
        for (int i = 1; i <= n; i++) {
            a[i-1] = i * i - i + 1;
        }
        
        // Count the number of valid triples
        int count = 0;
        for (int i = 0; i < n-2; i++) {
            for (int j = i+1; j < n-1; j++) {
                for (int k = j+1; k < n; k++) {
                    if ((a[i] + a[j] + a[k]) % 3 == 0) {
                        count++;
                    }
                }
            }
        }
        
        // Return the count of valid triples
        return count;
    }
}",lm
85,"import java.util.*;

class Solution {
    /**
    Given a non-empty list of integers lst. add the even elements that are at odd indices..

    Examples:
        add(Arrays.asList(4, 2, 6, 7)) ==> 2
     */
    public int add(List<Integer> lst) {
        
        int sum = 0;
        
        for (int i = 1; i < lst.size(); i += 2) {
            if (lst.get(i) % 2 == 0) {
                sum += lst.get(i);
            }
        }
        
        return sum;
    }
}",lm
36,"import java.util.*;
import java.lang.*;

class Solution {
    public int fizzBuzz(int n) {
        int result = 0;
        for (int i = 1; i < n; i++) {
            if (i % 11 == 0 || i % 13 == 0) {
                char[] digits = String.valueOf(i).toCharArray();
                for (char c : digits) {
                    if (c == '7') {
                        result += 1;
                    }
                }
            }
        }
        return result;
    }
}",human
10,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Test if given string is a palindrome
     */
    public boolean isPalindrome(String string) {
        int i = 0;
        int j = string.length() - 1;
        while (i < j) {
            if (string.charAt(i)!= string.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    public String makePalindrome(String string) {
        if (string.length() == 0) {
            return """";
        }

        int beginning_of_suffix = 0;

        while (!isPalindrome(string.substring(beginning_of_suffix))) {
            beginning_of_suffix++;
        }

        return string + new StringBuffer(string.substring(0, beginning_of_suffix)).reverse().toString();
    }
}",human
19,"import java.util.*;
import java.lang.*;

class Solution {
    public String sortNumbers(String numbers) {
        String[] nums = numbers.split("" "");
        List<Integer> num = new ArrayList<>();
        for (String string : nums) {
            switch (string) {
                case ""zero"" -> num.add(0);
                case ""one"" -> num.add(1);
                case ""two"" -> num.add(2);
                case ""three"" -> num.add(3);
                case ""four"" -> num.add(4);
                case ""five"" -> num.add(5);
                case ""six"" -> num.add(6);
                case ""seven"" -> num.add(7);
                case ""eight"" -> num.add(8);
                case ""nine"" -> num.add(9);
            }
        }
        Collections.sort(num);
        List<String> result = new ArrayList<>();
        for (int m : num) {
            switch (m) {
                case 0 -> result.add(""zero"");
                case 1 -> result.add(""one"");
                case 2 -> result.add(""two"");
                case 3 -> result.add(""three"");
                case 4 -> result.add(""four"");
                case 5 -> result.add(""five"");
                case 6 -> result.add(""six"");
                case 7 -> result.add(""seven"");
                case 8 -> result.add(""eight"");
                case 9 -> result.add(""nine"");
            }
        }
        return String.join("" "", result);
    }
}",human
84,"import java.util.*;
import java.lang.*;

class Solution {
    public String solve(int N) {
        int sum = 0;
        for (char c : String.valueOf(N).toCharArray()) {
            sum += (c - '0');
        }
        return Integer.toBinaryString(sum);
    }
}",human
91,"import java.util.*;
import java.lang.*;

class Solution {
    /**
     * You'll be given a string of words, and your task is to count the number
     * of boredoms. A boredom is a sentence that starts with the word ""I"".
     * Sentences are delimited by '.', '?' or '!'.
     *
     * For example:
     * >>> isBored(""Hello world"")
     * 0
     * >>> isBored(""The sky is blue. The sun is shining. I love this weather"")
     * 1
     */
    public int isBored(String S) {
        // Split the string into sentences using delimiters '.', '?' and '!'
        String[] sentences = S.split(""[.?!]"");
        
        int boredomCount = 0;
        
        // Iterate through each sentence
        for (String sentence : sentences) {
            // Remove leading and trailing whitespace
            sentence = sentence.trim();
            
            // Check if the sentence starts with 'I'
            if (sentence.startsWith(""I "")) {
                boredomCount++;
            }
        }
        
        return boredomCount;
    }
}",lm
93,"import java.util.*;
import java.lang.*;

class Solution {
    public String encode(String message) {
        String vowels = ""aeiouAEIOU"";
        StringBuilder sb = new StringBuilder();
        for (char c : message.toCharArray()) {
            char ch = c;
            if (Character.isUpperCase(ch)) {
                ch = Character.toLowerCase(ch);
                if (vowels.indexOf(ch) != -1) {
                    ch = (char) ('a' + ((ch - 'a' + 28) % 26));
                }
            } else if (Character.isLowerCase(ch)) {
                ch = Character.toUpperCase(ch);
                if (vowels.indexOf(ch) != -1) {
                    ch = (char) ('A' + ((ch - 'A' + 28) % 26));
                }
            }
            sb.append(ch);
        }
        return sb.toString();
    }
}",human
113,"import java.util.*;
import java.lang.*;

class Solution {
    public List<String> oddCount(List<String> lst) {
        List<String> res = new ArrayList<>();
        for (String arr : lst) {
            int n = 0;
            for (char d : arr.toCharArray()) {
                if ((d - '0') % 2 == 1) {
                    n += 1;
                }
            }
            res.add(""the number of odd elements "" + n + ""n the str"" + n + ""ng "" + n + "" of the "" + n + ""nput."" );
        }
        return res;
    }
}",human
142,"import java.util.*;
import java.lang.*;

class Solution {
    public int sumSquares(List<Integer> lst) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < lst.size(); i++) {
            if (i % 3 == 0) {
                result.add(lst.get(i) * lst.get(i));
            } else if (i % 4 == 0) {
                result.add((int) Math.pow(lst.get(i), 3));
            } else {
                result.add(lst.get(i));
            }
        }
        return result.stream().reduce(Integer::sum).orElse(0);
    }
}",human
139,"import java.util.*;
import java.lang.*;

class Solution {
    public long specialFactorial(int n) {
        long fact_i = 1, special_fact = 1;
        for (int i = 1; i <= n; i++) {
            fact_i *= i;
            special_fact *= fact_i;
        }
        return special_fact;
    }
}",human
70,"import java.util.*;

class Solution {
    public List<Integer> strangeSortList(List<Integer> lst) {
        List<Integer> sortedList = new ArrayList<>();
        
        if (lst.isEmpty()) {
            return sortedList;
        }
        
        List<Integer> sortedLst = new ArrayList<>(lst);
        Collections.sort(sortedLst);
        
        int low = 0;
        int high = sortedLst.size() - 1;
        
        while (low < high) {
            sortedList.add(sortedLst.get(low));
            sortedList.add(sortedLst.get(high));
            low++;
            high--;
        }
        
        if (low == high) {
            sortedList.add(sortedLst.get(low));
        }
        
        return sortedList;
    }
}",lm
115,"import java.util.*;

class Solution {
    public int maxFill(List<List<Integer>> grid, int capacity) {
        // Implementation goes here
    }
}",lm
27,"public class Solution {
    public String flipCase(String string) {
        StringBuilder flippedString = new StringBuilder();
        
        for (int i = 0; i < string.length(); i++) {
            char c = string.charAt(i);
            
            if (Character.isLowerCase(c)) {
                flippedString.append(Character.toUpperCase(c));
            } else if (Character.isUpperCase(c)) {
                flippedString.append(Character.toLowerCase(c));
            } else {
                flippedString.append(c);
            }
        }
        
        return flippedString.toString();
    }
}",lm
138,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    isEqualToSumEven(4) == false
    isEqualToSumEven(6) == false
    isEqualToSumEven(8) == true
     */
    public boolean isEqualToSumEven(int n) {
        if (n < 8) {
            return false;
        }

        if (n % 2 != 0) {
            return false;
        }

        int count = 0;
        for (int i = 2; i <= n / 2; i += 2) {
            for (int j = 2; j <= n / 2; j += 2) {
                for (int k = 2; k <= n / 2; k += 2) {
                    for (int l = 2; l <= n / 2; l += 2) {
                        if (i + j + k + l == n) {
                            count++;
                        }
                    }
                }
            }
        }

        return count > 0;
    }
}",lm
158,"import java.util.*;
import java.lang.*;

class Solution {
    public String findMax(List<String> words) {
        List<String> words_sort = new ArrayList<>(words);
        words_sort.sort(new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                Set<Character> s1 = new HashSet<>();
                for (char ch : o1.toCharArray()) {
                    s1.add(ch);
                }
                Set<Character> s2 = new HashSet<>();
                for (char ch : o2.toCharArray()) {
                    s2.add(ch);
                }
                if (s1.size() > s2.size()) {
                    return 1;
                } else if (s1.size() < s2.size()) {
                    return -1;
                } else {
                    return -o1.compareTo(o2);
                }
            }
        });
        return words_sort.get(words_sort.size() - 1);
    }
}",human
58,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> common(List<Integer> l1, List<Integer> l2) {
        Set<Integer> ret = new HashSet<>(l1);
        ret.retainAll(new HashSet<>(l2));
        List<Integer> result = new ArrayList<>(ret);
        Collections.sort(result);
        return result;
    }
}",human
14,"import java.util.*;
import java.lang.*;

class Solution {
    public List<String> allPrefixes(String string) {
        List<String> result = new ArrayList<>();

        for (int i = 1; i <= string.length(); i++) {
            result.add(string.substring(0, i));
        }
        return result;
    }
}",human
7,"import java.util.*;

class Solution {
    /**
     * Filter an input list of strings only for ones that contain given substring
     * @param strings: the input list of strings
     * @param substring: the substring to search for
     * @return a new list containing strings that contain the given substring
     */
    public List<String> filterBySubstring(List<String> strings, String substring) {
        List<String> result = new ArrayList<>();
        
        for (String s : strings) {
            if (s.contains(substring)) {
                result.add(s);
            }
        }
        
        return result;
    }
}",lm
68,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> pluck(List<Integer> arr) {
        List<Integer> result = new ArrayList<>();
        if (arr.size() == 0) {
            return result;
        }
        int min = Integer.MAX_VALUE;
        int minIndex = -1;
        for (int i = 0; i < arr.size(); i++) {
            if (arr.get(i) % 2 == 0) {
                if (arr.get(i) < min) {
                    min = arr.get(i);
                    minIndex = i;
                }
            }
        }
        if (minIndex != -1) {
            result.add(min);
            result.add(minIndex);
        }
        return result;
    }
}",human
149,"import java.util.*;
import java.lang.*;

class Solution {
    public List<String> listSort(List<String> lst) {
        List<String> lst_sorted = new ArrayList<>(lst);
        Collections.sort(lst_sorted);
        List<String> new_lst = new ArrayList<>();
        for (String i : lst_sorted) {
            if (i.length() % 2 == 0) {
                new_lst.add(i);
            }
        }
        new_lst.sort(Comparator.comparingInt(String::length));
        return new_lst;
    }
}",human
18,"import java.util.*;
import java.lang.*;

class Solution {
    public int howManyTimes(String string, String substring) {
        int times = 0;

        for (int i = 0; i < string.length() - substring.length() + 1; i++) {
            if (string.substring(i, i + substring.length()).equals(substring)) {
                times += 1;
            }
        }

        return times;
    }
}",human
0,"import java.util.*;

class Solution {
    /**
    Check if in given list of numbers, are any two numbers closer to each other than given threshold.
    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)
    false
    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)
    true
     */
    public boolean hasCloseElements(List<Double> numbers, double threshold) {
        for (int i = 0; i < numbers.size(); i++) {
            for (int j = i + 1; j < numbers.size(); j++) {
                double difference = Math.abs(numbers.get(i) - numbers.get(j));
                if (difference <= threshold) {
                    return true;
                }
            }
        }
        return false;
    }
}",lm
110,"import java.util.*;
import java.lang.*;

class Solution {
    public String exchange(List<Integer> lst1, List<Integer> lst2) {
        int odd = 0, even = 0;
        for (int i : lst1) {
            if (i % 2 == 1) {
                odd += 1;
            }
        }
        for (int i : lst2) {
            if (i % 2 == 0) {
                even += 1;
            }
        }
        if (even >= odd) {
            return ""YES"";
        }
        return ""NO"";
    }
}",human
121,"import java.util.*;
import java.lang.*;

class Solution {
    public int solution(List<Integer> lst) {
        int sum = 0;
        for (int i = 0; i < lst.size(); i += 2) {
            if ((lst.get(i) % 2) == 1) {
                sum += lst.get(i);
            }
        }
        return sum;
    }
}",human
153,"import java.util.*;
import java.lang.*;

class Solution {
    public String StrongestExtension(String class_name, List<String> extensions) {
        String strong = extensions.get(0);
        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());
        for (String s : extensions) {
            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());
            if (val > my_val) {
                strong = s;
                my_val = val;
            }
        }
        return class_name + ""."" + strong;
    }
}",human
86,"import java.util.*;
import java.lang.*;

class Solution {
    public String antiShuffle(String s) {
        String[] strings = s.split("" "");
        List<String> result = new ArrayList<>();
        for (String string : strings) {
            char[] chars = string.toCharArray();
            Arrays.sort(chars);
            result.add(String.copyValueOf(chars));
        }
        return String.join("" "", result);
    }
}",human
109,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean moveOneBall(List<Integer> arr) {
        if (arr.size() == 0) {
            return true;
        }
        List<Integer> sorted_arr = new ArrayList<>(arr);
        Collections.sort(sorted_arr);

        int min_value = Collections.min(arr);
        int min_index = arr.indexOf(min_value);
        List<Integer> my_arr = new ArrayList<>(arr.subList(min_index, arr.size()));
        my_arr.addAll(arr.subList(0, min_index));
        for (int i = 0; i < arr.size(); i++) {
            if (my_arr.get(i) != sorted_arr.get(i)) {
                return false;
            }
        }
        return true;
    }
}",human
111,"import java.util.*;

class Solution {
    /**
    Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.

    Example:
    histogram(""a b c"") == {""a"": 1, ""b"": 1, ""c"": 1}
    histogram(""a b b a"") == {""a"": 2, ""b"": 2}
    histogram(""a b c a b"") == {""a"": 2, ""b"": 2}
    histogram(""b b b b a"") == {""b"": 4}
    histogram("""") == {}
     */
    public Map<String, Integer> histogram(String test) {
        Map<String, Integer> dictionary = new HashMap<>();

        String[] letters = test.split("" "");

        for (String letter : letters) {
            if (!dictionary.containsKey(letter)) {
                dictionary.put(letter, 1);
            } else {
                dictionary.put(letter, dictionary.get(letter) + 1);
            }
        }

        return dictionary;
    }
}",lm
17,"import java.util.*;

class Solution {
    public List<Integer> parseMusic(String string) {
        List<Integer> beats = new ArrayList<>();

        StringTokenizer tokenizer = new StringTokenizer(string, "" "");

        while (tokenizer.hasMoreTokens()) {
            String note = tokenizer.nextToken();

            if (note.equals(""o"")) {
                beats.add(4);
            } else if (note.equals(""o|"")) {
                beats.add(2);
            } else if (note.equals("".|"")) {
                beats.add(1);
            }
        }

        return beats;
    }
}",lm
15,"import java.util.*;

class Solution {
    /**
     * Return a string containing space-delimited numbers starting from 0 up to n inclusive.
     *
     * @param n the last number in the sequence
     * @return the string sequence
     */
    public String stringSequence(int n) {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i <= n; i++) {
            sb.append(i).append("" "");
        }

        return sb.toString().trim();
    }
}",lm
83,"import java.util.*;
import java.lang.*;

class Solution {
    public int startsOneEnds(int n) {
        if (n == 1) {
            return 1;
        }
        return 18 * (int) Math.pow(10, n - 2);
    }
}",human
60,"import java.util.*;
import java.lang.*;

class Solution {
    public int sumToN(int n) {
        int result = 0;
        for (int i = 1; i <= n; i++) {
            result += i;
        }
        return result;
    }
}",human
92,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.

    Examples
    anyInt(5, 2, 7) -> true

    anyInt(3, 2, 2) -> false

    anyInt(3, -2, 1) -> true

    anyInt(3.6, -2.2, 2) -> false
     */
    public boolean anyInt(Object x, Object y, Object z) {
        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {
            int num1 = (int) x;
            int num2 = (int) y;
            int num3 = (int) z;
            return num1 == num2 + num3 || num2 == num1 + num3 || num3 == num1 + num2;
        }
        return false;
    }
}",lm
8,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> sumProduct(List<Integer> numbers) {
        int sum = 0;
        int product = 1;

        for (int n : numbers) {
            sum += n;
            product *= n;
        }
        return Arrays.asList(sum, product);
    }
}",human
149,"import java.util.*;

class Solution {
    /**
     * Write a function that accepts a list of strings as a parameter,
     * deletes the strings that have odd lengths from it,
     * and returns the resulted list with a sorted order,
     * The list is always a list of strings and never an array of numbers,
     * and it may contain duplicates.
     * The order of the list should be ascending by length of each word, and you
     * should return the list sorted by that rule.
     * If two words have the same length, sort the list alphabetically.
     * The function should return a list of strings in sorted order.
     * You may assume that all words will have the same length.
     * For example:
     * assert listSort(Arrays.asList(""aa"", ""a"", ""aaa"")) => [""aa""]
     * assert listSort(Arrays.asList(""ab"", ""a"", ""aaa"", ""cd"")) => [""ab"", ""cd""]
     */
    public List<String> listSort(List<String> lst) {
        List<String> result = new ArrayList<>();

        for (String s : lst) {
            if (s.length() % 2 == 0) {
                result.add(s);
            }
        }

        Collections.sort(result, new Comparator<String>() {
            public int compare(String a, String b) {
                if (a.length() != b.length()) {
                    return Integer.compare(a.length(), b.length());
                } else {
                    return a.compareTo(b);
                }
            }
        });

        return result;
    }
}",lm
23,"import java.util.*;
import java.lang.*;

class Solution {
    public int strlen(String string) {
        return string.length();
    }
}",human
94,"import java.util.*;

class Solution {
    /**
    You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
     */
    public int skjkasdkd(List<Integer> lst) {
        // Implement your code here
    }
}",lm
81,"import java.util.ArrayList;
import java.util.List;

class Solution {
    /**
     * It is the last week of the semester and the teacher has to give the grades
     * to students. The teacher has been making her own algorithm for grading.
     * The only problem is, she has lost the code she used for grading.
     * She has given you a list of GPAs for some students and you have to write
     * a function that can output a list of letter grades using the following table:
     * GPA              |    Letter grade
     * 4.0              |    A+
     * > 3.7            |    A
     * > 3.3            |    A-
     * > 3.0            |    B+
     * > 2.7            |    B
     * > 2.3            |    B-
     * > 2.0            |    C+
     * > 1.7            |    C
     * > 1.3            |    C-
     * > 1.0            |    D+
     * > 0.7            |    D
     * > 0.0            |    D-
     * 0.0              |    E
     *
     * Example:
     * numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [""A+"", ""B"", ""C-"", ""C"", ""A-""]
     */
    public List<String> numericalLetterGrade(List<Double> grades) {
        List<String> letterGrades = new ArrayList<>();

        for (Double gpa : grades) {
            if (gpa == 4.0) {
                letterGrades.add(""A+"");
            } else if (gpa > 3.7) {
                letterGrades.add(""A"");
            } else if (gpa > 3.3) {
                letterGrades.add(""A-"");
            } else if (gpa > 3.0) {
                letterGrades.add(""B+"");
            } else if (gpa > 2.7) {
                letterGrades.add(""B"");
            } else if (gpa > 2.3) {
                letterGrades.add(""B-"");
            } else if (gpa > 2.0) {
                letterGrades.add(""C+"");
            } else if (gpa > 1.7) {
                letterGrades.add(""C"");
            } else if (gpa > 1.3) {
                letterGrades.add(""C-"");
            } else if (gpa > 1.0) {
                letterGrades.add(""D+"");
            } else if (gpa > 0.7) {
                letterGrades.add(""D"");
            } else if (gpa >= 0.0) {
                letterGrades.add(""D-"");
            } else {
                letterGrades.add(""E"");
            }
        }

        return letterGrades;
    }
}",lm
38,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    returns encoded string by cycling groups of three characters.
     */
    public String encodeCyclic(String s) {
        // split string to groups. Each of length 3.
        List<String> groups = new ArrayList<>();
        for (int i = 0; i < s.length(); i += 3) {
            groups.add(s.substring(i, Math.min(i + 3, s.length())));
        }
        // cycle elements in each group. Unless group has fewer elements than 3.
        for (int i = 0; i < groups.size(); i++) {
            if (groups.get(i).length() == 3) {
                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));
            }
        }
        return String.join("""", groups);
    }

    public String decodeCyclic(String s) {
        return encodeCyclic(encodeCyclic(s));
    }
}",human
26,"import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;

class Solution {
    public List<Integer> removeDuplicates(List<Integer> numbers) {
        Map<Integer, Integer> c = new HashMap<>();
        for (int i : numbers) {
            c.put(i, c.getOrDefault(i, 0) + 1);
        }
        return numbers.stream().filter(i -> c.get(i) == 1).collect(Collectors.toList());
    }
}",human
65,"import java.util.*;

class Solution {
    /**
    Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    */
    public String circularShift(int x, int shift) {
        // Convert the integer x to a string
        String strNum = String.valueOf(x);
        
        // Get the number of digits in x
        int numDigits = strNum.length();
        
        // Check if shift is greater than the number of digits
        if (shift > numDigits) {
            // Reverse the digits of x and return the result
            return new StringBuilder(strNum).reverse().toString();
        }
        
        // Shift the digits of x to the right by shift
        String shiftedNum = strNum.substring(numDigits - shift) + strNum.substring(0, numDigits - shift);
        
        return shiftedNum;
    }
}",lm
107,"import java.util.*;

class Solution {
    /**
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.
    
    Example 1:
    
        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
    
    Example 2:
    
        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
    
    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
     */
    public List<Integer> evenOddPalindrome(int n) {
        
        // Initialize counters for even and odd palindromes
        int evenCount = 0;
        int oddCount = 0;
        
        // Loop through numbers from 1 to n
        for (int i = 1; i <= n; i++) {
            // Convert the current number to string
            String numStr = String.valueOf(i);
            
            // Check if the string is a palindrome
            if (isPalindrome(numStr)) {
                // Increment the appropriate counter based on the parity
                if (i % 2 == 0) {
                    evenCount++;
                } else {
                    oddCount++;
                }
            }
        }
        
        // Create a list to store the results
        List<Integer> result = new ArrayList<>();
        result.add(evenCount);
        result.add(oddCount);
        
        return result;
    }
    
    /**
    Checks if a given string is a palindrome.
    */
    private boolean isPalindrome(String str) {
        int left = 0;
        int right = str.length() - 1;
        
        while (left < right) {
            if (str.charAt(left) != str.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        
        return true;
    }
}",lm
116,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> sortArray(List<Integer> arr) {
                List < Integer > sorted_arr = new ArrayList<>(arr);
        sorted_arr.sort(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();
                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();
                if (cnt1 > cnt2) {
                    return 1;
                } else if (cnt1 < cnt2) {
                    return -1;
                } else {
                    return o1.compareTo(o2);
                }
            }
        });
        return sorted_arr;
    }
}",human
41,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
     */
    public int carRaceCollision(int n) {
        // TODO: Write code here to calculate the number of collisions and return the result
        int collisions = 0;

        // logic to calculate collisions goes here

        return collisions;
    }
}",lm
42,"import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;

class Solution {
    public List<Integer> incrList(List<Integer> l) {
        return l.stream().map(p -> p + 1).collect(Collectors.toList());
    }
}",human
12,"import java.util.*;
import java.lang.*;

class Solution {
    /**
     * Out of a list of strings, return the longest one. 
     * Return the first one in case of multiple strings of the same length. 
     * Return `Optional.empty` in case the input list is empty.
     * 
     * @param strings the list of strings to find the longest one from
     * @return the longest string wrapped in an Optional, or Optional.empty if the list is empty
     */
    public Optional<String> longest(List<String> strings) {
        if (strings.isEmpty()) {
            return Optional.empty();
        }
        
        String longestString = strings.get(0);
        for (String str : strings) {
            if (str.length() > longestString.length()) {
                longestString = str;
            }
        }
        
        return Optional.of(longestString);
    }
}",lm
106,"import java.util.*;

class Solution {
    /**
    Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    */
    public List<Integer> f(int n) {
        List<Integer> result = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            if (i % 2 == 0) {
                result.add(factorial(i));
            } else {
                result.add(sumNumbers(i));
            }
        }
        return result;
    }
    
    /**
    Helper method to calculate the factorial of a number.
    */
    private int factorial(int number) {
        int result = 1;
        for (int i = 1; i <= number; i++) {
            result *= i;
        }
        return result;
    }
    
    /**
    Helper method to calculate the sum of numbers from 1 to a given number.
    */
    private int sumNumbers(int number) {
        int result = 0;
        for (int i = 1; i <= number; i++) {
            result += i;
        }
        return result;
    }
}",lm
112,"import java.util.*;

class Solution {
    public List<Object> reverseDelete(String s, String c) {
        // Implementation goes here
    }
}",lm
63,"import java.util.*;
import java.lang.*;

class Solution {
    public int fibfib(int n) {
        if (n == 0) {
            return 0;
        }
        if (n == 1) {
            return 0;
        }
        if (n == 2) {
            return 1;
        }
        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);
    }
}",human
33,"import java.util.*;

class Solution {
    /**
    This function takes a list l and returns a list l' such that
    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal
    to the values of the corresponding indices of l, but sorted.
    */
    public List<Integer> sortThird(List<Integer> l) {
        List<Integer> result = new ArrayList<>(l);
        
        for (int i = 0; i < result.size(); i++) {
            if (i % 3 == 0) {
                int start = i;
                int end = Math.min(i + 3, result.size());
                List<Integer> sublist = result.subList(start, end);
                sublist.sort(null);
            }
        }
        
        return result;
    }
}",lm
104,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Given a list of positive integers x. return a sorted list of all
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))
    [1, 15, 33]
    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))
    []
     */
    public List<Integer> uniqueDigits(List<Integer> x) {
        List<Integer> result = new ArrayList<>();
        for (Integer num : x) {
            if (!containsEvenDigit(num)) {
                result.add(num);
            }
        }
        Collections.sort(result);
        return result;
    }
    
    private boolean containsEvenDigit(int num) {
        while (num > 0) {
            int digit = num % 10;
            if (digit % 2 == 0) {
                return true;
            }
            num /= 10;
        }
        return false;
    }
}",lm
118,,lm
88,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sortArray(Arrays.asList()) => []
    * sortArray(Arrays.asList(5)) => [5]
    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]
    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]
     */
    public List<Integer> sortArray(List<Integer> array) {
        // Create a copy of the given array
        List<Integer> sortedArray = new ArrayList<>(array);
        
        // Get the sum of the first and last index values
        int sum = sortedArray.get(0) + sortedArray.get(sortedArray.size() - 1);
        
        // Sort the array in ascending or descending order based on the sum
        if(sum % 2 == 0) {
            Collections.sort(sortedArray, Collections.reverseOrder());
        } else {
            Collections.sort(sortedArray);
        }
        
        // Return the sorted array
        return sortedArray;
    }
}",lm
29,"import java.util.*;
import java.lang.*;
import java.util.stream.Collectors;

class Solution {
    public List<String> filterByPrefix(List<String> strings, String prefix) {
        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList());
    }
}",human
26,"import java.util.*;
import java.util.stream.Collectors;

class Solution {
    /**
    From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))
    [1, 3, 4]
     */
    public List<Integer> removeDuplicates(List<Integer> numbers) {
        // Create a new ArrayList to hold the unique elements
        List<Integer> uniqueNumbers = new ArrayList<>();

        // Create a set to track the elements that have already occurred
        Set<Integer> seenNumbers = new HashSet<>();

        // Iterate over the input list
        for (Integer number : numbers) {
            // If the number has not been seen before, add it to uniqueNumbers and mark it as seen
            if (!seenNumbers.contains(number)) {
                uniqueNumbers.add(number);
                seenNumbers.add(number);
            }
        }

        return uniqueNumbers;
    }
}",lm
142,"import java.util.*;

class Solution {
    /**
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.

    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
     */
    public int sumSquares(List<Integer> lst) {
        int sum = 0;
        for (int i = 0; i < lst.size(); i++) {
            if (i % 3 == 0) {
                sum += lst.get(i) * lst.get(i);
            } else if (i % 4 == 0 && i % 3 != 0) {
                sum += lst.get(i) * lst.get(i) * lst.get(i);
            }
        }
        return sum;
    }
}",lm
157,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean rightAngleTriangle(int a, int b, int c) {
        return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b;
    }
}",human
122,"import java.util.*;
import java.lang.*;

class Solution {
    public int addElements(List<Integer> arr, int k) {
        arr = arr.subList(0, k);
        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);
        return sum.orElse(0);
    }
}",human
46,"import java.util.*;
import java.lang.*;

class Solution {
    public int fib4(int n) {
        List<Integer> results = new ArrayList<>();
        results.add(0);
        results.add(0);
        results.add(2);
        results.add(0);
        if (n < 4) {
            return results.get(n);
        }

        for (int i = 4; i <= n; i++) {
            results.add(results.get(0) + results.get(1) + results.get(2) + results.get(3));
            results.remove(0);
        }
        return results.get(3);
    }
}",human
69,"import java.util.*;
import java.lang.*;

class Solution {
    public int search(List<Integer> lst) {
        int[] frq = new int[Collections.max(lst) + 1];
        for (int i : lst) {
            frq[i] += 1;
        }
        int ans = -1;
        for (int i = 1; i < frq.length; i++) {
            if (frq[i] >= i) {
                ans = i;
            }
        }
        return ans;
    }
}",human
130,"import java.util.*;

class Solution {
    public List<Integer> tri(int n) {
        List<Integer> result = new ArrayList<>();
        if (n >= 0) {
            for (int i = 1; i <= n+1; i++) {
                if (i == 1) {
                    result.add(3);
                } else if (i % 2 == 0) {
                    result.add(1 + (i / 2));
                } else {
                    result.add(result.get(i-2) + result.get(i-3) + result.get(i));
                }
            }
        }
        return result;
    }
}",lm
144,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean simplify(String x, String n) {
        String[] a = x.split(""/"");
        String[] b = n.split(""/"");
        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);
        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);
        return numerator / denom * denom == numerator;
    }
}",human
66,"import java.util.*;
import java.lang.*;

class Solution {
    public int digitSum(String s) {
        int sum = 0;
        for (char c : s.toCharArray()) {
            if (Character.isUpperCase(c)) {
                sum += c;
            }
        }
        return sum;
    }
}",human
77,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean iscube(int a) {
        a = Math.abs(a);
        return Math.round(Math.pow(Math.round(Math.pow(a, 1. / 3)), 3)) == a;
    }
}",human
119,"import java.util.*;
import java.lang.*;

class Solution {
    public String matchParens(List<String> lst) {
        List<String> S = Arrays.asList(lst.get(0) + lst.get(1), lst.get(1) + lst.get(0));
        for (String s : S) {
            int val = 0;
            for (char i : s.toCharArray()) {
                if (i == '(') {
                    val += 1;
                } else {
                    val -= 1;
                }
                if (val < 0) {
                    break;
                }
            }
            if (val == 0) {
                return ""Yes"";
            }
        }
        return ""No"";
    }
}",human
73,"public int smallestChange(List<Integer> arr) {
        // Convert the given array to an array of integers
        int[] nums = new int[arr.size()];
        for (int i = 0; i < arr.size(); i++) {
            nums[i] = arr.get(i);
        }
        
        int n = nums.length;
        int[][] dp = new int[n][n];
        
        // Initialize diagonal elements of dp array to 1
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        
        // Fill the dp array
        for (int len = 2; len <= n; len++) {
            for (int i = 0; i < n - len + 1; i++) {
                int j = i + len - 1;
                if (nums[i] == nums[j]) {
                    dp[i][j] = dp[i + 1][j - 1];
                } else {
                    dp[i][j] = Math.min(dp[i + 1][j], dp[i][j - 1]) + 1;
                }
            }
        }
        
        // Return the minimum number of changes needed to make the array palindromic
        return dp[0][n - 1];
    }
}",lm
119,"import java.util.*;

class Solution {
    public String matchParens(List<String> lst) {
        // Implementation code goes here
        
        // Variables and logic to check if it is possible to concatenate
        // the two strings in some order to form a good string
        
        // Return ""Yes"" if it is possible to form a good string
        // Return ""No"" otherwise
    }
}",lm
140,"import java.util.*;
import java.lang.*;

class Solution {
    public String fixSpaces(String text) {
        StringBuilder sb = new StringBuilder();
        int start = 0, end = 0;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == ' ') {
                end += 1;
            } else {
                if (end - start > 2) {
                    sb.append('-');
                } else if (end - start > 0) {
                    sb.append(""_"".repeat(end - start));
                }
                sb.append(text.charAt(i));
                start = i + 1;
                end = i + 1;
            }
        }
        if (end - start > 2) {
            sb.append('-');
        } else if (end - start > 0) {
            sb.append(""_"".repeat(end - start));
        }
        return sb.toString();
    }
}",human
143,"import java.util.*;
import java.lang.*;

class Solution {
    public String wordsInSentence(String sentence) {
        List<String> new_lst = new ArrayList<>();
        for (String word : sentence.split("" "" )) {
            boolean flg = true;
            if (word.length() == 1) {
                continue;
            }
            for (int i = 2; i < word.length(); i++) {
                if (word.length() % i == 0) {
                    flg = false;
                    break;
                }
            }
            if (flg) {
                new_lst.add(word);
            }
        }
        return String.join("" "", new_lst);
    }
}",human
131,"import java.util.*;
import java.lang.*;

class Solution {
    public int digits(int n) {
        int product = 1, odd_count = 0;
        for (char digit : String.valueOf(n).toCharArray()) {
            int int_digit = digit - '0';
            if (int_digit % 2 == 1) {
                product *= int_digit;
                odd_count += 1;
            }
        }
        if (odd_count == 0) {
            return 0;
        } else {
            return product;
        }
    }
}",human
78,"if (num == null || num.isEmpty()) {
        return 0;
    }
    
    int count = 0;
    String primes = ""2357BD"";
    
    for (int i = 0; i < num.length(); i++) {
        if (primes.contains("""" + num.charAt(i))) {
            count++;
        }
    }
    
    return count;
}",lm
62,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> derivative(List<Integer> xs) {
        List<Integer> result = new ArrayList<>();
        for (int i = 1; i < xs.size(); i++) {
            result.add(i * xs.get(i));
        }
        return result;
    }
}",human
104,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> uniqueDigits(List<Integer> x) {
        List<Integer> odd_digit_elements = new ArrayList<>();
        for (int i : x) {
            boolean is_unique = true;
            for (char c : String.valueOf(i).toCharArray()) {
                if ((c - '0') % 2 == 0) {
                    is_unique = false;
                    break;
                }
            }
            if (is_unique) {
                odd_digit_elements.add(i);
            }
        }
        Collections.sort(odd_digit_elements);
        return odd_digit_elements;
    }
}",human
24,,lm
47,"import java.util.*;

class Solution {
    /**
    Return median of elements in the list l.
    >>> median(Arrays.asList(3, 1, 2, 4, 5))
    3
    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))
    15.0
    */
    public double median(List<Integer> l) {
        // Sorting the list in ascending order
        Collections.sort(l);
        
        // Finding the middle index
        int mid = l.size() / 2;
        
        if (l.size() % 2 == 0) {
            // If the list contains even number of elements
            // Taking the average of the two middle elements
            return (l.get(mid - 1) + l.get(mid)) / 2.0;
        } else {
            // If the list contains odd number of elements
            // Returning the middle element
            return l.get(mid);
        }
    }
}",lm
114,"import java.util.*;

class Solution {
    public int minSubArraySum(List<Integer> nums) {
        // Check if the input list is empty
        if (nums.isEmpty()) {
            throw new IllegalArgumentException(""List cannot be empty"");
        }
        
        int currentSum = nums.get(0); // Initialize current sum with first element
        int minSum = nums.get(0); // Initialize minimum sum with first element
        
        // Iterate over the array starting from the second element
        for (int i = 1; i < nums.size(); i++) {
            // If the current sum becomes negative, reset it to the current element
            if (currentSum < 0) {
                currentSum = nums.get(i);
            }
            // Otherwise, add the current element to the current sum
            else {
                currentSum += nums.get(i);
            }
            
            // Update the minimum sum if the current sum is less than the minimum sum
            if (currentSum < minSum) {
                minSum = currentSum;
            }
        }
        
        return minSum;
    }
}",lm
4,"import java.util.*;

class Solution {
    /**
    For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))
    1.0
     */
    public double meanAbsoluteDeviation(List<Double> numbers) {
        double sum = 0;
        for (double number : numbers) {
            sum += number;
        }
        double mean = sum / numbers.size();

        double deviationSum = 0;
        for (double number : numbers) {
            deviationSum += Math.abs(number - mean);
        }
        return deviationSum / numbers.size();
    }
}",lm
50,"import java.util.*;

class Solution {
    /**
    returns encoded string by shifting every character by 5 in the alphabet.
     */
    public String encodeShift(String s) {
        StringBuilder sb = new StringBuilder();
        for (char ch : s.toCharArray()) {
            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));
        }
        return sb.toString();
    }

    /**
    takes as input string encoded with encodeShift function. Returns decoded string.
     */
    public String decodeShift(String s) {
        StringBuilder sb = new StringBuilder();
        for (char ch : s.toCharArray()) {
            sb.append((char) ('a' + ((ch - 5 - 'a') % 26 + 26) % 26));
        }
        return sb.toString();
    }
}",lm
71,"import java.util.*;
import java.lang.*;

class Solution {
    public double triangleArea(double a, double b, double c) {
        // Check if the given sides form a valid triangle
        if (a + b > c && a + c > b && b + c > a) {
            // Calculate the semi-perimeter of the triangle
            double s = (a + b + c) / 2;
            
            // Calculate the area of the triangle using Heron's formula
            double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));
            
            // Round the area to 2 decimal points
            area = Math.round(area * 100.0) / 100.0;
            
            return area;
        } else {
            // Return -1 if the sides do not form a valid triangle
            return -1;
        }
    }
}",lm
37,"import java.util.*;

class Solution {
    public List<Integer> sortEven(List<Integer> l) {
        List<Integer> result = new ArrayList<>();
        List<Integer> evenIndices = new ArrayList<>();
        List<Integer> evenValues = new ArrayList<>();

        // Store even indices and values
        for (int i = 0; i < l.size(); i += 2) {
            evenIndices.add(i);
            evenValues.add(l.get(i));
        }

        // Sort even values
        Collections.sort(evenValues);

        // Reconstruct result list
        int evenIndex = 0;
        int evenValueIndex = 0;
        for (int i = 0; i < l.size(); i++) {
            if (evenIndices.contains(i)) {
                result.add(evenValues.get(evenValueIndex++));
            } else {
                result.add(l.get(i));
            }
        }

        return result;
    }
}",lm
140,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Given a string text, replace all spaces in it with underscores,
    and if a string has more than 2 consecutive spaces,
    then replace all consecutive spaces with -

    fixSpaces(""Example"") == ""Example""
    fixSpaces(""Example 1"") == ""Example_1""
    fixSpaces("" Example 2"") == ""_Example_2""
    fixSpaces("" Example   3"") == ""_Example-3""
     */
    public String fixSpaces(String text) {
        text = text.replace("" "", ""_"");
        if (text.contains(""   "")) {
            text = text.replace(""   "", ""-"");
        }
        return text;
    }
}",lm
21,"import java.util.*;

class Solution {
    /**
    Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))
    [0.0, 0.25, 0.5, 0.75, 1.0]
    */
    public List<Double> rescaleToUnit(List<Double> numbers) {
        List<Double> rescaledNumbers = new ArrayList<>();
        
        double minValue = Collections.min(numbers);
        double maxValue = Collections.max(numbers);
        
        for (double number : numbers) {
            double rescaledValue = (number - minValue) / (maxValue - minValue);
            rescaledNumbers.add(rescaledValue);
        }
        
        return rescaledNumbers;
    }
}",lm
146,"import java.util.*;

class Solution {
    /**
    Write a function that takes an array of numbers as input and returns
    the number of elements in the array that are greater than 10 and both
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1
    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2
     */
    public int specialFilter(List<Integer> nums) {
        int count = 0;
        for (int num : nums) {
            String numStr = Integer.toString(Math.abs(num));
            int firstDigit = Character.getNumericValue(numStr.charAt(0));
            int lastDigit = Character.getNumericValue(numStr.charAt(numStr.length() - 1));
            if (num > 10 && firstDigit % 2 != 0 && lastDigit % 2 != 0) {
                count++;
            }
        }
        return count;
    }
}",lm
101,"import java.util.*;

class Solution {
    public List<String> wordStrings(String s) {
        List<String> words = new ArrayList<>();
        
        String[] splitWords = s.split(""[,\\s]+"");
        
        for (String word : splitWords) {
            words.add(word);
        }
        
        return words;
    }
}",lm
53,"import java.util.*;
import java.lang.*;

class Solution {
    public int add(int x, int y) {
        return x + y;
    }
}",human
123,"import java.util.*;

class Solution {
    /**
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the
    previous term as follows: if the previous term is even, the next term is one half of
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note:
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
     */
    public List<Integer> getOddCollatz(int n) {
        List<Integer> result = new ArrayList<>();
        result.add(1);
        getCollatzSequence(n, result);
        List<Integer> oddNumbers = new ArrayList<>();

        for (int num : result) {
            if (num % 2 != 0) {
                oddNumbers.add(num);
            }
        }

        Collections.sort(oddNumbers);
        return oddNumbers;
    }

    private void getCollatzSequence(int num, List<Integer> sequence) {
        if (num == 1) {
            return;
        }
        if (num % 2 == 0) {
            num /= 2;
        } else {
            num = num * 3 + 1;
        }
        sequence.add(num);
        getCollatzSequence(num, sequence);
    }
}",lm
7,"import java.util.*;
import java.lang.*;

class Solution {
    public List<String> filterBySubstring(List<String> strings, String substring) {
        List<String> result = new ArrayList<>();
        for (String x : strings) {
            if (x.contains(substring)) {
                result.add(x);
            }
        }
        return result;
    }
}",human
10,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Test if given string is a palindrome
     */
    public boolean isPalindrome(String string) {
        int i = 0;
        int j = string.length() - 1;
        while (i < j) {
            if (string.charAt(i)!= string.charAt(j)) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    /**
    Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> makePalindrome("""")
    """"
    >>> makePalindrome(""cat"")
    ""catac""
    >>> makePalindrome(""cata"")
    ""catac""
     */
    public String makePalindrome(String string) {
        int n = string.length();
        if (n == 0) {
            return """";
        }
        int i = n - 1;
        while (i >= 0) {
            if (isPalindrome(string.substring(0, i + 1))) {
                StringBuilder sb = new StringBuilder(string.substring(i + 1));
                return string + sb.reverse().toString();
            }
            i--;
        }
        return """";
    }
}",lm
154,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean cycpatternCheck(String a, String b) {
        int l = b.length();
        String pat = b + b;
        for (int i = 0; i <= a.length() - l; i++) {
            for (int j = 0; j <= l; j++) {
                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {
                    return true;
                }
            }
        }
        return false;
    }
}",human
152,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> compare(List<Integer> game, List<Integer> guess) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < game.size(); i++) {
            result.add(Math.abs(game.get(i) - guess.get(i)));
        }
        return result;
    }
}",human
90,"import java.util.*;

class Solution {
    /**
    You are given a list of integers.
    Write a function nextSmallest() that returns the 2nd smallest element of the list.
    Return null if there is no such element.
    <p>
    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]
    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]
    nextSmallest(Arrays.asList()) == Optional.empty
    nextSmallest(Arrays.asList(1, 1)) == Optional.empty
     */
    public Optional<Integer> nextSmallest(List<Integer> lst) {
        // Sorting the list in ascending order
        Collections.sort(lst);
        
        // Returning the second smallest element if it exists
        if (lst.size() > 1) {
            return Optional.of(lst.get(1));
        } else {
            return Optional.empty();
        }
    }
}",lm
111,"import java.util.*;
import java.lang.*;

class Solution {
    public Map<String, Integer> histogram(String test) {
        Map<String, Integer> dict1 = new HashMap<>();
        List<String> list1 = Arrays.asList(test.split("" "" ));
        int t = 0;
        for (String i : list1) {
            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {
                t = Collections.frequency(list1, i);
            }
        }
        if (t > 0) {
            for (String i : list1) {
                if (Collections.frequency(list1, i) == t) {
                    dict1.put(i, t);
                }
            }
        }
        return dict1;
    }
}",human
90,"import java.util.*;
import java.lang.*;

class Solution {
    public Optional<Integer> nextSmallest(List<Integer> lst) {
                Set < Integer > set = new HashSet<>(lst);
        List<Integer> l = new ArrayList<>(set);
        Collections.sort(l);
        if (l.size() < 2) {
            return Optional.empty();
        } else {
            return Optional.of(l.get(1));
        }
    }
}",human
76,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean isSimplePower(int x, int n) {
        if (n == 1) {
            return x == 1;
        }
        int power = 1;
        while (power < x) {
            power = power * n;
        }
        return power == x;
    }
}",human
13,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Return a greatest common divisor of two integers a and b
    >>> greatestCommonDivisor(3, 5)
    1
    >>> greatestCommonDivisor(25, 15)
    5
     */
    public int greatestCommonDivisor(int a, int b) {
        if (a == 0) {
            return b;
        }
        if (b == 0) {
            return a;
        }

        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }

        return a;
    }
}",lm
56,"import java.util.*;
import java.lang.*;

class Solution {

    /**
     * brackets is a string of ""<"" and "">"".
     * return True if every opening bracket has a corresponding closing bracket.
     */
    public boolean correctBracketing(String brackets) {
        // create a stack to track opening brackets
        Stack<Character> stack = new Stack<>();

        // iterate over each character in the brackets string
        for (char bracket : brackets.toCharArray()) {
            if (bracket == '<') {
                // opening bracket found, push it onto the stack
                stack.push(bracket);
            } else if (bracket == '>') {
                // closing bracket found, check if there is a corresponding opening bracket on the stack
                if (!stack.isEmpty() && stack.peek() == '<') {
                    // corresponding opening bracket found, pop it from the stack
                    stack.pop();
                } else {
                    // no corresponding opening bracket found, return false
                    return false;
                }
            }
        }

        // check if there are any remaining opening brackets on the stack
        return stack.isEmpty();
    }
}",lm
29,"import java.util.*;
import java.util.stream.Collectors;

class Solution {
    public List<String> filterByPrefix(List<String> strings, String prefix) {
        // Create a new list to store the filtered strings
        List<String> filteredList = new ArrayList<>();
        
        // Iterate over each string in the input list
        for (String str : strings) {
            // Check if the string starts with the given prefix
            if (str.startsWith(prefix)) {
                // Add the string to the filtered list
                filteredList.add(str);
            }
        }
        
        // Return the filtered list
        return filteredList;
    }
}",lm
75,"import java.util.*;
import java.lang.*;

class Solution {
    /**
     * Write a function that returns true if the given number is the multiplication of 3 prime numbers
     * and false otherwise.
     * Knowing that (a) is less then 100.
     * Example:
     * isMultiplyPrime(30) == true
     * 30 = 2 * 3 * 5
     */
    public boolean isMultiplyPrime(int a) {
        List<Integer> primes = new ArrayList<>();
        boolean[] isPrime = new boolean[100];
        Arrays.fill(isPrime, true);

        for (int i = 2; i < 100; i++) {
            if (isPrime[i]) {
                primes.add(i);
                for (int j = i * i; j < 100; j += i) {
                    isPrime[j] = false;
                }
            }
        }

        int count = 0;
        for (int prime : primes) {
            if (a % prime == 0) {
                count++;
                if (count >= 3) {
                    return true;
                }
            }
        }

        return false;
    }
}",lm
129,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> minPath(List<List<Integer>> grid, int k) {
        int n = grid.size();
        int val = n * n + 1;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid.get(i).get(j) == 1) {
                    List<Integer> temp = new ArrayList<>();
                    if (i != 0) {
                        temp.add(grid.get(i - 1).get(j));
                    }
                    if (j != 0) {
                        temp.add(grid.get(i).get(j - 1));
                    }
                    if (i != n - 1) {
                        temp.add(grid.get(i + 1).get(j));
                    }
                    if (j != n - 1) {
                        temp.add(grid.get(i).get(j + 1));
                    }
                    val = Collections.min(temp);
                }
            }
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            if (i % 2 == 0) {
                ans.add(1);
            } else {
                ans.add(val);
            }
        }
        return ans;
    }
}",human
105,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]

      If the array is empty, return an empty array:
      arr = []
      return []

      If the array has any strange number ignore it:
      arr = [1, -1 , 55]
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = [""One""]
     */
    public List<String> byLength(List<Integer> arr) {
        List<String> result = new ArrayList<>();
        
        if (arr.isEmpty()) {
            return result;
        }
        
        List<Integer> validNumbers = new ArrayList<>();
        for (Integer num : arr) {
            if (num >= 1 && num <= 9) {
                validNumbers.add(num);
            }
        }
        
        Collections.sort(validNumbers);
        Collections.reverse(validNumbers);
        
        for (Integer num : validNumbers) {
            switch (num) {
                case 1:
                    result.add(""One"");
                    break;
                case 2:
                    result.add(""Two"");
                    break;
                case 3:
                    result.add(""Three"");
                    break;
                case 4:
                    result.add(""Four"");
                    break;
                case 5:
                    result.add(""Five"");
                    break;
                case 6:
                    result.add(""Six"");
                    break;
                case 7:
                    result.add(""Seven"");
                    break;
                case 8:
                    result.add(""Eight"");
                    break;
                case 9:
                    result.add(""Nine"");
                    break;
            }
        }
        
        return result;
    }
}",lm
125,"import java.util.*;
import java.lang.*;

class Solution {
    public Object splitWords(String txt) {
        if (txt.contains("" "" )) {
            return Arrays.asList(txt.split("" "" ));
        } else if (txt.contains("","" )) {
            return Arrays.asList(txt.split(""[,\s]"" ));
        } else {
            int count = 0;
            for (char c : txt.toCharArray()) {
                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {
                    count += 1;
                }
            }
            return count;
        }
    }
}",human
80,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    isHappy(a) => false
    isHappy(aa) => false
    isHappy(abcd) => true
    isHappy(aabb) => false
    isHappy(adb) => true
    isHappy(xyy) => false
     */
    public boolean isHappy(String s) {
        if (s.length() < 3) {
            return false;
        }
        
        for (int i = 0; i < s.length() - 2; i++) {
            char c1 = s.charAt(i);
            char c2 = s.charAt(i + 1);
            char c3 = s.charAt(i + 2);
            
            if (c1 == c2 || c1 == c3 || c2 == c3) {
                return false;
            }
        }
        
        return true;
    }
}",lm
91,"import java.util.*;
import java.lang.*;

class Solution {
    public int isBored(String S) {
        String [] sentences = S.split(""[.?!]\s*"");
        int count = 0;
        for (String sentence : sentences) {
            if (sentence.subSequence(0, 2).equals(""I "")) {
                count += 1;
            }
        }
        return count;
    }
}",human
49,"import java.util.*;
import java.lang.*;

class Solution {
    public int modp(int n, int p) {
        int ret = 1;
        for (int i = 0; i < n; i++) {
            ret = (ret * 2) % p;
        }
        return ret;
    }
}",human
34,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> unique(List<Integer> l) {
        List<Integer> result = new ArrayList<>(new HashSet<>(l));
        Collections.sort(result);
        return result;
    }
}",human
9,"import java.util.*;
import java.lang.*;

class Solution {

    public List<Integer> rollingMax(List<Integer> numbers) {
        List<Integer> rollingMaxList = new ArrayList<>();
        
        for (int i = 0; i < numbers.size(); i++) {
            int max = Integer.MIN_VALUE;
            for (int j = 0; j <= i; j++) {
                max = Math.max(max, numbers.get(j));
            }
            rollingMaxList.add(max);
        }
        
        return rollingMaxList;
    }
}",lm
162,,lm
156,"import java.util.*;
import java.lang.*;

class Solution {
    public String intToMiniRoman(int number) {
        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);
        List<String> sym = Arrays.asList(""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"", ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M"");
        int i = 12;
        String res = """";
        while (number > 0) {
            int div = number / num.get(i);
            number %= num.get(i);
            while (div != 0) {
                res += sym.get(i);
                div -= 1;
            }
            i -= 1;
        }
        return res.toLowerCase();
    }
}",human
39,"import java.util.*;
import java.lang.*;

class Solution {
    public int primeFib(int n) {
        int f0 = 0, f1 = 1;
        while (true) {
            int p = f0 + f1;
            boolean is_prime = p >= 2;
            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {
                if (p % k == 0) {
                    is_prime = false;
                    break;
                }
            }
            if (is_prime) {
                n -= 1;
            }
            if (n == 0) {
                return p;
            }
            f0 = f1;
            f1 = p;
        }
    }
}",human
102,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If
    there's no such number, then the function should return -1.
    
    For example:
    chooseNum(12, 15) = 14
    chooseNum(13, 12) = -1
     */
    public int chooseNum(int x, int y) {
        int result = -1;
        for (int i = y; i >= x; i--) {
            if (i % 2 == 0) {
                result = i;
                break;
            }
        }
        return result;
    }
}",lm
125,"import java.util.*;

class Solution {
    /**
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    splitWords(""Hello world!"") == [""Hello"", ""world!""]
    splitWords(""Hello,world!"") == [""Hello"", ""world!""]
    splitWords(""abcdef"") == 3
     */
    public List<String> splitWords(String txt) {
        List<String> words = new ArrayList<>();

        if (txt.contains("" "")) {
            words = Arrays.asList(txt.split("" ""));
        } else if (txt.contains("","")) {
            words = Arrays.asList(txt.split("",""));
        } else {
            int count = 0;
            for (char c : txt.toCharArray()) {
                if (Character.isLowerCase(c) && c % 2 != 0) {
                    count++;
                }
            }
            return count;
        }

        return words;
    }
}",lm
74,"import java.util.*;
import java.lang.*;

class Solution {
    public List<String> totalMatch(List<String> lst1, List<String> lst2) {
        int l1 = 0;
        for (String st : lst1) {
            l1 += st.length();
        }

        int l2 = 0;
        for (String st : lst2) {
            l2 += st.length();
        }

        if (l1 <= l2) {
            return lst1;
        } else {
            return lst2;
        }
    }
}",human
127,"import java.util.*;
import java.lang.*;

class Solution {
    public String intersection(List<Integer> interval1, List<Integer> interval2) {
        int l = Math.max(interval1.get(0), interval2.get(0));
        int r = Math.min(interval1.get(1), interval2.get(1));
        int length = r - l;
        if (length <= 0) {
            return ""NO"";
        }
        if (length == 1) {
            return ""NO"";
        }
        if (length == 2) {
            return ""YES"";
        }
        for (int i = 2; i < length; i++) {
            if (length % i == 0) {
                return ""NO"";
            }
        }
        return ""YES"";
    }
}",human
1,"import java.util.*;
import java.lang.*;

class Solution {
    public List<String> separateParenGroups(String paren_string) {
        List<String> result = new ArrayList<>();
        StringBuilder current_string = new StringBuilder();
        int current_depth = 0;

        for (char c : paren_string.toCharArray()) {
            if (c == '(') {
                current_depth += 1;
                current_string.append(c);
            } else if (c == ')') {
                current_depth -= 1;
                current_string.append(c);

                if (current_depth == 0) {
                    result.add(current_string.toString());
                    current_string.setLength(0);
                }
            }
        }
        return result;

    }
}",human
55,"import java.util.*;
import java.lang.*;

class Solution {
    public int fib(int n) {
        if (n == 0) {
            return 0;
        }
        if (n == 1) {
            return 1;
        }
        return fib(n - 1) + fib(n - 2);
    }
}",human
32,"import java.util.*;

class Solution {
    /**
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
     */
    public double poly(List<Double> xs, double x) {
        double result = 0;
        for (int i = 0; i < xs.size(); i++) {
            result += xs.get(i) * Math.pow(x, i);
        }
        return result;
    }
    
    /**
    xs are coefficients of a polynomial.
    findZero find x such that poly(x) = 0.
    findZero returns only only zero point, even if there are many.
    Moreover, findZero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x
    -0.5
    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
     */
    public double findZero(List<Double> xs) {
        // implementation here
    }
}",lm
64,"import java.util.*;
import java.lang.*;

class Solution {
    public int vowelsCount(String s) {
        String vowels = ""aeiouAEIOU"";
        int n_vowels = 0;
        for (char c : s.toCharArray()) {
            if (vowels.indexOf(c) != -1) {
                n_vowels += 1;
            }
        }
        if (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y') {
            n_vowels += 1;
        }
        return n_vowels;
    }
}",human
143,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = ""This is a test""
        Output: ""is""

    Example 2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
     */
    public String wordsInSentence(String sentence) {
        List<String> result = new ArrayList<>();
        String[] words = sentence.split("" "");
        
        for (String word : words) {
            if (isPrime(word.length())) {
                result.add(word);
            }
        }
        
        return String.join("" "", result);
    }
    
    private boolean isPrime(int n) {
        if (n <= 1) {
            return false;
        }
        
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        
        return true;
    }
}",lm
126,"import java.util.*;

class Solution {
    /**
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return false. Assume no negative numbers and only integers.
    ...
     */
    public boolean isSorted(List<Integer> lst) {
        // Your code here

        // Check if the list has more than one duplicate of the same number
        boolean hasDuplicate = false;
        for (int i = 0; i < lst.size() - 1; i++) {
            if (lst.get(i).equals(lst.get(i + 1))) {
                // Duplicate found
                hasDuplicate = true;
                break;
            }
        }

        if (hasDuplicate) {
            return false;
        }

        // Check if the list is sorted in ascending order
        for (int i = 0; i < lst.size() - 1; i++) {
            if (lst.get(i) > lst.get(i + 1)) {
                return false;
            }
        }

        return true;
    }
}",lm
3,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean belowZero(List<Integer> operations) {
        int balance = 0;

        for (int op : operations) {
            balance += op;
            if (balance < 0) {
                return true;
            }
        }

        return false;
    }
}",human
103,"import java.util.*;
import java.lang.*;

class Solution {
    public Object roundedAvg(int n, int m) {
        if (n > m) {
            return -1;
        }
        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));
    }
}",human
158,"import java.util.*;

class Solution {
    public String findMax(List<String> words) {
        String maxWord = """";
        int maxUniqueChars = 0;
        
        for (String word : words) {
            int uniqueChars = countUniqueChars(word);
            
            if (uniqueChars > maxUniqueChars) {
                maxUniqueChars = uniqueChars;
                maxWord = word;
            } else if (uniqueChars == maxUniqueChars) {
                if (word.compareTo(maxWord) < 0) {
                    maxWord = word;
                }
            }
        }
        
        return maxWord;
    }
    
    private int countUniqueChars(String word) {
        Set<Character> uniqueChars = new HashSet<>();
        
        for (char ch : word.toCharArray()) {
            uniqueChars.add(ch);
        }
        
        return uniqueChars.size();
    }
}",lm
134,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Create a function that returns true if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and false otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    checkIfLastCharIsALetter(""apple pie"") -> false
    checkIfLastCharIsALetter(""apple pi e"") -> true
    checkIfLastCharIsALetter(""apple pi e "") -> false
    checkIfLastCharIsALetter("""") -> false
    */
    public boolean checkIfLastCharIsALetter(String txt) {
        if (txt == null || txt.isEmpty()) {
            return false;
        }

        int lastSpaceIndex = txt.lastIndexOf(' ');
        if (lastSpaceIndex == -1) {
            lastSpaceIndex = 0;
        }

        char lastChar = txt.charAt(txt.length() - 1);
        return Character.isLetter(lastChar) && lastSpaceIndex <= txt.length() - 1;
    }
}",lm
146,"import java.util.*;
import java.lang.*;

class Solution {
    public int specialFilter(List<Integer> nums) {
        int count = 0;
        for (int num : nums) {
            if (num > 10) {
                String odd_digits = ""13579"";
                String number_as_string = String.valueOf(num);
                if (odd_digits.indexOf(number_as_string.charAt(0)) != -1 && odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)) != -1) {
                    count += 1;
                }
            }
        }
        return count;
    }
}",human
87,"import java.util.*;

class Solution {
    /**
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of lists, [[x1, y1], [x2, y2] ...] such that
    each list is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.

    Examples:
    getRow([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]
    getRow([], 1) == []
    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]
     */
    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {
        // Create a result list to store the coordinates
        List<List<Integer>> result = new ArrayList<>();

        // Iterate over the rows in the list, starting with 0
        for (int i = 0; i < lst.size(); i++) {
            List<Integer> row = lst.get(i); // Get the current row

            // Iterate over the columns in the row, starting with 0
            for (int j = 0; j < row.size(); j++) {
                int num = row.get(j); // Get the current number

                // Check if the number is equal to x
                if (num == x) {
                    List<Integer> coord = new ArrayList<>();
                    coord.add(i); // Add the row coordinate
                    coord.add(j); // Add the column coordinate
                    result.add(coord); // Add the coordinate to the result
                }
            }
        }

        // Sort the list of coordinates initially by rows in ascending order
        // and by columns in descending order
        Collections.sort(result, new Comparator<List<Integer>>() {
            @Override
            public int compare(List<Integer> coord1, List<Integer> coord2) {
                if (coord1.get(0).equals(coord2.get(0))) {
                    return coord2.get(1).compareTo(coord1.get(1));
                } else {
                    return coord1.get(0).compareTo(coord2.get(0));
                }
            }
        });

        // Return the sorted list of coordinates
        return result;
    }
}",lm
123,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> getOddCollatz(int n) {
        List<Integer> odd_collatz = new ArrayList<>();
        if (n % 2 == 1) {
            odd_collatz.add(n);
        }
        while (n > 1) {
            if (n % 2 == 0) {
                n = n / 2;
            } else {
                n = n * 3 + 1;
            }
            if (n % 2 == 1) {
                odd_collatz.add(n);
            }
        }
        Collections.sort(odd_collatz);
        return odd_collatz;
    }
}",human
100,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> makeAPile(int n) {
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            result.add(n + 2 * i);
        }
        return result;
    }
}",human
133,"import java.util.*;

class Solution {
    public int sumSquares(List<Double> lst) {
        int sum = 0;
        for (Double num : lst) {
            sum += Math.ceil(num) * Math.ceil(num);
        }
        return sum;
    }
}",lm
133,"import java.util.*;
import java.lang.*;

class Solution {
    public int sumSquares(List<Double> lst) {
        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();
    }
}",human
98,"import java.util.*;
import java.lang.*;

class Solution {
    public int countUpper(String s) {
        // Count variable to keep track of the number of uppercase vowels
        int count = 0;
        
        // Iterate over the string characters at even indices
        for (int i = 0; i < s.length(); i += 2) {
            char c = s.charAt(i);
            
            // Check if the character is an uppercase vowel
            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {
                count++;
            }
        }
        
        // Return the count of uppercase vowels in even indices
        return count;
    }
}",lm
159,"public class Solution {
    public List<Integer> eat(int number, int need, int remaining) {
        List<Integer> result = new ArrayList<>();
        int totalEaten = number + need;
        int carrotsLeft = Math.max(0, remaining - need);
        result.add(totalEaten);
        result.add(carrotsLeft);
        return result;
    }
}",lm
132,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean isNested(String string) {
        List<Integer> opening_bracket_index = new ArrayList<>(), closing_bracket_index = new ArrayList<>();
        for (int i = 0; i < string.length(); i++) {
            if (string.charAt(i) == '[') {
                opening_bracket_index.add(i);
            } else {
                closing_bracket_index.add(i);
            }
        }
        Collections.reverse(closing_bracket_index);
        int i = 0, l = closing_bracket_index.size();
        for (int idx : opening_bracket_index) {
            if (i < l && idx < closing_bracket_index.get(i)) {
                i += 1;
            }
        }
        return i >= 2;
    }
}",human
103,"import java.util.*;
import java.lang.*;

class Solution {
    public Object roundedAvg(int n, int m) {
        if (n > m) {
            return -1;
        }
        
        int sum = 0;
        int count = 0;
        
        for (int i = n; i <= m; i++) {
            sum += i;
            count++;
        }
        
        int avg = Math.round((float) sum / count);
        String binary = Integer.toBinaryString(avg);
        
        return binary;
    }
}",lm
88,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> sortArray(List<Integer> array) {
        if (array.size() == 0) {
            return array;
        }
        List<Integer> result = new ArrayList<>(array);
        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {
            Collections.sort(result);
        } else {
            result.sort(Collections.reverseOrder());
        }
        return result;
    }
}",human
44,"import java.util.*;
import java.lang.*;

class Solution {
    public String changeBase(int x, int base) {
        StringBuilder ret = new StringBuilder();
        while (x > 0) {
            ret.append(String.valueOf(x % base));
            x /= base;
        }
        return ret.reverse().toString();
    }
}",human
155,"import java.util.*;

class Solution {
    /**
    Given an integer, return a tuple that has the number of even and odd digits respectively.
    
     Example:
        evenOddCount(-12) ==> (1, 1)
        evenOddCount(123) ==> (1, 2)
     */
    public List<Integer> evenOddCount(int num) {
        List<Integer> result = new ArrayList<>();
        int evenCount = 0;
        int oddCount = 0;
        String numString = String.valueOf(Math.abs(num));
        for (int i = 0; i < numString.length(); i++) {
            int digit = Character.getNumericValue(numString.charAt(i));
            if (digit % 2 == 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        }
        result.add(evenCount);
        result.add(oddCount);
        return result;
    }
}",lm
155,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> evenOddCount(int num) {
        int even_count = 0, odd_count = 0;
        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {
            if ((i - '0') % 2 == 0) {
                even_count += 1;
            } else {
                odd_count += 1;
            }
        }
        return Arrays.asList(even_count, odd_count);
    }
}",human
145,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> orderByPoints(List<Integer> nums) {
        List<Integer> result = new ArrayList<>(nums);
        result.sort((o1, o2) -> {
            int sum1 = 0;
            int sum2 = 0;

            for (int i = 0; i < String.valueOf(o1).length(); i++) {
                if (i != 0 || o1 >= 0) {
                    sum1 += (String.valueOf(o1).charAt(i) - '0' );
                    if (i == 1 && o1 < 0) {
                        sum1 = -sum1;
                    }
                }
            }
            for (int i = 0; i < String.valueOf(o2).length(); i++) {
                if (i != 0 || o2 >= 0) {
                    sum2 += (String.valueOf(o2).charAt(i) - '0' );
                    if (i == 1 && o2 < 0) {
                        sum2 = -sum2;
                    }
                }
            }
            return Integer.compare(sum1, sum2);
        });
        return result;
    }
}",human
74,"import java.util.*;

class Solution {
    public List<String> totalMatch(List<String> lst1, List<String> lst2) {
        if (totalChars(lst1) > totalChars(lst2)) {
            return lst2;
        } else {
            return lst1;
        }
    }
    
    private int totalChars(List<String> lst) {
        int total = 0;
        for (String str : lst) {
            total += str.length();
        }
        return total;
    }
}",lm
35,"import java.util.*;

class Solution {
    /**
     * Return maximum element in the list.
     *
     * @param l the list of integers
     * @return the maximum element
     */
    public int maxElement(List<Integer> l) {
        // Use the built-in Collections.max() method to find the maximum element
        return Collections.max(l);
    }
}",lm
97,,lm
71,"import java.util.*;
import java.lang.*;

class Solution {
    public double triangleArea(double a, double b, double c) {
        if (a + b <= c || a + c <= b || b + c <= a) {
            return -1;
        }
        double s = (a + b + c) / 2;
        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));
        area = (double) Math.round(area * 100) / 100;
        return area;
    }
}",human
69,"import java.util.*;

class Solution {
    public int search(List<Integer> lst) {
        // Store the frequency of each integer in a map
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : lst) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        
        int maxNum = -1; // The greatest integer satisfying the conditions
        for (int num : lst) {
            // Check if the frequency of the current num is greater than or equal to the num itself
            if (frequencyMap.get(num) >= num && num > maxNum) {
                maxNum = num;
            }
        }
        
        return maxNum;
    }
}",lm
51,"import java.util.*;
import java.lang.*;

class Solution {
    public String removeVowels(String text) {
        StringBuilder sb = new StringBuilder();
        for (char ch : text.toCharArray()) {
            if (""aeiou"".indexOf(Character.toLowerCase(ch)) == -1) {
                sb.append(ch);
            }
        }
        return sb.toString();
    }
}",human
161,"public class Solution {
    public String solve(String s) {
        // Check if the string contains letters
        boolean containsLetters = false;
        for (int i = 0; i < s.length(); i++) {
            if (Character.isLetter(s.charAt(i))) {
                containsLetters = true;
                break;
            }
        }
        
        // If the string does not contain letters, reverse the string
        if (!containsLetters) {
            return new StringBuilder(s).reverse().toString();
        }
        
        // Reverse the case of letters
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isLetter(c)) {
                if (Character.isLowerCase(c)) {
                    result.append(Character.toUpperCase(c));
                } else {
                    result.append(Character.toLowerCase(c));
                }
            } else {
                result.append(c);
            }
        }
        
        return result.toString();
    }
}",lm
128,"import java.util.*;
import java.lang.*;

class Solution {
    public Optional<Integer> prodSigns(List<Integer> arr) {
        if (arr.isEmpty()) {
            return Optional.empty();
        }
        
        int sum = 0;
        int signProduct = 1;
        
        for (int num : arr) {
            sum += Math.abs(num);
            signProduct *= Math.signum(num);
        }
        
        return Optional.of(sum * signProduct);
    }
}",lm
63,"import java.util.*;
import java.lang.*;

class Solution {
    /**
     The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
     fibfib(0) == 0
     fibfib(1) == 0
     fibfib(2) == 1
     fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
     Please write a function to efficiently compute the n-th element of the fibfib number sequence.
     >>> fibfib(1)
     0
     >>> fibfib(5)
     4
     >>> fibfib(8)
     24
     */
    public int fibfib(int n) {
        if (n < 2) {
            return 0;
        } else if (n == 2) {
            return 1;
        }

        int a = 0;
        int b = 0;
        int c = 1;
        
        for (int i = 3; i <= n; i++) {
            int sum = a + b + c;
            a = b;
            b = c;
            c = sum;
        }
        
        return c;
    }
}",lm
86,"import java.util.*;

class Solution {
    /**
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    antiShuffle(""Hi"") returns ""Hi""
    antiShuffle(""hello"") returns ""ehllo""
    antiShuffle(""Hello World!!!"") returns ""Hello !!!Wdlor""
     */
    public String antiShuffle(String s) {
        // Split the input string into words
        String[] words = s.split("" "");
        
        // Create an array to store the ordered version of each word
        String[] orderedWords = new String[words.length];
        
        // Loop through each word and create the ordered version
        for (int i = 0; i < words.length; i++) {
            orderedWords[i] = orderWord(words[i]);
        }
        
        // Join the ordered words with spaces
        return String.join("" "", orderedWords);
    }
    
    // Helper method to order a word based on ASCII values
    private String orderWord(String word) {
        // Convert the word to character array for sorting
        char[] charArray = word.toCharArray();
        
        // Sort the characters in ascending order based on ASCII values
        Arrays.sort(charArray);
        
        // Convert the sorted character array back to string
        return new String(charArray);
    }
}",lm
99,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
     */

    public int closestInteger(String value) {

        // Parse the input value as a double
        double number = Double.parseDouble(value);

        // Round the number to the nearest integer
        int roundedNumber = (int) Math.round(number);

        // Check if the rounded number is equidistant from the two integers
        if (number - Math.floor(number) == 0.5) {
            // If it is, round it away from zero
            if (number > 0) {
                roundedNumber = (int) Math.ceil(number);
            } else {
                roundedNumber = (int) Math.floor(number);
            }
        }

        // Return the closest integer
        return roundedNumber;
    }
}",lm
96,"import java.util.ArrayList;
import java.util.List;

class Solution {
    /**
    Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    countUpTo(5) => [2,3]
    countUpTo(11) => [2,3,5,7]
    countUpTo(0) => []
    countUpTo(20) => [2,3,5,7,11,13,17,19]
    countUpTo(1) => []
    countUpTo(18) => [2,3,5,7,11,13,17]
     */
    public List<Integer> countUpTo(int n) {
        List<Integer> primes = new ArrayList<>();
        for (int num = 2; num < n; num++) {
            if (isPrime(num)) {
                primes.add(num);
                if (primes.size() == n) {
                    break;
                }
            }
        }
        return primes;
    }
    
    private boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        
        for (int i = 2; i <= Math.sqrt(num); i++) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }
}",lm
18,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> howManyTimes("""", ""a"")
    0
    >>> howManyTimes(""aaa"", ""a"")
    3
    >>> howManyTimes(""aaaa"", ""aa"")
    3
     */
    public int howManyTimes(String string, String substring) {
        int count = 0;
        int index = 0;
        
        while ((index = string.indexOf(substring, index)) != -1) {
            count++;
            index += substring.length();
        }
        
        return count;
    }
}",lm
109,"import java.util.*;

class Solution {
    /**
    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.

    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index.

    If it is possible to obtain the sorted array by performing the above operation
    then return true else return False.
    If the given array is empty then return true.

    Note: The given list is guaranteed to have unique elements.

    For Example:

    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
     */
    public boolean moveOneBall(List<Integer> arr) {
        // Check if the given array is empty
        if (arr.isEmpty()) {
            return true;
        }

        // Find the index of the smallest element in the array
        int minIndex = 0;
        for (int i = 1; i < arr.size(); i++) {
            if (arr.get(i) < arr.get(minIndex)) {
                minIndex = i;
            }
        }

        // Check if the array is already sorted in non-decreasing order
        if (minIndex == 0) {
            return true;
        }

        // Check if the array can be sorted in non-decreasing order by performing right shift operations
        for (int i = 0; i < arr.size(); i++) {
            int currIndex = (minIndex + i) % arr.size();
            int prevIndex = (currIndex - 1 + arr.size()) % arr.size();
            if (arr.get(currIndex) < arr.get(prevIndex)) {
                return false;
            }
        }

        return true;
    }
}",lm
89,"public class Solution {
    public String encrypt(String s) {
        String alphabet = ""abcdefghijklmnopqrstuvwxyz"";
        String encrypted = """";
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            int index = alphabet.indexOf(c);
            char newChar = alphabet.charAt((index + (2 * 2)) % alphabet.length());
            encrypted += newChar;
        }
        return encrypted;
    }
}",lm
70,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> strangeSortList(List<Integer> lst) {
        List<Integer> res = new ArrayList<>();
        boolean _switch = true;
        List<Integer> l = new ArrayList<>(lst);
        while (l.size() != 0) {
            if (_switch) {
                res.add(Collections.min(l));
            } else {
                res.add(Collections.max(l));
            }
            l.remove(res.get(res.size() - 1));
            _switch = !_switch;
        }
        return res;
    }
}",human
126,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean isSorted(List<Integer> lst) {
        List<Integer> sorted_lst = new ArrayList<>(lst);
        Collections.sort(sorted_lst);
        if (!lst.equals(sorted_lst)) {
            return false;
        }
        for (int i = 0; i < lst.size() - 2; i++) {
            if (lst.get(i) == lst.get(i + 1) && lst.get(i) == lst.get(i + 2)) {
                return false;
            }
        }
        return true;
    }
}",human
139,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> specialFactorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
     */
    public long specialFactorial(int n) {
        if (n <= 0) {
            throw new IllegalArgumentException(""Input must be greater than zero"");
        }
        
        long result = 1;
        for (int i = n; i > 0; i--) {
            long factorial = 1;
            for (int j = i; j > 0; j--) {
                factorial *= j;
            }
            result *= factorial;
        }
        return result;
    }
}",lm
43,"import java.util.*;

class Solution {
    /**
    pairsSumToZero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    @param l the list of integers
    @return true if there are two distinct elements that sum to zero, false otherwise
     */
    public boolean pairsSumToZero(List<Integer> l) {
        Set<Integer> set = new HashSet<>();
        for (int num : l) {
            if (set.contains(-num)) {
                return true;
            }
            set.add(num);
        }
        return false;
    }
}",lm
137,"import java.util.*;
import java.lang.*;

class Solution {
    public Optional<Object> compareOne(Object a, Object b) {
        double temp_a = 0, temp_b = 0;
        if (a instanceof Integer) {
            temp_a = (Integer) a * 1.0;
        } else if (a instanceof Double) {
            temp_a = (double) a;
        } else if (a instanceof String) {
            temp_a = Double.parseDouble(((String) a).replace(',', '.'));
        }
        if (b instanceof Integer) {
            temp_b = (Integer) b * 1.0;
        } else if (b instanceof Double) {
            temp_b = (double) b;
        } else if (b instanceof String) {
            temp_b = Double.parseDouble(((String) b).replace(',', '.'));
        }
        if (temp_a == temp_b) {
            return Optional.empty();
        } else if (temp_a > temp_b) {
            return Optional.of(a);
        } else {
            return Optional.of(b);
        }
    }
}",human
83,"import java.util.*;
import java.lang.*;

class Solution {
    /**
     * Given a positive integer n, return the count of the numbers of n-digit
     * positive integers that start or end with 1.
     */
    public int startsOneEnds(int n) {
        int count = 0;
        if (n == 1) {
            count = 1;
        } else {
            count = (int) Math.pow(10, n - 1);
            count += count;
        }
        return count;
    }
}",lm
5,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {
        if (numbers.size() == 0) {
            return List.of();
        }
        List<Integer> result = new ArrayList<>(List.of());
        for (int i = 0; i < numbers.size() - 1; i++) {
            result.add(numbers.get(i));
            result.add(delimiter);
        }

        result.add(numbers.get(numbers.size() - 1));

        return result;
    }
}",human
138,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean isEqualToSumEven(int n) {
        return n % 2 == 0 && n >= 8;
    }
}",human
24,"import java.util.*;
import java.lang.*;

class Solution {
    public int largestDivisor(int n) {
        for (int i = n - 1; i > 0; i--) {
            if (n % i == 0) {
                return i;
            }
        }
        return 1;
    }
}",human
67,"import java.util.*;
import java.lang.*;

class Solution {
    /**
     * In this task, you will be given a string that represents a number of apples and oranges
     * that are distributed in a basket of fruit this basket contains
     * apples, oranges, and mango fruits. Given the string that represents the total number of
     * the oranges and apples and an integer that represent the total number of the fruits
     * in the basket return the number of the mango fruits in the basket.
     * for example:
     * fruitDistribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
     * fruitDistribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
     * fruitDistribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
     * fruitDistribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
     */
    public int fruitDistribution(String s, int n) {
        // Parse the input string to get the number of apples and oranges
        int apples = getNumberOfApples(s);
        int oranges = getNumberOfOranges(s);
        
        // Calculate the number of mango fruits in the basket
        int mangoes = n - apples - oranges;
        
        // Return the number of mango fruits
        return mangoes;
    }
    
    /**
     * Helper method to parse the input string and get the number of apples.
     */
    private int getNumberOfApples(String s) {
        // Split the string into tokens using ""apples"" and ""oranges"" as delimiters
        String[] tokens = s.split(""apples|oranges"");
        
        // Trim leading and trailing whitespace from the tokens
        String applesToken = tokens[0].trim();
        
        // Parse the integer value from the apples token
        int apples = Integer.parseInt(applesToken);
        
        // Return the number of apples
        return apples;
    }
    
    /**
     * Helper method to parse the input string and get the number of oranges.
     */
    private int getNumberOfOranges(String s) {
        // Split the string into tokens using ""apples"" and ""oranges"" as delimiters
        String[] tokens = s.split(""apples|oranges"");
        
        // Trim leading and trailing whitespace from the tokens
        String orangesToken = tokens[1].trim();
        
        // Parse the integer value from the oranges token
        int oranges = Integer.parseInt(orangesToken);
        
        // Return the number of oranges
        return oranges;
    }
}",lm
148,"import java.util.*;
import java.lang.*;

class Solution {
    public List<String> bf(String planet1, String planet2) {
        List<String> planet_names = Arrays.asList(""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"");
        if (!planet_names.contains(planet1) || !planet_names.contains(planet2) || planet1.equals(planet2)) {
            return List.of();
        }
        int planet1_index = planet_names.indexOf(planet1);
        int planet2_index = planet_names.indexOf(planet2);
        if (planet1_index < planet2_index) {
            return planet_names.subList(planet1_index + 1, planet2_index);
        } else {
            return planet_names.subList(planet2_index + 1, planet1_index);
        }
    }
}",human
52,"import java.util.*;

class Solution {
    public boolean belowThreshold(List<Integer> l, int t) {
        for (int num : l) {
            if (num >= t) {
                return false;
            }
        }
        return true;
    }
}",lm
16,"import java.util.*;

class Solution {
    /**
     * Given a string, find out how many distinct characters (regardless of case) does it consist of
     *
     * @param string the input string
     * @return the number of distinct characters in the string
     */
    public int countDistinctCharacters(String string) {
      // TODO: Implement logic to count the distinct characters
    }
}",lm
15,"import java.util.*;
import java.lang.*;

class Solution {
    public String stringSequence(int n) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            sb.append(i);
            sb.append("" "");
        }
        sb.append(n);
        return sb.toString();
    }
}",human
25,"import java.util.*;
import java.lang.*;

class Solution {
    public List<Integer> factorize(int n) {
        List<Integer> fact = new ArrayList<>();
        int i = 2;
        while (n > 1) {
            if (n % i == 0) {
                fact.add(i);
                n /= i;
            } else {
                i++;
            }
        }
        return fact;
    }
}",human
114,"import java.util.*;
import java.lang.*;

class Solution {
    public int minSubArraySum(List<Integer> nums) {
        int minSum = Integer.MAX_VALUE;
        int sum = 0;
        for (Integer num : nums) {
            sum += num;
            if (minSum > sum) {
                minSum = sum;
            }
            if (sum > 0) {
                sum = 0;
            }
        }
        return minSum;
    }
}",human
132,"import java.util.*;

class Solution {
    /**
    Create a function that takes a string as input which contains only square brackets.
    The function should return true if and only if there is a valid subsequence of brackets
    where at least one bracket in the subsequence is nested.

    isNested(""[[]]"") -> true
    isNested(""[]]]]]]][[[[[]"") -> false
    isNested(""[][]"") -> false
    isNested(""[]"") -> false
    isNested(""[[][]]"") -> true
    isNested(""[[]][["") -> true
     */
    public boolean isNested(String string) {
        Stack<Character> stack = new Stack<>();
        for (char c : string.toCharArray()) {
            if (c == '[') {
                stack.push(c);
            } else if (c == ']') {
                if (stack.isEmpty() || stack.peek() != '[') {
                    return false;
                }
                stack.pop();
            }
        }
        return !stack.isEmpty();
    }
}",lm
0,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean hasCloseElements(List<Double> numbers, double threshold) {
        for (int i = 0; i < numbers.size(); i++) {
            for (int j = i + 1; j < numbers.size(); j++) {
                double distance = Math.abs(numbers.get(i) - numbers.get(j));
                if (distance < threshold) return true;
            }
        }
        return false;
    }
}",human
137,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,
    compareOne(1, 2.5) -> Optional.of(2.5)
    compareOne(1, ""2,3"") -> Optional.of(""2,3"")
    compareOne(""5,1"", ""6"") -> Optional.of(""6"")
    compareOne(""1"", 1) -> Optional.empty()
     */
    public Optional<Object> compareOne(Object a, Object b) {
        if (a instanceof Integer && b instanceof Integer) {
            if ((Integer) a > (Integer) b) {
                return Optional.of(a);
            } else if ((Integer) b > (Integer) a) {
                return Optional.of(b);
            }
        } else if (a instanceof Float && b instanceof Float) {
            if ((Float) a > (Float) b) {
                return Optional.of(a);
            } else if ((Float) b > (Float) a) {
                return Optional.of(b);
            }
        } else if (a instanceof String && b instanceof String) {
            try {
                Float floatA = Float.parseFloat(((String) a).replace(',', '.'));
                Float floatB = Float.parseFloat(((String) b).replace(',', '.'));
                if (floatA > floatB) {
                    return Optional.of(a);
                } else if (floatB > floatA) {
                    return Optional.of(b);
                }
            } catch (NumberFormatException e) {
                return Optional.empty();
            }
        }
        return Optional.empty();
    }
}",lm
73,"import java.util.*;
import java.lang.*;

class Solution {
    public int smallestChange(List<Integer> arr) {
        int ans = 0;
        for (int i = 0; i < arr.size() / 2; i++) {
            if (!Objects.equals(arr.get(i), arr.get(arr.size() - i - 1))) {
                ans += 1;
            }
        }
        return ans;
    }
}",human
124,"import java.util.*;
import java.lang.*;

class Solution {
    /**
    You have to write a function which validates a given date string and returns true if the date is valid otherwise false. The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    @param date the date string to be validated.
    @return true if the date is valid, otherwise false.
     */
    public boolean validDate(String date) {
        // implementation goes here
    }
}",lm
94,"import java.util.*;
import java.lang.*;

class Solution {
    public int skjkasdkd(List<Integer> lst) {
        int maxx = 0;
        for (int i : lst) {
            if (i > maxx) {
                boolean isPrime = i != 1;
                for (int j = 2; j < Math.sqrt(i) + 1; j++) {
                    if (i % j == 0) {
                        isPrime = false;
                        break;
                    }
                }
                if (isPrime) {
                    maxx = i;
                }
            }
        }
        int sum = 0;
        for (char c : String.valueOf(maxx).toCharArray()) {
            sum += (c - '0');
        }
        return sum;
    }
}",human
113,"import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

class Solution {
    /**
    Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i""th string of the input.

    >>> oddCount(Arrays.asList(""1234567""))
    [""the number of odd elements in the string 4 of the input.""]
    >>> oddCount(Arrays.asList(""3"",""11111111""))
    [""the number of odd elements in the string 1 of the input."",
     ""the number of odd elements in the string 8 of the input.""]
    */
    public List<String> oddCount(List<String> lst) {
        List<String> result = new ArrayList<>();
        for (String s : lst) {
            int count = 0;
            for (char c : s.toCharArray()) {
                if (Character.getNumericValue(c) % 2 != 0) {
                    count++;
                }
            }
            result.add(""the number of odd elements in the string "" + count + "" of the input."");
        }
        return result;
    }
}",lm
161,"import java.util.*;
import java.lang.*;

class Solution {
    public String solve(String s) {
        boolean flag = true;
        StringBuilder new_string = new StringBuilder();
        for (char i : s.toCharArray()) {
            if (Character.isUpperCase(i)) {
                new_string.append(Character.toLowerCase(i));
                flag = false;
            } else if (Character.isLowerCase(i)) {
                new_string.append(Character.toUpperCase(i));
                flag = false;
            } else {
                new_string.append(i);
            }
        }
        if (flag) {
            new_string.reverse();
        }
        return new_string.toString();
    }
}",human
43,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean pairsSumToZero(List<Integer> l) {
        for (int i = 0; i < l.size(); i++) {
            for (int j = i + 1; j < l.size(); j++) {
                if (l.get(i) + l.get(j) == 0) {
                    return true;
                }
            }
        }
        return false;
    }
}",human
147,"import java.util.*;
import java.lang.*;

class Solution {
    public int getMaxTriples(int n) {
        List<Integer> A = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            A.add(i * i - i + 1);
        }
        int count = 0;
        for (int i = 0; i < A.size(); i++) {
            for (int j = i + 1; j < A.size(); j++) {
                for (int k = j + 1; k < A.size(); k++) {
                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {
                        count += 1;
                    }
                }
            }
        }
        return count;
    }
}",human
124,"import java.util.*;
import java.lang.*;

class Solution {
    public boolean validDate(String date) {
        try {
            date = date.strip();
            String[] dates = date.split(""-"" );
            String m = dates[0];
            while (!m.isEmpty() && m.charAt(0) == '0') {
                m = m.substring(1);
            }
            String d = dates[1];
            while (!d.isEmpty() && d.charAt(0) == '0') {
                d = d.substring(1);
            }
            String y = dates[2];
            while (!y.isEmpty() && y.charAt(0) == '0') {
                y = y.substring(1);
            }
            int month = Integer.parseInt(m), day = Integer.parseInt(d), year = Integer.parseInt(y);
            if (month < 1 || month > 12) {
                return false;
            }
            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {
                return false;
            }
            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {
                return false;
            }
            if (month == 2 && (day < 1 || day > 29)) {
                return false;
            }
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}",human
