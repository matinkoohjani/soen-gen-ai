,id,code,label
154,93,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return false. Assume no negative numbers and only integers.
    ...
     */ Modifier public BasicType boolean isSorted FormalParameter ReferenceType List TypeArgument ReferenceType Integer lst LocalVariableDeclaration BasicType boolean VariableDeclarator hasDuplicate Literal false ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i BinaryOperation - MethodInvocation lst size Literal 1 MemberReference ++ i BlockStatement IfStatement MethodInvocation lst MethodInvocation MethodInvocation lst BinaryOperation + MemberReference i Literal 1 get equals MemberReference i get BlockStatement StatementExpression Assignment MemberReference hasDuplicate Literal true = BreakStatement End End IfStatement MemberReference hasDuplicate BlockStatement ReturnStatement Literal false End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i BinaryOperation - MethodInvocation lst size Literal 1 MemberReference ++ i BlockStatement IfStatement BinaryOperation > MethodInvocation lst MemberReference i get MethodInvocation lst BinaryOperation + MemberReference i Literal 1 get BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true",1
192,42,,1
66,44,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType String intersection FormalParameter ReferenceType List TypeArgument ReferenceType Integer interval1 FormalParameter ReferenceType List TypeArgument ReferenceType Integer interval2 LocalVariableDeclaration BasicType int VariableDeclarator l MethodInvocation Math MethodInvocation interval1 Literal 0 get MethodInvocation interval2 Literal 0 get max LocalVariableDeclaration BasicType int VariableDeclarator r MethodInvocation Math MethodInvocation interval1 Literal 1 get MethodInvocation interval2 Literal 1 get min LocalVariableDeclaration BasicType int VariableDeclarator length BinaryOperation - MemberReference r MemberReference l IfStatement BinaryOperation <= MemberReference length Literal 0 BlockStatement ReturnStatement Literal ""NO"" End IfStatement BinaryOperation == MemberReference length Literal 1 BlockStatement ReturnStatement Literal ""NO"" End IfStatement BinaryOperation == MemberReference length Literal 2 BlockStatement ReturnStatement Literal ""YES"" End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 2 BinaryOperation < MemberReference i MemberReference length MemberReference ++ i BlockStatement IfStatement BinaryOperation == BinaryOperation % MemberReference length MemberReference i Literal 0 BlockStatement ReturnStatement Literal ""NO"" End End ReturnStatement Literal ""YES""",2
71,77,CompilationUnit Import java.util  Import java.lang  Import java.util.stream.Collectors ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Integer getPositive FormalParameter ReferenceType List TypeArgument ReferenceType Integer l ReturnStatement MethodInvocation l MethodInvocation LambdaExpression MemberReference p BinaryOperation > MemberReference p Literal 0 filter MethodInvocation MethodInvocation Collectors toList collect stream,2
311,148,,1
15,22,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Integer sortArray FormalParameter ReferenceType List TypeArgument ReferenceType Integer array IfStatement BinaryOperation == MethodInvocation array size Literal 0 BlockStatement ReturnStatement MemberReference array End LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator result ClassCreator ReferenceType ArrayList MemberReference array IfStatement BinaryOperation == BinaryOperation % BinaryOperation + MethodInvocation result Literal 0 get MethodInvocation result BinaryOperation - MethodInvocation result size Literal 1 get Literal 2 Literal 1 BlockStatement StatementExpression MethodInvocation Collections MemberReference result sort BlockStatement StatementExpression MethodInvocation result MethodInvocation Collections reverseOrder sort End ReturnStatement MemberReference result,2
0,82,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType String encode FormalParameter ReferenceType String message LocalVariableDeclaration ReferenceType String VariableDeclarator vowels Literal ""aeiouAEIOU"" LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator sb ClassCreator ReferenceType StringBuilder ForStatement EnhancedForControl VariableDeclaration BasicType char VariableDeclarator c MethodInvocation message toCharArray BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator ch MemberReference c IfStatement MethodInvocation Character MemberReference ch isUpperCase BlockStatement StatementExpression Assignment MemberReference ch MethodInvocation Character MemberReference ch toLowerCase = IfStatement BinaryOperation != MethodInvocation vowels MemberReference ch indexOf Literal - 1 BlockStatement StatementExpression Assignment MemberReference ch Cast BasicType char BinaryOperation + Literal 'a' BinaryOperation % BinaryOperation + BinaryOperation - MemberReference ch Literal 'a' Literal 28 Literal 26 = End IfStatement MethodInvocation Character MemberReference ch isLowerCase BlockStatement StatementExpression Assignment MemberReference ch MethodInvocation Character MemberReference ch toUpperCase = IfStatement BinaryOperation != MethodInvocation vowels MemberReference ch indexOf Literal - 1 BlockStatement StatementExpression Assignment MemberReference ch Cast BasicType char BinaryOperation + Literal 'A' BinaryOperation % BinaryOperation + BinaryOperation - MemberReference ch Literal 'A' Literal 28 Literal 26 = End End End StatementExpression MethodInvocation sb MemberReference ch append End ReturnStatement MethodInvocation sb toString",1
104,28,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType boolean belowThreshold FormalParameter ReferenceType List TypeArgument ReferenceType Integer l FormalParameter BasicType int t ForStatement EnhancedForControl VariableDeclaration BasicType int VariableDeclarator e MemberReference l BlockStatement IfStatement BinaryOperation >= MemberReference e MemberReference t BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true,2
194,106,,2
81,79,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType int fibfib FormalParameter BasicType int n IfStatement BinaryOperation == MemberReference n Literal 0 BlockStatement ReturnStatement Literal 0 End IfStatement BinaryOperation == MemberReference n Literal 1 BlockStatement ReturnStatement Literal 0 End IfStatement BinaryOperation == MemberReference n Literal 2 BlockStatement ReturnStatement Literal 1 End ReturnStatement BinaryOperation + BinaryOperation + MethodInvocation BinaryOperation - MemberReference n Literal 1 fibfib MethodInvocation BinaryOperation - MemberReference n Literal 2 fibfib MethodInvocation BinaryOperation - MemberReference n Literal 3 fibfib,2
121,99,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType double triangleArea FormalParameter BasicType double a FormalParameter BasicType double h ReturnStatement BinaryOperation / BinaryOperation * MemberReference a MemberReference h Literal 2,1
272,87,,2
187,26,,1
268,103,,1
173,86,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Integer orderByPoints FormalParameter ReferenceType List TypeArgument ReferenceType Integer nums LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator result ClassCreator ReferenceType ArrayList MemberReference nums StatementExpression MethodInvocation result LambdaExpression InferredFormalParameter o1 InferredFormalParameter o2 LocalVariableDeclaration BasicType int VariableDeclarator sum1 Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator sum2 Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation String MethodInvocation length MemberReference o1 valueOf MemberReference ++ i BlockStatement IfStatement BinaryOperation || BinaryOperation != MemberReference i Literal 0 BinaryOperation >= MemberReference o1 Literal 0 BlockStatement StatementExpression Assignment MemberReference sum1 BinaryOperation - MethodInvocation String MethodInvocation MemberReference i charAt MemberReference o1 valueOf Literal '0' += IfStatement BinaryOperation && BinaryOperation == MemberReference i Literal 1 BinaryOperation < MemberReference o1 Literal 0 BlockStatement StatementExpression Assignment MemberReference sum1 MemberReference - sum1 = End End End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation String MethodInvocation length MemberReference o2 valueOf MemberReference ++ i BlockStatement IfStatement BinaryOperation || BinaryOperation != MemberReference i Literal 0 BinaryOperation >= MemberReference o2 Literal 0 BlockStatement StatementExpression Assignment MemberReference sum2 BinaryOperation - MethodInvocation String MethodInvocation MemberReference i charAt MemberReference o2 valueOf Literal '0' += IfStatement BinaryOperation && BinaryOperation == MemberReference i Literal 1 BinaryOperation < MemberReference o2 Literal 0 BlockStatement StatementExpression Assignment MemberReference sum2 MemberReference - sum2 = End End End ReturnStatement MethodInvocation Integer MemberReference sum1 MemberReference sum2 compare sort ReturnStatement MemberReference result,1
281,88,,1
284,155,,1
17,36,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizzBuzz(50)
    0
    >>> fizzBuzz(78)
    2
    >>> fizzBuzz(79)
    3
     */ Modifier public BasicType int fizzBuzz FormalParameter BasicType int n LocalVariableDeclaration BasicType int VariableDeclarator count Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation < MemberReference i MemberReference n MemberReference ++ i BlockStatement IfStatement BinaryOperation || BinaryOperation == BinaryOperation % MemberReference i Literal 11 Literal 0 BinaryOperation == BinaryOperation % MemberReference i Literal 13 Literal 0 BlockStatement StatementExpression Assignment MemberReference count MethodInvocation MemberReference i countSevens += End End ReturnStatement MemberReference count MethodDeclaration Modifier private BasicType int countSevens FormalParameter BasicType int num LocalVariableDeclaration BasicType int VariableDeclarator count Literal 0 WhileStatement BinaryOperation > MemberReference num Literal 0 BlockStatement IfStatement BinaryOperation == BinaryOperation % MemberReference num Literal 10 Literal 7 BlockStatement StatementExpression MemberReference ++ count End StatementExpression Assignment MemberReference num Literal 10 /= End ReturnStatement MemberReference count",2
107,59,"CompilationUnit ClassDeclaration Modifier public Solution MethodDeclaration Modifier public ReferenceType String encrypt FormalParameter ReferenceType String s LocalVariableDeclaration ReferenceType String VariableDeclarator alphabet Literal ""abcdefghijklmnopqrstuvwxyz"" LocalVariableDeclaration ReferenceType String VariableDeclarator encrypted Literal """" ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation s length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c MethodInvocation s MemberReference i charAt LocalVariableDeclaration BasicType int VariableDeclarator index MethodInvocation alphabet MemberReference c indexOf LocalVariableDeclaration BasicType char VariableDeclarator newChar MethodInvocation alphabet BinaryOperation % BinaryOperation + MemberReference index BinaryOperation * Literal 2 Literal 2 MethodInvocation alphabet length charAt StatementExpression Assignment MemberReference encrypted MemberReference newChar += End ReturnStatement MemberReference encrypted",2
178,83,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
     * Out of a list of strings, return the longest one. 
     * Return the first one in case of multiple strings of the same length. 
     * Return `Optional.empty` in case the input list is empty.
     * 
     * @param strings the list of strings to find the longest one from
     * @return the longest string wrapped in an Optional, or Optional.empty if the list is empty
     */ Modifier public ReferenceType Optional TypeArgument ReferenceType String longest FormalParameter ReferenceType List TypeArgument ReferenceType String strings IfStatement MethodInvocation strings isEmpty BlockStatement ReturnStatement MethodInvocation Optional empty End LocalVariableDeclaration ReferenceType String VariableDeclarator longestString MethodInvocation strings Literal 0 get ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator str MemberReference strings BlockStatement IfStatement BinaryOperation > MethodInvocation str length MethodInvocation longestString length BlockStatement StatementExpression Assignment MemberReference longestString MemberReference str = End End ReturnStatement MethodInvocation Optional MemberReference longestString of",1
195,112,,2
255,156,,1
11,11,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of lists, [[x1, y1], [x2, y2] ...] such that
    each list is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.

    Examples:
    getRow([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]
    getRow([], 1) == []
    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]
     */ Modifier public ReferenceType List TypeArgument ReferenceType List TypeArgument ReferenceType Integer getRow FormalParameter ReferenceType List TypeArgument ReferenceType List TypeArgument ReferenceType Integer lst FormalParameter BasicType int x LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator result ClassCreator ReferenceType ArrayList ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation lst size MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator row MethodInvocation lst MemberReference i get ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 0 BinaryOperation < MemberReference j MethodInvocation row size MemberReference ++ j BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator num MethodInvocation row MemberReference j get IfStatement BinaryOperation == MemberReference num MemberReference x BlockStatement LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator coord ClassCreator ReferenceType ArrayList StatementExpression MethodInvocation coord MemberReference i add StatementExpression MethodInvocation coord MemberReference j add StatementExpression MethodInvocation result MemberReference coord add End End End StatementExpression MethodInvocation Collections MemberReference result ClassCreator ReferenceType Comparator TypeArgument ReferenceType List TypeArgument ReferenceType Integer MethodDeclaration Modifier public Annotation Override BasicType int compare FormalParameter ReferenceType List TypeArgument ReferenceType Integer coord1 FormalParameter ReferenceType List TypeArgument ReferenceType Integer coord2 IfStatement MethodInvocation coord1 MethodInvocation MethodInvocation coord2 Literal 0 get equals Literal 0 get BlockStatement ReturnStatement MethodInvocation coord2 MethodInvocation MethodInvocation coord1 Literal 1 get compareTo Literal 1 get BlockStatement ReturnStatement MethodInvocation coord1 MethodInvocation MethodInvocation coord2 Literal 0 get compareTo Literal 0 get End sort ReturnStatement MemberReference result",1
247,105,,2
313,16,,2
292,161,,2
180,92,CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration Modifier public BasicType int doAlgebra FormalParameter ReferenceType List TypeArgument ReferenceType String operator FormalParameter ReferenceType List TypeArgument ReferenceType Integer operand,2
286,74,,2
110,54,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
    Given an integer, return a tuple that has the number of even and odd digits respectively.
    
     Example:
        evenOddCount(-12) ==> (1, 1)
        evenOddCount(123) ==> (1, 2)
     */ Modifier public ReferenceType List TypeArgument ReferenceType Integer evenOddCount FormalParameter BasicType int num LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator result ClassCreator ReferenceType ArrayList LocalVariableDeclaration BasicType int VariableDeclarator evenCount Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator oddCount Literal 0 LocalVariableDeclaration ReferenceType String VariableDeclarator numString MethodInvocation String MethodInvocation Math MemberReference num abs valueOf ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation numString length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator digit MethodInvocation Character MethodInvocation numString MemberReference i charAt getNumericValue IfStatement BinaryOperation == BinaryOperation % MemberReference digit Literal 2 Literal 0 BlockStatement StatementExpression MemberReference ++ evenCount BlockStatement StatementExpression MemberReference ++ oddCount End End StatementExpression MethodInvocation result MemberReference evenCount add StatementExpression MethodInvocation result MemberReference oddCount add ReturnStatement MemberReference result",2
261,1,,1
59,157,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic(Arrays.asList(1, 2, 4, 20))
    true
    >>> monotonic(Arrays.asList(1, 20, 4, 10))
    false
    >>> monotonic(Arrays.asList(4, 1, 0, -10))
    true
     */ Modifier public BasicType boolean monotonic FormalParameter ReferenceType List TypeArgument ReferenceType Integer l LocalVariableDeclaration BasicType boolean VariableDeclarator increasing Literal true LocalVariableDeclaration BasicType boolean VariableDeclarator decreasing Literal true ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation < MemberReference i MethodInvocation l size MemberReference ++ i BlockStatement IfStatement BinaryOperation < MethodInvocation l MemberReference i get MethodInvocation l BinaryOperation - MemberReference i Literal 1 get BlockStatement StatementExpression Assignment MemberReference increasing Literal false = End IfStatement BinaryOperation > MethodInvocation l MemberReference i get MethodInvocation l BinaryOperation - MemberReference i Literal 1 get BlockStatement StatementExpression Assignment MemberReference decreasing Literal false = End End ReturnStatement BinaryOperation || MemberReference increasing MemberReference decreasing",2
34,110,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,
    compareOne(1, 2.5) -> Optional.of(2.5)
    compareOne(1, ""2,3"") -> Optional.of(""2,3"")
    compareOne(""5,1"", ""6"") -> Optional.of(""6"")
    compareOne(""1"", 1) -> Optional.empty()
     */ Modifier public ReferenceType Optional TypeArgument ReferenceType Object compareOne FormalParameter ReferenceType Object a FormalParameter ReferenceType Object b IfStatement BinaryOperation && BinaryOperation instanceof MemberReference a ReferenceType Integer BinaryOperation instanceof MemberReference b ReferenceType Integer BlockStatement IfStatement BinaryOperation > Cast ReferenceType Integer MemberReference a Cast ReferenceType Integer MemberReference b BlockStatement ReturnStatement MethodInvocation Optional MemberReference a of IfStatement BinaryOperation > Cast ReferenceType Integer MemberReference b Cast ReferenceType Integer MemberReference a BlockStatement ReturnStatement MethodInvocation Optional MemberReference b of End End IfStatement BinaryOperation && BinaryOperation instanceof MemberReference a ReferenceType Float BinaryOperation instanceof MemberReference b ReferenceType Float BlockStatement IfStatement BinaryOperation > Cast ReferenceType Float MemberReference a Cast ReferenceType Float MemberReference b BlockStatement ReturnStatement MethodInvocation Optional MemberReference a of IfStatement BinaryOperation > Cast ReferenceType Float MemberReference b Cast ReferenceType Float MemberReference a BlockStatement ReturnStatement MethodInvocation Optional MemberReference b of End End IfStatement BinaryOperation && BinaryOperation instanceof MemberReference a ReferenceType String BinaryOperation instanceof MemberReference b ReferenceType String BlockStatement TryStatement LocalVariableDeclaration ReferenceType Float VariableDeclarator floatA MethodInvocation Float Cast ReferenceType String MemberReference a parseFloat LocalVariableDeclaration ReferenceType Float VariableDeclarator floatB MethodInvocation Float Cast ReferenceType String MemberReference b parseFloat IfStatement BinaryOperation > MemberReference floatA MemberReference floatB BlockStatement ReturnStatement MethodInvocation Optional MemberReference a of IfStatement BinaryOperation > MemberReference floatB MemberReference floatA BlockStatement ReturnStatement MethodInvocation Optional MemberReference b of End End CatchClause CatchClauseParameter NumberFormatException e ReturnStatement MethodInvocation Optional empty End End End ReturnStatement MethodInvocation Optional empty",2
324,161,,1
263,32,,2
319,137,,2
118,127,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Double findClosestElements FormalParameter ReferenceType List TypeArgument ReferenceType Double numbers LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Double VariableDeclarator closest_pair ClassCreator ReferenceType ArrayList StatementExpression MethodInvocation closest_pair MethodInvocation numbers Literal 0 get add StatementExpression MethodInvocation closest_pair MethodInvocation numbers Literal 1 get add LocalVariableDeclaration BasicType double VariableDeclarator distance MethodInvocation Math BinaryOperation - MethodInvocation numbers Literal 1 get MethodInvocation numbers Literal 0 get abs ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation numbers size MemberReference ++ i BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j BinaryOperation + MemberReference i Literal 1 BinaryOperation < MemberReference j MethodInvocation numbers size MemberReference ++ j BlockStatement IfStatement BinaryOperation < MethodInvocation Math BinaryOperation - MethodInvocation numbers MemberReference i get MethodInvocation numbers MemberReference j get abs MemberReference distance BlockStatement StatementExpression MethodInvocation closest_pair clear StatementExpression MethodInvocation closest_pair MethodInvocation numbers MemberReference i get add StatementExpression MethodInvocation closest_pair MethodInvocation numbers MemberReference j get add StatementExpression Assignment MemberReference distance MethodInvocation Math BinaryOperation - MethodInvocation numbers MemberReference i get MethodInvocation numbers MemberReference j get abs = End End End StatementExpression MethodInvocation Collections MemberReference closest_pair sort ReturnStatement MemberReference closest_pair,2
7,108,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
    Concatenate list of strings into a single string
    >>> concatenate(List.of())
    """"
    >>> concatenate(Arrays.asList(""a"", ""b"", ""c""))
    ""abc""
     */ Modifier public ReferenceType String concatenate FormalParameter ReferenceType List TypeArgument ReferenceType String strings LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator sb ClassCreator ReferenceType StringBuilder ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator str MemberReference strings BlockStatement StatementExpression MethodInvocation sb MemberReference str append End ReturnStatement MethodInvocation sb toString",1
235,10,,2
257,102,,2
308,138,,1
231,101,,2
70,6,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> intToMiniRoman(19) == ""xix""
    >>> intToMiniRoman(152) == ""clii""
    >>> intToMiniRoman(426) == ""cdxxvi""
     */ Modifier public ReferenceType String intToMiniRoman FormalParameter BasicType int number",2
274,100,,1
147,147,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType double truncateNumber FormalParameter BasicType double number LocalVariableDeclaration BasicType int VariableDeclarator integerPart Cast BasicType int MemberReference number LocalVariableDeclaration BasicType double VariableDeclarator decimalPart BinaryOperation - MemberReference number MemberReference integerPart ReturnStatement MemberReference decimalPart,2
69,3,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType long specialFactorial FormalParameter BasicType int n LocalVariableDeclaration BasicType long VariableDeclarator fact_i Literal 1 VariableDeclarator special_fact Literal 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation <= MemberReference i MemberReference n MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference fact_i MemberReference i *= StatementExpression Assignment MemberReference special_fact MemberReference fact_i *= End ReturnStatement MemberReference special_fact,2
40,4,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType String wordStrings FormalParameter ReferenceType String s LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator words ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType String VariableDeclarator splitWords MethodInvocation s Literal ""[,\\s]+"" split ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator word MemberReference splitWords BlockStatement StatementExpression MethodInvocation words MemberReference word add End ReturnStatement MemberReference words",1
171,121,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
    Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    */ Modifier public ReferenceType String circularShift FormalParameter BasicType int x FormalParameter BasicType int shift LocalVariableDeclaration ReferenceType String VariableDeclarator strNum MethodInvocation String MemberReference x valueOf LocalVariableDeclaration BasicType int VariableDeclarator numDigits MethodInvocation strNum length IfStatement BinaryOperation > MemberReference shift MemberReference numDigits BlockStatement ReturnStatement ClassCreator MethodInvocation reverse MethodInvocation toString ReferenceType StringBuilder MemberReference strNum End LocalVariableDeclaration ReferenceType String VariableDeclarator shiftedNum BinaryOperation + MethodInvocation strNum BinaryOperation - MemberReference numDigits MemberReference shift substring MethodInvocation strNum Literal 0 BinaryOperation - MemberReference numDigits MemberReference shift substring ReturnStatement MemberReference shiftedNum",1
53,95,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Integer generateIntegers FormalParameter BasicType int a FormalParameter BasicType int b LocalVariableDeclaration BasicType int VariableDeclarator lower MethodInvocation Math Literal 2 MethodInvocation Math MemberReference a MemberReference b min max LocalVariableDeclaration BasicType int VariableDeclarator upper MethodInvocation Math Literal 8 MethodInvocation Math MemberReference a MemberReference b max min LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator result ClassCreator ReferenceType ArrayList ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference lower BinaryOperation <= MemberReference i MemberReference upper Assignment MemberReference i Literal 2 += BlockStatement StatementExpression MethodInvocation result MemberReference i add End ReturnStatement MemberReference result,2
126,40,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.
    
    Example 1:
    
        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
    
    Example 2:
    
        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
    
    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
     */ Modifier public ReferenceType List TypeArgument ReferenceType Integer evenOddPalindrome FormalParameter BasicType int n LocalVariableDeclaration BasicType int VariableDeclarator evenCount Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator oddCount Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation <= MemberReference i MemberReference n MemberReference ++ i BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator numStr MethodInvocation String MemberReference i valueOf IfStatement MethodInvocation MemberReference numStr isPalindrome BlockStatement IfStatement BinaryOperation == BinaryOperation % MemberReference i Literal 2 Literal 0 BlockStatement StatementExpression MemberReference ++ evenCount BlockStatement StatementExpression MemberReference ++ oddCount End End End LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator result ClassCreator ReferenceType ArrayList StatementExpression MethodInvocation result MemberReference evenCount add StatementExpression MethodInvocation result MemberReference oddCount add ReturnStatement MemberReference result MethodDeclaration /**
    Checks if a given string is a palindrome.
    */ Modifier private BasicType boolean isPalindrome FormalParameter ReferenceType String str LocalVariableDeclaration BasicType int VariableDeclarator left Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator right BinaryOperation - MethodInvocation str length Literal 1 WhileStatement BinaryOperation < MemberReference left MemberReference right BlockStatement IfStatement BinaryOperation != MethodInvocation str MemberReference left charAt MethodInvocation str MemberReference right charAt BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ left StatementExpression MemberReference -- right End ReturnStatement Literal true",2
92,92,"CompilationUnit Import java.util.List Import java.util.ArrayList Import java.util.Arrays ClassDeclaration Solution MethodDeclaration /**
     I think we all remember that feeling when the result of some long-awaited
     event is finally known. The feelings and thoughts you have at that moment are
     definitely worth noting down and comparing.
     Your task is to determine if a person correctly guessed the results of a number of matches.
     You are given two arrays of scores and guesses of equal length, where each index shows a match.
     Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
     the value is 0, and if not, the value is the absolute difference between the guess and the score.

     example:

     compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]
     compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]
     */ Modifier public ReferenceType List TypeArgument ReferenceType Integer compare FormalParameter ReferenceType List TypeArgument ReferenceType Integer game FormalParameter ReferenceType List TypeArgument ReferenceType Integer guess LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator differences ClassCreator ReferenceType ArrayList ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation game size MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator score MethodInvocation game MemberReference i get LocalVariableDeclaration BasicType int VariableDeclarator guessedScore MethodInvocation guess MemberReference i get LocalVariableDeclaration BasicType int VariableDeclarator difference MethodInvocation Math BinaryOperation - MemberReference score MemberReference guessedScore abs StatementExpression MethodInvocation differences MemberReference difference add End ReturnStatement MemberReference differences",1
303,139,,2
174,109,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    isHappy(a) => false
    isHappy(aa) => false
    isHappy(abcd) => true
    isHappy(aabb) => false
    isHappy(adb) => true
    isHappy(xyy) => false
     */ Modifier public BasicType boolean isHappy FormalParameter ReferenceType String s IfStatement BinaryOperation < MethodInvocation s length Literal 3 BlockStatement ReturnStatement Literal false End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i BinaryOperation - MethodInvocation s length Literal 2 MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c1 MethodInvocation s MemberReference i charAt LocalVariableDeclaration BasicType char VariableDeclarator c2 MethodInvocation s BinaryOperation + MemberReference i Literal 1 charAt LocalVariableDeclaration BasicType char VariableDeclarator c3 MethodInvocation s BinaryOperation + MemberReference i Literal 2 charAt IfStatement BinaryOperation || BinaryOperation || BinaryOperation == MemberReference c1 MemberReference c2 BinaryOperation == MemberReference c1 MemberReference c3 BinaryOperation == MemberReference c2 MemberReference c3 BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true",1
287,35,,2
145,163,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
     * In this task, you will be given a string that represents a number of apples and oranges
     * that are distributed in a basket of fruit this basket contains
     * apples, oranges, and mango fruits. Given the string that represents the total number of
     * the oranges and apples and an integer that represent the total number of the fruits
     * in the basket return the number of the mango fruits in the basket.
     * for example:
     * fruitDistribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
     * fruitDistribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
     * fruitDistribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
     * fruitDistribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
     */ Modifier public BasicType int fruitDistribution FormalParameter ReferenceType String s FormalParameter BasicType int n LocalVariableDeclaration BasicType int VariableDeclarator apples MethodInvocation MemberReference s getNumberOfApples LocalVariableDeclaration BasicType int VariableDeclarator oranges MethodInvocation MemberReference s getNumberOfOranges LocalVariableDeclaration BasicType int VariableDeclarator mangoes BinaryOperation - BinaryOperation - MemberReference n MemberReference apples MemberReference oranges ReturnStatement MemberReference mangoes MethodDeclaration /**
     * Helper method to parse the input string and get the number of apples.
     */ Modifier private BasicType int getNumberOfApples FormalParameter ReferenceType String s LocalVariableDeclaration ReferenceType String VariableDeclarator tokens MethodInvocation s Literal ""apples|oranges"" split LocalVariableDeclaration ReferenceType String VariableDeclarator applesToken MemberReference ArraySelector Literal 0 MethodInvocation trim tokens LocalVariableDeclaration BasicType int VariableDeclarator apples MethodInvocation Integer MemberReference applesToken parseInt ReturnStatement MemberReference apples MethodDeclaration /**
     * Helper method to parse the input string and get the number of oranges.
     */ Modifier private BasicType int getNumberOfOranges FormalParameter ReferenceType String s LocalVariableDeclaration ReferenceType String VariableDeclarator tokens MethodInvocation s Literal ""apples|oranges"" split LocalVariableDeclaration ReferenceType String VariableDeclarator orangesToken MemberReference ArraySelector Literal 1 MethodInvocation trim tokens LocalVariableDeclaration BasicType int VariableDeclarator oranges MethodInvocation Integer MemberReference orangesToken parseInt ReturnStatement MemberReference oranges",1
169,0,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
    You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
     */ Modifier public BasicType int skjkasdkd FormalParameter ReferenceType List TypeArgument ReferenceType Integer lst",2
294,63,,2
191,41,,2
271,146,,1
80,120,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Optional TypeArgument ReferenceType Integer largestSmallestIntegers FormalParameter ReferenceType List TypeArgument ReferenceType Integer lst LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator smallest MethodInvocation lst MethodInvocation LambdaExpression MemberReference p BinaryOperation < MemberReference p Literal 0 filter MethodInvocation toList stream LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator largest MethodInvocation lst MethodInvocation LambdaExpression MemberReference p BinaryOperation > MemberReference p Literal 0 filter MethodInvocation toList stream LocalVariableDeclaration ReferenceType Optional TypeArgument ReferenceType Integer VariableDeclarator s MethodInvocation Optional empty IfStatement BinaryOperation > MethodInvocation smallest size Literal 0 BlockStatement StatementExpression Assignment MemberReference s MethodInvocation Optional MethodInvocation Collections MemberReference smallest max of = End LocalVariableDeclaration ReferenceType Optional TypeArgument ReferenceType Integer VariableDeclarator l MethodInvocation Optional empty IfStatement BinaryOperation > MethodInvocation largest size Literal 0 BlockStatement StatementExpression Assignment MemberReference l MethodInvocation Optional MethodInvocation Collections MemberReference largest min of = End ReturnStatement MethodInvocation Arrays MemberReference s MemberReference l asList,2
117,57,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType String allPrefixes FormalParameter ReferenceType String string LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator result ClassCreator ReferenceType ArrayList ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation <= MemberReference i MethodInvocation string length MemberReference ++ i BlockStatement StatementExpression MethodInvocation result MethodInvocation string Literal 0 MemberReference i substring add End ReturnStatement MemberReference result,2
163,58,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Integer sumProduct FormalParameter ReferenceType List TypeArgument ReferenceType Integer numbers LocalVariableDeclaration BasicType int VariableDeclarator sum Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator product Literal 1 ForStatement EnhancedForControl VariableDeclaration BasicType int VariableDeclarator n MemberReference numbers BlockStatement StatementExpression Assignment MemberReference sum MemberReference n += StatementExpression Assignment MemberReference product MemberReference n *= End ReturnStatement MethodInvocation Arrays MemberReference sum MemberReference product asList,1
176,17,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType double triangleArea FormalParameter BasicType double a FormalParameter BasicType double b FormalParameter BasicType double c IfStatement BinaryOperation && BinaryOperation && BinaryOperation > BinaryOperation + MemberReference a MemberReference b MemberReference c BinaryOperation > BinaryOperation + MemberReference a MemberReference c MemberReference b BinaryOperation > BinaryOperation + MemberReference b MemberReference c MemberReference a BlockStatement LocalVariableDeclaration BasicType double VariableDeclarator s BinaryOperation / BinaryOperation + BinaryOperation + MemberReference a MemberReference b MemberReference c Literal 2 LocalVariableDeclaration BasicType double VariableDeclarator area MethodInvocation Math BinaryOperation * BinaryOperation * BinaryOperation * MemberReference s BinaryOperation - MemberReference s MemberReference a BinaryOperation - MemberReference s MemberReference b BinaryOperation - MemberReference s MemberReference c sqrt StatementExpression Assignment MemberReference area BinaryOperation / MethodInvocation Math BinaryOperation * MemberReference area Literal 100.0 round Literal 100.0 = ReturnStatement MemberReference area BlockStatement ReturnStatement Literal - 1 End,2
141,60,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
     * Write a function which sorts the given list of integers
     * in ascending order according to the sum of their digits.
     * Note: if there are several items with similar sum of their digits,
     * order them based on their index in original list.
     *
     * @param nums the list of integers to be sorted
     * @return the sorted list of integers
     */ Modifier public ReferenceType List TypeArgument ReferenceType Integer orderByPoints FormalParameter ReferenceType List TypeArgument ReferenceType Integer nums StatementExpression MethodInvocation Collections MemberReference nums ClassCreator ReferenceType Comparator TypeArgument ReferenceType Integer MethodDeclaration Modifier public Annotation Override BasicType int compare FormalParameter ReferenceType Integer num1 FormalParameter ReferenceType Integer num2 LocalVariableDeclaration BasicType int VariableDeclarator sum1 MethodInvocation MemberReference num1 computeDigitSum LocalVariableDeclaration BasicType int VariableDeclarator sum2 MethodInvocation MemberReference num2 computeDigitSum IfStatement BinaryOperation == MemberReference sum1 MemberReference sum2 BlockStatement ReturnStatement BinaryOperation - MethodInvocation nums MemberReference num1 indexOf MethodInvocation nums MemberReference num2 indexOf End ReturnStatement BinaryOperation - MemberReference sum1 MemberReference sum2 sort ReturnStatement MemberReference nums MethodDeclaration Modifier private BasicType int computeDigitSum FormalParameter BasicType int num LocalVariableDeclaration BasicType int VariableDeclarator sum Literal 0 StatementExpression Assignment MemberReference num MethodInvocation Math MemberReference num abs = WhileStatement BinaryOperation > MemberReference num Literal 0 BlockStatement StatementExpression Assignment MemberReference sum BinaryOperation % MemberReference num Literal 10 += StatementExpression Assignment MemberReference num Literal 10 /= End ReturnStatement MemberReference sum",2
29,85,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType String separateParenGroups FormalParameter ReferenceType String paren_string LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator result ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator current_string ClassCreator ReferenceType StringBuilder LocalVariableDeclaration BasicType int VariableDeclarator current_depth Literal 0 ForStatement EnhancedForControl VariableDeclaration BasicType char VariableDeclarator c MethodInvocation paren_string toCharArray BlockStatement IfStatement BinaryOperation == MemberReference c Literal '(' BlockStatement StatementExpression Assignment MemberReference current_depth Literal 1 += StatementExpression MethodInvocation current_string MemberReference c append IfStatement BinaryOperation == MemberReference c Literal ')' BlockStatement StatementExpression Assignment MemberReference current_depth Literal 1 -= StatementExpression MethodInvocation current_string MemberReference c append IfStatement BinaryOperation == MemberReference current_depth Literal 0 BlockStatement StatementExpression MethodInvocation result MethodInvocation current_string toString add StatementExpression MethodInvocation current_string Literal 0 setLength End End End End ReturnStatement MemberReference result,1
200,88,,2
14,116,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType String antiShuffle FormalParameter ReferenceType String s LocalVariableDeclaration ReferenceType String VariableDeclarator strings MethodInvocation s Literal "" "" split LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator result ClassCreator ReferenceType ArrayList ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator string MemberReference strings BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator chars MethodInvocation string toCharArray StatementExpression MethodInvocation Arrays MemberReference chars sort StatementExpression MethodInvocation result MethodInvocation String MemberReference chars copyValueOf add End ReturnStatement MethodInvocation String Literal "" "" MemberReference result join",2
260,127,,1
297,96,,2
277,98,,2
157,139,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Integer f FormalParameter BasicType int n LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator ret ClassCreator ReferenceType ArrayList ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation <= MemberReference i MemberReference n MemberReference ++ i BlockStatement IfStatement BinaryOperation == BinaryOperation % MemberReference i Literal 2 Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator x Literal 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 1 BinaryOperation <= MemberReference j MemberReference i MemberReference ++ j BlockStatement StatementExpression Assignment MemberReference x MemberReference j *= End StatementExpression MethodInvocation ret MemberReference x add BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator x Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 1 BinaryOperation <= MemberReference j MemberReference i MemberReference ++ j BlockStatement StatementExpression Assignment MemberReference x MemberReference j += End StatementExpression MethodInvocation ret MemberReference x add End End ReturnStatement MemberReference ret,1
44,156,CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration Modifier public BasicType boolean belowZero FormalParameter ReferenceType List TypeArgument ReferenceType Integer operations LocalVariableDeclaration BasicType int VariableDeclarator balance Literal 0 ForStatement EnhancedForControl VariableDeclaration BasicType int VariableDeclarator operation MemberReference operations BlockStatement StatementExpression Assignment MemberReference balance MemberReference operation += IfStatement BinaryOperation < MemberReference balance Literal 0 BlockStatement ReturnStatement Literal true End End ReturnStatement Literal false,2
102,30,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Integer unique FormalParameter ReferenceType List TypeArgument ReferenceType Integer l LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator result ClassCreator ReferenceType ArrayList ClassCreator ReferenceType HashSet MemberReference l StatementExpression MethodInvocation Collections MemberReference result sort ReturnStatement MemberReference result,1
170,110,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType int countDistinctCharacters FormalParameter ReferenceType String string LocalVariableDeclaration ReferenceType Set TypeArgument ReferenceType Character VariableDeclarator set ClassCreator ReferenceType HashSet ForStatement EnhancedForControl VariableDeclaration BasicType char VariableDeclarator c MethodInvocation string MethodInvocation toCharArray toLowerCase BlockStatement StatementExpression MethodInvocation set MemberReference c add End ReturnStatement MethodInvocation set size,1
202,26,,2
316,114,,1
265,143,,2
206,46,,1
246,129,,1
280,103,,2
100,100,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    isEqualToSumEven(4) == false
    isEqualToSumEven(6) == false
    isEqualToSumEven(8) == true
     */ Modifier public BasicType boolean isEqualToSumEven FormalParameter BasicType int n IfStatement BinaryOperation < MemberReference n Literal 8 BlockStatement ReturnStatement Literal false End IfStatement BinaryOperation != BinaryOperation % MemberReference n Literal 2 Literal 0 BlockStatement ReturnStatement Literal false End LocalVariableDeclaration BasicType int VariableDeclarator count Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 2 BinaryOperation <= MemberReference i BinaryOperation / MemberReference n Literal 2 Assignment MemberReference i Literal 2 += BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j Literal 2 BinaryOperation <= MemberReference j BinaryOperation / MemberReference n Literal 2 Assignment MemberReference j Literal 2 += BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator k Literal 2 BinaryOperation <= MemberReference k BinaryOperation / MemberReference n Literal 2 Assignment MemberReference k Literal 2 += BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator l Literal 2 BinaryOperation <= MemberReference l BinaryOperation / MemberReference n Literal 2 Assignment MemberReference l Literal 2 += BlockStatement IfStatement BinaryOperation == BinaryOperation + BinaryOperation + BinaryOperation + MemberReference i MemberReference j MemberReference k MemberReference l MemberReference n BlockStatement StatementExpression MemberReference ++ count End End End End End ReturnStatement BinaryOperation > MemberReference count Literal 0",2
1,136,CompilationUnit Import java.util  Import java.lang  Import java.util.stream.Collectors ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Integer incrList FormalParameter ReferenceType List TypeArgument ReferenceType Integer l ReturnStatement MethodInvocation l MethodInvocation LambdaExpression MemberReference p BinaryOperation + MemberReference p Literal 1 map MethodInvocation MethodInvocation Collectors toList collect stream,1
196,63,,1
12,9,CompilationUnit Import java.util  Import java.lang  Import java.util.stream.Collectors ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Integer removeDuplicates FormalParameter ReferenceType List TypeArgument ReferenceType Integer numbers LocalVariableDeclaration ReferenceType Map TypeArgument ReferenceType Integer TypeArgument ReferenceType Integer VariableDeclarator c ClassCreator ReferenceType HashMap ForStatement EnhancedForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference numbers BlockStatement StatementExpression MethodInvocation c MemberReference i BinaryOperation + MethodInvocation c MemberReference i Literal 0 getOrDefault Literal 1 put End ReturnStatement MethodInvocation numbers MethodInvocation LambdaExpression MemberReference i BinaryOperation == MethodInvocation c MemberReference i get Literal 1 filter MethodInvocation MethodInvocation Collectors toList collect stream,1
239,111,,1
56,135,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
     */ Modifier public BasicType int carRaceCollision FormalParameter BasicType int n LocalVariableDeclaration BasicType int VariableDeclarator collisions Literal 0 ReturnStatement MemberReference collisions",1
115,128,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Integer parseNestedParens FormalParameter ReferenceType String paren_string LocalVariableDeclaration ReferenceType String VariableDeclarator groups MethodInvocation paren_string Literal "" "" split LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator result ClassCreator ReferenceType ArrayList MethodInvocation List of ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator group MemberReference groups BlockStatement IfStatement BinaryOperation > MethodInvocation group length Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator depth Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator max_depth Literal 0 ForStatement EnhancedForControl VariableDeclaration BasicType char VariableDeclarator c MethodInvocation group toCharArray BlockStatement IfStatement BinaryOperation == MemberReference c Literal '(' BlockStatement StatementExpression Assignment MemberReference depth Literal 1 += StatementExpression Assignment MemberReference max_depth MethodInvocation Math MemberReference depth MemberReference max_depth max = BlockStatement StatementExpression Assignment MemberReference depth Literal 1 -= End End StatementExpression MethodInvocation result MemberReference max_depth add End End ReturnStatement MemberReference result",1
132,150,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType boolean monotonic FormalParameter ReferenceType List TypeArgument ReferenceType Integer l LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator l1 ClassCreator ReferenceType ArrayList MemberReference l VariableDeclarator l2 ClassCreator ReferenceType ArrayList MemberReference l StatementExpression MethodInvocation Collections MemberReference l1 sort StatementExpression MethodInvocation l2 MethodInvocation Collections reverseOrder sort ReturnStatement BinaryOperation || MethodInvocation l MemberReference l1 equals MethodInvocation l MemberReference l2 equals,2
220,104,,1
76,56,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType int fib4 FormalParameter BasicType int n LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator results ClassCreator ReferenceType ArrayList StatementExpression MethodInvocation results Literal 0 add StatementExpression MethodInvocation results Literal 0 add StatementExpression MethodInvocation results Literal 2 add StatementExpression MethodInvocation results Literal 0 add IfStatement BinaryOperation < MemberReference n Literal 4 BlockStatement ReturnStatement MethodInvocation results MemberReference n get End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 4 BinaryOperation <= MemberReference i MemberReference n MemberReference ++ i BlockStatement StatementExpression MethodInvocation results BinaryOperation + BinaryOperation + BinaryOperation + MethodInvocation results Literal 0 get MethodInvocation results Literal 1 get MethodInvocation results Literal 2 get MethodInvocation results Literal 3 get add StatementExpression MethodInvocation results Literal 0 remove End ReturnStatement MethodInvocation results Literal 3 get,1
224,4,,2
243,56,,2
229,21,,2
97,152,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType Optional TypeArgument ReferenceType Object compareOne FormalParameter ReferenceType Object a FormalParameter ReferenceType Object b LocalVariableDeclaration BasicType double VariableDeclarator temp_a Literal 0 VariableDeclarator temp_b Literal 0 IfStatement BinaryOperation instanceof MemberReference a ReferenceType Integer BlockStatement StatementExpression Assignment MemberReference temp_a BinaryOperation * Cast ReferenceType Integer MemberReference a Literal 1.0 = IfStatement BinaryOperation instanceof MemberReference a ReferenceType Double BlockStatement StatementExpression Assignment MemberReference temp_a Cast BasicType double MemberReference a = IfStatement BinaryOperation instanceof MemberReference a ReferenceType String BlockStatement StatementExpression Assignment MemberReference temp_a MethodInvocation Double Cast ReferenceType String MemberReference a parseDouble = End End End IfStatement BinaryOperation instanceof MemberReference b ReferenceType Integer BlockStatement StatementExpression Assignment MemberReference temp_b BinaryOperation * Cast ReferenceType Integer MemberReference b Literal 1.0 = IfStatement BinaryOperation instanceof MemberReference b ReferenceType Double BlockStatement StatementExpression Assignment MemberReference temp_b Cast BasicType double MemberReference b = IfStatement BinaryOperation instanceof MemberReference b ReferenceType String BlockStatement StatementExpression Assignment MemberReference temp_b MethodInvocation Double Cast ReferenceType String MemberReference b parseDouble = End End End IfStatement BinaryOperation == MemberReference temp_a MemberReference temp_b BlockStatement ReturnStatement MethodInvocation Optional empty IfStatement BinaryOperation > MemberReference temp_a MemberReference temp_b BlockStatement ReturnStatement MethodInvocation Optional MemberReference a of BlockStatement ReturnStatement MethodInvocation Optional MemberReference b of End End,2
270,134,,2
242,13,,2
65,129,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
     * In this Kata, you have to sort an array of non-negative integers according to
     * number of ones in their binary representation in ascending order.
     * For similar number of ones, sort based on decimal value.
     *
     * @param arr the list of integers to be sorted
     * @return the sorted list of integers
     */ Modifier public ReferenceType List TypeArgument ReferenceType Integer sortArray FormalParameter ReferenceType List TypeArgument ReferenceType Integer arr",2
290,69,,2
305,137,,1
190,116,,1
3,153,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    Write a function that takes an integer a and returns true
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> true
    iscube(2) ==> false
    iscube(-1) ==> true
    iscube(64) ==> true
    iscube(0) ==> true
    iscube(180) ==> false
     */ Modifier public BasicType boolean iscube FormalParameter BasicType int a LocalVariableDeclaration BasicType double VariableDeclarator cubeRoot MethodInvocation Math MemberReference a cbrt LocalVariableDeclaration BasicType int VariableDeclarator cubeRootInt Cast BasicType int MemberReference cubeRoot ReturnStatement BinaryOperation == BinaryOperation * BinaryOperation * MemberReference cubeRootInt MemberReference cubeRootInt MemberReference cubeRootInt MemberReference a",2
161,138,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType int fib FormalParameter BasicType int n IfStatement BinaryOperation == MemberReference n Literal 0 BlockStatement ReturnStatement Literal 0 End IfStatement BinaryOperation == MemberReference n Literal 1 BlockStatement ReturnStatement Literal 1 End ReturnStatement BinaryOperation + MethodInvocation BinaryOperation - MemberReference n Literal 1 fib MethodInvocation BinaryOperation - MemberReference n Literal 2 fib,2
245,75,,2
252,34,,1
116,141,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
    pairsSumToZero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    @param l the list of integers
    @return true if there are two distinct elements that sum to zero, false otherwise
     */ Modifier public BasicType boolean pairsSumToZero FormalParameter ReferenceType List TypeArgument ReferenceType Integer l LocalVariableDeclaration ReferenceType Set TypeArgument ReferenceType Integer VariableDeclarator set ClassCreator ReferenceType HashSet ForStatement EnhancedForControl VariableDeclaration BasicType int VariableDeclarator num MemberReference l BlockStatement IfStatement MethodInvocation set MemberReference - num contains BlockStatement ReturnStatement Literal true End StatementExpression MethodInvocation set MemberReference num add End ReturnStatement Literal false",1
99,52,"CompilationUnit Import java.util.List ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType String StrongestExtension FormalParameter ReferenceType String class_name FormalParameter ReferenceType List TypeArgument ReferenceType String extensions LocalVariableDeclaration ReferenceType String VariableDeclarator strongestExtension Literal """" LocalVariableDeclaration BasicType int VariableDeclarator maxStrength MemberReference Integer MIN_VALUE ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator extension MemberReference extensions BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator capCount Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator smallCount Literal 0 ForStatement EnhancedForControl VariableDeclaration BasicType char VariableDeclarator c MethodInvocation extension toCharArray BlockStatement IfStatement MethodInvocation Character MemberReference c isUpperCase BlockStatement StatementExpression MemberReference ++ capCount IfStatement MethodInvocation Character MemberReference c isLowerCase BlockStatement StatementExpression MemberReference ++ smallCount End End End LocalVariableDeclaration BasicType int VariableDeclarator strength BinaryOperation - MemberReference capCount MemberReference smallCount IfStatement BinaryOperation > MemberReference strength MemberReference maxStrength BlockStatement StatementExpression Assignment MemberReference maxStrength MemberReference strength = StatementExpression Assignment MemberReference strongestExtension MemberReference extension = End End ReturnStatement BinaryOperation + BinaryOperation + MemberReference class_name Literal ""."" MemberReference strongestExtension",1
113,160,CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration Modifier public BasicType int sumSquares FormalParameter ReferenceType List TypeArgument ReferenceType Double lst LocalVariableDeclaration BasicType int VariableDeclarator sum Literal 0 ForStatement EnhancedForControl VariableDeclaration ReferenceType Double VariableDeclarator num MemberReference lst BlockStatement StatementExpression Assignment MemberReference sum BinaryOperation * MethodInvocation Math MemberReference num ceil MethodInvocation Math MemberReference num ceil += End ReturnStatement MemberReference sum,1
269,158,,2
300,89,,2
94,130,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    Return a greatest common divisor of two integers a and b
    >>> greatestCommonDivisor(3, 5)
    1
    >>> greatestCommonDivisor(25, 15)
    5
     */ Modifier public BasicType int greatestCommonDivisor FormalParameter BasicType int a FormalParameter BasicType int b IfStatement BinaryOperation == MemberReference a Literal 0 BlockStatement ReturnStatement MemberReference b End IfStatement BinaryOperation == MemberReference b Literal 0 BlockStatement ReturnStatement MemberReference a End WhileStatement BinaryOperation != MemberReference b Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator temp MemberReference b StatementExpression Assignment MemberReference b BinaryOperation % MemberReference a MemberReference b = StatementExpression Assignment MemberReference a MemberReference temp = End ReturnStatement MemberReference a",1
52,75,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
     * Return maximum element in the list.
     *
     * @param l the list of integers
     * @return the maximum element
     */ Modifier public BasicType int maxElement FormalParameter ReferenceType List TypeArgument ReferenceType Integer l ReturnStatement MethodInvocation Collections MemberReference l max",1
283,155,,2
35,47,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return ""YES"",
    otherwise, return ""NO"".
    If the two intervals don't intersect, return ""NO"".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> ""NO""
    intersection((-1, 1), (0, 4)) ==> ""NO""
    intersection((-3, -1), (-5, 5)) ==> ""YES""
     */ Modifier public ReferenceType String intersection FormalParameter ReferenceType List TypeArgument ReferenceType Integer interval1 FormalParameter ReferenceType List TypeArgument ReferenceType Integer interval2 LocalVariableDeclaration BasicType int VariableDeclarator start1 MethodInvocation interval1 Literal 0 get LocalVariableDeclaration BasicType int VariableDeclarator end1 MethodInvocation interval1 Literal 1 get LocalVariableDeclaration BasicType int VariableDeclarator start2 MethodInvocation interval2 Literal 0 get LocalVariableDeclaration BasicType int VariableDeclarator end2 MethodInvocation interval2 Literal 1 get IfStatement BinaryOperation || BinaryOperation < MemberReference end1 MemberReference start2 BinaryOperation < MemberReference end2 MemberReference start1 BlockStatement ReturnStatement Literal ""NO"" End LocalVariableDeclaration BasicType int VariableDeclarator intersection_length BinaryOperation + BinaryOperation - MethodInvocation Math MemberReference end1 MemberReference end2 min MethodInvocation Math MemberReference start1 MemberReference start2 max Literal 1 IfStatement MethodInvocation MemberReference intersection_length isPrime BlockStatement ReturnStatement Literal ""YES"" BlockStatement ReturnStatement Literal ""NO"" End MethodDeclaration /**
    Utility function to check if a number is prime.
    */ Modifier private BasicType boolean isPrime FormalParameter BasicType int n IfStatement BinaryOperation <= MemberReference n Literal 1 BlockStatement ReturnStatement Literal false End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 2 BinaryOperation <= MemberReference i MethodInvocation Math MemberReference n sqrt MemberReference ++ i BlockStatement IfStatement BinaryOperation == BinaryOperation % MemberReference n MemberReference i Literal 0 BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true",1
228,140,,2
275,133,,2
293,128,,2
58,6,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
    Given an array arr of integers and a positive integer k, return a sorted list
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
     */ Modifier public ReferenceType List TypeArgument ReferenceType Integer maximum FormalParameter ReferenceType List TypeArgument ReferenceType Integer arr FormalParameter BasicType int k StatementExpression MethodInvocation Collections MemberReference arr MethodInvocation Collections reverseOrder sort ReturnStatement MethodInvocation arr Literal 0 MemberReference k subList",1
304,43,,2
164,14,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType String matchParens FormalParameter ReferenceType List TypeArgument ReferenceType String lst LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator S MethodInvocation Arrays BinaryOperation + MethodInvocation lst Literal 0 get MethodInvocation lst Literal 1 get BinaryOperation + MethodInvocation lst Literal 1 get MethodInvocation lst Literal 0 get asList ForStatement EnhancedForControl VariableDeclaration ReferenceType String VariableDeclarator s MemberReference S BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator val Literal 0 ForStatement EnhancedForControl VariableDeclaration BasicType char VariableDeclarator i MethodInvocation s toCharArray BlockStatement IfStatement BinaryOperation == MemberReference i Literal '(' BlockStatement StatementExpression Assignment MemberReference val Literal 1 += BlockStatement StatementExpression Assignment MemberReference val Literal 1 -= End IfStatement BinaryOperation < MemberReference val Literal 0 BlockStatement BreakStatement End End IfStatement BinaryOperation == MemberReference val Literal 0 BlockStatement ReturnStatement Literal ""Yes"" End End ReturnStatement Literal ""No""",1
23,20,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]

      If the array is empty, return an empty array:
      arr = []
      return []

      If the array has any strange number ignore it:
      arr = [1, -1 , 55]
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = [""One""]
     */ Modifier public ReferenceType List TypeArgument ReferenceType String byLength FormalParameter ReferenceType List TypeArgument ReferenceType Integer arr LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator result ClassCreator ReferenceType ArrayList IfStatement MethodInvocation arr isEmpty BlockStatement ReturnStatement MemberReference result End LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator validNumbers ClassCreator ReferenceType ArrayList ForStatement EnhancedForControl VariableDeclaration ReferenceType Integer VariableDeclarator num MemberReference arr BlockStatement IfStatement BinaryOperation && BinaryOperation >= MemberReference num Literal 1 BinaryOperation <= MemberReference num Literal 9 BlockStatement StatementExpression MethodInvocation validNumbers MemberReference num add End End StatementExpression MethodInvocation Collections MemberReference validNumbers sort StatementExpression MethodInvocation Collections MemberReference validNumbers reverse ForStatement EnhancedForControl VariableDeclaration ReferenceType Integer VariableDeclarator num MemberReference validNumbers BlockStatement SwitchStatement MemberReference num SwitchStatementCase Literal 1 StatementExpression MethodInvocation result Literal ""One"" add BreakStatement SwitchStatementCase Literal 2 StatementExpression MethodInvocation result Literal ""Two"" add BreakStatement SwitchStatementCase Literal 3 StatementExpression MethodInvocation result Literal ""Three"" add BreakStatement SwitchStatementCase Literal 4 StatementExpression MethodInvocation result Literal ""Four"" add BreakStatement SwitchStatementCase Literal 5 StatementExpression MethodInvocation result Literal ""Five"" add BreakStatement SwitchStatementCase Literal 6 StatementExpression MethodInvocation result Literal ""Six"" add BreakStatement SwitchStatementCase Literal 7 StatementExpression MethodInvocation result Literal ""Seven"" add BreakStatement SwitchStatementCase Literal 8 StatementExpression MethodInvocation result Literal ""Eight"" add BreakStatement SwitchStatementCase Literal 9 StatementExpression MethodInvocation result Literal ""Nine"" add BreakStatement End End ReturnStatement MemberReference result",1
244,29,,2
131,65,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType boolean correctBracketing FormalParameter ReferenceType String brackets LocalVariableDeclaration BasicType int VariableDeclarator depth Literal 0 ForStatement EnhancedForControl VariableDeclaration BasicType char VariableDeclarator b MethodInvocation brackets toCharArray BlockStatement IfStatement BinaryOperation == MemberReference b Literal '(' BlockStatement StatementExpression Assignment MemberReference depth Literal 1 += BlockStatement StatementExpression Assignment MemberReference depth Literal 1 -= End IfStatement BinaryOperation < MemberReference depth Literal 0 BlockStatement ReturnStatement Literal false End End ReturnStatement BinaryOperation == MemberReference depth Literal 0,1
138,45,CompilationUnit ClassDeclaration Modifier public Solution MethodDeclaration Modifier public ReferenceType String flipCase FormalParameter ReferenceType String string LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator flippedString ClassCreator ReferenceType StringBuilder ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation string length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c MethodInvocation string MemberReference i charAt IfStatement MethodInvocation Character MemberReference c isLowerCase BlockStatement StatementExpression MethodInvocation flippedString MethodInvocation Character MemberReference c toUpperCase append IfStatement MethodInvocation Character MemberReference c isUpperCase BlockStatement StatementExpression MethodInvocation flippedString MethodInvocation Character MemberReference c toLowerCase append BlockStatement StatementExpression MethodInvocation flippedString MemberReference c append End End End ReturnStatement MethodInvocation flippedString toString,1
139,115,CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Integer pluck FormalParameter ReferenceType List TypeArgument ReferenceType Integer arr LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator result ClassCreator ReferenceType ArrayList LocalVariableDeclaration BasicType int VariableDeclarator smallestEvenIndex Literal - 1 LocalVariableDeclaration BasicType int VariableDeclarator smallestEvenValue MemberReference Integer MAX_VALUE ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation arr size MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator value MethodInvocation arr MemberReference i get IfStatement BinaryOperation && BinaryOperation == BinaryOperation % MemberReference value Literal 2 Literal 0 BinaryOperation < MemberReference value MemberReference smallestEvenValue BlockStatement StatementExpression Assignment MemberReference smallestEvenValue MemberReference value = StatementExpression Assignment MemberReference smallestEvenIndex MemberReference i = End End IfStatement BinaryOperation != MemberReference smallestEvenIndex Literal - 1 BlockStatement StatementExpression MethodInvocation result MemberReference smallestEvenValue add StatementExpression MethodInvocation result MemberReference smallestEvenIndex add End ReturnStatement MemberReference result,1
73,31,"CompilationUnit Import java.util  Import java.util.stream.Collectors ClassDeclaration Solution MethodDeclaration /**
    From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))
    [1, 3, 4]
     */ Modifier public ReferenceType List TypeArgument ReferenceType Integer removeDuplicates FormalParameter ReferenceType List TypeArgument ReferenceType Integer numbers LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator uniqueNumbers ClassCreator ReferenceType ArrayList LocalVariableDeclaration ReferenceType Set TypeArgument ReferenceType Integer VariableDeclarator seenNumbers ClassCreator ReferenceType HashSet ForStatement EnhancedForControl VariableDeclaration ReferenceType Integer VariableDeclarator number MemberReference numbers BlockStatement IfStatement MethodInvocation ! seenNumbers MemberReference number contains BlockStatement StatementExpression MethodInvocation uniqueNumbers MemberReference number add StatementExpression MethodInvocation seenNumbers MemberReference number add End End ReturnStatement MemberReference uniqueNumbers",1
165,7,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
    Return only positive numbers in the list.
    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))
    [2, 5, 6]
    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))
    [5, 3, 2, 3, 9, 123, 1]
     */ Modifier public ReferenceType List TypeArgument ReferenceType Integer getPositive FormalParameter ReferenceType List TypeArgument ReferenceType Integer l LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator positiveNumbers ClassCreator ReferenceType ArrayList ForStatement EnhancedForControl VariableDeclaration BasicType int VariableDeclarator num MemberReference l BlockStatement IfStatement BinaryOperation > MemberReference num Literal 0 BlockStatement StatementExpression MethodInvocation positiveNumbers MemberReference num add End End ReturnStatement MemberReference positiveNumbers",2
276,133,,1
189,107,,2
205,122,,1
5,64,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
     * Filter given list of any values only for integers
     *
     * @param values the list of values to filter
     * @return the list of integers
     */ Modifier public ReferenceType List TypeArgument ReferenceType Integer filterIntegers FormalParameter ReferenceType List TypeArgument ReferenceType Object values LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator integers ClassCreator ReferenceType ArrayList ForStatement EnhancedForControl VariableDeclaration ReferenceType Object VariableDeclarator value MemberReference values BlockStatement IfStatement BinaryOperation instanceof MemberReference value ReferenceType Integer BlockStatement StatementExpression MethodInvocation integers Cast ReferenceType Integer MemberReference value add End End ReturnStatement MemberReference integers",2
43,27,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation:
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
     */ Modifier public BasicType int getMaxTriples FormalParameter BasicType int n LocalVariableDeclaration BasicType int VariableDeclarator a ArrayCreator BasicType int MemberReference n ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation <= MemberReference i MemberReference n MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference ArraySelector BinaryOperation - MemberReference i Literal 1 a BinaryOperation + BinaryOperation - BinaryOperation * MemberReference i MemberReference i MemberReference i Literal 1 = End LocalVariableDeclaration BasicType int VariableDeclarator count Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i BinaryOperation - MemberReference n Literal 2 MemberReference ++ i BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j BinaryOperation + MemberReference i Literal 1 BinaryOperation < MemberReference j BinaryOperation - MemberReference n Literal 1 MemberReference ++ j BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator k BinaryOperation + MemberReference j Literal 1 BinaryOperation < MemberReference k MemberReference n MemberReference ++ k BlockStatement IfStatement BinaryOperation == BinaryOperation % BinaryOperation + BinaryOperation + MemberReference ArraySelector MemberReference i a MemberReference ArraySelector MemberReference j a MemberReference ArraySelector MemberReference k a Literal 3 Literal 0 BlockStatement StatementExpression MemberReference ++ count End End End End ReturnStatement MemberReference count",1
127,112,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType int addElements FormalParameter ReferenceType List TypeArgument ReferenceType Integer arr FormalParameter BasicType int k StatementExpression Assignment MemberReference arr MethodInvocation arr Literal 0 MemberReference k subList = LocalVariableDeclaration ReferenceType Optional TypeArgument ReferenceType Integer VariableDeclarator sum MethodInvocation arr MethodInvocation LambdaExpression MemberReference p BinaryOperation <= MethodInvocation String MethodInvocation length MethodInvocation Math MemberReference p abs valueOf Literal 2 filter MethodInvocation MethodReference MemberReference Integer MemberReference sum reduce stream ReturnStatement MethodInvocation sum Literal 0 orElse,1
79,61,CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Integer makeAPile FormalParameter BasicType int n LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator pile ClassCreator ReferenceType ArrayList TypeArgument ReferenceType Integer StatementExpression MethodInvocation pile MemberReference n add LocalVariableDeclaration BasicType int VariableDeclarator stones MemberReference n ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation < MemberReference i MemberReference n MemberReference ++ i BlockStatement IfStatement BinaryOperation == BinaryOperation % MemberReference stones Literal 2 Literal 0 BlockStatement StatementExpression Assignment MemberReference stones Literal 2 += BlockStatement StatementExpression Assignment MemberReference stones Literal 1 += End StatementExpression MethodInvocation pile MemberReference stones add End ReturnStatement MemberReference pile,1
22,57,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType String stringXor FormalParameter ReferenceType String a FormalParameter ReferenceType String b LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator result ClassCreator ReferenceType StringBuilder ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation a length MemberReference ++ i BlockStatement IfStatement BinaryOperation == MethodInvocation a MemberReference i charAt MethodInvocation b MemberReference i charAt BlockStatement StatementExpression MethodInvocation result Literal ""0"" append BlockStatement StatementExpression MethodInvocation result Literal ""1"" append End End ReturnStatement MethodInvocation result toString",1
19,38,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType int startsOneEnds FormalParameter BasicType int n IfStatement BinaryOperation == MemberReference n Literal 1 BlockStatement ReturnStatement Literal 1 End ReturnStatement BinaryOperation * Literal 18 Cast BasicType int MethodInvocation Math Literal 10 BinaryOperation - MemberReference n Literal 2 pow,2
63,35,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType int add FormalParameter ReferenceType List TypeArgument ReferenceType Integer lst LocalVariableDeclaration BasicType int VariableDeclarator sum Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation < MemberReference i MethodInvocation lst size Assignment MemberReference i Literal 2 += BlockStatement IfStatement BinaryOperation == BinaryOperation % MethodInvocation lst MemberReference i get Literal 2 Literal 0 BlockStatement StatementExpression Assignment MemberReference sum MethodInvocation lst MemberReference i get += End End ReturnStatement MemberReference sum,1
207,69,,1
318,0,,1
47,55,CompilationUnit ClassDeclaration Modifier public Solution MethodDeclaration Modifier public BasicType boolean checkDictCase FormalParameter ReferenceType Map TypeArgument ReferenceType Object TypeArgument ReferenceType Object dict IfStatement MethodInvocation dict isEmpty BlockStatement ReturnStatement Literal false End LocalVariableDeclaration BasicType boolean VariableDeclarator lowercase Literal true LocalVariableDeclaration BasicType boolean VariableDeclarator uppercase Literal true ForStatement EnhancedForControl VariableDeclaration ReferenceType Object VariableDeclarator key MethodInvocation dict keySet BlockStatement IfStatement BinaryOperation instanceof MemberReference key ReferenceType String BlockStatement LocalVariableDeclaration ReferenceType String VariableDeclarator keyString Cast ReferenceType String MemberReference key IfStatement MethodInvocation ! keyString MethodInvocation keyString toLowerCase equals BlockStatement StatementExpression Assignment MemberReference lowercase Literal false = End IfStatement MethodInvocation ! keyString MethodInvocation keyString toUpperCase equals BlockStatement StatementExpression Assignment MemberReference uppercase Literal false = End BlockStatement ReturnStatement Literal false End End ReturnStatement BinaryOperation || MemberReference lowercase MemberReference uppercase,2
160,27,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
    Write a function countNums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> countNums(Arrays.asList()) == 0
    >>> countNums(Arrays.asList(-1, 11, -11)) == 1
    >>> countNums(Arrays.asList(1, 1, 2)) == 3
     */ Modifier public BasicType int countNums FormalParameter ReferenceType List TypeArgument ReferenceType Integer arr LocalVariableDeclaration BasicType int VariableDeclarator count Literal 0 ForStatement EnhancedForControl VariableDeclaration BasicType int VariableDeclarator num MemberReference arr BlockStatement IfStatement BinaryOperation > MethodInvocation MemberReference num sumDigits Literal 0 BlockStatement StatementExpression MemberReference ++ count End End ReturnStatement MemberReference count MethodDeclaration Modifier private BasicType int sumDigits FormalParameter BasicType int num LocalVariableDeclaration BasicType int VariableDeclarator sum Literal 0 WhileStatement BinaryOperation != MemberReference num Literal 0 BlockStatement LocalVariableDeclaration BasicType int VariableDeclarator digit BinaryOperation % MemberReference num Literal 10 StatementExpression Assignment MemberReference sum MethodInvocation Math MemberReference digit abs += StatementExpression Assignment MemberReference num Literal 10 /= End ReturnStatement MemberReference sum",2
31,68,CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType String exchange FormalParameter ReferenceType List TypeArgument ReferenceType Integer lst1 FormalParameter ReferenceType List TypeArgument ReferenceType Integer lst2,2
282,44,,1
46,145,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType int solution FormalParameter ReferenceType List TypeArgument ReferenceType Integer lst LocalVariableDeclaration BasicType int VariableDeclarator sum Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation lst size Assignment MemberReference i Literal 2 += BlockStatement IfStatement BinaryOperation == BinaryOperation % MethodInvocation lst MemberReference i get Literal 2 Literal 1 BlockStatement StatementExpression Assignment MemberReference sum MethodInvocation lst MemberReference i get += End End ReturnStatement MemberReference sum,2
90,40,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
     * brackets is a string of ""<"" and "">"".
     * return True if every opening bracket has a corresponding closing bracket.
     */ Modifier public BasicType boolean correctBracketing FormalParameter ReferenceType String brackets LocalVariableDeclaration ReferenceType Stack TypeArgument ReferenceType Character VariableDeclarator stack ClassCreator ReferenceType Stack ForStatement EnhancedForControl VariableDeclaration BasicType char VariableDeclarator bracket MethodInvocation brackets toCharArray BlockStatement IfStatement BinaryOperation == MemberReference bracket Literal '<' BlockStatement StatementExpression MethodInvocation stack MemberReference bracket push IfStatement BinaryOperation == MemberReference bracket Literal '>' BlockStatement IfStatement BinaryOperation && MethodInvocation ! stack isEmpty BinaryOperation == MethodInvocation stack peek Literal '<' BlockStatement StatementExpression MethodInvocation stack pop BlockStatement ReturnStatement Literal false End End End End ReturnStatement MethodInvocation stack isEmpty",1
219,62,,1
144,48,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
     * Checks if given string is a palindrome
     * @param text the string to check
     * @return true if the string is a palindrome, false otherwise
     */ Modifier public BasicType boolean isPalindrome FormalParameter ReferenceType String text LocalVariableDeclaration BasicType int VariableDeclarator i Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator j BinaryOperation - MethodInvocation text length Literal 1 WhileStatement BinaryOperation < MemberReference i MemberReference j BlockStatement WhileStatement BinaryOperation && BinaryOperation < MemberReference i MemberReference j MethodInvocation ! Character MethodInvocation text MemberReference i charAt isLetterOrDigit BlockStatement StatementExpression MemberReference ++ i End WhileStatement BinaryOperation && BinaryOperation < MemberReference i MemberReference j MethodInvocation ! Character MethodInvocation text MemberReference j charAt isLetterOrDigit BlockStatement StatementExpression MemberReference -- j End IfStatement BinaryOperation != MethodInvocation Character MethodInvocation text MemberReference i charAt toLowerCase MethodInvocation Character MethodInvocation text MemberReference j charAt toLowerCase BlockStatement ReturnStatement Literal false End StatementExpression MemberReference ++ i StatementExpression MemberReference -- j End ReturnStatement Literal true",2
310,67,,2
241,76,,1
128,2,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    Write a function vowelsCount which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowelsCount(""abcde"")
    2
    >>> vowelsCount(""ACEDY"")
    3
     */ Modifier public BasicType int vowelsCount FormalParameter ReferenceType String s LocalVariableDeclaration BasicType int VariableDeclarator count Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation s length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c MethodInvocation s MemberReference i charAt IfStatement BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation == MethodInvocation Character MemberReference c toLowerCase Literal 'a' BinaryOperation == MethodInvocation Character MemberReference c toLowerCase Literal 'e' BinaryOperation == MethodInvocation Character MemberReference c toLowerCase Literal 'i' BinaryOperation == MethodInvocation Character MemberReference c toLowerCase Literal 'o' BinaryOperation && BinaryOperation == MethodInvocation Character MemberReference c toLowerCase Literal 'u' BinaryOperation == MemberReference i BinaryOperation - MethodInvocation s length Literal 1 BlockStatement StatementExpression MemberReference ++ count End End ReturnStatement MemberReference count",2
86,25,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
     * A simple program which should return the value of x if n is
     * a prime number and should return the value of y otherwise.
     *
     * Examples:
     * for xOrY(7, 34, 12) == 34
     * for xOrY(15, 8, 5) == 5
     */ Modifier public BasicType int xOrY FormalParameter BasicType int n FormalParameter BasicType int x FormalParameter BasicType int y IfStatement MethodInvocation MemberReference n isPrime BlockStatement ReturnStatement MemberReference x BlockStatement ReturnStatement MemberReference y End MethodDeclaration /**
     * Helper method to check if a number is prime.
     */ Modifier public BasicType boolean isPrime FormalParameter BasicType int n IfStatement BinaryOperation <= MemberReference n Literal 1 BlockStatement ReturnStatement Literal false End ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 2 BinaryOperation <= MemberReference i MethodInvocation Math MemberReference n sqrt MemberReference ++ i BlockStatement IfStatement BinaryOperation == BinaryOperation % MemberReference n MemberReference i Literal 0 BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true",2
236,154,,1
72,107,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType String exchange FormalParameter ReferenceType List TypeArgument ReferenceType Integer lst1 FormalParameter ReferenceType List TypeArgument ReferenceType Integer lst2 LocalVariableDeclaration BasicType int VariableDeclarator odd Literal 0 VariableDeclarator even Literal 0 ForStatement EnhancedForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference lst1 BlockStatement IfStatement BinaryOperation == BinaryOperation % MemberReference i Literal 2 Literal 1 BlockStatement StatementExpression Assignment MemberReference odd Literal 1 += End End ForStatement EnhancedForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference lst2 BlockStatement IfStatement BinaryOperation == BinaryOperation % MemberReference i Literal 2 Literal 0 BlockStatement StatementExpression Assignment MemberReference even Literal 1 += End End IfStatement BinaryOperation >= MemberReference even MemberReference odd BlockStatement ReturnStatement Literal ""YES"" End ReturnStatement Literal ""NO""",1
264,64,,1
233,123,,2
230,146,,2
266,126,,2
201,29,,1
197,33,,2
95,106,CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType List TypeArgument ReferenceType Integer minPath FormalParameter ReferenceType List TypeArgument ReferenceType List TypeArgument ReferenceType Integer grid FormalParameter BasicType int k LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator path ClassCreator ReferenceType ArrayList ReturnStatement MemberReference path,1
216,143,,1
198,104,,2
50,108,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> specialFactorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
     */ Modifier public BasicType long specialFactorial FormalParameter BasicType int n IfStatement BinaryOperation <= MemberReference n Literal 0 BlockStatement ThrowStatement ClassCreator ReferenceType IllegalArgumentException Literal ""Input must be greater than zero"" End LocalVariableDeclaration BasicType long VariableDeclarator result Literal 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference n BinaryOperation > MemberReference i Literal 0 MemberReference -- i BlockStatement LocalVariableDeclaration BasicType long VariableDeclarator factorial Literal 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j MemberReference i BinaryOperation > MemberReference j Literal 0 MemberReference -- j BlockStatement StatementExpression Assignment MemberReference factorial MemberReference j *= End StatementExpression Assignment MemberReference result MemberReference factorial *= End ReturnStatement MemberReference result",2
262,55,,1
30,23,CompilationUnit ClassDeclaration Solution MethodDeclaration Modifier public BasicType boolean rightAngleTriangle FormalParameter BasicType int a FormalParameter BasicType int b FormalParameter BasicType int c IfStatement BinaryOperation || BinaryOperation || BinaryOperation == BinaryOperation + BinaryOperation * MemberReference a MemberReference a BinaryOperation * MemberReference b MemberReference b BinaryOperation * MemberReference c MemberReference c BinaryOperation == BinaryOperation + BinaryOperation * MemberReference a MemberReference a BinaryOperation * MemberReference c MemberReference c BinaryOperation * MemberReference b MemberReference b BinaryOperation == BinaryOperation + BinaryOperation * MemberReference b MemberReference b BinaryOperation * MemberReference c MemberReference c BinaryOperation * MemberReference a MemberReference a BlockStatement ReturnStatement Literal true BlockStatement ReturnStatement Literal false End,2
181,8,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType int getMaxTriples FormalParameter BasicType int n LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator A ClassCreator ReferenceType ArrayList ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation <= MemberReference i MemberReference n MemberReference ++ i BlockStatement StatementExpression MethodInvocation A BinaryOperation + BinaryOperation - BinaryOperation * MemberReference i MemberReference i MemberReference i Literal 1 add End LocalVariableDeclaration BasicType int VariableDeclarator count Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation A size MemberReference ++ i BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator j BinaryOperation + MemberReference i Literal 1 BinaryOperation < MemberReference j MethodInvocation A size MemberReference ++ j BlockStatement ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator k BinaryOperation + MemberReference j Literal 1 BinaryOperation < MemberReference k MethodInvocation A size MemberReference ++ k BlockStatement IfStatement BinaryOperation == BinaryOperation % BinaryOperation + BinaryOperation + MethodInvocation A MemberReference i get MethodInvocation A MemberReference j get MethodInvocation A MemberReference k get Literal 3 Literal 0 BlockStatement StatementExpression Assignment MemberReference count Literal 1 += End End End End ReturnStatement MemberReference count,1
212,119,,1
51,30,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType boolean moveOneBall FormalParameter ReferenceType List TypeArgument ReferenceType Integer arr IfStatement BinaryOperation == MethodInvocation arr size Literal 0 BlockStatement ReturnStatement Literal true End LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator sorted_arr ClassCreator ReferenceType ArrayList MemberReference arr StatementExpression MethodInvocation Collections MemberReference sorted_arr sort LocalVariableDeclaration BasicType int VariableDeclarator min_value MethodInvocation Collections MemberReference arr min LocalVariableDeclaration BasicType int VariableDeclarator min_index MethodInvocation arr MemberReference min_value indexOf LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator my_arr ClassCreator ReferenceType ArrayList MethodInvocation arr MemberReference min_index MethodInvocation arr size subList StatementExpression MethodInvocation my_arr MethodInvocation arr Literal 0 MemberReference min_index subList addAll ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation arr size MemberReference ++ i BlockStatement IfStatement BinaryOperation != MethodInvocation my_arr MemberReference i get MethodInvocation sorted_arr MemberReference i get BlockStatement ReturnStatement Literal false End End ReturnStatement Literal true,2
222,47,,2
148,85,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
    Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
     */ Modifier public ReferenceType List TypeArgument ReferenceType Integer factorize FormalParameter BasicType int n LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator factors ClassCreator ReferenceType ArrayList ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 2 BinaryOperation <= MemberReference i MemberReference n MemberReference ++ i BlockStatement WhileStatement BinaryOperation == BinaryOperation % MemberReference n MemberReference i Literal 0 BlockStatement StatementExpression MethodInvocation factors MemberReference i add StatementExpression Assignment MemberReference n MemberReference i /= End End ReturnStatement MemberReference factors",2
28,66,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    Check if two words have the same characters.
    >>> sameChars(""eabcdzzzz"", ""dddzzzzzzzddeddabc"")
    true
    >>> sameChars(""abcd"", ""dddddddabc"")
    true
    >>> sameChars(""dddddddabc"", ""abcd"")
    true
    >>> sameChars(""eabcd"", ""dddddddabc"")
    false
    >>> sameChars(""abcd"", ""dddddddabce"")
    false
    >>> sameChars(""eabcdzzzz"", ""dddzzzzzzzddddabc"")
    false
     */ Modifier public BasicType boolean sameChars FormalParameter ReferenceType String s0 FormalParameter ReferenceType String s1 LocalVariableDeclaration BasicType char VariableDeclarator arr0 MethodInvocation s0 toCharArray LocalVariableDeclaration BasicType char VariableDeclarator arr1 MethodInvocation s1 toCharArray StatementExpression MethodInvocation Arrays MemberReference arr0 sort StatementExpression MethodInvocation Arrays MemberReference arr1 sort ReturnStatement MethodInvocation Arrays MemberReference arr0 MemberReference arr1 equals",2
184,94,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
     */ Modifier public BasicType double poly FormalParameter ReferenceType List TypeArgument ReferenceType Double xs FormalParameter BasicType double x LocalVariableDeclaration BasicType double VariableDeclarator result Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation xs size MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference result BinaryOperation * MethodInvocation xs MemberReference i get MethodInvocation Math MemberReference x MemberReference i pow += End ReturnStatement MemberReference result MethodDeclaration Modifier public BasicType double findZero FormalParameter ReferenceType List TypeArgument ReferenceType Double xs LocalVariableDeclaration BasicType double VariableDeclarator begin Literal - 1 VariableDeclarator end Literal 1 WhileStatement BinaryOperation > BinaryOperation * MethodInvocation MemberReference xs MemberReference begin poly MethodInvocation MemberReference xs MemberReference end poly Literal 0 BlockStatement StatementExpression Assignment MemberReference begin Literal 2 *= StatementExpression Assignment MemberReference end Literal 2 *= End WhileStatement BinaryOperation > BinaryOperation - MemberReference end MemberReference begin Literal 1e-10 BlockStatement LocalVariableDeclaration BasicType double VariableDeclarator center BinaryOperation / BinaryOperation + MemberReference begin MemberReference end Literal 2 IfStatement BinaryOperation > BinaryOperation * MethodInvocation MemberReference xs MemberReference begin poly MethodInvocation MemberReference xs MemberReference center poly Literal 0 BlockStatement StatementExpression Assignment MemberReference begin MemberReference center = BlockStatement StatementExpression Assignment MemberReference end MemberReference center = End End ReturnStatement MemberReference begin",2
134,16,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public BasicType int maxElement FormalParameter ReferenceType List TypeArgument ReferenceType Integer l ReturnStatement MethodInvocation Collections MemberReference l max,1
188,65,,2
168,18,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration /**
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
     */ Modifier public BasicType int digitSum FormalParameter ReferenceType String s LocalVariableDeclaration BasicType int VariableDeclarator sum Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation s length MemberReference ++ i BlockStatement LocalVariableDeclaration BasicType char VariableDeclarator c MethodInvocation s MemberReference i charAt IfStatement MethodInvocation Character MemberReference c isUpperCase BlockStatement StatementExpression Assignment MemberReference sum Cast BasicType int MemberReference c += End End ReturnStatement MemberReference sum",1
285,145,,1
249,80,,2
223,114,,2
226,71,,2
321,124,,2
193,12,,2
214,119,,2
129,160,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType String flipCase FormalParameter ReferenceType String string LocalVariableDeclaration ReferenceType StringBuilder VariableDeclarator sb ClassCreator ReferenceType StringBuilder ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 0 BinaryOperation < MemberReference i MethodInvocation string length MemberReference ++ i BlockStatement IfStatement MethodInvocation Character MethodInvocation string MemberReference i charAt isLowerCase BlockStatement StatementExpression MethodInvocation sb MethodInvocation Character MethodInvocation string MemberReference i charAt toUpperCase append BlockStatement StatementExpression MethodInvocation sb MethodInvocation Character MethodInvocation string MemberReference i charAt toLowerCase append End End ReturnStatement MethodInvocation sb toString,2
326,147,,1
78,8,CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType Object roundedAvg FormalParameter BasicType int n FormalParameter BasicType int m IfStatement BinaryOperation > MemberReference n MemberReference m BlockStatement ReturnStatement Literal - 1 End LocalVariableDeclaration BasicType int VariableDeclarator sum Literal 0 LocalVariableDeclaration BasicType int VariableDeclarator count Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i MemberReference n BinaryOperation <= MemberReference i MemberReference m MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference sum MemberReference i += StatementExpression MemberReference ++ count End LocalVariableDeclaration BasicType int VariableDeclarator avg MethodInvocation Math BinaryOperation / Cast BasicType float MemberReference sum MemberReference count round LocalVariableDeclaration ReferenceType String VariableDeclarator binary MethodInvocation Integer MemberReference avg toBinaryString ReturnStatement MemberReference binary,2
103,154,"CompilationUnit Import java.util  Import java.lang  ClassDeclaration Solution MethodDeclaration Modifier public ReferenceType String filenameCheck FormalParameter ReferenceType String file_name LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType String VariableDeclarator suf MethodInvocation Arrays Literal ""txt"" Literal ""exe"" Literal ""dll"" asList LocalVariableDeclaration ReferenceType String VariableDeclarator lst MethodInvocation file_name Literal ""\\."" split IfStatement BinaryOperation || BinaryOperation || BinaryOperation || BinaryOperation != MemberReference lst length Literal 2 MethodInvocation ! suf MemberReference ArraySelector Literal 1 lst contains MemberReference ArraySelector Literal 0 MethodInvocation isEmpty lst MethodInvocation ! Character MemberReference ArraySelector Literal 0 MethodInvocation Literal 0 charAt lst isLetter BlockStatement ReturnStatement Literal ""No"" End LocalVariableDeclaration BasicType int VariableDeclarator t Cast BasicType int MemberReference ArraySelector Literal 0 MethodInvocation chars MethodInvocation LambdaExpression MemberReference x Cast BasicType char MemberReference x map MethodInvocation MethodReference MemberReference Character MemberReference isDigit filter MethodInvocation count lst IfStatement BinaryOperation > MemberReference t Literal 3 BlockStatement ReturnStatement Literal ""No"" End ReturnStatement Literal ""Yes""",2
8,32,"CompilationUnit Import java.util  ClassDeclaration Solution MethodDeclaration /**
    Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    */ Modifier public ReferenceType List TypeArgument ReferenceType Integer f FormalParameter BasicType int n LocalVariableDeclaration ReferenceType List TypeArgument ReferenceType Integer VariableDeclarator result ClassCreator ReferenceType ArrayList ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation <= MemberReference i MemberReference n MemberReference ++ i BlockStatement IfStatement BinaryOperation == BinaryOperation % MemberReference i Literal 2 Literal 0 BlockStatement StatementExpression MethodInvocation result MethodInvocation MemberReference i factorial add BlockStatement StatementExpression MethodInvocation result MethodInvocation MemberReference i sumNumbers add End End ReturnStatement MemberReference result MethodDeclaration /**
    Helper method to calculate the factorial of a number.
    */ Modifier private BasicType int factorial FormalParameter BasicType int number LocalVariableDeclaration BasicType int VariableDeclarator result Literal 1 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation <= MemberReference i MemberReference number MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference result MemberReference i *= End ReturnStatement MemberReference result MethodDeclaration /**
    Helper method to calculate the sum of numbers from 1 to a given number.
    */ Modifier private BasicType int sumNumbers FormalParameter BasicType int number LocalVariableDeclaration BasicType int VariableDeclarator result Literal 0 ForStatement ForControl VariableDeclaration BasicType int VariableDeclarator i Literal 1 BinaryOperation <= MemberReference i MemberReference number MemberReference ++ i BlockStatement StatementExpression Assignment MemberReference result MemberReference i += End ReturnStatement MemberReference result",1
