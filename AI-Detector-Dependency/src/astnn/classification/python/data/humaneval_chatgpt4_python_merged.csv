idx,code,label
24,"def largest_divisor(n: int) -> int:
    for i in reversed(range(n)):
        if n % i == 0:
            return i
",human
5,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
",human
150,"def x_or_y(n, x, y):
    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
",human
72,"def will_it_fly(q, w):
    return q == q[::-1] and sum(q) <= w",lm
100,"def make_a_pile(n):
    return [n + 2*i for i in range(n)]
",human
77,"def iscube(a):
    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
",human
30,"def get_positive(l: list):
    return [n for n in l if n > 0]",lm
41,"def car_race_collision(n: int):
    return n**2
",human
132,"def is_nested(string):
    balance = 0
    nested = False
    for char in string:
        if char == '[':
            balance += 1
        elif char == ']':
            balance -= 1
        if balance > 1:
            nested = True
        if balance < 0:  # Early exit for invalid sequences
            return False
    return nested and balance == 0",lm
67,"def fruit_distribution(s,n):
    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
",human
17,"from typing import List


def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
",human
10,"def is_palindrome(string: str) -> bool:
    return string == string[::-1]

def make_palindrome(string: str) -> str:
    if is_palindrome(string):
        return string
    for i in range(len(string), -1, -1):
        if is_palindrome(string[:i]):
            return string + string[:len(string) - i][::-1]
    return string",lm
148,"def bf(planet1, planet2):
    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
",human
15,"def string_sequence(n: int) -> str:
    return ' '.join(str(i) for i in range(n + 1))",lm
133,"def sum_squares(lst):
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
",human
102,"def choose_num(x, y):
    for num in range(y, x-1, -1):
        if num % 2 == 0:
            return num
    return -1",lm
105,"def by_length(arr):
    digit_names = {
        1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"",
        5: ""Five"", 6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""
    }
    # Filter, sort in ascending, then reverse for descending order
    sorted_arr = sorted([item for item in arr if 1 <= item <= 9], reverse=True)
    # Replace digits with names
    return [digit_names[item] for item in sorted_arr]",lm
142,"def sum_squares(lst):
    total = 0
    for i, num in enumerate(lst):
        if i % 3 == 0:
            total += num ** 2
        elif i % 4 == 0:
            total += num ** 3
        else:
            total += num
    return total",lm
107,"def even_odd_palindrome(n):
    def is_palindrome(x):
        return str(x) == str(x)[::-1]
    
    even_count, odd_count = 0, 0
    for i in range(1, n + 1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
                
    return (even_count, odd_count)",lm
117,"def select_words(s, n):
    def consonant_count(word):
        consonants = ""bcdfghjklmnpqrstvwxyz""
        return sum(letter.lower() in consonants for letter in word)

    words = s.split()
    selected_words = [word for word in words if consonant_count(word) == n]
    return selected_words",lm
36,"def fizz_buzz(n: int):
    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
",human
103,"def rounded_avg(n, m):
    if n > m:
        return -1
    sum_of_numbers = sum(range(n, m + 1))
    total_numbers = m - n + 1
    average = round(sum_of_numbers / total_numbers)
    return bin(average)",lm
18,"def how_many_times(string: str, substring: str) -> int:
    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
",human
76,"def is_simple_power(x, n):
    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
",human
98,"def count_upper(s):
    count = 0
    vowels = 'AEIOU'
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1
    return count",lm
80,"def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:
            return False
    return True",lm
39,"def prime_fib(n: int):
    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
",human
103,"def rounded_avg(n, m):
    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
",human
1,"from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    cleaned_string = paren_string.replace("" "", """")
    result = []
    depth = 0
    current_group = []

    for char in cleaned_string:
        if char == '(':
            depth += 1
            current_group.append(char)
        elif char == ')':
            depth -= 1
            current_group.append(char)
            if depth == 0:
                result.append(''.join(current_group))
                current_group = []

    return result",lm
157,"def right_angle_triangle(a, b, c):
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
",human
124,"def valid_date(date):
    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
",human
93,"def encode(message):
    vowels = 'aeiouAEIOU'
    swap_case = message.swapcase()
    encoded = ''
    for char in swap_case:
        if char in vowels:
            if char.isupper():
                # Find the index of the vowel in the uppercase string, add 2 and get the corresponding char
                encoded += chr(((ord(char) - 65 + 2) % 26) + 65) 
            else:
                # Find the index of the vowel in the lowercase string, add 2 and get the corresponding char
                encoded += chr(((ord(char) - 97 + 2) % 26) + 97)
        else:
            encoded += char
    return encoded",lm
9,"from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    if not numbers:
        return []
    max_list = [numbers[0]]
    for num in numbers[1:]:
        max_list.append(max(max_list[-1], num))
    return max_list",lm
114,"def minSubArraySum(nums):
    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
",human
44,"def change_base(x: int, base: int):
    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
",human
55,"def fib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
",human
152,"def compare(game, guess):
    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]",lm
3,"from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False",lm
134,"def check_if_last_char_is_a_letter(txt):
 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
",human
11,"def string_xor(a: str, b: str) -> str:
    return ''.join(['0' if char1 == char2 else '1' for char1, char2 in zip(a, b)])",lm
20,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
",human
123,"def get_odd_collatz(n):
    def collatz_sequence(x):
        sequence = [x]
        while x > 1:
            if x % 2 == 0:
                x = x // 2
            else:
                x = 3 * x + 1
            sequence.append(x)
        return sequence

    collatz_seq = collatz_sequence(n)
    odd_numbers = [num for num in collatz_seq if num % 2 != 0]
    return sorted(odd_numbers)",lm
155,"def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
",human
99,"def closest_integer(value):
    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

",human
96,"def is_prime(num):
    if num in (0, 1):
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    result = []
    for num in range(2, n):
        if is_prime(num):
            result.append(num)
    return result",lm
87,"def get_row(lst, x):
    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
",human
151,"def double_the_difference(lst):
    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
",human
135,"def can_arrange(arr):
    for i in range(len(arr)-1, 0, -1):
        if arr[i] < arr[i-1]:
            return i
    return -1",lm
6,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
",human
56,"def correct_bracketing(brackets: str) -> bool:
    balance = 0
    for bracket in brackets:
        if bracket == ""<"":
            balance += 1
        elif bracket == "">"":
            if balance == 0:
                return False
            balance -= 1
            
    return balance == 0",lm
38,"def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    return encode_cyclic(encode_cyclic(s))
",human
115,"def max_fill(grid, capacity):
    import math
    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
",human
8,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
",human
154,"def cycpattern_check(a , b):
    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
",human
162,"def string_to_md5(text):
    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
",human
42,"def incr_list(l: list):
    return [x + 1 for x in l]",lm
51,"def remove_vowels(text):
    vowels = 'aeiouAEIOU'
    return ''.join([char for char in text if char not in vowels])",lm
141,"def file_name_check(file_name):
    valid_extensions = ['txt', 'exe', 'dll']
    name_parts = file_name.split('.')

    # Check if there is exactly one dot in the name.
    if len(name_parts) != 2:
        return 'No'
    
    # Check the substring before the dot for required conditions.
    name_body, extension = name_parts
    if not name_body[0].isalpha():
        return 'No'
    
    # Ensure the name contains no more than three digits.
    digit_count = sum(c.isdigit() for c in name_body)
    if digit_count > 3:
        return 'No'
    
    # Check if the extension is valid.
    if extension not in valid_extensions:
        return 'No'
    
    return 'Yes'",lm
113,"def odd_count(lst):
    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
",human
71,"def triangle_area(a, b, c):
    if (a + b > c) and (a + c > b) and (b + c > a):
        s = (a + b + c) / 2
        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
        return round(area, 2)
    else:
        return -1",lm
47,"def median(l: list):
    sorted_list = sorted(l)
    n = len(sorted_list)
    mid = n // 2
    if n % 2 == 0:
        return (sorted_list[mid - 1] + sorted_list[mid]) / 2
    else:
        return sorted_list[mid]",lm
160,"def do_algebra(operator, operand):
    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
",human
85,"def add(lst):
    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
",human
16,"def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))",lm
163,"def generate_integers(a, b):
    # Ensure that the numbers are in ascending order.
    if b < a:
        a, b = b, a
    # Generate and filter even integers between a and b (inclusive).
    return [i for i in range(a, b + 1) if i % 2 == 0]",lm
156,"def int_to_mini_roman(number):
    num_map = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), (90, 'xc'), 
               (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]
    roman = ''

    while number > 0:
        for i, numeral in num_map:
            while number >= i:
                roman += numeral
                number -= i
    return roman",lm
58,"def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",lm
78,"def hex_key(num):
    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
",human
128,"def prod_signs(arr):
    if not arr:
        return None
    product_of_signs = 1
    sum_of_magnitudes = 0
    for num in arr:
        product_of_signs *= (-1 if num < 0 else (1 if num > 0 else 0))
        sum_of_magnitudes += abs(num)
    return sum_of_magnitudes * product_of_signs",lm
138,"def is_equal_to_sum_even(n):
    if n < 8 or n % 2 != 0:  # Since the smallest sum of 4 even numbers is 2+2+2+2=8 and n must be even
        return False
    else:
        return n >= 8 and n % 2 == 0",lm
45,"def triangle_area(a, h):
    return a * h / 2.0
",human
59,"def largest_prime_factor(n: int):
    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
",human
129,"def minPath(grid, k):
    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
",human
47,"def median(l: list):
    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
",human
56,"def correct_bracketing(brackets: str):
    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
",human
79,"def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""
",human
61,"def correct_bracketing(brackets: str):
    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
",human
25,"from typing import List


def factorize(n: int) -> List[int]:
    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
",human
87,"def get_row(lst, x):
    coordinates = []
    for i, row in enumerate(lst):
        for j, elem in enumerate(row):
            if elem == x:
                coordinates.append((i, -j))
    coordinates.sort()
    return [(i, -j) for i, j in coordinates]",lm
28,"from typing import List


def concatenate(strings: List[str]) -> str:
    return ''.join(strings)
",human
22,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]
",human
143,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def words_in_sentence(sentence):
    words = sentence.split()
    prime_length_words = [word for word in words if is_prime(len(word))]
    return "" "".join(prime_length_words)",lm
53,"def add(x: int, y: int):
    return x + y
",human
0,"from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False",lm
68,"def pluck(arr):
    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
",human
69,"def search(lst):
    frequency = {}
    for num in lst:
        if num in frequency:
            frequency[num] += 1
        else:
            frequency[num] = 1

    valid_numbers = [num for num, freq in frequency.items() if num <= freq]
    return max(valid_numbers) if valid_numbers else -1",lm
104,"def unique_digits(x):
    def has_no_even_digit(n):
        return all(int(digit) % 2 != 0 for digit in str(n))
    
    return sorted([item for item in x if has_no_even_digit(item)])",lm
37,"def sort_even(l: list):
    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
",human
118,"def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word) - 1, 1, -1):
        if word[i] in vowels and word[i-1].isalpha() and not word[i-1] in vowels and word[i+1].isalpha() and not word[i+1] in vowels:
            return word[i]
    return """"",lm
106,"def f(n):
    def factorial(x):
        if x == 0:
            return 1
        else:
            return x * factorial(x-1)
    
    def sum_to(x):
        return sum(range(1, x+1))
    
    result = []
    for i in range(1, n+1):
        if i % 2 == 0:  # even
            result.append(factorial(i))
        else:  # odd
            result.append(sum_to(i))
    return result",lm
114,"def minSubArraySum(nums):
    # Initialize the minimum sum as infinity
    min_sum = float('inf')
    # Iterate through the array
    for i in range(len(nums)):
        # Initialize current sum
        current_sum = 0
        for j in range(i, len(nums)):
            # Add current element to current sum
            current_sum += nums[j]
            # Update minimum sum if current sum is smaller
            min_sum = min(min_sum, current_sum)
    return min_sum",lm
29,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]
",human
118,"def get_closest_vowel(word):
    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
",human
36,"def fizz_buzz(n: int) -> int:
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",lm
37,"def sort_even(l: list):
    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]
    even_indices.sort()
    return [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]",lm
81,"def numerical_letter_grade(grades):

   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
",human
89,"def encrypt(s):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
",human
33,"def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l
",human
92,"def any_int(x, y, z):
    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
",human
123,"def get_odd_collatz(n):
    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
",human
82,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))",lm
125,"def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
",human
62,"def derivative(xs):
    return [i * xs[i] for i in range(1, len(xs))]",lm
76,"def is_simple_power(x, n):
    if n == 1:
        return x == 1
    power_val = 1
    while power_val < x:
        power_val *= n
        if power_val == x:
            return True
    return False",lm
73,"def smallest_change(arr):
    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
",human
95,"def check_dict_case(dict):
    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
",human
105,"def by_length(arr):
    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
",human
111,"def histogram(test):
    words = test.split()
    hist = {}
    for word in words:
        hist[word] = hist.get(word, 0) + 1
    max_count = max(hist.values(), default=0)
    return {word: count for word, count in hist.items() if count == max_count}",lm
31,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True",lm
162,"import hashlib

def string_to_md5(text):
    if text == """":
        return None
    else:
        return hashlib.md5(text.encode()).hexdigest()",lm
149,"def sorted_list_sum(lst):
    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
",human
68,"def pluck(arr):
    min_even = float('inf')
    min_index = -1
    for i, value in enumerate(arr):
        if value % 2 == 0 and value < min_even:
            min_even = value
            min_index = i
    if min_index == -1:
        return []
    else:
        return [min_even, min_index]",lm
129,"from heapq import heappush, heappop

def minPath(grid, k):
    N = len(grid)
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up
    best_paths = {(i, j): [] for i in range(N) for j in range(N)}
    
    # Min-heap of (path_value_list, current_row, current_col, steps_taken)
    heap = []
    for i in range(N):
        for j in range(N):
            heappush(heap, ([grid[i][j]], i, j, 1))
    
    visited = set()
    
    while heap:
        path, r, c, steps = heappop(heap)
        if steps == k:
            return path
        for dr, dc in directions:
            nr, nc = r + dr, c + dc
            if 0 <= nr < N and 0 <= nc < N and (nr, nc, steps + 1) not in visited:
                new_path = path + [grid[nr][nc]]
                if steps + 1 not in best_paths[(nr, nc)] or new_path < best_paths[(nr, nc)][steps + 1]:
                    best_paths[(nr, nc)].append(steps + 1)
                    best_paths[(nr, nc)][steps + 1] = new_path
                    heappush(heap, (new_path, nr, nc, steps + 1))
                    visited.add((nr, nc, steps + 1))",lm
90,"def next_smallest(lst):
    unique_numbers = set(lst)
    if len(unique_numbers) < 2:
        return None
    sorted_numbers = sorted(unique_numbers)
    return sorted_numbers[1]",lm
26,"from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    seen = set()
    result = []
    for number in numbers:
        if numbers.count(number) == 1:
            result.append(number)
        elif number not in seen:
            seen.add(number)
            result.append(number)
            while number in numbers:
                numbers.remove(number)
    return result",lm
46,"def fib4(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0

    a, b, c, d = 0, 0, 2, 0
    for _ in range(4, n + 1):
        a, b, c, d = b, c, d, a + b + c + d
    return d",lm
4,"from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    deviation = sum(abs(x - mean) for x in numbers) / len(numbers)
    return deviation",lm
146,"def specialFilter(nums):
    def is_odd_and_greater(num):
        str_num = str(abs(num))
        if int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0 and num > 10:
            return True
        return False

    return sum(1 for num in nums if is_odd_and_greater(num))",lm
131,"def digits(n):
    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
",human
124,"def valid_date(date):
    # Check if the date string is not empty and follows the mm-dd-yyyy format.
    if not date or len(date) != 10 or date[2] != '-' or date[5] != '-':
        return False
    
    # Split the date string into month, day, and year components.
    parts = date.split('-')
    try:
        month = int(parts[0])
        day = int(parts[1])
        year = int(parts[2])
    except ValueError:
        # If conversion to int fails, the date is invalid.
        return False
    
    # Assess month and day validity based on rules.
    if month < 1 or month > 12:
        return False
    
    # Define the maximum number of days for each month.
    days_in_month = {1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}
    
    # Check if the number of days is valid for the given month.
    if day < 1 or day > days_in_month.get(month, 31):
        return False
    
    return True",lm
69,"def search(lst):
    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
",human
6,"from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    results = []
    groups = paren_string.split()
    
    for group in groups:
        max_depth = 0
        current_depth = 0
        for char in group:
            if char == '(':
                current_depth += 1
                max_depth = max(max_depth, current_depth)
            elif char == ')':
                current_depth -= 1
        results.append(max_depth)
    
    return results",lm
78,"def hex_key(num):
    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}
    return sum(1 for digit in num if digit in prime_hex_digits)",lm
45,"def triangle_area(a, h):
    return 0.5 * a * h",lm
132,"def is_nested(string):
    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
",human
120,"def maximum(arr, k):
    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
",human
48,"def is_palindrome(text: str) -> bool:
    return text == text[::-1]",lm
151,"def double_the_difference(lst):
    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)",lm
130,"def tri(n):
    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
",human
48,"def is_palindrome(text: str):
    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
",human
155,"def even_odd_count(num):
    num_str = str(abs(num))
    even_count = sum(1 for char in num_str if int(char) % 2 == 0)
    odd_count = sum(1 for char in num_str if int(char) % 2 != 0)
    return (even_count, odd_count)",lm
158,"def find_max(words):
    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
",human
104,"def unique_digits(x):
    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
",human
43,"def pairs_sum_to_zero(l):
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False",lm
110,"def exchange(lst1, lst2):
    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
",human
148,"def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    
    if planet1 not in planets or planet2 not in planets:
        return ()
    
    index1, index2 = planets.index(planet1), planets.index(planet2)
    
    return tuple(sorted(planets[min(index1, index2)+1:max(index1, index2)], key=planets.index))",lm
7,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]
",human
24,"def largest_divisor(n: int) -> int:
    for i in range(n // 2, 0, -1):
        if n % i == 0:
            return i",lm
149,"def sorted_list_sum(lst):
    # Deleting strings with odd lengths
    filtered_lst = [s for s in lst if len(s) % 2 == 0]
    # Sorting the filtered list first by length then alphabetically
    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))
    return sorted_lst",lm
157,"def right_angle_triangle(a, b, c):
    sides = sorted([a, b, c])
    return sides[0]**2 + sides[1]**2 == sides[2]**2",lm
81,"def numerical_letter_grade(grades):
    letter_grades = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grades.append('A+')
        elif gpa > 3.7:
            letter_grades.append('A')
        elif gpa > 3.3:
            letter_grades.append('A-')
        elif gpa > 3.0:
            letter_grades.append('B+')
        elif gpa > 2.7:
            letter_grades.append('B')
        elif gpa > 2.3:
            letter_grades.append('B-')
        elif gpa > 2.0:
            letter_grades.append('C+')
        elif gpa > 1.7:
            letter_grades.append('C')
        elif gpa > 1.3:
            letter_grades.append('C-')
        elif gpa > 1.0:
            letter_grades.append('D+')
        elif gpa > 0.7:
            letter_grades.append('D')
        elif gpa > 0.0:
            letter_grades.append('D-')
        else:
            letter_grades.append('E')
    return letter_grades",lm
23,"def strlen(string: str) -> int:
    return len(string)",lm
88,"def sort_array(array):
    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
",human
144,"def simplify(x, n):
    def fraction_to_tuple(fraction):
        numerator, denominator = map(int, fraction.split('/'))
        return numerator, denominator
    
    def simplify_fraction(numerator, denominator):
        gcd = lambda a, b: a if not b else gcd(b, a % b)
        common_divisor = gcd(numerator, denominator)
        return numerator // common_divisor, denominator // common_divisor
    
    num_x, denom_x = fraction_to_tuple(x)
    num_n, denom_n = fraction_to_tuple(n)
    
    result_num = num_x * num_n
    result_denom = denom_x * denom_n
    
    simplified_num, simplified_denom = simplify_fraction(result_num, result_denom)
    
    return simplified_denom == 1",lm
161,"def solve(s):
    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
",human
86,"def anti_shuffle(s):
    words = s.split(' ')
    sorted_words = [''.join(sorted(word)) for word in words]
    return ' '.join(sorted_words)",lm
141,"def file_name_check(file_name):
    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
",human
128,"def prod_signs(arr):
    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
",human
17,"from typing import List

def parse_music(music_string: str) -> List[int]:
    notes = music_string.split()
    beats = []
    
    for note in notes:
        if note == 'o':
            beats.append(4)
        elif note == 'o|':
            beats.append(2)
        elif note == '.|':
            beats.append(1)
    
    return beats",lm
96,"def count_up_to(n):
    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

",human
40,"def triples_sum_to_zero(l: list):
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
",human
160,"def do_algebra(operator, operand):
    expression = str(operand[0])
    for op, num in zip(operator, operand[1:]):
        expression += f"" {op} {num}""
    return eval(expression)",lm
70,"def strange_sort_list(lst):
    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
",human
93,"def encode(message):
    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
",human
30,"def get_positive(l: list):
    return [e for e in l if e > 0]
",human
10,"def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
",human
59,"def largest_prime_factor(n: int):
    def is_prime(num):
        if num <= 1:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    largest_factor = None
    factor = 2
    while n > 1:
        while n % factor == 0:
            n /= factor
            if is_prime(factor):
                largest_factor = factor
        factor += 1
    return largest_factor",lm
19,"def sort_numbers(numbers: str) -> str:
    num_words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']
    num_dict = {word: index for index, word in enumerate(num_words)}
    numbers_list = numbers.split()
    sorted_numbers = sorted(numbers_list, key=lambda x: num_dict[x])
    return ' '.join(sorted_numbers)",lm
159,"def eat(number, need, remaining):
    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
",human
109,"def move_one_ball(arr):
    if not arr:
        return True
    shifts_needed = 0
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1]:
            shifts_needed += 1
            index_of_potential_first_element = i
    
    if shifts_needed > 1:
        return False
    elif shifts_needed == 0:
        return True
    else:
        # Check if the part after the potential first element till end is sorted
        for i in range(index_of_potential_first_element + 1, len(arr)):
            if arr[i] < arr[i-1]:
                return False
        # Check if the first part of the array is less than the last element
        return arr[0] >= arr[-1]",lm
65,"def circular_shift(x, shift):
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
",human
119,"def match_parens(lst):
    # Analyze first string
    balance = 0
    for char in lst[0]:
        if char == '(':
            balance += 1
        else:
            balance -= 1
        if balance < 0:
            break
    
    # If the first string is not balanced, try starting with the second string
    if balance < 0:
        balance = 0
        # Start with the second string
        for char in lst[1]:
            if char == '(':
                balance += 1
            else:
                balance -= 1
            if balance < 0:
                return 'No'  # If even the second string start leads to imbalance, return ""No""
        # Check if completion with the first string is possible
        for char in lst[0]:
            if char == '(':
                balance += 1
            else:
                balance -= 1
            if balance < 0:
                return 'No'
    else:
        # If the first string potentially leads to a good string, check with appending the second.
        for char in lst[1]:
            if char == '(':
                balance += 1
            else:
                balance -= 1
            if balance < 0:
                return 'No'
    
    return 'Yes' if balance == 0 else 'No'",lm
57,"def monotonic(l: list):
    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
",human
139,"def special_factorial(n):
    def factorial(x):
        if x == 0 or x == 1:
            return 1
        else:
            return x * factorial(x - 1)
    
    result = 1
    for i in range(1, n + 1):
        result *= factorial(i)
    return result",lm
147,"def get_max_triples(n):
    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
",human
29,"from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [string for string in strings if string.startswith(prefix)]",lm
16,"def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))
",human
94,"def skjkasdkd(lst):
    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

",human
121,"def solution(lst):
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
",human
98,"def count_upper(s):
    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
",human
137,"def compare_one(a, b):
    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
",human
34,"def unique(l: list):
    return sorted(set(l))",lm
119,"def match_parens(lst):
    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
",human
126,"def is_sorted(lst):
    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
",human
127,"def intersection(interval1, interval2):
    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
",human
12,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
",human
159,"def eat(number, need, remaining):
    if remaining >= need:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]",lm
138,"def is_equal_to_sum_even(n):
    return n%2 == 0 and n >= 8
",human
12,"from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",lm
130,"def tri(n):
    if n == 0:
        return [1]
    elif n == 1:
        return [1, 3]
    
    memo = [0] * (n + 2)  # Extra space for handling tri(n+1) in odd cases
    memo[0], memo[1] = 1, 3
    
    for i in range(2, n + 1):
        if i % 2 == 0:
            memo[i] = 1 + i // 2
        else:
            memo[i] = memo[i-1] + memo[i-2] + memo[i+1]
    
    return memo[:n+1]",lm
126,"def is_sorted(lst):
    if len(lst) != len(set(lst)):
        counter = {}
        for number in lst:
            if number in counter:
                counter[number] += 1
                if counter[number] > 2:
                    return False
            else:
                counter[number] = 1
    return lst == sorted(lst)",lm
145,"def order_by_points(nums):
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
",human
70,"def strange_sort_list(lst):
    lst.sort()
    i, j = 0, len(lst) - 1
    result = []
    while i <= j:
        if i == j:
            result.append(lst[i])
        else:
            result.extend([lst[i], lst[j]])
        i, j = i + 1, j - 1
    return result",lm
89,"def encrypt(s):
    result = """"
    for char in s:
        if char.isalpha():
            # Calculate the shift, considering both uppercase and lowercase characters
            shift = 4 if char.islower() else 4
            # Shift the character and append it to the result string
            result += chr((ord(char) - 97 + shift) % 26 + 97) if char.islower() else chr((ord(char) - 65 + shift) % 26 + 65)
        else:
            result += char
    return result",lm
21,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
",human
145,"def order_by_points(nums):
    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))",lm
27,"def flip_case(string: str) -> str:
    return string.swapcase()
",human
13,"def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = b, a % b
    return a
",human
71,"def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
",human
136,"def largest_smallest_integers(lst):
    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
",human
50,"def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",lm
52,"def below_threshold(l: list, t: int) -> bool:
    return all(x < t for x in l)",lm
41,"def car_race_collision(n: int) -> int:
    return n",lm
38,"def decode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",lm
60,"def sum_to_n(n: int):
    return sum(range(n + 1))
",human
75,"def is_multiply_prime(a):
    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
",human
54,"def same_chars(s0: str, s1: str) -> bool:
    return set(s0) == set(s1)",lm
120,"def maximum(arr, k):
    return sorted(arr, reverse=True)[:k]",lm
144,"def simplify(x, n):
    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
",human
108,"def count_nums(arr):
    def digit_sum(n):
        return sum(int(d) for d in str(abs(n))) - 2*int(str(n)[0]) if str(n)[0] == '-' else sum(int(d) for d in str(n))
    
    return sum(1 for x in arr if digit_sum(x) > 0)",lm
5,"from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []
    result = [numbers[0]]
    for number in numbers[1:]:
        result += [delimeter, number]
    return result",lm
158,"def find_max(words):
    max_unique = 0
    result = """"
    for word in words:
        unique_chars = len(set(word))
        if unique_chars > max_unique or (unique_chars == max_unique and word < result):
            max_unique = unique_chars
            result = word
    return result",lm
57,"def monotonic(l: list) -> bool:
    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))",lm
91,"def is_bored(S):
    sentences = S.replace('?', '.').replace('!', '.').split('.')
    count = 0
    for sentence in sentences:
        words = sentence.strip().split()
        if len(words) > 0 and words[0] == ""I"":
            count += 1
    return count",lm
133,"import math

def sum_squares(lst):
    return sum([math.ceil(x)**2 for x in lst])",lm
90,"def next_smallest(lst):
    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
",human
80,"def is_happy(s):
    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
",human
153,"def Strongest_Extension(class_name, extensions):
    def calculate_strength(extension):
        uppercase_count = sum(1 for char in extension if char.isupper())
        lowercase_count = sum(1 for char in extension if char.islower())
        return uppercase_count - lowercase_count

    strongest_extension = None
    highest_strength = float('-inf')

    for extension in extensions:
        current_strength = calculate_strength(extension)
        if current_strength > highest_strength:
            strongest_extension = extension
            highest_strength = current_strength

    return f""{class_name}.{strongest_extension}""",lm
152,"def compare(game,guess):
    return [abs(x-y) for x,y in zip(game,guess)]
",human
74,"def total_match(lst1, lst2):
    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
",human
97,"def multiply(a, b):
    return (abs(a) % 10) * (abs(b) % 10)",lm
65,"def circular_shift(x, shift):
    x_str = str(x)
    n = len(x_str)
    if shift >= n:
        return x_str[::-1]
    return x_str[-shift:] + x_str[:-shift]",lm
110,"def exchange(lst1, lst2):
    even_needed = sum(1 for x in lst1 if x % 2 != 0)
    even_available = sum(1 for x in lst2 if x % 2 == 0)
    return ""YES"" if even_needed <= even_available else ""NO""",lm
125,"def split_words(txt):
    if ' ' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.split(',')
    else:
        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)",lm
66,"def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",lm
20,"from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()  # Sort the numbers to make finding pairs easier
    closest_pair = (numbers[0], numbers[1])
    min_difference = abs(numbers[1] - numbers[0])

    for i in range(1, len(numbers) - 1):
        current_difference = abs(numbers[i+1] - numbers[i])
        if current_difference < min_difference:
            min_difference = current_difference
            closest_pair = (numbers[i], numbers[i+1])

    return closest_pair",lm
67,"def fruit_distribution(s, n):
    fruits = s.split()
    apples = int(fruits[0])
    oranges = int(fruits[3])
    total_fruits = n
    mangoes = total_fruits - apples - oranges
    return mangoes",lm
146,"def specialFilter(nums):
    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
",human
91,"def is_bored(S):
    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
",human
34,"def unique(l: list):
    return sorted(list(set(l)))
",human
43,"def pairs_sum_to_zero(l):
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
",human
66,"def digitSum(s):
    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
",human
63,"def fibfib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
",human
131,"def digits(n):
    odd_product = 1
    has_odd = False
    for digit in str(n):
        if int(digit) % 2 != 0:
            has_odd = True
            odd_product *= int(digit)
    return odd_product if has_odd else 0",lm
63,"def fibfib(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b, c = 0, 0, 1
        for _ in range(3, n + 1):
            a, b, c = b, c, a + b + c
        return c",lm
44,"def change_base(x: int, base: int) -> str:
    if x < base:
        return str(x)
    else:
        return change_base(x // base, base) + str(x % base)",lm
18,"def how_many_times(string: str, substring: str) -> int:
    count = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            count += 1
    return count",lm
60,"def sum_to_n(n: int):
    return n * (n + 1) // 2",lm
82,"def prime_length(string):
    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
",human
143,"def words_in_sentence(sentence):
    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
",human
61,"def correct_bracketing(brackets: str) -> bool:
    count = 0
    for char in brackets:
        if char == '(':
            count += 1
        elif char == ')':
            count -= 1
        if count < 0:
            return False
    return count == 0",lm
26,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
",human
115,"def max_fill(grid, capacity):
    total_units_of_water = sum(row.count(1) for row in grid)
    num_buckets = total_units_of_water / capacity
    return math.ceil(num_buckets)",lm
35,"def max_element(l: list):
    return max(l)",lm
136,"def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    
    largest_negative = max(negatives) if negatives else None
    smallest_positive = min(positives) if positives else None
    
    return (largest_negative, smallest_positive)",lm
121,"def solution(lst):
    return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 != 0)",lm
116,"def sort_array(arr):
    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
",human
97,"def multiply(a, b):
    return abs(a % 10) * abs(b % 10)
",human
112,"def reverse_delete(s,c):
    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
",human
3,"from typing import List


def below_zero(operations: List[int]) -> bool:
    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
",human
49,"def modp(n: int, p: int) -> int:
    return pow(2, n, p)",lm
140,"def fix_spaces(text):
    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
",human
42,"def incr_list(l: list):
    return [(e + 1) for e in l]
",human
50,"def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
",human
2,"def truncate_number(number: float) -> float:
    return number % 1.0
",human
9,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
",human
27,"def flip_case(string: str) -> str:
    return ''.join(c.upper() if c.islower() else c.lower() for c in string)",lm
8,"from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    if not numbers:
        return (0, 1)
    sum_of_numbers = sum(numbers)
    product_of_numbers = 1
    for number in numbers:
        product_of_numbers *= number
    return (sum_of_numbers, product_of_numbers)",lm
161,"def solve(s):
    if all(not c.isalpha() for c in s):
        return s[::-1]
    else:
        return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)",lm
31,"def is_prime(n):
    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
",human
32,"import math

def find_zero(xs: list):
    def poly(x):
        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])
    
    if len(xs) % 2 != 0 or all(coeff == 0 for coeff in xs):
        raise ValueError(""Invalid input: even number of coefficients and at least one non-zero coefficient required."")
    
    low, high = -100, 100  # Initial bounds for the zero search
    while low < high:
        mid = (low + high) / 2
        if poly(mid) == 0:
            return mid
        elif poly(mid) > 0:
            high = mid
        else:
            low = mid + 0.001  # Increment to avoid infinite loop
    
    return low",lm
49,"def modp(n: int, p: int):
    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
",human
109,"def move_one_ball(arr):
    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
",human
19,"from typing import List


def sort_numbers(numbers: str) -> str:
    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
",human
64,"FIX = """"""
Add more test cases.
""""""

def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
",human
85,"def add(lst):
    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)",lm
86,"def anti_shuffle(s):
    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
",human
122,"def add_elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
",human
92,"def any_int(x, y, z):
    if not all(isinstance(i, int) for i in [x, y, z]):
        return False
    return x == y + z or y == x + z or z == x + y",lm
21,"from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    if not numbers or len(numbers) < 2:
        raise ValueError(""Input list must contain at least two elements."")
    min_num = min(numbers)
    max_num = max(numbers)
    if min_num == max_num:
        raise ValueError(""Input list elements cannot all be the same."")
    scale = max_num - min_num
    return [(num - min_num) / scale for num in numbers]",lm
156,"def int_to_mini_roman(number):
    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
",human
88,"def sort_array(array):
    if not array or len(array) == 1:
        return array.copy()
    if (array[0] + array[-1]) % 2 == 0:
        return sorted(array, reverse=True)
    else:
        return sorted(array)",lm
83,"def starts_one_ends(n):
    if n == 1: return 1
    return 18 * (10 ** (n - 2))
",human
122,"def add_elements(arr, k):
    return sum([x for x in arr[:k] if 10 <= x < 100])",lm
32,"import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
",human
154,"def cycpattern_check(a, b):
    if len(b) > len(a):
        return False
    for _ in range(len(b)):
        if b in a:
            return True
        # Rotate 'b'
        b = b[1:] + b[:1]
    return False",lm
99,"def closest_integer(value):
    num = float(value)
    lower = int(num)
    upper = lower + 1 if num > 0 else lower - 1
    if (num - lower) < (upper - num):
        return lower
    elif (num - lower) > (upper - num):
        return upper
    else:
        return upper if num > 0 else lower",lm
102,"def choose_num(x, y):
    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
",human
84,"def solve(N):
    return bin(sum(int(i) for i in str(N)))[2:]
",human
39,"def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b

def prime_fib(n):
    prime_count = 0
    fib_index = 1
    while True:
        fib_number = fibonacci(fib_index)
        if is_prime(fib_number):
            prime_count += 1
            if prime_count == n:
                return fib_number
        fib_index += 1",lm
139,"def special_factorial(n):
    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
",human
62,"def derivative(xs: list):
    return [(i * x) for i, x in enumerate(xs)][1:]
",human
15,"def string_sequence(n: int) -> str:
    return ' '.join([str(x) for x in range(n + 1)])
",human
112,"def reverse_delete(s, c):
    result_str = ''.join([char for char in s if char not in c])
    return (result_str, result_str == result_str[::-1])",lm
153,"def Strongest_Extension(class_name, extensions):
    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

",human
79,"def decimal_to_binary(decimal):
    binary_str = 'db' + bin(decimal)[2:] + 'db'
    return binary_str",lm
116,"def sort_array(arr):
    # Sort the array based on the conditions provided
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",lm
135,"def can_arrange(arr):
    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
",human
101,"def words_string(s):
    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
",human
100,"def make_a_pile(n):
    stones_per_level = []
    next_stone_count = n
    for i in range(n):
        stones_per_level.append(next_stone_count)
        if next_stone_count % 2 == 0:
            next_stone_count += 2
        else:
            next_stone_count += 2
    return stones_per_level",lm
147,"def get_max_triples(n):
    # Create the array a as per the given conditions
    a = [i*i - i + 1 for i in range(1, n+1)]
    # Initialize count to 0 for counting valid triples
    count = 0
    # Iterate through the array to find the valid triples
    for i in range(n):
        for j in range(i+1, n):
            for k in range(j+1, n):
                # Check if the sum of a[i], a[j], and a[k] is a multiple of 3
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",lm
0,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
",human
142,"def sum_squares(lst):
    ""
    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
",human
77,"def iscube(a):
    if a >= 0:
        root = round(a ** (1/3))
    else:
        root = round(-((-a) ** (1/3)))
    return root**3 == a",lm
4,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
",human
134,"def check_if_last_char_is_a_letter(txt):
    if not txt or not txt[-1].isalpha() or txt[-1].isspace():
        return False
    if len(txt) > 1 and txt[-2].isalpha():
        return False
    return True",lm
14,"from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i] for i in range(1, len(string) + 1)]",lm
33,"def sort_third(l: list):
    sorted_values = sorted(l[::3])
    result_list = []
    sorted_index = 0
    for i in range(len(l)):
        if i % 3 == 0:
            result_list.append(sorted_values[sorted_index])
            sorted_index += 1
        else:
            result_list.append(l[i])
    return result_list",lm
72,"def will_it_fly(q,w):
    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
",human
25,"from typing import List

def factorize(n: int) -> List[int]:
    i = 2
    factors = []
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors",lm
2,"def truncate_number(number: float) -> float:
    return number - int(number)",lm
73,"def smallest_change(arr):
    changes = 0
    left = 0
    right = len(arr) - 1
    while left < right:
        if arr[left] != arr[right]:
            changes += 1
        left += 1
        right -= 1
    return changes",lm
74,"def total_match(lst1, lst2):
    count1 = sum(len(s) for s in lst1)
    count2 = sum(len(s) for s in lst2)
    return lst1 if count1 <= count2 else lst2",lm
64,"def vowels_count(s):
    vowels = ""aeiouAEIOU""
    count = 0
    for char in s:
        if char in vowels:
            count += 1
    if len(s) > 0 and s[-1].lower() == 'y':
        count += 1
    return count",lm
111,"def histogram(test):
    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
",human
107,"def even_odd_palindrome(n):
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
",human
46,"def fib4(n: int):
    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
",human
53,"def add(x: int, y: int) -> int:
    return x + y",lm
52,"def below_threshold(l: list, t: int):
    for e in l:
        if e >= t:
            return False
    return True
",human
1,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
",human
35,"def max_element(l: list):
    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
",human
108,"def count_nums(arr):
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
",human
58,"def common(l1: list, l2: list):
    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
",human
40,"def triples_sum_to_zero(l: list):
    n = len(l)
    l.sort()
    for i in range(n - 2):
        left = i + 1
        right = n - 1
        while left < right:
            current_sum = l[i] + l[left] + l[right]
            if current_sum == 0:
                return True
            elif current_sum < 0:
                left += 1
            else:
                right -= 1
    return False",lm
28,"from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",lm
113,"def odd_count(lst):
    result = []
    for s in lst:
        odd_count = sum(1 for char in s if int(char) % 2 != 0)
        replaced_string = f""the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.""
        result.append(replaced_string)
    return result",lm
14,"from typing import List


def all_prefixes(string: str) -> List[str]:
    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
",human
13,"def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = b, a % b
    return a",lm
117,"def select_words(s, n):
    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

",human
23,"def strlen(string: str) -> int:
    return len(string)
",human
137,"def compare_one(a, b):
    def convert_to_float(x):
        if isinstance(x, str):
            x = x.replace("","", ""."")
        return float(x)

    # Convert both values to floats for comparison
    a_float = convert_to_float(a)
    b_float = convert_to_float(b)

    # Return None if they are equal
    if a_float == b_float:
        return None
    
    # Determine the larger value
    larger = a if a_float > b_float else b
    
    # Return the original type
    if isinstance(larger, str):
        # If the original string had a "","", return it as such, else as a "".""
        if "","" in larger or ""."" in larger:
            return larger
        else:
            return str(larger)
    elif isinstance(a, int) and a_float == int(a):
        return int(larger)
    else:
        return larger",lm
11,"from typing import List


def string_xor(a: str, b: str) -> str:
    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
",human
55,"def fib(n: int) -> int:
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a",lm
7,"from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]",lm
51,"def remove_vowels(text):
    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
",human
83,"def starts_one_ends(n):
    if n == 1:
        return 1  # There's only one digit number which starts and ends with 1.
    else:
        # For n > 1, the first or the last digit can be 1. If the first digit is 1, there are 10^(n-1) options for the rest.
        # If the last digit is 1, again there are 10^(n-1) options. But 11, 111, etc. are counted twice.
        # So we subtract the count for (n-1) digit numbers starting or ending with 1 to avoid duplication.
        return 2 * (10 ** (n - 1)) - starts_one_ends(n - 1)",lm
84,"def solve(N):
    # Calculate the sum of the digits in N
    sum_of_digits = sum([int(digit) for digit in str(N)])
    # Convert the sum to binary and return it
    return bin(sum_of_digits)[2:]",lm
163,"def generate_integers(a, b):
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
",human
75,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_multiply_prime(a):
    if a >= 100:
        return False
    prime_factors = []
    for i in range(2, a):
        if a % i == 0 and is_prime(i):
            prime_factors.append(i)
            a //= i
    if len(prime_factors) == 3 and a == 1:
        return True
    return False",lm
150,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def x_or_y(n, x, y):
    return x if is_prime(n) else y",lm
127,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start_max = max(interval1[0], interval2[0])
    end_min = min(interval1[1], interval2[1])
    if start_max > end_min:
        return ""NO""
    intersection_length = end_min - start_max + 1
    return ""YES"" if is_prime(intersection_length) else ""NO""",lm
101,"import re

def words_string(s):
    return re.split(',\s*|\s+', s)",lm
95,"def check_dict_case(dict):
    if not dict:
        return False
    all_lower = all(key.islower() for key in dict.keys() if isinstance(key, str))
    all_upper = all(key.isupper() for key in dict.keys() if isinstance(key, str))
    return all_lower or all_upper",lm
106,"def f(n):
    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
",human
140,"def fix_spaces(text):
    import re
    # Replace more than 2 consecutive spaces with '-'
    text = re.sub(r' {3,}', '-', text)
    # Replace remaining spaces with '_'
    text = text.replace(' ', '_')
    return text",lm
54,"def same_chars(s0: str, s1: str):
    return set(s0) == set(s1)
",human
22,"from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]",lm
94,"def is_prime(n):
    """"""Check if a number is prime.""""""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def sum_of_digits(n):
    """"""Return the sum of the digits of a number.""""""
    return sum(int(digit) for digit in str(n))

def skjkasdkd(lst):
    largest_prime = -1
    for num in lst:
        if is_prime(num) and num > largest_prime:
            largest_prime = num
    return sum_of_digits(largest_prime)",lm
