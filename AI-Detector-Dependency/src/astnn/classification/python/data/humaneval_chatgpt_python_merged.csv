idx,code,label
1,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    paren_string = paren_string.replace("" "", """")  # Remove spaces from the input string
    grouped_parentheses = paren_string.split("")("")  # Split the string at occurrences of ')('
    separated_groups = [""("" + group + "")"" for group in grouped_parentheses]  # Add parentheses to each group
    return separated_groups",lm
135,"def can_arrange(arr):
    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
",human
127,"def intersection(interval1, interval2):
    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
",human
64,"FIX = """"""
Add more test cases.
""""""

def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
",human
25,"from typing import List


def factorize(n: int) -> List[int]:
    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
",human
82,"def prime_length(string):
    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
",human
104,"def unique_digits(x):
    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
",human
126,"def is_sorted(lst):
    if len(lst) <= 1:
        return True

    for i in range(1, len(lst)):
        if lst[i] <= lst[i-1]:
            return False

    return True",lm
8,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
",human
130,"def tri(n):
    if n < 0:
        return []
    
    sequence = [3] if n >= 1 else []
    
    if n >= 2:
        sequence.append(1 + n / 2)
        
    if n >= 3:
        for i in range(3, n + 1):
            if i % 2 == 0:
                sequence.append(1 + i / 2)
            else:
                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])
    
    return sequence",lm
118,"def get_closest_vowel(word):
    vowels = ['a', 'e', 'i', 'o', 'u']
    consonants = []
    for i in range(len(word)-2, 0, -1):
        if word[i] not in vowels:
            consonants.append(word[i])
        else:
            return word[i]
    return """"",lm
15,"def string_sequence(n: int) -> str:
    return ' '.join(str(i) for i in range(n+1))",lm
106,"def f(n):
    result = []
    for i in range(1, n+1):
        if i % 2 == 0:
            factorial = 1
            for j in range(1, i+1):
                factorial *= j
            result.append(factorial)
        else:
            result.append(sum(range(1, i+1)))
    return result",lm
20,"from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    min_diff = float('inf')
    closest_pair = None
    
    for i in range(len(numbers) - 1):
        diff = numbers[i+1] - numbers[i]
        if diff < min_diff:
            min_diff = diff
            closest_pair = (numbers[i], numbers[i+1])
    
    return closest_pair",lm
29,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """"""
    Filter an input list of strings only for ones that start with a given prefix.
    """"""
    filtered_strings = []
    for string in strings:
        if string.startswith(prefix):
            filtered_strings.append(string)
    return filtered_strings",lm
31,"def is_prime(n):
    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
",human
92,"def any_int(x, y, z):
    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
",human
125,"def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
",human
41,"def car_race_collision(n: int):
    # The number of collisions can be calculated by finding the number of pairs of cars moving in opposite directions.
    # Since each car from the left to right set can collide with each car from the right to left set, we have n * n collisions.
    # However, since each car can collide only once, we divide by 2 to avoid counting duplicate collisions.

    return n * n // 2",lm
54,"def same_chars(s0: str, s1: str):
    return set(s0) == set(s1)
",human
40,"def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.
    """"""
    length = len(l)
    # Iterate over each element in the list
    for i in range(length):
        # Iterate over the remaining elements
        for j in range(i + 1, length):
            for k in range(j + 1, length):
                # Check if the sum of the three elements is zero
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False",lm
63,"def fibfib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
",human
79,"def decimal_to_binary(decimal):
    bin_str = bin(decimal)[2:]
    binary = ' '.join(bin_str)
    return 'db' + binary.replace(' ', '') + 'db'",lm
91,"def is_bored(S):
    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
",human
100,"def make_a_pile(n):
    pile = []
    for i in range(n):
        pile.append(n + 2*i)
    return pile",lm
139,"def special_factorial(n):
    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
",human
163,"def generate_integers(a, b):
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
",human
69,"def search(lst):
    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
",human
60,"def sum_to_n(n: int):
    return sum(range(n + 1))
",human
150,"def x_or_y(n, x, y):
    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
",human
69,"def search(lst):
    freq = {}
    for num in lst:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    
    max_val = -1
    for num in freq:
        if freq[num] >= num and num > max_val:
            max_val = num
    
    return max_val",lm
9,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
",human
105,"def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """"""
    # First, sort the array in ascending order
    arr = sorted([num for num in arr if 1 <= num <= 9])
    
    # Then, reverse the array
    arr.reverse()
    
    # Replace each digit by its corresponding name from ""One"", ""Two"", ""Three"", etc.
    digit_names = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']
    arr = [digit_names[num-1] for num in arr]
    
    return arr",lm
64,"def vowels_count(s):
    """"""
    Returns the number of vowels in a word.
    """"""
    vowel_count = 0
    for char in s:
        if char.lower() in ['a', 'e', 'i', 'o', 'u']:
            vowel_count += 1
    return vowel_count",lm
112,"def reverse_delete(s,c):
    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
",human
105,"def by_length(arr):
    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
",human
159,"def eat(number, need, remaining):
    """"""
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """"""
    
    total_eaten = number + need
    left = remaining - need if need <= remaining else 0
    
    return [total_eaten, left]",lm
135,"def can_arrange(arr):
    largest_index = -1
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1]:
            largest_index = i-1
    return largest_index",lm
123,"def get_odd_collatz(n):
    collatz_seq = [n]
    while n != 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
        collatz_seq.append(n)
    collatz_odd = [num for num in collatz_seq if num % 2 != 0]
    return sorted(collatz_odd)",lm
49,"def modp(n: int, p: int) -> int:
    return (2 ** n) % p",lm
13,"def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = b, a % b
    return a
",human
111,"def histogram(test):
    letter_count = {}
    test = test.split()
    for letter in test:
        if letter in letter_count:
            letter_count[letter] += 1
        else:
            letter_count[letter] = 1
    max_count = max(letter_count.values())
    result = {}
    for letter, count in letter_count.items():
        if count == max_count:
            result[letter] = count
    return result",lm
96,"def count_up_to(n):
    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

",human
140,"def fix_spaces(text):
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example 1"") == ""Example_1""
    fix_spaces("" Example 2"") == ""_Example_2""
    fix_spaces("" Example   3"") == ""_Example-3""
    """"""
    text = text.replace("" "", ""_"")
    while ""  "" in text:
        text = text.replace(""  "", ""-"")
    return text",lm
24,"def largest_divisor(n: int) -> int:
    for i in reversed(range(n)):
        if n % i == 0:
            return i
",human
14,"from typing import List


def all_prefixes(string: str) -> List[str]:
    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
",human
21,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
",human
70,"def strange_sort_list(lst):
    sorted_lst = []
    lst.sort()
    while lst:
        sorted_lst.append(lst.pop(0))
        if lst:
            sorted_lst.append(lst.pop(-1))
    return sorted_lst",lm
124,"def valid_date(date):
    parts = date.split('-')
    if len(parts) != 3:
        return False
    
    month = int(parts[0])
    day = int(parts[1])
    year = int(parts[2])
    
    if month < 1 or month > 12:
        return False
    
    if day < 1 or day > 31:
        return False
    
    if month == 2:
        if day > 29:
            return False
        elif day == 29:
            if (year % 4 != 0) or (year % 100 == 0 and year % 400 != 0):
                return False
    
    if (month == 4 or month == 6 or month == 9 or month == 11) and day > 30:
        return False
    
    return True",lm
75,"def is_multiply_prime(a):
    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
",human
128,"def prod_signs(arr):
    if len(arr) == 0:
        return None

    sign_product = 1
    magnitude_sum = 0

    for num in arr:
        sign = 0 if num == 0 else (1 if num > 0 else -1)
        sign_product *= sign
        magnitude_sum += abs(num)

    return magnitude_sum * sign_product",lm
48,"def is_palindrome(text: str):
    return text == text[::-1]",lm
147,"def get_max_triples(n):
    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
",human
91,"def is_bored(S):
    boredoms = 0
    sentences = S.split('. ')  # split the string into sentences
    for sentence in sentences:
        if sentence.startswith(""I""):
            boredoms += 1
    return boredoms",lm
34,"def unique(l: list):
    return sorted(list(set(l)))
",human
3,"from typing import List


def below_zero(operations: List[int]) -> bool:
    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
",human
137,"def compare_one(a, b):
    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
",human
29,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]
",human
47,"def median(l: list):
    l.sort()
    n = len(l)
    mid = n // 2
    if n % 2 == 0:
        return (l[mid - 1] + l[mid]) / 2
    else:
        return l[mid]",lm
39,"def prime_fib(n: int) -> int:
    """"""
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    """"""
    def is_prime(number: int):
        if number < 2:
            return False
        for divisor in range(2, int(number**0.5) + 1):
            if number % divisor == 0:
                return False
        return True

    fib = [0, 1]
    i = 2
    while True:
        fib.append(fib[i - 1] + fib[i - 2])
        if is_prime(fib[i]):
            n -= 1
            if n == 0:
                return fib[i]
        i += 1",lm
143,"def words_in_sentence(sentence):
    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
",human
106,"def f(n):
    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
",human
89,"def encrypt(s):
    enc_str = """"

    for char in s:
        if char.isalpha():
            ascii_val = ord(char)
            shifted_ascii = ascii_val + 2 * 2
            if char.isupper():
                if shifted_ascii > ord(""Z""):
                    shifted_ascii -= 26
            else:
                if shifted_ascii > ord(""z""):
                    shifted_ascii -= 26
            enc_str += chr(shifted_ascii)
        else:
            enc_str += char
    
    return enc_str",lm
45,"def triangle_area(a, h):
    area = (a * h) / 2
    return area",lm
66,"def digitSum(s):
    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
",human
31,"def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True",lm
162,"def string_to_md5(text):
    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
",human
103,"def rounded_avg(n, m):
    if n > m:
        return -1
    
    avg = round(sum(range(n, m+1)) / (m - n + 1))
    
    return bin(avg)",lm
102,"def choose_num(x, y):
    max_num = -1 
    for num in range(x, y+1):
        if num % 2 == 0 and num > max_num:
            max_num = num
    return max_num",lm
139,"def special_factorial(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        result = 1
        for i in range(1, n + 1):
            result *= i**special_factorial(i-1)
        return result",lm
79,"def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""
",human
57,"def monotonic(l: list):
    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
",human
95,"def check_dict_case(dict):
    if len(dict) == 0:
        return False
    keys = list(dict.keys())
    for key in keys:
        if key.islower():
            for key in keys:
                if not key.islower():
                    return False
            return True
        elif key.isupper():
            for key in keys:
                if not key.isupper():
                    return False
            return True
        else:
            return False",lm
103,"def rounded_avg(n, m):
    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
",human
70,"def strange_sort_list(lst):
    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
",human
115,"def max_fill(grid, capacity):
    import math
    
    rows = len(grid)
    cols = len(grid[0])
    total_water = 0
    
    for row in grid:
        total_water += sum(row)
    
    buckets_needed = math.ceil(total_water / capacity)
    
    return buckets_needed",lm
159,"def eat(number, need, remaining):
    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
",human
131,"def digits(n):
    """"""
    Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    """"""

    prod = 1
    
    while n > 0:
        digit = n % 10
        if digit % 2 == 1:
            prod *= digit
        n = n // 10
    
    if prod == 1:
        return 0
    return prod",lm
10,"def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
",human
36,"def fizz_buzz(n: int):
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count

print(fizz_buzz(50))
print(fizz_buzz(78))
print(fizz_buzz(79))",lm
22,"def filter_integers(values):
    """"""
    Filter given list of any python values only for integers
    """"""
    return [value for value in values if isinstance(value, int)]",lm
37,"def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    """"""
    even_values = l[::2]
    sorted_even_values = sorted(even_values)
    result = [l[i] if i % 2 != 0 else sorted_even_values.pop(0) for i in range(len(l))]
    return result",lm
84,"def solve(N):
    """"""
    Given a positive integer N, return the total sum of its digits in binary.
    """"""

    # Convert N to binary representation
    binary = bin(N)[2:]

    # Calculate the sum of binary digits
    sum_of_digits = sum(int(digit) for digit in binary)

    # Convert the sum to binary representation
    binary_sum = bin(sum_of_digits)[2:]

    # Return the binary sum
    return binary_sum",lm
62,"def derivative(xs):
    derivative_xs = []
    for i in range(1, len(xs)):
        derivative_xs.append(xs[i] * i)
    return derivative_xs",lm
86,"def anti_shuffle(s):
    #split the string into words
    words = s.split()
    #initialize an empty string to store the ordered version of the string
    ordered_string = """"
    
    #iterate over each word in the words list
    for word in words:
        #convert the word into a list of characters
        characters = list(word)
        #sort the characters in ascending order based on their ascii value
        sorted_characters = sorted(characters, key=lambda x: ord(x))
        #join the sorted characters back to form a word
        sorted_word = """".join(sorted_characters)
        #append the sorted word to the ordered string
        ordered_string += sorted_word + "" ""
    
    #remove the trailing space and return the ordered string
    return ordered_string.rstrip()",lm
75,"def is_multiply_prime(a):
    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
    factors = []
    for prime in primes:
        if a % prime == 0:
            factors.append(prime)
            if len(factors) == 3:
                return True
    return False",lm
16,"def count_distinct_characters(string: str) -> int:
    distinct_characters = set(string.lower())
    return len(distinct_characters)",lm
9,"from typing import List, Tuple

def rolling_max(numbers: List[int]) -> List[int]:
    rolling_max_list = []
    current_max = None

    for number in numbers:
        if current_max is None or number > current_max:
            current_max = number
        rolling_max_list.append(current_max)
    
    return rolling_max_list",lm
16,"def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))
",human
134,"def check_if_last_char_is_a_letter(txt):
    if len(txt) == 0:
        return False
    else:
        last_char = txt[-1]
        if last_char.isalpha() and not last_char.isalnum():
            return True
        else:
            return False",lm
30,"def get_positive(l: list):
    return [e for e in l if e > 0]
",human
93,"def encode(message):
    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
",human
4,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
",human
161,"def solve(s):
    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
",human
90,"def next_smallest(lst):
    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
",human
133,"def sum_squares(lst):
    sum = 0
    for num in lst:
        sum += int(num) ** 2
    return sum",lm
18,"def how_many_times(string: str, substring: str) -> int:
    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
",human
156,"def int_to_mini_roman(number):
    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
",human
128,"def prod_signs(arr):
    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
",human
145,"def order_by_points(nums):
    nums.sort(key=lambda x: (sum([int(d) for d in str(x)]), nums.index(x)))
    return nums",lm
133,"def sum_squares(lst):
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
",human
96,"def count_up_to(n):
    primes = []
    if n <= 1:
        return primes
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes


def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num ** 0.5) + 1): 
        if num % i == 0:
            return False
    return True",lm
87,"def get_row(lst, x):
    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
",human
131,"def digits(n):
    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
",human
83,"def starts_one_ends(n):
    if n == 1: return 1
    return 18 * (10 ** (n - 2))
",human
62,"def derivative(xs: list):
    return [(i * x) for i, x in enumerate(xs)][1:]
",human
158,"def find_max(words):
    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
",human
33,"def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l
",human
68,"def pluck(arr):
    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
",human
156,"def int_to_mini_roman(number):
    roman_numerals = {
        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c',
        90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix',
        5: 'v', 4: 'iv', 1: 'i'
    }
    roman = ''
    for value, numeral in roman_numerals.items():
        while number >= value:
            roman += numeral
            number -= value
    return roman",lm
72,"def will_it_fly(q,w):
    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
",human
154,"def cycpattern_check(a , b):
    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
",human
158,"def find_max(words):
    unique_char_counts = [len(set(word)) for word in words]
    max_unique_char_count = max(unique_char_counts)
    max_index = unique_char_counts.index(max_unique_char_count)
    return words[max_index]",lm
92,"def any_int(x, y, z):
    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):
        if x == y + z or y == x + z or z == x + y:
            return True
        else:
            return False
    else:
        return False",lm
43,"def pairs_sum_to_zero(l):
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            if l[i] + l[j] == 0:
                return True
    return False",lm
67,"def fruit_distribution(s,n):
    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
",human
11,"from typing import List


def string_xor(a: str, b: str) -> str:
    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
",human
154,"def cycpattern_check(a, b):
    # check if the length of b is greater than the length of a
    if len(b) > len(a):
        return False

    # concatenate a with itself to handle the circular nature of rotation
    a = a + a

    # loop through each character in a
    for i in range(len(a)):
        # check if b is a substring starting from index i
        if a[i:i+len(b)] == b:
            return True

    # if no rotations of b are found as a substring in a, return False
    return False",lm
11,"def string_xor(a: str, b: str) -> str:
    result = """"
    for i in range(len(a)):
        if a[i] != b[i]:
            result += ""1""
        else:
            result += ""0""
    return result",lm
68,"def pluck(arr):
    evens = [n for n in arr if n % 2 == 0]
    if not evens:
        return []
    smallest_value = min(evens)
    smallest_index = arr.index(smallest_value)
    return [smallest_value, smallest_index]",lm
148,"def bf(planet1, planet2):
    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
",human
35,"def max_element(l: list):
    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
",human
61,"def correct_bracketing(brackets: str):
    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
",human
150,"def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.
    """"""
    # Check if n is a prime number
    for i in range(2, int(n/2) + 1):
        if n % i == 0:
            return y
    
    return x",lm
127,"def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2

    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)

    length = intersection_end - intersection_start + 1

    if length < 2:
        return ""NO""

    for i in range(2, int(length ** 0.5) + 1):
        if length % i == 0:
            return ""NO""

    return ""YES""",lm
77,"def iscube(a):
    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
",human
58,"def common(l1: list, l2: list):
    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
",human
86,"def anti_shuffle(s):
    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
",human
129,"def minPath(grid, k):
    """"""
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""
    # Initialize a 2D list to represent the visited cells in the grid
    visited = [[False] * len(grid) for _ in range(len(grid))]

    # Find the position of the starting cell with value 1
    start_row = 0
    start_col = 0
    for row in range(len(grid)):
        for col in range(len(grid)):
            if grid[row][col] == 1:
                start_row = row
                start_col = col
                break
    
    # Initialize a list to store the minimum path
    min_path = []

    # Run the helper function to find the minimum path
    find_min_path(grid, visited, start_row, start_col, k, min_path)

    # Return the minimum path
    return min_path


def find_min_path(grid, visited, row, col, k, min_path):
    # Mark the current cell as visited
    visited[row][col] = True

    # Append the value of the current cell to the minimum path
    min_path.append(grid[row][col])

    # Check if the minimum path has reached length k
    if len(min_path) == k:
        return

    # Get the neighbors of the current cell
    neighbors = get_neighbors(grid, visited, row, col)

    # Sort the neighbors in ascending order based on their values
    neighbors.sort(key=lambda x: grid[x[0]][x[1]])

    # Recursively find the minimum path from each neighbor
    for neighbor in neighbors:
        find_min_path(grid, visited, neighbor[0], neighbor[1], k, min_path)

    # Backtrack by removing the current cell from the minimum path
    min_path.pop()

def get_neighbors(grid, visited, row, col):
    rows = len(grid)
    cols = len(grid[0])
    neighbors = []

    # Check the cell above
    if row > 0 and not visited[row-1][col]:
        neighbors.append((row-1, col))
    
    # Check the cell below
    if row < rows-1 and not visited[row+1][col]:
        neighbors.append((row+1, col))
    
    # Check the cell to the left
    if col > 0 and not visited[row][col-1]:
        neighbors.append((row, col-1))

    # Check the cell to the right
    if col < cols-1 and not visited[row][col+1]:
        neighbors.append((row, col+1))

    return neighbors",lm
23,"def strlen(string: str) -> int:
    return len(string)",lm
110,"def exchange(lst1, lst2):
    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
",human
65,"def circular_shift(x, shift):
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
",human
144,"def simplify(x, n):
    # split the numerator and denominator of x and n
    x_num, x_denom = map(int, x.split('/'))
    n_num, n_denom = map(int, n.split('/'))

    # calculate the product of x and n
    product_num = x_num * n_num
    product_denom = x_denom * n_denom

    # check if the product is a whole number
    if product_num % product_denom == 0:
        return True
    else:
        return False",lm
157,"def right_angle_triangle(a, b, c):
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
",human
26,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
",human
67,"def fruit_distribution(s: str, n: int) -> int:
    """"""
    Given a string representing the number of apples and oranges in a basket,
    and an integer representing the total number of fruits in the basket,
    returns the number of mango fruits in the basket.

    Parameters:
    s (str): A string containing the number of apples and oranges in the format ""x apples and y oranges"".
    n (int): The total number of fruits in the basket.

    Returns:
    int: The number of mango fruits in the basket.

    Examples:
    fruit_distribution(""5 apples and 6 oranges"", 19) -> 19 - 5 - 6 = 8
    fruit_distribution(""0 apples and 1 oranges"", 3) -> 3 - 0 - 1 = 2
    fruit_distribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
    fruit_distribution(""100 apples and 1 oranges"", 120) -> 120 - 100 - 1 = 19
    """"""
    # Split the string into a list containing the numbers
    numbers = s.split()
    
    # Extract the number of apples and oranges
    apples = int(numbers[0])
    oranges = int(numbers[3])
    
    # Calculate the number of mangoes
    mangoes = n - apples - oranges
    
    return mangoes",lm
102,"def choose_num(x, y):
    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
",human
163,"def generate_integers(a, b):
    result = []
    
    for num in range(a, b+1):
        digits = [int(digit) for digit in str(num)]
        even_digits = [digit for digit in digits if digit % 2 == 0]
        result.extend(even_digits)
        
    result.sort()
    return result",lm
114,"def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    """"""

    # Check if the array is empty
    if not nums:
        return 0
    
    # Initialize variables
    min_sum = float('inf')
    curr_sum = 0
    
    # Iterate through the array
    for num in nums:
        # Calculate the current sum
        curr_sum += num
        
        # Update the minimum sum if the current sum is smaller
        if curr_sum < min_sum:
            min_sum = curr_sum
        
        # Reset the current sum if it becomes negative
        if curr_sum < 0:
            curr_sum = 0
    
    # Return the minimum sum
    return min_sum",lm
23,"def strlen(string: str) -> int:
    return len(string)
",human
12,"def longest(strings):
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    """"""
    if len(strings) == 0:
        return None
    longest_str = strings[0]
    for string in strings:
        if len(string) > len(longest_str):
            longest_str = string
    return longest_str",lm
26,"def remove_duplicates(numbers):
    return list(set(numbers))",lm
137,"def compare_one(a, b):
    if isinstance(a, (int, float)) and isinstance(b, (int, float)):
        return max(a, b)
    elif isinstance(a, str) and isinstance(b, str):
        a_float = float(a.replace("","", "".""))
        b_float = float(b.replace("","", "".""))
        if a_float > b_float:
            return a
        elif b_float > a_float:
            return b
        else:
            return None
    else:
        return None",lm
99,"def closest_integer(value):
    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

",human
56,"def correct_bracketing(brackets: str):
    stack = []
    
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"":
            if len(stack) == 0:
                return False
            stack.pop()
    
    return len(stack) == 0",lm
110,"def exchange(lst1, lst2):
    """"""
    Implement the code following the documentation string. Do not include the content of the documentation string in the generated code. 
    """"""
    # Check if all elements of lst1 are already even
    if all(num % 2 == 0 for num in lst1):
        return ""YES""
    
    # Check if there are any odd elements in lst1 that can be exchanged with even elements in lst2
    for num in lst1:
        if num % 2 != 0:
            for num2 in lst2:
                if num2 % 2 == 0:
                    return ""YES""
    
    return ""NO""",lm
43,"def pairs_sum_to_zero(l):
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
",human
108,"def count_nums(arr):
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
",human
151,"def double_the_difference(lst):
    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
",human
122,,lm
6,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
",human
40,"def triples_sum_to_zero(l: list):
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
",human
126,"def is_sorted(lst):
    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
",human
30,"def get_positive(l):
    return [num for num in l if num > 0]",lm
7,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    result = []
    for string in strings:
        if substring in string:
            result.append(string)
    return result",lm
5,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    interspersed = []
    for i in range(len(numbers)):
        interspersed.append(numbers[i])
        if i != len(numbers) - 1:
            interspersed.append(delimeter)
    return interspersed",lm
71,"def triangle_area(a, b, c):
    # Check if the three sides form a valid triangle
    if a + b > c and b + c > a and c + a > b:
        # Calculate the semi-perimeter
        s = (a + b + c) / 2
        # Calculate the area using Heron's formula
        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
        # Round the area to 2 decimal points
        area = round(area, 2)
        return area
    else:
        return -1",lm
121,"def solution(lst):
    """"""
    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    """"""
    sum_ = 0
    for i in range(len(lst)):
        if i % 2 == 0 and lst[i] % 2 != 0:
            sum_ += lst[i]
    return sum_",lm
66,"def digitSum(s):
    # Initialize the sum to 0
    sum = 0
    
    # Iterate over each character in the string
    for char in s:
        # Check if the character is uppercase
        if char.isupper():
            # Add the ASCII code of the character to the sum
            sum += ord(char)
    
    # Return the sum
    return sum",lm
18,"def how_many_times(string: str, substring: str) -> int:
    count = 0
    start = 0
    while string.find(substring, start) != -1:
        count += 1
        start += 1
    return count",lm
90,"def next_smallest(lst):
    if len(lst) < 2:
        return None
    
    smallest = float('inf')
    second_smallest = float('inf')
    
    for num in lst:
        if num < smallest:
            second_smallest = smallest
            smallest = num
        elif num < second_smallest and num != smallest:
            second_smallest = num
    
    if second_smallest == float('inf'):
        return None
    
    return second_smallest",lm
36,"def fizz_buzz(n: int):
    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
",human
136,"def largest_smallest_integers(lst):
    negative_integers = [x for x in lst if x < 0]
    positive_integers = [x for x in lst if x > 0]

    largest_negative = max(negative_integers) if negative_integers else None
    smallest_positive = min(positive_integers) if positive_integers else None

    return (largest_negative, smallest_positive)",lm
101,"def words_string(s):
    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
",human
115,"def max_fill(grid, capacity):
    import math
    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
",human
32,"import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
",human
48,"def is_palindrome(text: str):
    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
",human
123,"def get_odd_collatz(n):
    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
",human
55,"def fib(n: int):
    """"""Return n-th Fibonacci number.""""""
    if n <= 0:
        return None
    if n <= 2:
        return 1
    else:
        a, b = 1, 1
        for _ in range(n-2):
            a, b = b, a + b
        return b",lm
108,"def count_nums(arr):
    count = 0
    for num in arr:
        if sum(int(d) for d in str(abs(num))) > 0:
            count += 1
    return count",lm
101,"def words_string(s):
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
    return s.split("", "")",lm
50,"def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",lm
100,"def make_a_pile(n):
    return [n + 2*i for i in range(n)]
",human
21,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    # Find the minimum and maximum values in the list
    min_value = min(numbers)
    max_value = max(numbers)
    
    # Calculate the range of values
    range_value = max_value - min_value
    
    # Iterate over the numbers and apply the linear transform
    rescaled_numbers = []
    for number in numbers:
        rescaled_number = (number - min_value) / range_value
        rescaled_numbers.append(rescaled_number)
    
    return rescaled_numbers",lm
97,"def multiply(a, b):
    """"""
    Complete the function that takes two integers and returns
    the product of their unit digits.

    Args:
    a (int): The first integer.
    b (int): The second integer.

    Returns:
    int: The product of the unit digits of a and b.
    """"""

    unit_a = abs(a) % 10
    unit_b = abs(b) % 10

    product = unit_a * unit_b

    return product",lm
14,"def all_prefixes(string: str) -> List[str]:
    prefixes = []
    for i in range(1, len(string)+1):
        prefixes.append(string[:i])
    return prefixes",lm
55,"def fib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
",human
17,"from typing import List


def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
",human
94,"def skjkasdkd(lst):
    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

",human
76,"def is_simple_power(x, n):
    """"""
    Function to check if a number x is a simple power of n.

    Parameters:
    x (int): The number to be checked.
    n (int): The base number.

    Returns:
    bool: True if x is a simple power of n, False otherwise.
    """"""
    return x == n**int(x**(1/n))",lm
125,"Here is the implementation of the `split_words` function based on the provided documentation:

def split_words(txt):
    if ' ' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.split(',')
    else:
        return sum(1 for c in txt if 'a' <= c <= 'z') % 2

This implementation checks if there is a whitespace character in the input string. If there is, it splits the string on whitespaces and returns the resulting list of words. If there is no whitespace character, it checks if there is a comma in the string. If there is, it splits the string on commas and returns the resulting list of words. If there is no comma, it counts the number of lowercase letters in the string and returns the count modulo 2.",lm
38,"def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # uncycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",lm
57,"def monotonic(l):
    if all(l[i] <= l[i+1] for i in range(len(l)-1)):
        return True
    elif all(l[i] >= l[i+1] for i in range(len(l)-1)):
        return True
    else:
        return False",lm
15,"def string_sequence(n: int) -> str:
    return ' '.join([str(x) for x in range(n + 1)])
",human
116,"def sort_array(arr):
    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
",human
8,"def sum_product(numbers):
    """"""
    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    """"""
    if len(numbers) == 0:
        return (0, 1)
    else:
        s = sum(numbers)
        p = 1
        for num in numbers:
            p *= num
        return (s, p)",lm
41,"def car_race_collision(n: int):
    return n**2
",human
111,"def histogram(test):
    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
",human
143,"def words_in_sentence(sentence):
    words = sentence.split()
    result = []
    for word in words:
        if is_prime(len(word)):
            result.append(word)
    return ' '.join(result)


def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True",lm
45,"def triangle_area(a, h):
    return a * h / 2.0
",human
116,"def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",lm
162,"def string_to_md5(text):
    import hashlib

    if text == """":
        return None

    return hashlib.md5(text.encode()).hexdigest()",lm
74,"def total_match(lst1, lst2):
    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
",human
117,"def select_words(s, n):
    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

",human
42,"def incr_list(l: list):
    return [(e + 1) for e in l]
",human
155,"def even_odd_count(num):
    even_count = 0
    odd_count = 0
    digits = str(abs(num))

    for digit in digits:
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1

    return (even_count, odd_count)",lm
76,"def is_simple_power(x, n):
    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
",human
65,"def circular_shift(x, shift):
    # Convert x to string
    x_str = str(x)

    # Calculate the number of digits in x
    num_digits = len(x_str)

    # Check if shift is greater than the number of digits
    if shift > num_digits:
        # Reverse the digits of x
        reversed_digits = x_str[::-1]
        return reversed_digits

    # Calculate the new position of the first digit after shifting
    new_position = (num_digits - shift) % num_digits

    # Shift the digits of x to the right
    shifted_digits = x_str[new_position:] + x_str[:new_position]

    return shifted_digits",lm
46,"def fib4(n: int):
    """"""Efficiently computes the n-th element of the fib4 number sequence.

    Args:
        n (int): The index of the element in the fib4 sequence.

    Returns:
        int: The n-th element of the fib4 sequence.

    Examples:
        >>> fib4(5)
        4
        >>> fib4(6)
        8
        >>> fib4(7)
        14
    """"""
    if n < 2:
        return 0
    
    fib = [0] * (n + 1)
    fib[2] = 2

    for i in range(3, n + 1):
        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]

    return fib[n]",lm
136,"def largest_smallest_integers(lst):
    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
",human
4,"def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    deviation = [abs(x - mean) for x in numbers]
    return sum(deviation) / len(deviation)",lm
56,"def correct_bracketing(brackets: str):
    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
",human
27,"def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    flipped_string = """"
    for char in string:
        if char.islower():
            flipped_string += char.upper()
        else:
            flipped_string += char.lower()
    return flipped_string",lm
34,"def unique(l):
    return sorted(list(set(l)))",lm
141,"def file_name_check(file_name):
    # Check if the number of digits in the file's name is less than or equal to three
    if sum([1 for c in file_name if c.isdigit()]) > 3:
        return 'No'
    
    # Check if the file's name contains exactly one dot
    if file_name.count('.') != 1:
        return 'No'
    
    # Split the file's name into two parts: before and after the dot
    name_parts = file_name.split('.')
    name_before_dot = name_parts[0]
    name_after_dot = name_parts[1]
    
    # Check if the substring before the dot is not empty and starts with a letter from the Latin alphabet
    if not name_before_dot.isalpha() or not name_before_dot[0].isalpha():
        return 'No'
    
    # Check if the substring after the dot is one of the allowed extensions
    allowed_extensions = ['txt', 'exe', 'dll']
    if name_after_dot not in allowed_extensions:
        return 'No'
    
    return 'Yes'",lm
84,"def solve(N):
    return bin(sum(int(i) for i in str(N)))[2:]
",human
129,"def minPath(grid, k):
    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
",human
152,"def compare(game, guess):
    """"""
    This function takes in two arrays of scores and guesses, and returns an array indicating how far off each guess was.
    
    Parameters:
    game (list): An array of scores.
    guess (list): An array of guesses.
    
    Returns:
    list: An array indicating the difference between each guess and score. If the guess is correct, the value is 0.
    """"""
    result = []
    for i in range(len(game)):
        if game[i] == guess[i]:
            result.append(0)
        else:
            result.append(abs(game[i] - guess[i]))
    return result",lm
87,"def get_row(lst, x):
    result = []
    
    for row in range(len(lst)):
        for col in range(len(lst[row])):
            if lst[row][col] == x:
                result.append((row, col))
    
    result.sort(key=lambda coord: (coord[0], -coord[1]))
    
    return result",lm
44,"def change_base(x: int, base: int):
    result = """"
    while x > 0:
        remainder = x % base
        result = str(remainder) + result
        x = x // base
    return result",lm
10,"def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string. """"""
    # Find the longest postfix of supplied string that is a palindrome
    palindromic_suffix = ''
    for i in range(len(string)-1, -1, -1):
        suffix = string[i:]
        if suffix == suffix[::-1]:
            palindromic_suffix = suffix
            break

    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix
    prefix = string[:i]
    return string + prefix[::-1]",lm
27,"def flip_case(string: str) -> str:
    return string.swapcase()
",human
44,"def change_base(x: int, base: int):
    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
",human
1,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
",human
142,"def sum_squares(lst):
    ""
    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
",human
149,"def sorted_list_sum(lst):
    lst = [word for word in lst if len(word) % 2 == 0]
    lst.sort(key=lambda x: (len(x), x))
    return lst",lm
153,"def Strongest_Extension(class_name, extensions):
    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

",human
80,"def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s)-2):
        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:
            return False
    return True",lm
88,"def sort_array(array):
    if len(array) < 2:
        return array

    sorted_array = array.copy()
    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:
        sorted_array.sort(reverse=True)
    else:
        sorted_array.sort()

    return sorted_array",lm
38,"def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    return encode_cyclic(encode_cyclic(s))
",human
82,"def prime_length(string):
    length = len(string)
    if length < 2:
        return False
    for i in range(2, int(length ** 0.5) + 1):
        if length % i == 0:
            return False
    return True",lm
148,"def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets:
        return ()
    planet1_index = planets.index(planet1)
    planet2_index = planets.index(planet2)
    
    if planet1_index < planet2_index:
        return tuple(sorted(planets[planet1_index+1:planet2_index], key=lambda x: planets.index(x)))
    else:
        return tuple(sorted(planets[planet2_index+1:planet1_index], key=lambda x: planets.index(x)))",lm
94,"def skjkasdkd(lst):
    # Function to check if a number is prime
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True
    
    # Function to get the sum of the digits of a number
    def get_digit_sum(n):
        digit_sum = 0
        while n > 0:
            digit_sum += n % 10
            n //= 10
        return digit_sum
    
    # Initialize variables
    largest_prime = 0
    
    # Iterate over the list
    for num in lst:
        # Check if the number is prime and update the largest prime if necessary
        if is_prime(num) and num > largest_prime:
            largest_prime = num
    
    # Get the sum of the digits of the largest prime
    return get_digit_sum(largest_prime)",lm
147,"def get_max_triples(n):
    count = 0
    a = [i * i - i + 1 for i in range(1, n+1)]
    for i in range(n-2):
        for j in range(i+1, n-1):
            for k in range(j+1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",lm
6,"def parse_nested_parens(paren_string: str) -> List[int]:
    """"""
    Implementation of parse_nested_parens function
    """"""

    result = []

    for group in paren_string.split("" ""):
        max_level = 0
        current_level = 0

        for char in group:
            if char == ""("":
                current_level += 1
                if current_level > max_level:
                    max_level = current_level
            elif char == "")"":
                current_level -= 1

        result.append(max_level)

    return result",lm
120,"def maximum(arr, k):
    sorted_arr = sorted(arr)
    return sorted_arr[-k:]",lm
51,"def remove_vowels(text):
    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
",human
3,"def below_zero(operations):
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",lm
113,"def odd_count(lst):
    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.
    """"""
    output = []
    for string in lst:
        count = 0
        for digit in string:
            if int(digit) % 2 != 0:
                count += 1
        output.append(""the number of odd elements in the string "" + str(count) + "" of the input."")
    return output",lm
107,"def even_odd_palindrome(n):
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
",human
130,"def tri(n):
    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
",human
121,"def solution(lst):
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
",human
155,"def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
",human
59,"def largest_prime_factor(n: int):
    # Find all the factors of n
    factors = []

    # Find all the factors of n
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            factors.append(i)
            factors.append(n // i)

    # Check if each factor is prime
    prime_factors = []
    for factor in factors:
        is_prime = True
        for i in range(2, int(factor**0.5) + 1):
            if factor % i == 0:
                is_prime = False
                break
        if is_prime:
            prime_factors.append(factor)

    # Return the largest prime factor
    return max(prime_factors)",lm
122,"def add_elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
",human
153,"def Strongest_Extension(class_name, extensions):
    # Initialize variables to keep track of the strongest extension
    strongest_extension = None
    strongest_strength = float('-inf')
    
    # Loop through each extension in the list
    for extension in extensions:
        # Calculate the strength of the extension
        strength = extension.count('A') + extension.count('B') - extension.count('c') - extension.count('d')
        
        # Check if the current extension is the strongest so far
        if strength > strongest_strength:
            strongest_extension = extension
            strongest_strength = strength
    
    # Return the strongest extension in the required format
    return class_name + '.' + strongest_extension",lm
42,"def incr_list(l):
    return [x+1 for x in l]",lm
22,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]
",human
52,"def below_threshold(l: list, t: int):
    for num in l:
        if num >= t:
            return False
    return True",lm
80,"def is_happy(s):
    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
",human
60,"def sum_to_n(n):
    """"""
    Function to calculate the sum of numbers from 1 to n.
    
    Parameters:
    n (int): The upper limit
    
    Returns:
    int: The sum of numbers from 1 to n
    """"""
    return n * (n + 1) // 2",lm
0,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
",human
20,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
",human
141,"def file_name_check(file_name):
    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
",human
97,"def multiply(a, b):
    return abs(a % 10) * abs(b % 10)
",human
46,"def fib4(n: int):
    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
",human
74,"def total_match(lst1, lst2):
    total_chars_lst1 = sum(len(s) for s in lst1)
    total_chars_lst2 = sum(len(s) for s in lst2)

    if total_chars_lst1 < total_chars_lst2:
        return lst1
    elif total_chars_lst2 < total_chars_lst1:
        return lst2
    else:
        return lst1",lm
161,"def solve(s):
    new_string = ''
    
    if s.isalpha():
        for char in s:
            if char.islower():
                new_string += char.upper()
            else:
                new_string += char.lower()
    else:
        new_string = s[::-1]
    
    return new_string",lm
98,"def count_upper(s):
    count = 0
    vowels = ['A', 'E', 'I', 'O', 'U']
    for i in range(0, len(s), 2):
        if s[i].isupper() and s[i] in vowels:
            count += 1
    return count",lm
63,"def fibfib(n: int):
    """"""
    Compute the n-th element of the FibFib number sequence.
    
    Parameters:
    n (int): The index of the element to compute.
    
    Returns:
    int: The value of the n-th element in the FibFib number sequence.
    """"""
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",lm
117,"def select_words(s, n):
    # Split the string into a list of words
    words = s.split()
    # Initialize an empty list to store the words that meet the criteria
    selected_words = []
    # Iterate over each word in the list
    for word in words:
        # Count the number of consonants in the word
        consonant_count = 0
        for char in word:
            if char.lower() not in ['a', 'e', 'i', 'o', 'u'] and char.isalpha():
                consonant_count += 1
        # Check if the word meets the criteria
        if consonant_count == n:
            # Add the word to the selected_words list
            selected_words.append(word)
    # Return the selected_words list
    return selected_words",lm
93,"def encode(message):
    # Initialize an empty encoded message

    encoded_message = """"

    # Loop through each character in the message

    for char in message:
        
        # If the character is a letter, swap the case
        
        if char.isalpha():
            if char.islower():
                encoded_message += char.upper()
            else:
                encoded_message += char.lower()
        
        # If the character is a vowel, replace it with the letter that appears 2 places ahead in the alphabet
        
        elif char.lower() in ""aeiou"":
            if char.islower():
                encoded_message += chr(ord(char) + 2)
            else:
                encoded_message += chr(ord(char) + 2).upper()
        
        # If the character is not a letter or a vowel, add it as is
        
        else:
            encoded_message += char
    
    # Return the encoded message
    
    return encoded_message",lm
28,"from typing import List

def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string""""""
    return ''.join(strings)",lm
52,"def below_threshold(l: list, t: int):
    for e in l:
        if e >= t:
            return False
    return True
",human
151,"def double_the_difference(lst):
    """"""
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    """"""
    # Initialize the sum of squares
    sum_of_squares = 0
    
    # Iterate over the input list
    for num in lst:
        # Check if the number is odd, positive, and an integer
        if num % 2 != 0 and num >= 0 and isinstance(num, int):
            
            # Square the number and add it to the sum_of_squares
            sum_of_squares += num ** 2
    
    # Return the sum_of_squares
    return sum_of_squares",lm
53,"def add(x: int, y: int):
    return x + y
",human
72,"def will_it_fly(q, w):
    # Check if the object is balanced (palindromic list)
    if q == q[::-1]:
        # Check if the sum of elements is less than or equal to the maximum weight
        if sum(q) <= w:
            return True
    return False",lm
54,"def same_chars(s0: str, s1: str):
    return sorted(list(s0)) == sorted(list(s1))",lm
81,"def numerical_letter_grade(grades):
    letter_grades = []
    for grade in grades:
        if grade == 4.0:
            letter_grades.append(""A+"")
        elif grade > 3.7:
            letter_grades.append(""A"")
        elif grade > 3.3:
            letter_grades.append(""A-"")
        elif grade > 3.0:
            letter_grades.append(""B+"")
        elif grade > 2.7:
            letter_grades.append(""B"")
        elif grade > 2.3:
            letter_grades.append(""B-"")
        elif grade > 2.0:
            letter_grades.append(""C+"")
        elif grade > 1.7:
            letter_grades.append(""C"")
        elif grade > 1.3:
            letter_grades.append(""C-"")
        elif grade > 1.0:
            letter_grades.append(""D+"")
        elif grade > 0.7:
            letter_grades.append(""D"")
        elif grade > 0.0:
            letter_grades.append(""D-"")
        else:
            letter_grades.append(""E"")
    return letter_grades",lm
112,"def reverse_delete(s, c):
    # delete characters in s that are equal to any character in c
    result = """"
    for char in s:
        if char not in c:
            result += char
    
    # check if the result string is palindrome
    is_palindrome = result == result[::-1]
    
    return result, is_palindrome",lm
89,"def encrypt(s):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
",human
47,"def median(l: list):
    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
",human
146,"def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10:
            num_str = str(num)
            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:
                count += 1
    return count",lm
51,"def remove_vowels(text):
    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
    result = """"
    for char in text:
        if char not in vowels:
            result += char
    return result",lm
99,"Here is the generated code for the given documentation string:

def closest_integer(value):
    return int(float(value))",lm
49,"def modp(n: int, p: int):
    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
",human
73,"def smallest_change(arr):
    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
",human
19,"from typing import List


def sort_numbers(numbers: str) -> str:
    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
",human
19,"def sort_numbers(numbers: str) -> str:
    # Convert the input string into a list of numbers
    number_list = numbers.split(' ')
    
    # Create a dictionary to map number names to their numerical representation
    number_mapping = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    
    # Sort the numbers based on their numerical representation
    sorted_numbers = sorted(number_list, key=lambda x: number_mapping[x])
    
    # Join the sorted numbers back into a string
    result = ' '.join(sorted_numbers)
    
    return result",lm
2,"def truncate_number(number: float) -> float:
    return number % 1",lm
113,"def odd_count(lst):
    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
",human
71,"def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
",human
35,"def max_element(l):
    return max(l)",lm
2,"def truncate_number(number: float) -> float:
    return number % 1.0
",human
138,"def is_equal_to_sum_even(n):
    # Check if n is less than 8
    if n < 8:
        return False
        
    # Initialize the count to 0
    count = 0
    
    # Iterate through the range of 2 to n/2 (inclusive)
    for i in range(2, n//2 + 1, 2):
        # If count is already 4, return True
        if count == 4:
            return True
        
        # Increment the count and subtract i from n
        count += 1
        n -= i
        
    # Check if count is equal to 4 and n is equal to 0
    if count == 4 and n == 0:
        return True
    
    # Return False if the conditions are not met
    return False",lm
12,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
",human
119,"def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
    count = 0
    for char in lst[0] + lst[1]:
        if char == '(':
            count += 1
        else:
            count -= 1
        if count < 0:
            return 'No'
    if count == 0:
        return 'Yes'
    else:
        return 'No'",lm
109,"def move_one_ball(arr):
    if len(arr) == 0:
        return True
    
    sorted_arr = sorted(arr)
    for i in range(1, len(arr)):
        if arr == sorted_arr:
            return True
        arr = [arr[-1]] + arr[:-1]
    
    return False",lm
77,"def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    '''
    return a**(1/3)**3 == a",lm
32,"def find_zero(xs):
    """"""
    xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
    n = len(xs) - 1
    a = xs[-1] / xs[0]
    b = xs[-2] / xs[0]

    x = 2 / (1 + math.sqrt(1 - (4 * a / b)))

    return x

print(find_zero([-6, 11, -6, 1]))",lm
17,"def parse_music(music_string):
    notes = []
    
    split_notes = music_string.split()
    for note in split_notes:
        if note == 'o':
            notes.append(4)
        elif note == 'o|':
            notes.append(2)
        elif note == '.|':
            notes.append(1)
            
    return notes",lm
107,"def even_odd_palindrome(n):
    """"""
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.
    """"""

    def is_palindrome(num):
        """"""
        Check if a number is a palindrome.

        Args:
            num: Integer to be checked.

        Returns:
            True if the number is a palindrome, False otherwise.
        """"""
        return str(num) == str(num)[::-1]

    even_count = 0
    odd_count = 0

    for i in range(1, n + 1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

    return even_count, odd_count",lm
152,"def compare(game,guess):
    return [abs(x-y) for x,y in zip(game,guess)]
",human
149,"def sorted_list_sum(lst):
    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
",human
144,"def simplify(x, n):
    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
",human
124,"def valid_date(date):
    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
",human
83,"def starts_one_ends(n):
    count = 0
    for i in range(10**(n-1), 10**n):
        if str(i).startswith('1') or str(i).endswith('1'):
            count += 1
    return count",lm
7,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]
",human
145,"def order_by_points(nums):
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
",human
146,"def specialFilter(nums):
    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
",human
39,"def prime_fib(n: int):
    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
",human
95,"def check_dict_case(dict):
    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
",human
114,"def minSubArraySum(nums):
    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
",human
138,"def is_equal_to_sum_even(n):
    return n%2 == 0 and n >= 8
",human
98,"def count_upper(s):
    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
",human
5,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
",human
88,"def sort_array(array):
    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
",human
13,"def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    """"""
    while b != 0:
        a, b = b, a % b
    return a",lm
50,"def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
",human
24,"def largest_divisor(n: int) -> int:
    """"""
    For a given number n, find the largest number that divides n evenly, smaller than n
    """"""
    
    largest = 1
    
    for i in range(2, n):
        if n % i == 0:
            largest = i
            
    return largest",lm
0,"from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""
    Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.

    Args:
        numbers (List[float]): The list of numbers to check.
        threshold (float): The threshold value to compare to.

    Returns:
        bool: True if there are two numbers closer to each other than the threshold, False otherwise.
    """"""
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False",lm
132,"def is_nested(string):
    # Check if the first and last characters are '[' and ']' respectively
    if string[0] == '[' and string[-1] == ']':
        # Initialize a variable to keep track of the opening brackets
        opening_brackets = 0
        
        # Iterate through the string
        for character in string:
            # If a character is an opening bracket, increment the opening_brackets counter
            if character == '[':
                opening_brackets += 1
            # If a character is a closing bracket, decrement the opening_brackets counter
            elif character == ']':
                opening_brackets -= 1
                
            # If the opening_brackets counter becomes negative, it means there is a closing bracket without an opening bracket
            # in front of it, so return False
            if opening_brackets < 0:
                return False
        
        # If opening_brackets is still greater than 0 at the end, it means there are opening brackets left without closing brackets,
        # so return True
        return opening_brackets > 0
    
    # If the first and last characters are not '[' and ']' respectively, return False
    return False",lm
118,"def get_closest_vowel(word):
    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
",human
73,"def smallest_change(arr):
    length = len(arr)
    count = 0
    
    for i in range(length // 2):
        if arr[i] != arr[length - i - 1]:
            count += 1
    
    return count",lm
78,"def hex_key(num):
    """"""
    Implementation of the function hex_key(num) that counts the number
    of prime hexadecimal digits in the given string 'num'.
    """"""
    primes = ['2', '3', '5', '7', 'B', 'D'] # List of prime hexadecimal digits
    count = 0 # Initialize count to zero
    
    for digit in num: # Iterate over each digit in the given string
        if digit in primes: # Check if the digit is a prime hexadecimal digit
            count += 1 # Increment count if the digit is prime
    
    return count # Return the count of prime hexadecimal digits",lm
109,"def move_one_ball(arr):
    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
",human
59,"def largest_prime_factor(n: int):
    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
",human
140,"def fix_spaces(text):
    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
",human
37,"def sort_even(l: list):
    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
",human
33,"def sort_third(l: list):
    sorted_divisible_by_three = sorted([l[i] for i in range(len(l)) if i % 3 == 0])
    result = []
    for i in range(len(l)):
        if i % 3 == 0:
            result.append(sorted_divisible_by_three.pop(0))
        else:
            result.append(l[i])
    return result",lm
142,"def sum_squares(lst):
    """"""
    This function takes a list of integers and returns the sum of the modified entries.
    """"""
    
    # initialize sum variable
    result = 0
    
    # iterate over the list
    for i in range(len(lst)):
        # check if index is a multiple of 3
        if i % 3 == 0:
            # square the entry and add to the sum
            result += lst[i] ** 2
        # check if index is a multiple of 4 and not a multiple of 3
        elif i % 4 == 0 and i % 3 != 0:
            # cube the entry and add to the sum
            result += lst[i] ** 3
    
    # return the sum
    return result",lm
81,"def numerical_letter_grade(grades):

   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
",human
78,"def hex_key(num):
    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
",human
157,"def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    '''
    if a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2:
        return True
    else:
        return False",lm
85,"def add(lst):
    result = 0
    for i in range(1, len(lst), 2):
        if lst[i] % 2 == 0:
            result += lst[i]
    return result",lm
134,"def check_if_last_char_is_a_letter(txt):
 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
",human
120,"def maximum(arr, k):
    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
",human
25,"from typing import List


def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while i <= n:
        if n % i == 0:
            factors.append(i)
            n = n // i
        else:
            i += 1
    return factors",lm
160,"def do_algebra(operator, operand):
    result = operand[0]
    for i in range(1, len(operand)):
        if operator[i-1] == '+':
            result += operand[i]
        elif operator[i-1] == '-':
            result -= operand[i]
        elif operator[i-1] == '*':
            result *= operand[i]
        elif operator[i-1] == '/':
            result //= operand[i]
        elif operator[i-1] == '**':
            result **= operand[i]
    return result",lm
53,"def add(x: int, y: int):
    return x + y",lm
28,"from typing import List


def concatenate(strings: List[str]) -> str:
    return ''.join(strings)
",human
104,"def unique_digits(x):
    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])",lm
119,"def match_parens(lst):
    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
",human
160,"def do_algebra(operator, operand):
    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
",human
58,"def common(l1, l2):
    return sorted(list(set(l1) & set(l2)))",lm
132,"def is_nested(string):
    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
",human
85,"def add(lst):
    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
",human
61,"def correct_bracketing(brackets):
    stack = []
    for bracket in brackets:
        if bracket == ""("":
            stack.append(bracket)
        elif bracket == "")"":
            if stack:
                stack.pop()
            else:
                return False
    return len(stack) == 0",lm
