idx,code,label
156,"def int_to_mini_roman(number):
    values = [
        1000, 900, 500, 400, 100,
        90, 50, 40, 10, 9, 5, 4, 1
    ]
    roman_values = [
        ""m"", ""cm"", ""d"", ""cd"", ""c""
        ""xc"", ""l"", ""xl"", ""x"", ""ix"", ""v"", ""iv"", ""i""
    ]
    roman_number = ''
    i = 0
    while number > 0:
        for _ in range(number // values[i]):
            roman_number += roman_values[i]
            number -= values[i]
        i += 1
    return roman_number",lm
143,"def words_in_sentence(sentence):

    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True

    words = sentence.split()
    new_sentence = """"
    for word in words:
        if is_prime(len(word)):
            new_sentence += word + "" ""

    return new_sentence.strip()",lm
33,"def sort_third(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
    ret = []
    for i in range(len(l)):
        if i % 3 == 0:
            ret.append(sorted(l[i:i+3])[i % 3])
        else:
            ret.append(l[i])
    return ret",lm
35,"def max_element(l: list):
    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
",human
128,"def prod_signs(arr):
    if not arr:
        return None

    sign = 1
    sum = 0

    for num in arr:
        if num == 0:
            return 0
        
        if num < 0:
            sign *= -1

        sum += abs(num)

    return sign * sum",lm
55,"def fib(n: int):
    """"""Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
    if n < 2:
        return n
    else:
        return fib(n-1) + fib(n-2)",lm
103,"def rounded_avg(n, m):
    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
",human
91,"def is_bored(S):
    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
",human
141,"def file_name_check(file_name):

    # Split the file name into two parts: the substring before the dot and the substring after the dot.

    file_name_parts = file_name.split('.')

    # Check if the file's name has a valid number of digits.

    if len([char for char in file_name if char.isdigit()]) > 3:
        return 'No'

    # Check if the file's name contains exactly one dot.

    if len(file_name_parts) != 2:
        return 'No'

    # Check if the substring before the dot is not empty and starts with a latin alphapet letter.

    if not file_name_parts[0] or not file_name_parts[0][0].isalpha():
        return 'No'

    # Check if the substring after the dot is one of these: ['txt', 'exe', 'dll'].

    if file_name_parts[1] not in ['txt', 'exe', 'dll']:
        return 'No'

    # If all the conditions are met, return 'Yes'.

    return 'Yes'",lm
104,"def unique_digits(x):
    ret = []
    for i in x:
      flag = True
      for ch in str(i):
        num = int(ch)
        if(num % 2 == 0):
          flag = False
          break
      if(flag):
        ret.append(i)

    ret.sort()
    return ret",lm
148,"def bf(planet1, planet2):
    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
",human
50,"def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
",human
87,"def get_row(lst, x):
    result = []
    for i in range(len(lst)):
      for j in range(len(lst[i])):
        if lst[i][j] == x:
          result.append((i, j))

    return sorted(result, key = lambda x: (x[0], -x[1]))",lm
10,"def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
    reversed_string = string[::-1]

    # Find the longest postfix of a supplied string that is a palindrome
    # Update the result only if is not already a palindrome
    result = ''

    for index in range(len(string)):
        postfix = string[index:]
        if is_palindrome(postfix) and (index > len(result)):
            result = postfix

    # Append the reversed prefix to the end of the supplied string
    return string + reversed_string[len(result):]",lm
72,"def will_it_fly(q,w):
    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
",human
85,"def add(lst):
    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
",human
159,"def eat(number, need, remaining):
    
    total_eaten_carrots = number + need
    
    if total_eaten_carrots <= remaining:
        remaining_carrots = remaining - total_eaten_carrots
    else:
        remaining_carrots = 0
    
    return [total_eaten_carrots, remaining_carrots]",lm
11,"from typing import List


def string_xor(a: str, b: str) -> str:
    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
",human
77,"def iscube(a):
    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
",human
25,"from typing import List


def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    while divisor <= n:
        if n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        else:
            divisor += 1
    return factors",lm
129,"def minPath(grid, k):
    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
",human
128,"def prod_signs(arr):
    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
",human
62,"def derivative(xs: list):
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    ret = []
    for i in range(1, len(xs)):
        ret.append(i * xs[i])
    return ret",lm
57,"def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
    increasing = True
    decreasing = True
    for i in range(1, len(l)):
        if l[i] > l[i - 1]:
            decreasing = False
        elif l[i] < l[i - 1]:
            increasing = False

    return increasing or decreasing",lm
12,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
",human
82,"def prime_length(string):
    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
",human
35,"def max_element(l: list):
    """"""Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
    mx = l[0]
    for x in l:
        if x > mx:
            mx = x
    return mx",lm
113,"def odd_count(lst):
    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
",human
119,"def match_parens(lst):
    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
",human
97,"def multiply(a, b):
    return abs(a % 10) * abs(b % 10)
",human
80,"def is_happy(s):
    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
",human
73,"def smallest_change(arr):
    n = len(arr)
    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]
    for i in range(n-1, -1, -1):
        for j in range(i, -1, -1):
            if arr[i] == arr[j]:
                dp[i][j] = dp[i+1][j-1]
            else:
                dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1
    return dp[0][n-1]",lm
112,"def reverse_delete(s,c):
    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
",human
105,"def by_length(arr):
    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
",human
74,"def total_match(lst1, lst2):
    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
",human
8,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    product = 1
    sum = 0
    for number in numbers:
        product *= number
        sum += number

    return (sum, product)",lm
104,"def unique_digits(x):
    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
",human
38,"def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    return encode_cyclic(encode_cyclic(s))
",human
81,"def numerical_letter_grade(grades):
    letter_grades = []
    for grade in grades:
      if grade == 4.0:
        letter_grades.append('A+')
      elif grade > 3.7:
        letter_grades.append('A')
      elif grade > 3.3:
        letter_grades.append('A-')
      elif grade > 3.0:
        letter_grades.append('B+')
      elif grade > 2.7:
        letter_grades.append('B')
      elif grade > 2.3:
        letter_grades.append('B-')
      elif grade > 2.0:
        letter_grades.append('C+')
      elif grade > 1.7:
        letter_grades.append('C')
      elif grade > 1.3:
        letter_grades.append('C-')
      elif grade > 1.0:
        letter_grades.append('D+')
      elif grade > 0.7:
        letter_grades.append('D')
      elif grade > 0.0:
        letter_grades.append('D-')
      else:
        letter_grades.append('E')
    return letter_grades",lm
87,"def get_row(lst, x):
    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
",human
133,"def sum_squares(lst):
    """"""You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """"""

    l = [int(math.ceil(i)) for i in lst]
    s = 0
    for i in l:
        s += i * i
    return s",lm
162,"def string_to_md5(text):
    if not text:
        return None

    import hashlib
    md5 = hashlib.md5()
    md5.update(text.encode('utf-8'))
    return md5.hexdigest()",lm
51,"def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""

    vowels = 'aeiouAEIOU'
    result = [char for char in text if char not in vowels]
    return ''.join(result)",lm
53,"def add(x: int, y: int):
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y",lm
156,"def int_to_mini_roman(number):
    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
",human
126,"def is_sorted(lst):
    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
",human
33,"def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l
",human
61,"def correct_bracketing(brackets: str):
    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
",human
59,"def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
    return n",lm
139,"def special_factorial(n):
    if n == 0:
        return 1
    else:
        return n * special_factorial(n - 1)",lm
157,"def right_angle_triangle(a, b, c):
    sides = [a, b, c]
    max_side = max(sides)
    sides.remove(max_side)
    return max_side**2 == (sides[0]**2 + sides[1]**2)",lm
84,"def solve(N):
    sum = 0
    while(N):
        if N % 2 == 1:
            sum += 1
        N = N // 2
    
    ans = str(bin(sum))[2:]
    return ans",lm
130,"def tri(n):

    def tri_helper(n, memo):
        if n == 0:
            return 0
        if n == 1:
            return 1
        if n == 2:
            return 1
        if n in memo:
            return memo[n]
        if n % 2 == 0:
            memo[n] = 1 + (n / 2)
        else:
            memo[n] = tri_helper(n - 1, memo) + tri_helper(n - 2, memo) + tri_helper(n + 1, memo)
        return memo[n]

    return [tri_helper(i, {}) for i in range(n + 1)]",lm
54,"def same_chars(s0: str, s1: str):
    return set(s0) == set(s1)
",human
73,"def smallest_change(arr):
    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
",human
102,"def choose_num(x, y):
    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
",human
47,"def median(l: list):
    """"""Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
    l.sort()  # Sort the list.
    if len(l) % 2 == 1:  # If the length of the list is odd.
        return l[len(l) // 2]  # Return the middle element.
    else:  # If the length of the list is even.
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2  # Return the average of the two middle elements.",lm
54,"def same_chars(s0: str, s1: str):
    """"""
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
    char_freq = {}
    for char in s0:
        if char not in char_freq:
            char_freq[char] = 0
        char_freq[char] += 1
        
    for char in s1:
        if char not in char_freq or char_freq[char] == 0:
            return False
        char_freq[char] -= 1
        
    for char in char_freq:
        if char_freq[char] != 0:
            return False
        
    return True",lm
27,"def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    flipped_case = """"
    for char in string:
        if char.islower():
            flipped_case += char.upper()
        else:
            flipped_case += char.lower()
    return flipped_case",lm
17,"from typing import List


def parse_music(music_string: str) -> List[int]:
    music_dict = {
        'o': 4,
        'o|': 2,
        '.|': 1
    }

    music_beats = []

    for note in music_string:
        if note in music_dict:
            music_beats.append(music_dict[note])

    return music_beats",lm
37,"def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""

    l_prime = []
    
    for i in range(len(l)):
        if i % 2 == 0:
            l_prime.append(0)
        else:
            l_prime.append(l[i])

    even_elements = [l[i] for i in range(len(l)) if i % 2 == 0]
    even_elements.sort()
    
    j = 0
    for i in range(len(l_prime)):
        if i % 2 == 0:
            l_prime[i] = even_elements[j]
            j += 1
    
    return l_prime",lm
36,"def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            if '7' in str(i):
                count += str(i).count('7')
    return count",lm
122,"def add_elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
",human
26,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
",human
130,"def tri(n):
    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
",human
30,"def get_positive(l: list):
    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
    return [x for x in l if x > 0]",lm
66,"def digitSum(s):
    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
",human
21,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_value = min(numbers)
    max_value = max(numbers)
    if min_value == max_value:
        return [0.0] * len(numbers)
    return [(num - min_value) / (max_value - min_value) for num in numbers]",lm
131,"def digits(n):
    product = 1
    for digit in str(n):
        int_digit = int(digit)
        if int_digit % 2 == 1:
            product *= int_digit
    if product == 1:
        return 0
    else:
        return product",lm
105,"def by_length(arr):
    if arr == []:
      return []
        
    names = [""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine""]
    
    cleaned_arr = []
    
    for num in arr:
      if 1 <= num <= 9:
        cleaned_arr.append(num)
    
    cleaned_arr.sort()
    cleaned_arr.reverse()
    
    result = []
    
    for num in cleaned_arr:
      result.append(names[num - 1])
    
    return result",lm
15,"def string_sequence(n: int) -> str:
    return ' '.join([str(x) for x in range(n + 1)])
",human
125,"def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
",human
90,"def next_smallest(lst):
    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
",human
64,"FIX = """"""
Add more test cases.
""""""

def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
",human
96,"def count_up_to(n):
    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

",human
3,"from typing import List


def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",lm
60,"def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
    sum = 0
    for i in range(1, n + 1):
        sum += i
    return sum",lm
78,"def hex_key(num):
    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
",human
138,"def is_equal_to_sum_even(n):
    return n%2 == 0 and n >= 8
",human
99,"def closest_integer(value):

    num = float(value)
    int_num = int(num)
    decimal = abs(num - int_num)
    if decimal == 0.5:
        if int_num > 0:
            return int_num + 1
        else:
            return int_num - 1
    elif decimal > 0.5:
        return int_num + 1
    else:
        return int_num",lm
100,"def make_a_pile(n):
    res = [n]

    while n > 0:
        if n % 2 == 0:
            n += 1
        else:
            n -= 1
        res.append(n)

    return res",lm
88,"def sort_array(array):
    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
",human
155,"def even_odd_count(num):
    num_str = str(abs(num))
    even_count = 0
    odd_count = 0
    for digit in num_str:
        digit = int(digit)
        if digit % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)",lm
26,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    seen = set()
    result = []

    for number in numbers:
        if number not in seen:
            seen.add(number)
            result.append(number)

    return result",lm
110,"def exchange(lst1, lst2):

    # Count the number of even and odd elements in lst1 and lst2
    even_lst1 = 0
    odd_lst1 = 0
    even_lst2 = 0
    odd_lst2 = 0

    for num in lst1:
        if num % 2 == 0:
            even_lst1 += 1
        else:
            odd_lst1 += 1

    for num in lst2:
        if num % 2 == 0:
            even_lst2 += 1
        else:
            odd_lst2 += 1

    # Check if it is possible to exchange elements to make lst1 a list of only even numbers
    if even_lst2 >= odd_lst1:
        return ""YES""
    else:
        return ""NO""",lm
6,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
",human
84,"def solve(N):
    return bin(sum(int(i) for i in str(N)))[2:]
",human
146,"def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10 and num%2==1:
            str_num = str(abs(num))
            if str_num[0] in '13579' and str_num[-1] in '13579':
                count += 1
    return count",lm
88,"def sort_array(array):
    if len(array) <= 0:
        return []

    first = array[0]
    last = array[-1]

    summ = first + last
    if summ % 2 == 0:
        array.sort(reverse=True)  # sort in descending order

    else:
        array.sort()  # sort in ascending order

    return array",lm
72,"def will_it_fly(q,w):

    # Check if the list is balanced (a palindrome)
    if q==q[::-1]:
        # Check if the sum of the elements is less than or equal to the maximum possible weight
        if sum(q)<=w:
            return True
    return False",lm
120,"def maximum(arr, k):
    arr.sort(reverse=True)
    return arr[:k]",lm
118,"def get_closest_vowel(word):
    vowels = [""A"", ""E"", ""I"", ""O"", ""U"", ""a"", ""e"", ""i"", ""o"", ""u""]
    
    closest_vowel = """"
    min_distance = len(word)
    
    for i in range(len(word) - 1, 0, -1):
        if word[i] in vowels and (word[i - 1] not in vowels and word[i + 1] not in vowels):
            distance = len(word) - i - 1
            if distance < min_distance:
                min_distance = distance
                closest_vowel = word[i]
                
    return closest_vowel",lm
109,"def move_one_ball(arr):
    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
",human
30,"def get_positive(l: list):
    return [e for e in l if e > 0]
",human
4,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    deviations = [abs(number - mean) for number in numbers]
    return sum(deviations) / len(deviations)",lm
152,"def compare(game,guess):
    comp = []
    for i in range(len(game)):
      comp.append(abs(game[i]-guess[i]))
    return comp",lm
131,"def digits(n):
    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
",human
115,"def max_fill(grid, capacity):
    import math

    wells = 0
    for row in grid:
        for bucket in row:
            wells += bucket

    return math.ceil(wells / capacity)",lm
7,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [string for string in strings if substring in string]",lm
121,"def solution(lst):
    sum = 0

    for i in range(0, len(lst)):
      if i%2 == 0 and lst[i]%2 == 1:
          sum += lst[i]
    
    return sum",lm
95,"def check_dict_case(dict):
    if not dict:
        return False

    keys = list(dict.keys())

    is_lower = all(key.islower() for key in keys)
    is_upper = all(key.isupper() for key in keys)

    return is_lower or is_upper",lm
86,"def anti_shuffle(s):
    ordered_str = """"
    words = s.split()
    for word in words:
        ordered_word = ''.join(sorted(word))
        ordered_str += ordered_word + ' '
    ordered_str = ordered_str.rstrip()
    return ordered_str",lm
153,"def Strongest_Extension(class_name, extensions):
    max_strength = float('-inf')
    strongest_extension = """"
    for extension in extensions:
        cap = 0
        sm = 0
        for char in extension:
            if char.isupper():
                cap += 1
            elif char.islower():
                sm += 1
        strength = cap - sm
        if strength > max_strength:
            max_strength = strength
            strongest_extension = extension
    
    return ""{}.{}"".format(class_name, strongest_extension)",lm
89,"def encrypt(s):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
",human
65,"def circular_shift(x, shift):
    x = str(x)
    l = len(x)
    shift %= l
    x = x[l-shift:] + x[:l-shift]
    return x",lm
67,"def fruit_distribution(s,n):
    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
",human
10,"def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
",human
53,"def add(x: int, y: int):
    return x + y
",human
142,"def sum_squares(lst):
    ""
    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
",human
111,"def histogram(test):
    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
",human
110,"def exchange(lst1, lst2):
    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
",human
159,"def eat(number, need, remaining):
    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
",human
83,"def starts_one_ends(n):
    if n <= 0:
        return 0

    # The digit at the first position can only be 1.
    first_digit = 1

    # The remaining (n-1) digits can be any digit from 0 to 9.
    remaining_digits = 10**(n-1)

    # Multiply the number of choices for the first digit by the number of choices
    # for the remaining digits to get the total number of n-digit numbers.
    total_numbers = first_digit * remaining_digits

    # To count the numbers that start or end with 1, we can use the same approach
    # as above. However, we need to subtract the numbers that start and end with
    # 1 twice (because they are counted twice in the above calculation).

    # The number of numbers that start with 1 is equal to the number of
    # (n-1)-digit numbers that end with 1.
    start_with_one = starts_one_ends(n-1)

    # The number of numbers that end with 1 is equal to the number of
    # (n-1)-digit numbers that start with 1.
    end_with_one = starts_one_ends(n-1)

    # Subtract the numbers that start and end with 1 twice.
    total_numbers -= 2 * start_with_one

    # Return the total number of n-digit numbers that start or end with 1.
    return total_numbers",lm
81,"def numerical_letter_grade(grades):

   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
",human
77,"def iscube(a):
    if a < 0:
        a = -a
    
    a_cbrt = int(round(a ** (1/3)))
    return a == a_cbrt ** 3",lm
20,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
",human
34,"def unique(l: list):
    return sorted(list(set(l)))
",human
98,"def count_upper(s):
    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
",human
129,"def minPath(grid, k):
    """"""
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is habituellement less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""

    N = len(grid)
    if not 2 <= N <= 100:
        return None
    if not 1 <= k  <= (N * N - 1):
        return None
    
    dirs = [(i, j) for j in range(N) for i in range(N)]
    ans_path = []
    min_path = None
    for i in range(N):
        for j in range(N):
            path = dfs(i, j, k - 1, dirs, [(i, j)])
            if min_path is None or path < min_path:
                min_path = path
            if path and path == min_path:
                ans_path = [grid[path[i]][path[j]] for i, j in zip(path, list(zip(*path))[0])]
    return ans_path

def dfs(i, j, rem_dist, dirs, path):
    if rem_dist == 0:
        return path
    best_path = None
    for di, dj in dirs:
        x = i + di
        y = j + dj
        if 0 <= x < len(path) and 0 <= y < len(path) and (x, y) not in path:
            new_path = dfs(x, y, rem_dist - 1, dirs, path + [(x, y)])
            if best_path is None or new_path and new_path < best_path:
                best_path = new_path
    return best_path",lm
160,"def do_algebra(operator, operand):
    expression = """"
    for i in range(len(operator)):
        expression += str(operand[i]) + operator[i]
    
    expression += str(operand[-1])
    return eval(expression)",lm
71,"def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
",human
107,"def even_odd_palindrome(n):
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
",human
32,"import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
",human
12,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    max_length = len(strings[0])
    result = strings[0]
    for string in strings:
        if len(string) > max_length:
            max_length = len(string)
            result = string
    return result",lm
46,"def fib4(n: int):
    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
",human
9,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    max_element = - float(""inf"")
    rolling_maximum = []
    for num in numbers:
      max_element = max(max_element, num)
      rolling_maximum.append(max_element)

    return rolling_maximum",lm
43,"def pairs_sum_to_zero(l):
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
",human
116,"def sort_array(arr):
    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
",human
63,"def fibfib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
",human
148,"def bf(planet1, planet2):
    planets = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planets or planet2 not in planets:
        return ()
    start = planets.index(planet1) + 1
    end = planets.index(planet2)
    if start > end:
        start, end = end, start
    return planets[start:end]",lm
79,"def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return 'db' + binary + 'db'",lm
116,"def sort_array(arr):

    def count_ones(n):
        cnt = 0
        while int(n) > 0:
            if int(n) % 2:
                cnt += 1
            n = int(int(n)/2) 
        return cnt
    
    arr.sort(key = lambda x: (count_ones(x), x))
    return arr",lm
29,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]
",human
43,"def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
    # Create a set to store the elements of the list.
    s = set()

    # Iterate over the list.
    for x in l:
        # If the negative of the current element is in the set, then there is a pair that sums to zero.
        if -x in s:
            return True
        # Otherwise, add the current element to the set.
        else:
            s.add(x)

    # If no pair is found, return False.
    return False",lm
98,"def count_upper(s):
    count = 0
    vowels = ['A', 'E', 'I', 'O', 'U']
    
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1
            
    return count",lm
92,"def any_int(x, y, z):
    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
",human
120,"def maximum(arr, k):
    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
",human
66,"def digitSum(s):

    sum = 0
    for i in s:
        if 65 <= ord(i) <= 90:
            sum += ord(i)
    
    return sum",lm
19,"from typing import List


def sort_numbers(numbers: str) -> str:
    numbers = numbers.split()
    numbers_dict = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'zero': 0}
    numbers.sort(key=lambda x: numbers_dict[x])
    return ' '.join(numbers)",lm
14,"from typing import List


def all_prefixes(string: str) -> List[str]:
    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
",human
34,"def unique(l: list):
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
    unique_elements = sorted(set(l))
    return unique_elements",lm
56,"def correct_bracketing(brackets: str):
    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
",human
47,"def median(l: list):
    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
",human
70,"def strange_sort_list(lst):
    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
",human
24,"def largest_divisor(n: int) -> int:
    for i in reversed(range(n)):
        if n % i == 0:
            return i
",human
108,"def count_nums(arr):
    def sum_of_digits(n):
        sum = 0
        if n < 0:
            sum += abs(n % 10)
            n = n // -10
        while n > 0:
            sum += n % 10
            n = n // 10
        return sum

    count = 0
    for num in arr:
        if sum_of_digits(num) > 0:
            count += 1
    return count",lm
13,"def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = b, a % b
    return a
",human
93,"def encode(message):
    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
",human
144,"def simplify(x, n):
    x_num, x_den = map(int, x.split('/'))
    n_num, n_den = map(int, n.split('/'))

    reduced_num = x_num * n_den
    reduced_den = x_den * n_num

    return reduced_num % reduced_den == 0",lm
21,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
",human
24,"def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
    largest_divisor = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            largest_divisor = i
            while n % i == 0:
                n //= i
    if n > 1:
        largest_divisor = n
    return largest_divisor",lm
8,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
",human
4,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
",human
103,"def rounded_avg(n, m):
    if n > m:
        return -1
    average = (n + m) // 2
    return bin(round(average))",lm
67,"def fruit_distribution(s,n):
    _,oranges,apples = s.split()
    apples = int(apples[:-1])
    oranges = int(oranges[:-1])
    return n-apples-oranges",lm
145,"def order_by_points(nums):
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
",human
60,"def sum_to_n(n: int):
    return sum(range(n + 1))
",human
52,"def below_threshold(l: list, t: int):
    for e in l:
        if e >= t:
            return False
    return True
",human
163,"def generate_integers(a, b):
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
",human
97,"def multiply(a, b):

    a = str(a)
    b = str(b)
    a = a[len(a)-1]
    b = b[len(b)-1]
    a = int(a)
    b = int(b)
    return a * b",lm
7,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]
",human
93,"def encode(message):
    vowels = 'aeiouAEIOU'
    enc_dict = {}
    for i in range(len(vowels)):
        enc_dict[vowels[i]] = vowels[(i+2)%len(vowels)]

    encoded_msg = """"
    for char in message:
        if char.isalpha():
            if char.islower():
                encoded_msg += char.upper()
            else:
                encoded_msg += char.lower()
            if char in vowels:
                encoded_msg = encoded_msg[:-1] + enc_dict[char]
        else:
            encoded_msg += char
    return encoded_msg",lm
32,"import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    if len(xs) % 2 == 1:
        raise ValueError(""number of coefficients must be even."")
    diff = [xs[i + 1] - xs[i] for i in range(len(xs) - 1)]
    for d in diff:
        if d != 0:
            break
    return (-xs[0] + math.sqrt(xs[0] ** 2 + 4 * d)) / (2 * d)",lm
137,"def compare_one(a, b):
    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
",human
92,"def any_int(x, y, z):
    return type(x) == int and type(y) == int and type(z) == int and x+y == z or y+ z == x or x + z == y",lm
61,"def correct_bracketing( Realismckets: str):
    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing("")"")
    False
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(())"")
    False
    """"""
    stack = []
    for bracket in brackets:
        if bracket == ""("":
            stack.append(""("")
        elif bracket == "")"":
            if not stack:
                return False
            stack.pop()
    return not stack",lm
147,"def get_max_triples(n):
    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
",human
147,"def get_max_triples(n):
    mod = 10 ** 9 + 7
    def power(x, y): 
        ret = 1
        while (y): 
            if (y % 2 == 0): 
                x = (x * x) 
                y = y / 2
            else: 
                ret = (ret * x) 
                y = y - 1
        return (ret)
    
    def get_sum(n):
        return (n * (n + 1)) // 2
    
    return (((power(2, n) - 1 + mod) % mod) * (get_sum(n - 1) % mod)) % mod",lm
62,"def derivative(xs: list):
    return [(i * x) for i, x in enumerate(xs)][1:]
",human
63,"def fibfib(n: int):
    """"""The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
    if n == 0 or n == 1:
        return 0
    if n == 2:
        return 1
    # Memoization array
    fibfib_numbers = [0] * (n + 1)
    fibfib_numbers[0] = 0
    fibfib_numbers[1] = 0
    fibfib_numbers[2] = 1

    for i in range(3, n + 1):
        fibfib_numbers[i] = fibfib_numbers[i - 1] + fibfib_numbers[i - 2] + fibfib_numbers[i - 3]

    return fibfib_numbers[n]",lm
22,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    return [v for v in values if isinstance(v,int)]",lm
11,"from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""

    xored_string = """"
    for i in range(len(a)):
        if a[i] == b[i]:
            xored_string += '0'
        else:
            xored_string += '1'
    return xored_string",lm
70,"def strange_sort_list(lst):
    new_lst = []
    while lst:
        mn = min(lst)
        mx = max(lst)
        new_lst.append(mn)
        new_lst.append(mx)
        lst.remove(mn)
        lst.remove(mx)
    return new_lst",lm
118,"def get_closest_vowel(word):
    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
",human
76,"def is_simple_power(x, n):
    # Check if n is greater than 1
    if n <= 1:
        return False

    # Check if x is a power of n
    while x % n == 0:
        x //= n

    # If x is 1, then it is a simple power of n
    return x == 1",lm
154,"def cycpattern_check(a , b):
    concat = b+b
    if concat.find(a) != -1:
        return True
    return False",lm
127,"def intersection(interval1, interval2):
    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
",human
39,"def prime_fib(n: int):
    """"""
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
    def is_prime(num):
        if num <= 1:
            return False

        if num <= 3:
            return True

        if num % 2 == 0 or num % 3 == 0:
            return False

        i = 5
        while i * i <= num:
            if num % i == 0 or num % (i + 2) == 0:
                return False
            i += 6

        return True

    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_fib = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_fib)

    for fib in fib_sequence:
        if is_prime(fib):
            return fib

    return -1",lm
56,"def correct_bracketing(brackets: str):
    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"" and stack:
            stack.pop()
        else:
            return False
    return not stack",lm
86,"def anti_shuffle(s):
    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
",human
31,"def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
    if n == 1:
        return False
    if n == 2 or n == 3:
        return True
    if n % 2 == 0:
        return False
    if n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0:
            return False
        if n % (i + 2) == 0:
            return False
        i += 6
    return True",lm
121,"def solution(lst):
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
",human
139,"def special_factorial(n):
    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
",human
59,"def largest_prime_factor(n: int):
    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
",human
44,"def change_base(x: int, base: int):
    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
",human
136,"def largest_smallest_integers(lst):
    a, b = None, None
    
    for n in lst:
        if n < 0:
            a = max(a, n) if a is not None else n
        elif n > 0:
            b = min(b, n) if b is not None else n
            
    return (a, b)",lm
0,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            difference = abs(numbers[i] - numbers[j])
            if difference < threshold:
                return True
    return False",lm
25,"from typing import List


def factorize(n: int) -> List[int]:
    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
",human
23,"def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    return len(string)",lm
50,"def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",lm
99,"def closest_integer(value):
    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

",human
149,"def sorted_list_sum(lst):
    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
",human
1,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
",human
14,"from typing import List


def all_prefixes(string: str) -> List[str]:
    prefixes = []
    for i in range(1, len(string) + 1):
        prefixes.append(string[:i])
    return prefixes",lm
132,"def is_nested(string):
    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
",human
22,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]
",human
48,"def is_palindrome(text: str):
    """"""
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
    text = str(text).lower()
    return text == text[::-1]",lm
100,"def make_a_pile(n):
    return [n + 2*i for i in range(n)]
",human
6,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    if not paren_string:
      return []

    parentheses = []
    max_depth = 0
    current_depth = 0
    output = []

    for char in paren_string:
      if char == '(':
        parentheses.append('(')
        current_depth += 1
        max_depth = max(max_depth, current_depth)
      elif char == ')':
        parentheses.pop()
        current_depth -= 1
      if not parentheses or char == ' ':
        output.append(max_depth)
        max_depth = 0
        current_depth = 0

    return output",lm
46,"def fib4(n: int):
    """"""The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
    if n < 0:
        raise ValueError(""n must be a non-negative integer"")
    if n == 0 or n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0

    # Initialize the first four values of the sequence
    a, b, c, d = 0, 0, 2, 0

    # Iterate through the remaining values of the sequence
    for _ in range(4, n + 1):
        # Calculate the next value in the sequence
        e = a + b + c + d

        # Shift the values down the sequence
        a, b, c, d = b, c, d, e

    # Return the last value in the sequence
    return e",lm
52,"def below_threshold(l: list, t: int):
    """"""Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
    for x in l:
        if x >= t:
            return False
    return True",lm
75,"def is_multiply_prime(a):
    def prime(n):
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    cnt = 0
    for i in range(2, int(a**0.5) + 1):
        if a % i == 0:
            cnt += 1
            while a % i == 0:
                a //= i

    if cnt != 3 or a > 1:
        return False

    return True",lm
74,"def total_match(lst1, lst2):
    def total_chars(lst):
        total = 0 
        for strs in lst:
            total+= len(strs)
        return total
    
    if not lst1 or not lst2:
        return []
    
    len1 = total_chars(lst1)
    len2 = total_chars(lst2)
    
    if len1 < len2:
        return lst1
    elif len1 > len2:
        return lst2
    else:
        return lst1",lm
153,"def Strongest_Extension(class_name, extensions):
    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

",human
89,"def encrypt(s):
    enc_alp = ""cdefghijklmnopqrstuvwxyzab""
    enc_alp = enc_alp.upper()
    encText = """"

    for char in s:
        if char.isalpha():
            index = ord(char)
            if char.islower():
                encText += enc_alp[index - ord('a')]
            else:
                encText += enc_alp[index - ord('A')]
        else:
            encText += char

    return encText",lm
123,"def get_odd_collatz(n):
    if n == 1:
        return [1]
    
    result = []
    while n != 1:
        if n % 2 == 0:
            n = int(n / 2)
        else:
            result.append(n)
            n = 3 * n + 1

    result.append(1)
    result = sorted(result)
    return result",lm
107,"def even_odd_palindrome(n):

    def is_palindrome(x):
        # convert to string to compare with reversed string
        return str(x) == str(x)[::-1]

    even_palindromes = 0
    odd_palindromes = 0
    for i in range(1, n + 1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_palindromes += 1
            else:
                odd_palindromes += 1

    return even_palindromes, odd_palindromes",lm
151,"def double_the_difference(lst):
    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
",human
143,"def words_in_sentence(sentence):
    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
",human
1,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    def is_balanced(s):
        cnt = 0
        for char in s:
            if char == '(':
                cnt += 1
            elif char == ')':
                cnt -= 1
                if cnt < 0:
                    return False
        return cnt == 0

    def find_separate_group(s):
        cnt = 0
        start = -1
        res = []
        for i in range(len(s)):
            if s[i] == '(':
                if cnt == 0:
                    start = i
                cnt += 1
            elif s[i] == ')':
                cnt -= 1
                if cnt == 0:
                    res.append(s[start:i+1])
        return res

    # Remove all whitespaces
    paren_string = """".join(paren_string.split())
    groups = find_separate_group(paren_string)
    res = []
    for group in groups:
        if is_balanced(group):
            res.append(group)
    return res",lm
138,"def is_equal_to_sum_even(n):
    if n % 2 != 0:
        return False
    if n < 16:
        return False
    return True",lm
13,"def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    while b:
        a, b = b, a % b
    return a",lm
160,"def do_algebra(operator, operand):
    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
",human
28,"from typing import List


def concatenate(strings: List[str]) -> str:
    result = """"
    for string in strings:
        result += string
    return result",lm
145,"def order_by_points(nums):
    def sum_of_digits(num):
        sum_digits = 0
        for digit in str(abs(num)):
            sum_digits += int(digit)
        return sum_digits

    aux = []
    for i, num in enumerate(nums):
        aux.append((sum_of_digits(num), i, num))

    aux.sort()
    nums.sort(key = lambda x: (sum_of_digits(x), nums.index(x)))
    return nums",lm
132,"def is_nested(string):
    stack = []
    prev = ''
    for char in string:
        if char == '[':
            stack.append('[')
            prev = '['
        elif char == ']' and prev == '[':
            if len(stack) > 1:
                return True
            stack.pop()
            prev = ']'

    return False",lm
127,"def intersection(interval1, interval2):
    def is_prime(n):
        if n < 2:
            return False
        if n == 2:
            return True
        if n % 2 == 0:
            return False
        for i in range(3, int(n**0.5) + 1, 2):
            if n % i == 0:
                return False
        return True

    start1, end1 = interval1
    start2, end2 = interval2

    if start1 <= start2 <= end1 <= end2:
        intersection_start = start2
        intersection_end = end1

    elif start2 <= start1 <= end2 <= end1:
        intersection_start = start1
        intersection_end = end2

    elif start2 <= end1 <= start1 <= end2:
        intersection_start = start2
        intersection_end = end1

    elif start1 <= end2 <= start2 <= end1:
        intersection_start = start1
        intersection_end = end2

    else:
        return ""NO""

    intersection_length = intersection_end - intersection_start + 1

    if is_prime(intersection_length):
        return ""YES""
    else:
        return ""NO""",lm
5,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    new_list = []
    for i in range(len(numbers)):
        if i < len(numbers) - 1:
            new_list.extend([numbers[i], delimeter])
        else:
            new_list.append(numbers[i])
    return new_list",lm
71,"def triangle_area(a, b, c):
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    if area > 0:
        return round(area, 2)
    else:
        return -1",lm
18,"def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
    count = 0
    idx = 0
    length = len(substring)

    while idx < len(string):
      if string[idx: idx + length] == substring:
        count += 1
        idx += length - 1
      idx += 1

    return count",lm
155,"def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
",human
20,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    min_diff = abs(numbers[1] - numbers[0])
    closest_elements = (numbers[0], numbers[1])

    for i in range(1, len(numbers) - 1):
        diff = abs(numbers[i + 1] - numbers[i])
        if diff < min_diff:
            min_diff = diff
            closest_elements = (numbers[i], numbers[i + 1])

    if closest_elements[0] > closest_elements[1]:
        closest_elements = (closest_elements[1], closest_elements[0])  # Ensure smaller number is first.

    return closest_elements",lm
58,"def common(l1: list, l2: list):
    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
",human
149,"def sorted_list_sum(lst):
    lst = [x for x in lst if len(x) % 2 == 0]
    lst.sort(key=lambda x: (len(x), x))
    return lst",lm
27,"def flip_case(string: str) -> str:
    return string.swapcase()
",human
114,"def minSubArraySum(nums):
    n = len(nums)
    curr_sum = nums[0]
    min_sum = nums[0]

    for i in range(1, n):
        # If the current sum is negative, we start a new subarray
        if curr_sum < 0:
            curr_sum = 0

        # Add the current element to the current sum
        curr_sum += nums[i]

        # Update the minimum sum if the current sum is less than it
        min_sum = min(min_sum, curr_sum)

    return min_sum",lm
122,"def add_elements(arr, k):
    sum = 0
    for i in range(k):
        if arr[i] < 100:
            sum += arr[i]
    return sum",lm
76,"def is_simple_power(x, n):
    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
",human
150,"def x_or_y(n, x, y):
    if n <= 1:
        return y
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return y
    return x",lm
45,"def triangle_area(a, h):
    return a * h / 2.0
",human
137,"def compare_one(a, b):
    try:
        a = float(str(a).replace("","", "".""))
        b = float(str(b).replace("","", "".""))
        if a == b:
            return None
        elif a > b:
            return a
        else:
            return b
    except ValueError:
        return None",lm
49,"def modp(n: int, p: int):
    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
",human
134,"def check_if_last_char_is_a_letter(txt):
 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
",human
124,"def valid_date(date):
    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
",human
15,"def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    if n < 0:
        raise ValueError(""n must be a non-negative integer"")

    return ' '.join(map(str, range(n + 1)))",lm
55,"def fib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
",human
162,"def string_to_md5(text):
    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
",human
39,"def prime_fib(n: int):
    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
",human
68,"def pluck(arr):
    if not arr or len(arr) == 0:
        return []

    min_value = 100000
    min_value_index = -1

    for i in range(len(arr)):
        if arr[i]%2 == 0 and arr[i] < min_value:
            min_value = arr[i]
            min_value_index = i

    if min_value_index == -1:
        return []

    return [min_value, min_value_index]",lm
57,"def monotonic(l: list):
    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
",human
142,"def sum_squares(lst):
    """"""""
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """"""

    sum = 0 
    
    for index in range(len(lst)):
        # if index is multiple of 3
        if index % 3 == 0:
            lst[index] = lst[index] ** 2
    
        # if index is multiple of 4 but not multiple of 3
        elif index % 4 == 0 and index % 3 != 0:
            lst[index] = lst[index] ** 3

    # add all entries in the list
    for entry in lst:
        sum = sum + entry
    
    return sum",lm
94,"def skjkasdkd(lst):
    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

",human
134,"def check_if_last_char_is_a_letter(txt):
    txt = txt.strip()
    if not txt:
        return False

    last_char = txt[-1]
    if last_char.isalpha() and (txt[-2] == ' ' or len(txt) == 1):
        return True

    return False",lm
42,"def incr_list(l: list):
    return [(e + 1) for e in l]
",human
16,"def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))
",human
112,"def reverse_delete(s,c):
    temp_list =  [i  for i in s  if i not in c]
    s = ''.join(temp_list)

    return (s, s==s[::-1])",lm
38,"def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    # create mapping of original letter -> cycled letter
    mapping = {}
    for i in range((len(s) + 2) // 3):
        group = s[(3 * i):min((3 * i + 3), len(s))]
        if len(group) == 3:
            mapping[group[1]] = group[0]
            mapping[group[2]] = group[1]
    # decode string by replacing every cycled letter with original letter
    decoded = """"
    for letter in s:
        decoded += mapping.get(letter, letter)
    return decoded",lm
44,"def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    result = """"
    while x > 0:
        reminder = x % base
        result = str(reminder) + result
        x //= base
    return result",lm
36,"def fizz_buzz(n: int):
    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
",human
41,"def car_race_collision(n: int):
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""
    return n**2",lm
146,"def specialFilter(nums):
    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
",human
83,"def starts_one_ends(n):
    if n == 1: return 1
    return 18 * (10 ** (n - 2))
",human
152,"def compare(game,guess):
    return [abs(x-y) for x,y in zip(game,guess)]
",human
154,"def cycpattern_check(a , b):
    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
",human
51,"def remove_vowels(text):
    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
",human
96,"def count_up_to(n):
    if n < 2:
        return []
    primes = [2]
    current_number = 3
    while len(primes) < n:
        is_prime = True
        for prime in primes:
            if current_number % prime == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(current_number)
        current_number += 2
    return primes",lm
135,"def can_arrange(arr):
    last_smaller_index = -1
    for index, value in enumerate(arr):
        if index == 0:
            last_smaller_index = 0
        elif arr[index] < arr[last_smaller_index]:
            return index

    return -1",lm
65,"def circular_shift(x, shift):
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
",human
140,"def fix_spaces(text):
    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
",human
49,"def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    if n == 0:
        return 1
    if n == 1:
        return 2
    halfpow = modp(n // 2, p)
    halfpow = (halfpow * halfpow) % p
    if n % 2 == 0:
        return halfpow
    else:
        return (halfpow * 2) % p",lm
0,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
",human
17,"from typing import List


def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
",human
9,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
",human
95,"def check_dict_case(dict):
    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
",human
75,"def is_multiply_prime(a):
    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
",human
114,"def minSubArraySum(nums):
    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
",human
69,"def search(lst):
    freq = {}
    for num in lst:
        if num not in freq:
            freq[num] = 0
        freq[num] += 1
    
    for num in lst:
        if freq[num] >= num:
            return num
    
    return -1",lm
16,"def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""

    unique_chars = set()

    for char in string:
        unique_chars.add(char.upper())

    return len(unique_chars)",lm
79,"def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""
",human
91,"def is_bored(S):
    count = 0
    sentences = S.split("". "")
    sentences.extend(S.split(""?""))
    sentences.extend(S.split(""!""))
    for sentence in sentences:
        words = sentence.split("" "")
        if words and words[0] == ""I"":
            count += 1
    return count",lm
29,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [string for string in strings if string.startswith(prefix)]",lm
144,"def simplify(x, n):
    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
",human
111,"def histogram(test):
    if not isinstance(test, str):
        raise TypeError(""Input must be a string."")

    if not test:
        return {}

    letters = {}
    max_count = 0

    for letter in test.split():
        if letter not in letters:
            letters[letter] = 0
        letters[letter] += 1
        max_count = max(max_count, letters[letter])

    histogram = {}
    for letter, count in letters.items():
        if count == max_count:
            histogram[letter] = count

    return histogram",lm
119,"def match_parens(lst):
    a, b = lst
    a_open = b_open = 0
    for p in a:
        if p == '(': a_open += 1
        else: a_open -= 1
        if a_open < 0: return 'No'

    for p in b:
        if p == '(': b_open += 1
        else: b_open -= 1
        if b_open < 0: return 'No'

    if a_open == b_open: return 'Yes'
    else: return 'No'",lm
37,"def sort_even(l: list):
    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
",human
68,"def pluck(arr):
    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
",human
158,"def find_max(words):
    max_chars = 0
    result = """"

    for word in words:
        chars = set()
        for char in word:
            chars.add(char)

        if len(chars) > max_chars:
            max_chars = len(chars)
            result = word

    return result",lm
58,"def common(l1: list, l2: list):
    """"""Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
    s1 = set(l1)
    s2 = set(l2)
    return sorted(s1 & s2)",lm
19,"from typing import List


def sort_numbers(numbers: str) -> str:
    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
",human
45,"def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
    return 0.5 * a * h",lm
42,"def incr_list(l: list):
    """"""Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
    return [x + 1 for x in l]",lm
85,"def add(lst):
    sum = 0
    for i in range(len(lst)):
        if i % 2 == 1 and lst[i] % 2 == 0:
            sum += lst[i]
    return sum",lm
106,"def f(n):

    factorial = 1
    result = []
    for i in range (1, n + 1):
        if i % 2 == 0:
            factorial *= i
            result.append(factorial)
        else:
            summation = i * (i + 1) // 2
            result.append(summation)
    return result",lm
41,"def car_race_collision(n: int):
    return n**2
",human
124,"def valid_date(date):
    try:
        month, day, year = date.split('-')
        month = int(month)
        day = int(day)
        year = int(year)

        if month < 1 or month > 12:
            return False

        if day < 1 or (month in [1, 3, 5, 7, 8, 10, 12] and day > 31) or (month in [4, 6, 9, 11] and day > 30) or (month == 2 and day > 29):
            return False

        if year < 1:
            return False

        return True

    except ValueError:
        return False


print(valid_date('03-11-2000'))  # True
print(valid_date('15-01-2012'))  # False
print(valid_date('04-0-2040'))  # False
print(valid_date('06-04-2020'))  # True
print(valid_date('06/04/2020'))  # False",lm
161,"def solve(s):
    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
",human
23,"def strlen(string: str) -> int:
    return len(string)
",human
117,"def select_words(s, n):
    s = s.lower()
    words = []
    curr_word = """"
    curr_consonant_count = 0
    vowels = set(""aeiou"")
    for char in s:
        if char == "" "":
            if curr_consonant_count == n and curr_word:
                words.append(curr_word)
            curr_word = """"
            curr_consonant_count = 0
        else:
            if char not in vowels:
                curr_consonant_count += 1
            curr_word += char
    
    if curr_consonant_count == n and curr_word:
        words.append(curr_word)

    return words",lm
64,"FIX = """"""
Add more test cases.
""""""

def vowels_count(s):
    count = 0
    vowels = ""aeiou""
    s = s.lower()
    for char in s:
        if char in vowels:
            count += 1
    if s[-1] == 'y':
        count += 1
    return count


if __name__ == ""__main__"":
    import doctest
    doctest.testmod()",lm
151,"def double_the_difference(lst):
    
    if not lst:
        return 0

    sum = 0
    
    for num in lst:
        if type(num) != int or num < 0:
            continue
        if num % 2 == 1:
            sum += num * num
            
    return sum",lm
90,"def next_smallest(lst):
    if len(lst) < 2:
        return None

    smallest = min(lst)
    second_smallest = float(""inf"")

    for num in lst:
        if num > smallest and num < second_smallest:
            second_smallest = num

    if second_smallest == float(""inf""):
        return None
    else:
        return second_smallest",lm
125,"def split_words(txt):
    if ' ' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.split(',')
    else:
        return sum(1 for i in txt if i>='a' and i<='z' and ord(i) % 2)",lm
28,"from typing import List


def concatenate(strings: List[str]) -> str:
    return ''.join(strings)
",human
102,"def choose_num(x, y):
    mx = -1
    for i in range(x, y+1):
        if i%2 == 0:
            mx = max(mx, i)
            
    return mx",lm
109,"def move_one_ball(arr):
    n = len(arr)
    dup = sorted(arr)
    cnt = 0
    for i in range(n):
        if arr[i] == dup[i]:
            cnt += 1

    if cnt == n:
        return True
    return False",lm
158,"def find_max(words):
    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
",human
133,"def sum_squares(lst):
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
",human
135,"def can_arrange(arr):
    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
",human
123,"def get_odd_collatz(n):
    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
",human
115,"def max_fill(grid, capacity):
    import math
    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
",human
117,"def select_words(s, n):
    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

",human
94,"def skjkasdkd(lst):
    """"""You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """"""
    largest_prime = 0

    def is_prime(num):
        if num <= 1:
            return False
        if num <= 3:
            return True
        if num % 2 == 0 or num % 3 == 0:
            return False
        i = 5
        while i * i <= num:
            if num % i == 0 or num % (i + 2) == 0:
                return False
            i += 6
        return True

    for num in lst:
        if is_prime(num) and num > largest_prime:
            largest_prime = num

    sum_of_digits = 0
    while largest_prime > 0:
        sum_of_digits += largest_prime % 10
        largest_prime //= 10

    return sum_of_digits",lm
31,"def is_prime(n):
    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
",human
78,"def hex_key(num):
    primes = {'2','3','5','7','B','D'}
    count = 0
    for val in num:
        if val in primes:
            count += 1
            
    return count",lm
136,"def largest_smallest_integers(lst):
    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
",human
163,"def generate_integers(a, b):
    if a > b:
        a, b = b, a

    even_digits = []
    for i in range(a, b + 1):
        if i % 2 == 0:
            even_digits.append(i)

    return even_digits",lm
108,"def count_nums(arr):
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
",human
140,"def fix_spaces(text):

    t = ''
    lst = text.split()
    for word in lst:
        t += word + ""_""
    
    t = t[:-1]  # Remove the last '_'

    ans = ''
    i = 0

    while i < len(t):
        if t[i] == '_':
            cnt = 0
            while i < len(t) and t[i] == '_':
                i += 1
                cnt += 1
            
            if cnt == 1:
                ans += '_'
            else:
                ans += '-'
            i -= 1

        else:
            ans += t[i]
        
        i += 1
    
    return ans",lm
141,"def file_name_check(file_name):
    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
",human
113,"def odd_count(lst):

    ret = []

    for i, s in enumerate(lst):
        odd = 0
        for digit in s:
            int_digit = int(digit)
            odd += int_digit % 2

        ret.append(""the number of odd elements {}n the str{}ng {} of the {}nput."".format(odd, i+1, i+1, i+1))

    return ret",lm
40,"def triples_sum_to_zero(l: list):
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
",human
80,"def is_happy(s):
    if len(s) < 3:
        return False
    
    for i in range(len(s) - 2):
        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:
            return False
    
    return True",lm
40,"def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
    l.sort()
    for i in range(len(l)):
        if i > 0 and l[i] == l[i - 1]:
            continue

        left, right = i + 1, len(l) - 1

        while left < right:
            total = l[i] + l[left] + l[right]

            if total == 0:
                return True

            elif total < 0:
                left += 1

            else:
                right -= 1

    return False",lm
106,"def f(n):
    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
",human
48,"def is_palindrome(text: str):
    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
",human
82,"def prime_length(string):

    def is_prime(n):
        """"""Check if n is a prime number""""""
        if n <= 1:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if not n % i:
                return False
        return True

    n = len(string)
    return is_prime(n)",lm
69,"def search(lst):
    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
",human
5,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
",human
157,"def right_angle_triangle(a, b, c):
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
",human
18,"def how_many_times(string: str, substring: str) -> int:
    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
",human
126,"def is_sorted(lst):

    # check if list is empty or has only 1 element
    if len(lst) <= 1:
        return True

    # check if list has more than 1 duplicate of the same number
    for i in range(len(lst)):
        if lst.count(lst[i]) > 1:
            return False

    # check if list is sorted in ascending order
    for i in range(1, len(lst)):
        if lst[i] < lst[i-1]:
            return False

    return True",lm
161,"def solve(s):

    t = """"
    has_letter = False
    for ch in s:
        if ch.isalpha():
            has_letter = True
            if ch.islower():
                t += ch.upper()
            else:
                t += ch.lower()
        else:
            t += ch

    if not has_letter:
        t = t[::-1]

    return t",lm
150,"def x_or_y(n, x, y):
    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
",human
3,"from typing import List


def below_zero(operations: List[int]) -> bool:
    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
",human
