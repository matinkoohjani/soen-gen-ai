idx,code,label
798,"def sum_of_array(arr):
    return sum(arr)",lm
34,"def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) ",human
694,"def extract_unique(test_dict):
  res = list(sorted({ele for val in test_dict.values() for ele in val}))
  return res",human
706,"def is_subset(arr1, m, arr2, n): 
	hashset = set() 
	for i in range(0, m): 
		hashset.add(arr1[i]) 
	for i in range(0, n): 
		if arr2[i] in hashset: 
			continue
		else: 
			return False
	return True		",human
16,"import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
482,"import re 
def match(text): 
		pattern = '[A-Z]+[a-z]+$'
		if re.search(pattern, text): 
				return('Yes') 
		else: 
				return('No') ",human
582,"def is_dict_empty(d):
    return not bool(d)",lm
781,"def is_divisor_count_even(number):
    divisor_count = 0
    for i in range(1, number + 1):
        if number % i == 0:
            divisor_count += 1
    return divisor_count % 2 == 0",lm
870,"def sum_of_positives(numbers):
    return sum(filter(lambda x: x > 0, numbers))",lm
403,"import re
def is_valid_URL(str):
	regex = (""((http|https)://)(www.)?"" +
			""[a-zA-Z0-9@:%._\\+~#?&//=]"" +
			""{2,256}\\.[a-z]"" +
			""{2,6}\\b([-a-zA-Z0-9@:%"" +
			""._\\+~#?&//=]*)"")
	p = re.compile(regex)
	if (str == None):
		return False
	if(re.search(p, str)):
		return True
	else:
		return False",human
43,"import re

def find_sequences(text):
    pattern = r""\b[a-z]+(_[a-z]+)+\b""
    return re.findall(pattern, text)",lm
892,"import re
def remove_spaces(text):
 return (re.sub(' +',' ',text))",human
313,"def pos_nos(list1):
  for num in list1: 
    if num >= 0: 
       return num ",human
590,"import cmath
def polar_rect(x,y):
 cn = complex(x,y)
 cn=cmath.polar(cn)
 cn1 = cmath.rect(2, cmath.pi)
 return (cn,cn1)",human
292,"def find(n,m):  
    q = n//m 
    return (q)",human
759,"def is_decimal(num):
    import re
    dnumre = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
    result = dnumre.search(num)
    return bool(result)",human
561,"def pair_elements(tuple_data):
    result = {}
    for pair in tuple_data:
        for element in pair:
            other_elements = set(pair) - {element}
            if element in result:
                result[element].update(other_elements)
            else:
                result[element] = other_elements
    return result",lm
430,"def find_directrix(a, b, c):
    # Directrix of a parabola y = ax^2 + bx + c is y = -d
    # where d = 1/4a (focus-directrix definition) and vertex form is y = a(x-h)^2 + k
    # Vertex (h, k) where h = -b/2a and k = c - (b^2 - 4ac)/4a
    d = 1 / (4 * a)
    return -d",lm
78,"def count_With_Odd_SetBits(n): 
    if (n % 2 != 0): 
        return (n + 1) / 2
    count = bin(n).count('1') 
    ans = n / 2
    if (count % 2 != 0): 
        ans += 1
    return ans ",human
1,"def minCost(cost, m, n):
    dp = [[0 for x in range(n+1)] for x in range(m+1)]
    dp[0][0] = cost[0][0]

    for i in range(1, m+1):
        dp[i][0] = dp[i-1][0] + cost[i][0]

    for j in range(1, n+1):
        dp[0][j] = dp[0][j-1] + cost[0][j]

    for i in range(1, m+1):
        for j in range(1, n+1):
            dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + cost[i][j]

    return dp[m][n]",lm
616,"def modulo_tuples(tuple1, tuple2):
    return tuple(a % b for a, b in zip(tuple1, tuple2))",lm
90,"def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max",human
910,"def validate_gregorian_date(year, month, day):
    try:
        from datetime import datetime
        datetime(year, month, day)
        return True
    except ValueError:
        return False",lm
268,"def nth_star_number(n):
    return 6 * n * (n - 1) + 1",lm
913,"import re
def end_num(string):
    text = re.compile(r"".*[0-9]$"")
    if text.match(string):
        return True
    else:
        return False",human
399,"def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",human
125,"def find_length(string, n): 
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0",human
949,"def sort_tuple_list_by_digit_count(tuple_list):
    return sorted(tuple_list, key=lambda x: sum(len(str(elem)) for elem in x))",lm
298,"def find_nested_elements_in_list(outer_list, comparison_list):
    found_elements = []
    for element in outer_list:
        if isinstance(element, list):
            for nested_element in element:
                if nested_element in comparison_list:
                    found_elements.append(nested_element)
        elif element in comparison_list:
            found_elements.append(element)
    return found_elements",lm
729,"def add_list(nums1,nums2):
  result = map(lambda x, y: x + y, nums1, nums2)
  return list(result)",human
867,"def add_min_to_make_even(arr):
    sum_arr = sum(arr)
    if sum_arr % 2 == 0:
        return 0
    else:
        return 1",lm
861,"from collections import Counter 
def anagram_lambda(texts,str):
  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 
  return result",human
307,"def get_colon(t):
    return tuple(map(lambda x: x+':' if isinstance(x, str) else x, t))",lm
2,"def find_similar_elements(list1, list2):
    return list(set(list1) & set(list2))",lm
941,"def count_elim(num):
  count_elim = 0
  for n in num:
    if isinstance(n, tuple):
        break
    count_elim += 1
  return count_elim",human
859,"from itertools import combinations
def sub_lists(my_list):
	subs = []
	for i in range(0, len(my_list)+1):
	  temp = [list(x) for x in combinations(my_list, i)]
	  if len(temp)>0:
	    subs.extend(temp)
	return subs",human
571,"def max_sum_pair_diff_lessthan_K(arr, N, K): 
	arr.sort() 
	dp = [0] * N 
	dp[0] = 0
	for i in range(1, N): 
		dp[i] = dp[i-1] 
		if (arr[i] - arr[i-1] < K): 
			if (i >= 2): 
				dp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); 
			else: 
				dp[i] = max(dp[i], arr[i] + arr[i-1]); 
	return dp[N - 1]",human
556,"def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  ",human
552,"def Seq_Linear(seq_nums):
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  if len(set(seq_nums)) == 1: 
    return ""Linear Sequence""
  else:
    return ""Non Linear Sequence""",human
758,"def unique_sublists(list1):
    result ={}
    for l in  list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result",human
836,"def maxSubArrayLength(nums):
    max_sum = current_sum = nums[0]
    start = 0
    end = 0
    temp_start = 0

    for i in range(1, len(nums)):
        if nums[i] > current_sum + nums[i]:
            current_sum = nums[i]
            temp_start = i
        else:
            current_sum += nums[i]
        
        if current_sum > max_sum:
            max_sum = current_sum
            start = temp_start
            end = i

    return end - start + 1",lm
353,"def remove_column(list1, n):
   for i in list1: 
    del i[n] 
   return list1",human
31,"import heapq
from collections import Counter

def top_k_frequent(nums, k):
    nums_flattened = [num for sublist in nums for num in sublist]
    count = Counter(nums_flattened)
    return heapq.nlargest(k, count.keys(), key=count.get)",lm
778,"from itertools import groupby
def pack_consecutive_duplicates(list1):
    return [list(group) for key, group in groupby(list1)]",human
964,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2==0: 
            return True  
        else:
          return False",human
701,"def find_equilibrium_index(arr):
    total_sum = sum(arr)
    left_sum = 0
    for i, value in enumerate(arr):
        total_sum -= value
        if left_sum == total_sum:
            return i
        left_sum += value
    return -1",lm
936,"def re_arrange_tuples(test_list, ord_list):
  temp = dict(test_list)
  res = [(key, temp[key]) for key in ord_list]
  return (res) ",human
220,"import re
def replace_max_specialchar(text,n):
 return (re.sub(""[ ,.]"", "":"", text, n))",human
335,"def sum_of_arithmetic_progression(a1, d, n):
    return n * (2 * a1 + (n - 1) * d) / 2",lm
486,"from math import factorial

def binomial_probability(n, k, p):
    def binom_coeff(n, k):
        return factorial(n) / (factorial(k) * factorial(n - k))

    return binom_coeff(n, k) * (p ** k) * ((1 - p) ** (n - k))",lm
141,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums",human
167,"def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; ",human
195,"def first(arr,x,n): 
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            high = mid - 1
    return res",human
170,"def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ",human
662,"def sort_list_in_dict(d):
    for key, value in d.items():
        if isinstance(value, list):
            d[key] = sorted(value)
    return d",lm
7,"import re
def find_char_long(text):
  return (re.findall(r""\b\w{4,}\b"", text))",human
436,"def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num ",human
465,"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1",human
138,"def check_sum_of_powers_of_2(n):
    if n <= 0:
        return False
    while n > 0:
        if n % 2 == 0:
            n = n // 2
        else:
            n = n - 1
        if n == 1 or n == 0:
            return True
    return False",lm
973,"def left_rotate_string(s, n):
    return s[n:] + s[:n]",lm
53,"def check_Equality(str):
  if (str[0] == str[-1]):  
    return (""Equal"") 
  else:  
    return (""Not Equal"") ",human
663,"import sys 
def find_max_val(n, x, y): 
	ans = -sys.maxsize 
	for k in range(n + 1): 
		if (k % x == y): 
			ans = max(ans, k) 
	return (ans if (ans >= 0 and
					ans <= n) else -1) ",human
844,"def get_Number(n, k): 
    arr = [0] * n; 
    i = 0; 
    odd = 1; 
    while (odd <= n):   
        arr[i] = odd; 
        i += 1; 
        odd += 2;
    even = 2; 
    while (even <= n): 
        arr[i] = even; 
        i += 1;
        even += 2; 
    return arr[k - 1]; ",human
696,"def zip_lists_of_lists(list1, list2):
    return [list(zip(l1, l2)) for l1, l2 in zip(list1, list2)]",lm
61,"from collections import defaultdict
def count_Substrings(s,n):
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count",human
519,"import math

def volume_of_tetrahedron(side_length):
    return (math.sqrt(2) / 12) * side_length ** 3",lm
784,"def mul_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even*first_odd)",human
854,"import heapq

def list_to_heap(lst):
    heapq.heapify(lst)
    return lst",lm
58,"def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ",human
721,"import numpy as np

def max_average_path(matrix):
    n = len(matrix)
    if n == 0:
        return 0

    dp = np.zeros((n, n))
    dp[0, 0] = matrix[0][0]

    for i in range(1, n):
        dp[0, i] = dp[0, i-1] + matrix[0][i]
        dp[i, 0] = dp[i-1, 0] + matrix[i][0]

    for i in range(1, n):
        for j in range(1, n):
            dp[i, j] = max(dp[i-1, j], dp[i, j-1]) + matrix[i][j]

    return dp[n-1, n-1] / (2 * n - 1)",lm
569,"def sort_sublists(list1):
    result = list(map(sorted,list1)) 
    return result",human
893,"def Extract(lst): 
    return [item[-1] for item in lst] ",human
474,"def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2",human
160,"def find_xy(a, b, n):
    for x in range(n + 1):
        for y in range(n + 1):
            if a * x + b * y == n:
                return x, y
    return None, None",lm
631,"import re
text = 'Python Exercises'
def replace_spaces(text):
  text =text.replace ("" "", ""_"")
  return (text)
  text =text.replace (""_"", "" "")
  return (text)",human
332,"def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict",human
205,"def inversion_elements(test_tup):
  res = tuple(list(map(lambda x: ~x, list(test_tup))))
  return (res) ",human
682,"def multiply_lists(list1, list2):
    return list(map(lambda x, y: x * y, list1, list2))",lm
950,"def chinese_zodiac(year):
 if (year - 2000) % 12 == 0:
     sign = 'Dragon'
 elif (year - 2000) % 12 == 1:
     sign = 'Snake'
 elif (year - 2000) % 12 == 2:
     sign = 'Horse'
 elif (year - 2000) % 12 == 3:
     sign = 'sheep'
 elif (year - 2000) % 12 == 4:
     sign = 'Monkey'
 elif (year - 2000) % 12 == 5:
     sign = 'Rooster'
 elif (year - 2000) % 12 == 6:
     sign = 'Dog'
 elif (year - 2000) % 12 == 7:
     sign = 'Pig'
 elif (year - 2000) % 12 == 8:
     sign = 'Rat'
 elif (year - 2000) % 12 == 9:
     sign = 'Ox'
 elif (year - 2000) % 12 == 10:
     sign = 'Tiger'
 else:
     sign = 'Hare'
 return sign",human
632,"def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i != 0]
    x.extend(a)
    return (x)",human
867,"def min_Num(arr,n):  
    odd = 0
    for i in range(n): 
        if (arr[i] % 2): 
            odd += 1 
    if (odd % 2): 
        return 1
    return 2",human
873,"def fibonacci(n):
    if n <= 1:
        return n
    else:
        return(fibonacci(n-1) + fibonacci(n-2))",lm
156,"def tuple_int_str(tuple_str):
    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)
    return result",human
130,"def find_max_frequency_item(lst):
    if not lst:
        return None
    frequency = {}
    for item in lst:
        if item in frequency:
            frequency[item] += 1
        else:
            frequency[item] = 1
    max_frequency = max(frequency.values())
    max_items = [item for item, count in frequency.items() if count == max_frequency]
    return max_items[0] if len(max_items) == 1 else max_items",lm
189,"def first_missing_positive(nums):
    nums = [num for num in nums if num > 0]
    nums.sort()
    missing = 1
    for num in nums:
        if num == missing:
            missing += 1
    return missing",lm
792,"def count_list(input_list): 
    return len(input_list)",human
454,"import re

def contains_z(word):
    return re.search(r""z"", word) is not None",lm
249,"def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result",human
741,"def all_chars_same(s):
    return all(c == s[0] for c in s)",lm
675,"def sum_nums(x, y,m,n):
    sum_nums= x + y
    if sum_nums in range(m, n):
        return 20
    else:
        return sum_nums",human
538,"def string_list_to_tuple(string_list):
    return tuple(string_list)",lm
278,"def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ",human
700,"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr",human
851,"def Sum_of_Inverse_Divisors(N,Sum): 
    ans = float(Sum)*1.0 /float(N);  
    return round(ans,2); ",human
440,"def find_adverbs(sentence):
    import nltk
    nltk.download('averaged_perceptron_tagger')
    
    words = nltk.word_tokenize(sentence)
    pos_tags = nltk.pos_tag(words)
    
    adverbs = []
    for i, (word, tag) in enumerate(pos_tags):
        if tag.startswith('RB'):
            adverbs.append((word, i))
    
    return adverbs",lm
101,"def find_kth_element(arr, k):
    if k <= len(arr) and k > 0:
        return arr[k-1]
    else:
        return None",lm
400,"def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)",human
560,"def union_of_tuples(*tuples):
    result = set()
    for tuple in tuples:
        result.update(tuple)
    return tuple(result)",lm
953,"def minSubsetsWithDistinctElements(arr):
    return len(set(arr))",lm
887,"def is_odd(n) : 
    if (n^1 == n-1) :
        return True; 
    else :
        return False; ",human
381,"from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result",human
665,"def move_last(num_list):
    a = [num_list[0] for i in range(num_list.count(num_list[0]))]
    x = [ i for i in num_list if i != num_list[0]]
    x.extend(a)
    return (x)",human
689,"def min_jumps(arr, n):
	jumps = [0 for i in range(n)]
	if (n == 0) or (arr[0] == 0):
		return float('inf')
	jumps[0] = 0
	for i in range(1, n):
		jumps[i] = float('inf')
		for j in range(i):
			if (i <= j + arr[j]) and (jumps[j] != float('inf')):
				jumps[i] = min(jumps[i], jumps[j] + 1)
				break
	return jumps[n-1]",human
116,"def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result",human
929,"def count_tuplex(tuplex,value):  
  count = tuplex.count(value)
  return count",human
170,"def sum_in_range(numbers, start_index, end_index):
    if start_index < 0 or end_index >= len(numbers):
        return ""Invalid range.""
    return sum(numbers[start_index:end_index+1])",lm
819,"def count_duplic(lists):
    element = []
    frequency = []
    if not lists:
        return element
    running_count = 1
    for i in range(len(lists)-1):
        if lists[i] == lists[i+1]:
            running_count += 1
        else:
            frequency.append(running_count)
            element.append(lists[i])
            running_count = 1
    frequency.append(running_count)
    element.append(lists[i+1])
    return element,frequency
",human
742,"import math

def tetrahedron_area(edge_length):
    return math.sqrt(3) * edge_length**2",lm
127,"def multiply(a, b):
    if b == 0:
        return 0
    if b > 0:
        return a + multiply(a, b - 1)
    if b < 0:
        return -multiply(a, -b)",lm
919,"def multiply_list_items(lst):
    result = 1
    for item in lst:
        result *= item
    return result",lm
238,"def count_non_empty_substrings(s):
    n = len(s)
    return n*(n+1)//2",lm
801,"def count_equal_numbers(a, b, c):
    if a == b == c:
        return 3
    elif a == b or a == c or b == c:
        return 2
    else:
        return 0",lm
709,"from collections import defaultdict 
def get_unique(test_list):
  res = defaultdict(list)
  for sub in test_list:
    res[sub[1]].append(sub[0])
  res = dict(res)
  res_dict = dict()
  for key in res:
    res_dict[key] = len(list(set(res[key])))
  return (str(res_dict)) ",human
668,"def replace_multiple_chars(s):
    return ''.join([s[i] for i in range(len(s)) if i == 0 or s[i] != s[i-1]])",lm
2,"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ",human
111,"def find_common_in_nested_lists(*lists):
    return list(set.intersection(*map(set, lists)))",lm
190,"def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",human
813,"def string_length(s):
    return len(s)",lm
383,"def toggle_odd_bits(num):
    return num ^ 0xAAAAAAAA",lm
647,"import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))",human
266,"def lateral_surface_area_cube(side_length):
    return 4 * side_length * side_length",lm
12,"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result",human
678,"def remove_spaces(str1):
  str1 = str1.replace(' ','')
  return str1",human
636,"def Check_Solution(a,b,c): 
    if (a == c): 
        return (""Yes""); 
    else: 
        return (""No""); ",human
614,"def cumulative_sum(tuple_list):
    return sum(sum(tup) for tup in tuple_list)",lm
653,"from collections import defaultdict

def group_pairs(kv_pairs):
    grouped_dict = defaultdict(list)
    for key, value in kv_pairs:
        grouped_dict[key].append(value)
    return dict(grouped_dict)",lm
289,"def odd_Days(N): 
    hund1 = N // 100
    hund4 = N // 400
    leap = N >> 2
    ordd = N - leap 
    if (hund1): 
        ordd += hund1 
        leap -= hund1 
    if (hund4): 
        ordd -= hund4 
        leap += hund4 
    days = ordd + leap * 2
    odd = days % 7
    return odd ",human
668,"import re 
def replace(string, char): 
    pattern = char + '{2,}'
    string = re.sub(pattern, char, string) 
    return string ",human
881,"def sum_first_even_odd(numbers):
    even_sum = 0
    odd_sum = 0
    for num in numbers:
        if num % 2 == 0:
            if even_sum == 0:
                even_sum = num
        else:
            if odd_sum == 0:
                odd_sum = num
    return even_sum + odd_sum",lm
432,"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median",human
135,"def hexagonal_num(n): 
	return n*(2*n - 1) ",human
296,"def get_Inv_Count(arr,n): 
    inv_count = 0
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ",human
534,"import re
def search_literal(pattern,text):
 match = re.search(pattern, text)
 s = match.start()
 e = match.end()
 return (s, e)",human
528,"def min_length(list1):
   min_length = min(len(x) for x in  list1 )  
   min_list = min((x) for x in   list1)
   return(min_length, min_list)     ",human
51,"def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False",human
864,"def palindrome_lambda(texts):
  result = list(filter(lambda x: (x == """".join(reversed(x))), texts))
  return result",human
904,"def even_num(x):
  if x%2==0:
     return True
  else:
    return False",human
342,"import heapq

def smallestRange(arrays):
    minHeap = []
    right = max(arrays[0])
    
    for i, arr in enumerate(arrays):
        right = max(right, arr[0])
        heapq.heappush(minHeap, (arr[0], i, 0))
        
    left = minHeap[0][0]
    rangeLeft, rangeRight = left, right
    
    while True:
        value, listIndex, elementIndex = heapq.heappop(minHeap)
        
        if right - left < rangeRight - rangeLeft:
            rangeLeft, rangeRight = left, right
        
        if elementIndex + 1 == len(arrays[listIndex]):
            return [rangeLeft, rangeRight]
        
        nextElement = arrays[listIndex][elementIndex + 1]
        right = max(right, nextElement)
        heapq.heappush(minHeap, (nextElement, listIndex, elementIndex + 1))
        left = minHeap[0][0]",lm
320,"def difference_of_sums(n):
    sum_of_squares = sum([i**2 for i in range(1, n+1)])
    square_of_sum = sum(range(1, n+1)) ** 2
    return square_of_sum - sum_of_squares",lm
227,"def minimum_of_three(a, b, c):
    return min(a, b, c)",lm
64,"def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks",human
390,"def insert_string(items, string):
    return [string + str(item) for item in items]",lm
409,"def min_product_from_pairs(tuples_list):
    if not tuples_list:
        return None
    min_product = float('inf')
    for pair in tuples_list:
        product = pair[0] * pair[1]
        if product < min_product:
            min_product = product
    return min_product",lm
962,"def sum_Natural(n): 
    sum = (n * (n + 1)) 
    return int(sum) 
def sum_Even(l,r): 
    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ",human
878,"def has_k_elements(given_tuple, k):
    return len(given_tuple) == k",lm
241,"def array_3d(m,n,o):
 array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]
 return array_3d",human
407,"def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False",human
84,"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))",human
827,"def sum_specific_column(data, column):
    return sum(row[column] for row in data if len(row) > column)",lm
523,"import re
validate_string = lambda s, length: bool(re.match(r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{%d}$' % length, s))",lm
59,"def nth_octagonal_number(n):
    return n * (3*n - 2)",lm
884,"def check_bits_in_range(n, start, end):
    for i in range(start, end + 1):
        if (n & (1 << i)) == 0:
            return False
    return True",lm
352,"def unique_Characters(str):
    for i in range(len(str)):
        for j in range(i + 1,len(str)): 
            if (str[i] == str[j]):
                return False;
    return True;",human
904,"def is_even(num):
    return num % 2 == 0",lm
101,"def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]",human
458,"def rectangle_area(length, width):
    return length * width",lm
726,"def multiply_adjacent_elements(input_tuple):
    result = tuple(input_tuple[i] * input_tuple[i + 1] for i in range(len(input_tuple) - 1))
    return result",lm
478,"def remove_lowercase_substrings(s):
    import re
    return re.sub(r'[a-z]+', '', s)",lm
128,"def filter_long_words(words, n):
    return [word for word in words if len(word) > n]",lm
672,"def max_of_three(a, b, c):
    return max(a, b, c)",lm
136,"def cal_electbill(units):
 if(units < 50):
    amount = units * 2.60
    surcharge = 25
 elif(units <= 100):
    amount = 130 + ((units - 50) * 3.25)
    surcharge = 35
 elif(units <= 200):
    amount = 130 + 162.50 + ((units - 100) * 5.26)
    surcharge = 45
 else:
    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)
    surcharge = 75
 total = amount + surcharge
 return total",human
129,"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True",human
306,"def maxSumWithK(arr, n, k):
    dp = [0]*n
    dp[0] = arr[0]

    for i in range(1, n):
        dp[i] = arr[i]
        for j in range(i):
            if arr[j] < arr[i]:
                dp[i] = max(dp[i], dp[j] + arr[i])

    max_sum = dp[0]
    for i in range(k):
        if dp[i] + arr[k] > max_sum:
            max_sum = dp[i] + arr[k]

    return max_sum",lm
691,"def group_by_second_element(tuple_list):
    group_dict = {}
    for item in tuple_list:
        if item[1] in group_dict:
            group_dict[item[1]].append(item[0])
        else:
            group_dict[item[1]] = [item[0]]
    return group_dict",lm
545,"def take_L_and_F_set_bits(n) : 
    n = n | n >> 1
    n = n | n >> 2
    n = n | n >> 4
    n = n | n >> 8
    n = n | n >> 16 
    return ((n + 1) >> 1) + 1      
def toggle_F_and_L_bits(n) :  
    if (n == 1) : 
        return 0 
    return n ^ take_L_and_F_set_bits(n) ",human
250,"def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ",human
926,"def binomial_coeffi(n, k): 
	if (k == 0 or k == n): 
		return 1
	return (binomial_coeffi(n - 1, k - 1) 
		+ binomial_coeffi(n - 1, k)) 
def rencontres_number(n, m): 
	if (n == 0 and m == 0): 
		return 1
	if (n == 1 and m == 0): 
		return 0
	if (m == 0): 
		return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) 
	return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))",human
478,"import re
def remove_lowercase(str1):
 remove_lower = lambda text: re.sub('[a-z]', '', text)
 result =  remove_lower(str1)
 return result",human
48,"def set_all_odd_bits(n):
    # Generating mask with odd bits set
    mask = 0b01010101010101010101010101010101
    # Setting odd bits of n using OR operation with the mask
    return n | mask",lm
314,"def maxSum(grid):
    n = len(grid[0])
    if n == 0:
        return 0
    elif n == 1:
        return max(grid[0][0], grid[1][0])

    dp = [0] * n
    dp[0] = max(grid[0][0], grid[1][0])
    dp[1] = max(dp[0], grid[0][1], grid[1][1])

    for i in range(2, n):
        dp[i] = max(dp[i-1], dp[i-2] + max(grid[0][i], grid[1][i]))

    return dp[-1]",lm
903,"def count_Unset_Bits(n) :  
    cnt = 0;  
    for i in range(1,n + 1) : 
        temp = i;  
        while (temp) :  
            if (temp % 2 == 0) : 
                cnt += 1;  
            temp = temp // 2;  
    return cnt;  ",human
190,"def count_integral_points(side_length):
    # Subtracting 1 from side_length to exclude the corner points of the square
    # Multiplying (side_length - 1) with itself to find the internal points
    return (side_length - 1) ** 2",lm
467,"def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)",human
585,"import heapq

def n_expensive_prices(dataset, n):
    return heapq.nlargest(n, dataset)",lm
786,"def find_insertion_point(sorted_list, value):
    left, right = 0, len(sorted_list) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if sorted_list[mid] < value:
            left = mid + 1
        else:
            right = mid - 1
    return left",lm
544,"def flatten_tuple_list_to_string(tuple_list):
    return ''.join([str(item) for tup in tuple_list for item in tup])",lm
767,"def get_Pairs_Count(arr,n,sum):
    count = 0  
    for i in range(0,n):
        for j in range(i + 1,n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count",human
899,"def check(arr,n): 
    g = 0 
    for i in range(1,n): 
        if (arr[i] - arr[i - 1] > 0 and g == 1): 
            return False
        if (arr[i] - arr[i] < 0): 
            g = 1
    return True",human
133,"def sum_of_negatives(numbers):
    return sum(filter(lambda x: x < 0, numbers))",lm
346,"def entringer_number(n, k):
    if k == 0:
        return 1
    elif k > n:
        return 0
    elif k == n:
        return 0 if n % 2 == 0 else 1
    else:
        return entringer_number(n, k - 1) + entringer_number(n - 1, n - k)",lm
924,"def max_of_two( x, y ):
    if x > y:
        return x
    return y",human
821,"import collections as ct
def merge_dictionaries(dict1,dict2):
    merged_dict = dict(ct.ChainMap({}, dict1, dict2))
    return merged_dict",human
785,"def tuple_str_int(test_str):
  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))
  return (res) ",human
74,"def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True",human
843,"import heapq
def nth_super_ugly_number(n, primes):
    uglies = [1]
    def gen(prime):
        for ugly in uglies:
            yield ugly * prime
    merged = heapq.merge(*map(gen, primes))
    while len(uglies) < n:
        ugly = next(merged)
        if ugly != uglies[-1]:
            uglies.append(ugly)
    return uglies[-1]",human
927,"def calculate_height(node):
    if node is None:
        return 0
    else:
        left_height = calculate_height(node.left)
        right_height = calculate_height(node.right)
        return max(left_height, right_height) + 1",lm
895,"def max_sum_non_adjacent(arr):
    incl = 0
    excl = 0
     
    for i in arr:
        new_excl = excl if excl>incl else incl
        incl = excl + i
        excl = new_excl
    return (excl if excl>incl else incl)",lm
638,"def calculate_wind_chill(temp, wind_speed):
    """"""
    Calculate the wind chill index given the temperature and wind speed
    
    Parameters:
    - temp (float): the temperature in Fahrenheit
    - wind_speed (float): the wind speed in miles per hour
    
    Returns:
    - float: the wind chill index
    """"""
    if temp <= 50 and wind_speed >= 3:
        wind_chill = 35.74 + 0.6215 * temp - 35.75 * (wind_speed ** 0.16) + 0.4275 * temp * (wind_speed ** 0.16)
        return wind_chill
    else:
        return temp",lm
958,"def int_to_roman( num):
        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]
        syb = [""M"", ""CM"", ""D"", ""CD"",""C"", ""XC"", ""L"", ""XL"",""X"", ""IX"", ""V"", ""IV"",""I""]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num",human
832,"import re

def extract_max_numeric_value(s):
    numbers = re.findall(r'\d+', s)
    if not numbers:
        return None
    max_value = max(map(int, numbers))
    return max_value",lm
570,"def remove_words_with_char(string_list, char):
    return [word for word in string_list if char not in word]",lm
382,"def count_rotations(arr):
    low, high = 0, len(arr) - 1
    
    while low <= high:
        mid = (low + high) // 2
        
        if mid < high and arr[mid] > arr[mid + 1]:
            return mid + 1
        if mid > low and arr[mid] < arr[mid - 1]:
            return mid
        
        if arr[low] >= arr[mid]:
            high = mid - 1
        else:
            low = mid + 1
            
    return 0",lm
831,"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] == arr[j]): 
                cnt += 1; 
    return cnt; ",human
213,"def concat_string_tuples(tuple1, tuple2):
    return tuple1 + tuple2",lm
791,"def remove_nested_record(data_tuple, index):
    return tuple(item for i, item in enumerate(data_tuple) if i != index)",lm
535,"def topbottom_surfacearea(r):
  toporbottomarea=3.1415*r*r
  return toporbottomarea",human
148,"def sum_digits_single(x) : 
    ans = 0
    while x : 
        ans += x % 10
        x //= 10  
    return ans 
def closest(x) : 
    ans = 0
    while (ans * 10 + 9 <= x) : 
        ans = ans * 10 + 9  
    return ans   
def sum_digits_twoparts(N) : 
    A = closest(N)  
    return sum_digits_single(A) + sum_digits_single(N - A) ",human
326,"from collections import defaultdict 

def most_occurrences(test_list):
  temp = defaultdict(int)
  for sub in test_list:
    for wrd in sub.split():
      temp[wrd] += 1
  res = max(temp, key=temp.get)
  return (str(res)) ",human
522,"def longest_bitonic_subsequence(arr):
    n = len(arr)

    # Compute LIS (Longest Increasing Subsequence) values from left to right
    lis = [1 for i in range(n)]
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and lis[i] < lis[j] + 1:
                lis[i] = lis[j] + 1

    # Compute LDS (Longest Decreasing Subsequence) values from right to left
    lds = [1 for i in range(n)]
    for i in reversed(range(n - 1)):  # or range(n-2, -1, -1)
        for j in reversed(range(i + 1, n)):  # or range(n-1, i, -1)
            if arr[i] > arr[j] and lds[i] < lds[j] + 1:
                lds[i] = lds[j] + 1

    # Calculate the maximum length of bitonic subsequence
    max_length = 0
    for i in range(n):
        max_length = max(max_length, lis[i] + lds[i] - 1)

    return max_length",lm
641,"def nth_nonagonal_number(n):
    return n * (7 * n - 5) // 2",lm
916,"def find_triplet_with_sum(arr, sum_value):
    arr.sort()
    n = len(arr)
    for i in range(n - 2):
        left = i + 1
        right = n - 1
        while left < right:
            current_sum = arr[i] + arr[left] + arr[right]
            if current_sum == sum_value:
                return True
            elif current_sum < sum_value:
                left += 1
            else:
                right -= 1
    return False",lm
380,"def generate_2d_array(rows, columns):
    return [[None for _ in range(columns)] for _ in range(rows)]",lm
800,"def remove_whitespaces(s):
    return ''.join(s.split())",lm
538,"def string_list_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",human
143,"def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ",human
309,"def find_maximum(num1, num2):
    return max(num1, num2)",lm
8,"def square_elements(lst):
    return list(map(lambda x: x**2, lst))",lm
375,"def round_num(n,m):
    a = (n //m) * m
    b = a + m
    return (b if n - a > b - n else a)",human
866,"def check_monthnumb(monthname2):
  if(monthname2==""January"" or monthname2==""March""or monthname2==""May"" or monthname2==""July"" or monthname2==""Augest"" or monthname2==""October"" or monthname2==""December""):
    return True
  else:
    return False",human
361,"def remove_empty(list1):
  remove_empty = [x for x in list1 if x]
  return remove_empty",human
98,"def multiply_and_divide(lst):
    if not lst:  # Check if the list is empty
        return 0  # Return 0 for empty list to handle division by zero
    result = 1
    for num in lst:
        result *= num
    return result / len(lst)",lm
952,"def nCr_mod_p(n, r, p): 
	if (r > n- r): 
		r = n - r 
	C = [0 for i in range(r + 1)] 
	C[0] = 1 
	for i in range(1, n + 1): 
		for j in range(min(i, r), 0, -1): 
			C[j] = (C[j] + C[j-1]) % p 
	return C[r] ",human
570,"def remove_words(list1, charlist):
    new_list = []
    for line in list1:
        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])
        new_list.append(new_words)
    return new_list",human
935,"def series_sum(number):
 total = 0
 total = (number * (number + 1) * (2 * number + 1)) / 6
 return total",human
182,"import re

def find_characters(input_string):
    uppercase = re.findall(r'[A-Z]', input_string)
    lowercase = re.findall(r'[a-z]', input_string)
    specialchars = re.findall(r'[\W_]', input_string)
    numeric = re.findall(r'\d', input_string)

    return {'uppercase_characters': uppercase,
            'lowercase_characters': lowercase,
            'special_characters': specialchars,
            'numeric_values': numeric}",lm
391,"def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result",human
967,"def check(string): 
  if len(set(string).intersection(""AEIOUaeiou""))>=5: 
    return ('accepted') 
  else: 
    return (""not accepted"") ",human
69,"def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set",human
242,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total",human
423,"def get_maxgold(gold, m, n): 
    goldTable = [[0 for i in range(n)] 
                        for j in range(m)]   
    for col in range(n-1, -1, -1): 
        for row in range(m):  
            if (col == n-1): 
                right = 0
            else: 
                right = goldTable[row][col+1] 
            if (row == 0 or col == n-1): 
                right_up = 0
            else: 
                right_up = goldTable[row-1][col+1] 
            if (row == m-1 or col == n-1): 
                right_down = 0
            else: 
                right_down = goldTable[row+1][col+1] 
            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) 
    res = goldTable[0][0] 
    for i in range(1, m): 
        res = max(res, goldTable[i][0])  
    return res ",human
578,"def interleave_lists(list1,list2,list3):
    result = [el for pair in zip(list1, list2, list3) for el in pair]
    return result",human
520,"from math import gcd

def find_lcm(arr):
    if not arr:
        return None
    lcm = arr[0]
    for i in range(1, len(arr)):
        lcm = lcm * arr[i] // gcd(lcm, arr[i])
    return lcm",lm
192,"def has_letter_and_number(s):
    has_letter = False
    has_number = False
    for char in s:
        if char.isdigit():
            has_number = True
        elif char.isalpha():
            has_letter = True
    return has_letter and has_number",lm
156,"def convert_tuple_to_int(input_tuple):
    return tuple(int(item) for item in input_tuple)",lm
66,"def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ",human
134,"def check_last_element_even_odd(arr, p):
    last_element = arr[-1]
    operated_value = last_element + p  # assuming the operation is incrementing by p
    if operated_value % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",lm
333,"def Sort(sub_li): 
    sub_li.sort(key = lambda x: x[1]) 
    return sub_li ",human
80,"def nth_tetrahedral_number(n):
    return n * (n + 1) * (n + 2) // 6",lm
748,"import re

def insert_spaces(string):
    return re.sub(r""(\w)([A-Z])"", r""\1 \2"", string)",lm
488,"import math
def area_pentagon(a):
  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
  return area",human
439,"def convert_list_to_integer(lst):
    return int(''.join(map(str, lst)))",lm
61,"def count_substrings_sum_length(s):
    count = 0
    for i in range(len(s)):
        for j in range(i, len(s)):
            substring = s[i:j+1]
            digit_sum = sum([int(char) for char in substring if char.isdigit()])
            if digit_sum == len(substring):
                count += 1
    return count",lm
127,"def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)",human
19,"def contains_duplicate(arr):
    return len(arr) != len(set(arr))",lm
742,"import math
def area_tetrahedron(side):
  area = math.sqrt(3)*(side*side)
  return area",human
419,"def round_and_multiply(numbers):
    rounded_numbers = [round(num) for num in numbers]
    total_sum = sum(rounded_numbers)
    result = total_sum * len(numbers)
    print(result)",lm
496,"import heapq

def find_smallest_integers(numbers):
    heapq.heapify(numbers)
    smallest_integer = heapq.heappop(numbers)
    return smallest_integer",lm
119,"def find_single_element(arr):
    low = 0
    high = len(arr) - 1

    while low < high:
        mid = low + (high - low) // 2
        if mid % 2 == 0:
            if mid + 1 < len(arr) and arr[mid] == arr[mid + 1]:
                low = mid + 2
            else:
                high = mid
        else:
            if arr[mid] == arr[mid - 1]:
                low = mid + 1
            else:
                high = mid - 1

    return arr[low]",lm
222,"def check_same_dtype(t):
    if not t:  # If tuple is empty, return True
        return True
    first_type = type(t[0])
    return all(isinstance(item, first_type) for item in t)",lm
374,"def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list",human
118,"def string_to_list(s):
    return list(s)",lm
525,"def parallel_lines(line1, line2):
  return line1[0]/line1[1] == line2[0]/line2[1]",human
107,"def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ",human
445,"def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",human
86,"def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1",human
699,"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) : 
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") ",human
164,"def check_sum_of_divisors(num1, num2):
    def sum_of_divisors(num):
        return sum([i for i in range(1, num + 1) if num % i == 0])
    
    return sum_of_divisors(num1) == sum_of_divisors(num2)",lm
681,"def smallest_Divisor(n): 
    if (n % 2 == 0): 
        return 2; 
    i = 3;  
    while (i*i <= n): 
        if (n % i == 0): 
            return i; 
        i += 2; 
    return n; ",human
670,"def decreasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False",human
404,"def find_minimum(num1, num2):
    return min(num1, num2)",lm
324,"def sum_of_alternates(test_tuple):
  sum1 = 0
  sum2 = 0
  for idx, ele in enumerate(test_tuple):
    if idx % 2:
      sum1 += ele
    else:
      sum2 += ele
  return ((sum1),(sum2)) ",human
769,"def Diff(li1,li2):
    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))
 ",human
308,"def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result",human
569,"def sort_sublist(lst):
    return [sorted(sublist) for sublist in lst]",lm
55,"def nth_term_geometric_series(a, r, n):
    return a * (r ** (n - 1))",lm
167,"def smallest_power_of_2(n):
    power = 1
    while power < n:
        power *= 2
    return power",lm
666,"def count_char_occurrence(s, char):
    return s.count(char)",lm
155,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n 
    while (temp > 0) :     
        if (count % 2 == 1) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ",human
431,"def has_common_element(list1, list2):
    return not set(list1).isdisjoint(set(list2))",lm
601,"def longest_chain(pairs):
    pairs.sort(key=lambda x: x[0])  # Sort pairs based on the first element
    dp = [1] * len(pairs)  # Initialize dp array, 1 chain for each pair initially

    for i in range(1, len(pairs)):
        for j in range(i):
            if pairs[j][1] < pairs[i][0]:  # Check if current pair can follow the jth pair
                dp[i] = max(dp[i], dp[j] + 1)  # Update the longest chain for ith pair

    return max(dp)",lm
120,"def max_product_from_pairs(tuples_list):
    if not tuples_list or len(tuples_list) < 2:
        return None
    max_product = None
    for i in range(len(tuples_list)):
        for j in range(i+1, len(tuples_list)):
            product = (tuples_list[i][0] * tuples_list[j][0]) + (tuples_list[i][1] * tuples_list[j][1])
            if max_product is None or product > max_product:
                max_product = product
    return max_product",lm
628,"MAX=1000;
def replace_spaces(string):
  string=string.strip()
  i=len(string)
  space_count=string.count(' ')
  new_length = i + space_count*2
  if new_length > MAX:
    return -1
  index = new_length-1
  string=list(string)
  for f in range(i-2, new_length-2):
    string.append('0')
  for j in range(i-1, 0, -1):
    if string[j] == ' ':
      string[index] = '0'
      string[index-1] = '2'
      string[index-2] = '%'
      index=index-3
    else:
      string[index] = string[j]
      index -= 1
  return ''.join(string)",human
857,"def listify_list(list1):
  result = list(map(list,list1)) 
  return result ",human
400,"def frequency_of_tuples(lst):
    tuple_counter = {}
    for item in lst:
        sorted_tuple = tuple(sorted(item))
        if sorted_tuple in tuple_counter:
            tuple_counter[sorted_tuple] += 1
        else:
            tuple_counter[sorted_tuple] = 1
    return tuple_counter",lm
212,"import math  
def fourth_Power_Sum(n): 
    sum = 0
    for i in range(1,n+1) : 
        sum = sum + (i*i*i*i) 
    return sum",human
705,"def sort_sublists(list1):
      list1.sort()  
      list1.sort(key=len)
      return  list1",human
816,"def clear_tuple_values(*args):
    return tuple(None for _ in range(len(args)))",lm
315,"def find_max_length_even_word(sentence):
    words = sentence.split()
    max_length_even_word = """"
    for word in words:
        if len(word) % 2 == 0 and len(word) > len(max_length_even_word):
            max_length_even_word = word
    return max_length_even_word",lm
411,"import re

def snake_to_camel(snake_str):
    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), snake_str)",lm
142,"def count_same_pairs(list1, list2, list3):
    cnt = 0
    for elem1, elem2, elem3 in zip(list1, list2, list3):
        if elem1 == elem2 == elem3:
            cnt += 1
    return cnt",lm
88,"def get_element_frequency(lst):
    frequency = {}
    for item in lst:
        if item in frequency:
            frequency[item] += 1
        else:
            frequency[item] = 1
    return frequency",lm
285,"import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
527,"def find_pairs_with_sum(arr, target_sum):
    pairs = []
    seen = set()
    for number in arr:
        if target_sum-number in seen:
            pairs.append((target_sum-number, number))
        seen.add(number)
    return pairs",lm
299,"def max_aggregate(tuple_list):
    return max([sum(t) for t in tuple_list])",lm
544,"def flatten_tuple(test_list):
  res = ' '.join([idx for tup in test_list for idx in tup])
  return (res) ",human
645,"def product_kth_index(tuples, k):
    product = 1
    for tup in tuples:
        if len(tup) > k:
            product *= tup[k]
    return product",lm
632,"def move_zeroes_to_end(lst):
    non_zeroes = [x for x in lst if x != 0]
    zeroes = [0] * (len(lst) - len(non_zeroes))
    return non_zeroes + zeroes",lm
510,"def no_of_subsequences(arr, k): 
	n = len(arr) 
	dp = [[0 for i in range(n + 1)] 
			for j in range(k + 1)] 
	for i in range(1, k + 1): 
		for j in range(1, n + 1): 
			dp[i][j] = dp[i][j - 1] 
			if arr[j - 1] <= i and arr[j - 1] > 0: 
				dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1
	return dp[k][n]",human
747,"def lcs_of_three(X, Y, Z, m, n, o): 
	L = [[[0 for i in range(o+1)] for j in range(n+1)] 
		for k in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			for k in range(o+1): 
				if (i == 0 or j == 0 or k == 0): 
					L[i][j][k] = 0
				elif (X[i-1] == Y[j-1] and
					X[i-1] == Z[k-1]): 
					L[i][j][k] = L[i-1][j-1][k-1] + 1
				else: 
					L[i][j][k] = max(max(L[i-1][j][k], 
					L[i][j-1][k]), 
									L[i][j][k-1]) 
	return L[m][n][o]",human
489,"def frequency_of_largest(arr):
    if not arr:
        return 0
    max_value = max(arr)
    return arr.count(max_value)",lm
97,"def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
",human
217,"def first_Repeated_Char(str): 
    h = {}
    for ch in str:
        if ch in h: 
            return ch;
        else: 
            h[ch] = 0
    return '\0'",human
731,"import math

def lateral_surface_area_cone(radius, slant_height):
    return math.pi * radius * slant_height",lm
68,"def is_monotonic(arr):
    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) or all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1))",lm
740,"def tuple_to_dict(test_tup):
  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
  return (res) ",human
842,"def get_odd_occurence(arr, arr_size):
  for i in range(0, arr_size):
    count = 0
    for j in range(0, arr_size):
      if arr[i] == arr[j]:
        count += 1
    if (count % 2 != 0):
      return arr[i]
  return -1",human
607,"import re
pattern = 'fox'
text = 'The quick brown fox jumps over the lazy dog.'
def find_literals(text, pattern):
  match = re.search(pattern, text)
  s = match.start()
  e = match.end()
  return (match.re.pattern, s, e)",human
855,"def check_even_parity(number):
    return number % 2 == 0",lm
211,"def count_Num(n): 
    if (n == 1): 
        return 1
    count = pow(2,n - 2) 
    return count ",human
568,"def create_empty_dict_list(count):
    return [{} for _ in range(count)]",lm
65,"def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total",human
698,"def sort_dict_by_tuple_product(d):
    return dict(sorted(d.items(), key=lambda item: item[0][0] * item[0][1]))",lm
920,"def remove_none_tuples(tuple_list):
    return [t for t in tuple_list if any(item is not None for item in t)]",lm
291,"def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]",human
804,"def is_Product_Even(arr,n): 
    for i in range(0,n): 
        if ((arr[i] & 1) == 0): 
            return True
    return False",human
830,"import math
def round_up(a, digits):
    n = 10**-digits
    return round(math.ceil(a / n) * n, digits)",human
109,"def count_rotations_odd_value(binary_string):
    rotations = 0
    length = len(binary_string)
    for i in range(length):
        rotated_string = binary_string[i:] + binary_string[:i]
        if int(rotated_string, 2) % 2 != 0:
            rotations += 1
    return rotations",lm
499,"def diameter_circle(r):
  diameter=2*r
  return diameter",human
967,"def contains_all_vowels(s):
    vowels = set(""aeiou"")
    return vowels.issubset(set(s.lower()))",lm
859,"def generate_sublists(lst):
    sublists = [[]]
    for i in range(len(lst)):
        for j in range(i + 1, len(lst) + 1):
            sublists.append(lst[i:j])
    return sublists",lm
231,"def max_sum(tri, n): 
	if n > 1: 
		tri[1][1] = tri[1][1]+tri[0][0] 
		tri[1][0] = tri[1][0]+tri[0][0] 
	for i in range(2, n): 
		tri[i][0] = tri[i][0] + tri[i-1][0] 
		tri[i][i] = tri[i][i] + tri[i-1][i-1] 
		for j in range(1, i): 
			if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: 
				tri[i][j] = tri[i][j] + tri[i-1][j-1] 
			else: 
				tri[i][j] = tri[i][j]+tri[i-1][j] 
	return (max(tri[n-1]))",human
247,"def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]",human
616,"def tuple_modulo(test_tup1, test_tup2):
  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) 
  return (res) ",human
764,"def count_numeric_values(input_string):
    numeric_count = 0
    for character in input_string:
        if character.isdigit():
            numeric_count += 1
    return numeric_count",lm
695,"def check_greater(test_tup1, test_tup2):
  res = all(x < y for x, y in zip(test_tup1, test_tup2))
  return (res) ",human
351,"def first_k_times(arr, k):
    count = {}
    for ele in arr:
        if ele in count:
            count[ele] += 1
        else:
            count[ele] = 1
    
    for ele in arr:
        if count[ele] == k:
            return ele
    return -1",lm
323,"def right_rotate(arr, n, out_of_place, cur):
	temp = arr[cur]
	for i in range(cur, out_of_place, -1):
		arr[i] = arr[i - 1]
	arr[out_of_place] = temp
	return arr
def re_arrange(arr, n):
	out_of_place = -1
	for index in range(n):
		if (out_of_place >= 0):
			if ((arr[index] >= 0 and arr[out_of_place] < 0) or
			(arr[index] < 0 and arr[out_of_place] >= 0)):
				arr = right_rotate(arr, n, out_of_place, index)
				if (index-out_of_place > 2):
					out_of_place += 2
				else:
					out_of_place = - 1
		if (out_of_place == -1):
			if ((arr[index] >= 0 and index % 2 == 0) or
			 (arr[index] < 0 and index % 2 == 1)):
				out_of_place = index
	return arr",human
803,"def is_Perfect_Square(n) :
    i = 1
    while (i * i<= n):
        if ((n % i == 0) and (n / i == i)):
            return True     
        i = i + 1
    return False",human
760,"def contains_only_one_distinct_element(arr):
    return len(set(arr)) == 1",lm
425,"def count_sublists_with_element(lst, element):
    return sum(element in sublist for sublist in lst)",lm
792,"def count_lists(input_list):
    return sum(isinstance(item, list) for item in input_list)",lm
783,"def rgb_to_hsv(r, g, b):
    r, g, b = r / 255.0, g / 255.0, b / 255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx - mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g - b) / df) + 360) % 360
    elif mx == g:
        h = (60 * ((b - r) / df) + 120) % 360
    elif mx == b:
        h = (60 * ((r - g) / df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df / mx) * 100
    v = mx * 100
    return h, s, v",lm
885,"def are_isomorphic(str1, str2):
    if len(str1) != len(str2):
        return False

    mapping_str1_to_str2 = {}
    mapping_str2_to_str1 = {}

    for char1, char2 in zip(str1, str2):
        if (char1 in mapping_str1_to_str2 and mapping_str1_to_str2[char1] != char2) or \
           (char2 in mapping_str2_to_str1 and mapping_str2_to_str1[char2] != char1):
            return False
        mapping_str1_to_str2[char1] = char2
        mapping_str2_to_str1[char2] = char1

    return True",lm
541,"def is_abundant(n):
    divisors_sum = sum([i for i in range(1, n//2 + 1) if n % i == 0])
    return divisors_sum > n",lm
876,"def lcm(x, y):
   if x > y:
       z = x
   else:
       z = y
   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1
   return lcm",human
943,"import heapq

def combine_sorted_lists(list1, list2):
    merged_list = list(heapq.merge(list1, list2))
    return merged_list",lm
337,"import re

def match_word_at_end(s, word):
    pattern = f""{word}[.!?]?$""
    return bool(re.search(pattern, s))",lm
608,"def bell_number(n):
    bell = [[0 for i in range(n+1)] for j in range(n+1)]
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
    return bell[n][0]",lm
551,"def extract_column(matrix, column):
    return [row[column] for row in matrix]",lm
258,"def count_odds(nums):
    return len(list(filter(lambda x: x % 2 != 0, nums)))",lm
571,"def max_sum_of_disjoint_pairs(arr, k):
    arr.sort()
    n = len(arr)
    dp = [0 for _ in range(n + 1)]
    
    for i in range(n - 1, -1, -1):
        not_take = dp[i + 1]
        take = 0
        if i + 1 < n and arr[i + 1] - arr[i] <= k:
            take = arr[i] + arr[i + 1]
            if i + 2 < n:
                take += dp[i + 2]
        dp[i] = max(take, not_take)
    
    return dp[0]",lm
376,"def remove_duplicates_replace(tuples, replace_with):
    seen = set()
    result = []
    for item in tuples:
        if item not in seen:
            seen.add(item)
            result.append(item)
        else:
            result.append(replace_with)
    return result",lm
233,"def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface",human
868,"def length_of_last_word(s):
    words = s.strip().split(' ')
    return len(words[-1])",lm
870,"def sum_positivenum(nums):
  sum_positivenum = list(filter(lambda nums:nums>0,nums))
  return sum(sum_positivenum)",human
281,"def are_elements_unique(lst):
    return len(lst) == len(set(lst))",lm
312,"def cone_volume(radius, height):
    return (1/3) * 3.141592653589793 * (radius ** 2) * height",lm
318,"def max_volume (s): 
    maxvalue = 0
    i = 1
    for i in range(s - 1): 
        j = 1
        for j in range(s): 
            k = s - i - j 
            maxvalue = max(maxvalue, i * j * k)         
    return maxvalue ",human
803,"def is_perfect_square(number):
    sqrt = number ** 0.5
    return sqrt.is_integer()",lm
16,"import re

def find_sequences(text):
    pattern = r'\b[a-z]+(_[a-z]+)+\b'
    return re.findall(pattern, text)",lm
840,"def Check_Solution(a,b,c):  
    if b == 0:  
        return (""Yes"")  
    else: 
        return (""No"")  ",human
208,"import re

def check_decimal_precision(value):
    return re.match(r'^-?\d+(\.\d{1,2})?$', value) is not None",lm
600,"def is_Even(n) : 
    if (n^1 == n+1) :
        return True; 
    else :
        return False; ",human
3,"def is_non_prime(n):
    if n <= 1:
        return True  # 0 and 1 are not prime numbers
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return True  # n is divisible by some number other than 1 and itself
    return False",lm
832,"import re 
def extract_max(input): 
	numbers = re.findall('\d+',input) 
	numbers = map(int,numbers) 
	return max(numbers)",human
955,"def is_abundant(number):
    divisors_sum = sum([i for i in range(1, number) if number % i == 0])
    return divisors_sum > number",lm
373,"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume",human
591,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp  
    return newList ",human
788,"def create_new_tuple(string, list_):
    return (string, list_)",lm
217,"def find_first_repeated_char(s):
    char_count = {}
    for char in s:
        if char in char_count:
            return char
        else:
            char_count[char] = 1
    return None",lm
638,"import math
def wind_chill(v,t):
 windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)
 return int(round(windchill, 0))",human
282,"def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)",human
279,"def nth_decagonal_number(n):
    return 4*n*(n-1) + 1",lm
905,"def sum_of_squares_of_binomial_coefficients(n):
    return 2**(2*n)",lm
139,"def find_circumference(radius):
    pi = 3.14159
    return 2 * pi * radius",lm
816,"def clear_tuple(test_tup):
  temp = list(test_tup)
  temp.clear()
  test_tup = tuple(temp)
  return (test_tup) ",human
82,"import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume",human
44,"import re

def match_word_at_beginning(s):
    return bool(re.match(r""^\w+"", s))",lm
500,"def concatenate_elements(list):
  ans = ' '
  for i in list:
    ans = ans+ ' '+i
  return (ans) ",human
245,"def maxSumBitonicSubseq(arr):
    n = len(arr)
    inc = [0] * n  
    dec = [0] * n  
    maximum = 0

    # Fill inc[] from left to right
    for i in range(n):
        inc[i] = arr[i]
        for j in range(i):
            if (arr[i] > arr[j] and inc[i] < inc[j] + arr[i]):
                inc[i] = inc[j] + arr[i]

    # Fill dec[] from right to left
    for i in reversed(range(n)):
        dec[i] = arr[i]
        for j in range(i + 1, n):
            if(arr[i] > arr[j] and dec[i] < dec[j] + arr[i]):
                dec[i] = dec[j] + arr[i]

    # Find the maximum value by adding inc[] and dec[] values
    # and subtracting arr[i] (As arr[i] is added twice)
    for i in range(n):
        maximum = max((inc[i] + dec[i] - arr[i]), maximum)

    return maximum",lm
84,"def newman_conway(n):
    if n == 1 or n == 2:
        return 1
    sequence = [0, 1, 1]
    for i in range(3, n+1):
        sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])
    return sequence[n]",lm
879,"import re
def text_match(text):
  patterns = 'a.*?b$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')",human
174,"def group_kv_pairs(kv_pairs):
    result = {}
    for key, value in kv_pairs:
        if key in result:
            result[key].append(value)
        else:
            result[key] = [value]
    return result",lm
229,"def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr",human
493,"def generate_hexagon_grid(width, height):
    hexagon_grid = []
    for row in range(height):
        for col in range(width):
            x = col * 1.5
            y = row * (3**0.5)
            if col % 2 == 1:
                y += (3**0.5) / 2
            hexagon = [(x, y), (x+0.5, y+(3**0.5)/2), (x+0.5, y+3**0.5),
                       (x, y+2*(3**0.5)/2), (x-0.5, y+3**0.5), (x-0.5, y+(3**0.5)/2)]
            hexagon_grid.append(hexagon)
    return hexagon_grid",lm
525,"def are_lines_parallel(line1, line2):
    # Lines are represented as (slope, y-intercept), e.g., y = mx + b
    slope1, _ = line1
    slope2, _ = line2
    # If the slopes are equal, the lines are parallel
    return slope1 == slope2",lm
103,"def eulerian(n, m):
    if n == 0 and m == 0:
        return 1
    if m >= n or m < 0:
        return 0
    return (n - m) * eulerian(n - 1, m - 1) + (m + 1) * eulerian(n - 1, m)",lm
884,"def all_Bits_Set_In_The_Given_Range(n,l,r): 
    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) 
    new_num = n & num 
    if (num == new_num): 
        return True
    return False",human
398,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",human
877,"def sort_string(s):
    return ''.join(sorted(s))",lm
730,"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] ",human
344,"def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) ",human
286,"def maxSubarraySumRepeat(arr, k):
    def kadaneAlgorithm(arr):
        max_ending_here = max_so_far = arr[0]
        for x in arr[1:]:
            max_ending_here = max(x, max_ending_here + x)
            max_so_far = max(max_so_far, max_ending_here)
        return max_so_far
        
    arr_sum = sum(arr)
    if k == 1:
        return kadaneAlgorithm(arr)
    else:
        max_sum = kadaneAlgorithm(arr * 2)
        if arr_sum > 0:
            return max_sum + (k - 2) * arr_sum
        else:
            return max_sum",lm
652,"def flatten_tuple_matrix(matrix):
    return tuple(zip(*matrix))",lm
507,"def remove_specific_words(word_list, words_to_remove):
    return [word for word in word_list if word not in words_to_remove]",lm
753,"def min_k(test_list, K):
  res = sorted(test_list, key = lambda x: x[1])[:K]
  return (res) ",human
455,"def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False",human
537,"def first_repeated_word(str1):
  temp = set()
  for word in str1.split():
    if word in temp:
      return word;
    else:
      temp.add(word)
  return 'None'",human
357,"def find_max(test_list):
  res = max(int(j) for i in test_list for j in i)
  return (res) ",human
453,"def sum_of_even_factors(number):
    sum_even_factors = 0
    for i in range(2, number + 1, 2):
        if number % i == 0:
            sum_even_factors += i
    return sum_even_factors",lm
328,"def rotate_left(lst, n):
    return lst[n:] + lst[:n]",lm
67,"def partition_bell_numbers(bell_number):
    partition_matrix = [[0 for i in range(bell_number+1)] for j in range(bell_number+1)]
    for i in range(bell_number+1):
        partition_matrix[i][0] = 1
    for i in range(1, bell_number+1):
        for j in range(1, bell_number+1):
            partition_matrix[i][j] = partition_matrix[i-1][j-1] + j*partition_matrix[i-1][j]
    return partition_matrix[bell_number][bell_number]",lm
927,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def max_height(node): 
	if node is None: 
		return 0 ; 
	else : 
		left_height = max_height(node.left) 
		right_height = max_height(node.right) 
		if (left_height > right_height): 
			return left_height+1
		else: 
			return right_height+1",human
118,"def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst",human
898,"from itertools import groupby 
def extract_elements(numbers, n):
    result = [i for i, j in groupby(numbers) if len(list(j)) == n] 
    return result",human
959,"def Average(lst): 
    return sum(lst) / len(lst) ",human
846,"def find_platform(arr, dep, n): 
    arr.sort() 
    dep.sort() 
    plat_needed = 1
    result = 1
    i = 1
    j = 0
    while (i < n and j < n): 
        if (arr[i] <= dep[j]):           
            plat_needed+= 1
            i+= 1
        elif (arr[i] > dep[j]):           
            plat_needed-= 1
            j+= 1
        if (plat_needed > result):  
            result = plat_needed           
    return result",human
821,"def merge_dictionaries(dict1, dict2):
    return {**dict1, **dict2}",lm
119,"def search(arr,n) :
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)",human
703,"def is_key_present(d,x):
  if x in d:
    return True
  else:
     return False",human
514,"def sum_elements(test_tup):
  res = sum(list(test_tup))
  return (res) ",human
596,"def find_tuple_size(t):
    return len(t)",lm
900,"import re
def match_num(string):
    text = re.compile(r""^5"")
    if text.match(string):
        return True
    else:
        return False",human
936,"def rearrange_tuples(tuples, order):
    order_map = {value: index for index, value in enumerate(order)}
    return sorted(tuples, key=lambda x: order_map.get(x[0], float('inf')))",lm
325,"def min_squares(n):
    dp = [float('inf')] * (n + 1)
    dp[0] = 0
    for i in range(1, n + 1):
        j = 1
        while j*j <= i:
            dp[i] = min(dp[i], dp[i - j*j] + 1)
            j += 1
    return dp[n]",lm
133,"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)",human
769,"def difference_between_lists(list1, list2):
    return list(set(list1) - set(list2)) + list(set(list2) - set(list1))",lm
114,"def assign_frequency(tuple_list):
    frequency = {}
    for tup in tuple_list:
        if tup in frequency:
            frequency[tup] += 1
        else:
            frequency[tup] = 1
    return frequency",lm
705,"def sort_list_of_lists(lst):
    return sorted(lst, key=lambda x: (len(x), x))",lm
743,"def rotate_right(list1,m,n):
  result =  list1[-(m):]+list1[:-(n)]
  return result",human
330,"import re

def find_specific_length_words(text):
    # Using regex to find all words of length 3, 4, and 5
    matches = re.findall(r'\b\w{3,5}\b', text)
    return matches",lm
728,"def sum_two_lists(list1, list2):
    return [x + y for x, y in zip(list1, list2)]",lm
849,"def sum_of_prime_divisors(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    sum_primes = 0
    for i in range(2, n + 1):
        if n % i == 0 and is_prime(i):
            sum_primes += i
    return sum_primes",lm
462,"from itertools import combinations

def all_combinations(lst):
    result = []
    for r in range(len(lst)+1):
        for combo in combinations(lst, r):
            result.append(list(combo))
    return result",lm
402,"def nCr_mod_p(n, r, p):
    if r > n:
        return 0
    if r == 0 or r == n:
        return 1
    num = den = 1
    for i in range(r):
        num = (num * (n - i)) % p
        den = (den * (i + 1)) % p
    return (num * pow(den, p - 2, p)) % p",lm
251,"def insert_before_each_element(lst, element):
    result = []
    for x in lst:
        result.extend([element, x])
    return result",lm
917,"import re
def text_uppercase_lowercase(text):
        patterns = '[A-Z]+[a-z]+$'
        if re.search(patterns, text):
                return 'Found a match!'
        else:
                return ('Not matched!')",human
783,"def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v",human
856,"def find_Min_Swaps(arr,n) : 
    noOfZeroes = [0] * n 
    count = 0 
    noOfZeroes[n - 1] = 1 - arr[n - 1] 
    for i in range(n-2,-1,-1) : 
        noOfZeroes[i] = noOfZeroes[i + 1] 
        if (arr[i] == 0) : 
            noOfZeroes[i] = noOfZeroes[i] + 1
    for i in range(0,n) : 
        if (arr[i] == 1) : 
            count = count + noOfZeroes[i] 
    return count ",human
401,"def add_tuple_elements(t1, t2):
    return tuple(tuple(x + y for x, y in zip(sub_t1, sub_t2)) for sub_t1, sub_t2 in zip(t1, t2))",lm
268,"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ",human
600,"def is_even(number):
    return (number & 1) == 0",lm
94,"from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ",human
147,"def max_path_sum(tri, m, n): 
	for i in range(m-1, -1, -1): 
		for j in range(i+1): 
			if (tri[i+1][j] > tri[i+1][j+1]): 
				tri[i][j] += tri[i+1][j] 
			else: 
				tri[i][j] += tri[i+1][j+1] 
	return tri[0][0]",human
479,"def find_first_digit(number):
    return int(str(abs(number))[0])",lm
737,"import re 
regex = '^[aeiouAEIOU][A-Za-z0-9_]*'
def check_str(string): 
	if(re.search(regex, string)): 
		return (""Valid"") 
	else: 
		return (""Invalid"") ",human
237,"from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ",human
235,"def set_even_bits(number):
    bitmask = 0b0101010101010101010101010101010101010101010101010101010101010101
    return number | bitmask",lm
479,"def first_Digit(n) :  
    while n >= 10:  
        n = n / 10; 
    return int(n) ",human
722,"def filter_data(students,h,w):
    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}
    return result    ",human
172,"def count_occurance(s):
  count=0
  for i in range(len(s)):
    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):
      count = count + 1
  return count",human
751,"def check_min_heap(arr, i):
    if 2 * i + 2 > len(arr):
        return True
    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)
    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] 
                                      and check_min_heap(arr, 2 * i + 2))
    return left_child and right_child",human
345,"def diff_consecutivenums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result",human
388,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; ",human
691,"from itertools import groupby 
def group_element(test_list):
  res = dict()
  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):
    res[key] = [ele[0] for ele in val] 
  return (res)
",human
958,"def intToRoman(num):
    value = [
        1000, 900, 500, 400,
        100, 90, 50, 40,
        10, 9, 5, 4,
        1
        ]
    symbol = [
        ""M"", ""CM"", ""D"", ""CD"",
        ""C"", ""XC"", ""L"", ""XL"",
        ""X"", ""IX"", ""V"", ""IV"",
        ""I""
        ]
    roman_num = ''
    i = 0
    while num > 0:
        for _ in range(num // value[i]):
            roman_num += symbol[i]
            num -= value[i]
        i += 1
    return roman_num",lm
797,"def sum_Odd(n): 
    terms = (n + 1)//2
    sum1 = terms * terms 
    return sum1  
def sum_in_Range(l,r): 
    return sum_Odd(r) - sum_Odd(l - 1)",human
219,"def extract_max_min_k_elements(given_tuple, k):
    if k > len(given_tuple):
        return ""Error: k exceeds the length of the tuple""
    
    sorted_tuple = sorted(given_tuple)
    min_k_elements = sorted_tuple[:k]
    max_k_elements = sorted_tuple[-k:]
    
    return min_k_elements, max_k_elements",lm
469,"def max_profit(price, k):
    n = len(price)
    final_profit = [[None for x in range(n)] for y in range(k + 1)]
    for i in range(k + 1):
        for j in range(n):
            if i == 0 or j == 0:
                final_profit[i][j] = 0
            else:
                max_so_far = 0
                for x in range(j):
                    curr_price = price[j] - price[x] + final_profit[i-1][x]
                    if max_so_far < curr_price:
                        max_so_far = curr_price
                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)
    return final_profit[k][n-1]",human
380,"def multi_list(rownum,colnum):
  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]
  for row in range(rownum):
    for col in range(colnum):
        multi_list[row][col]= row*col
  return multi_list
",human
34,"def find_missing_number(arr):
    start, end = 0, len(arr) - 1
    while start <= end:
        mid = (start + end) // 2
        if arr[mid] == mid + arr[0]:
            start = mid + 1
        else:
            end = mid - 1
    return start + arr[0]",lm
543,"def add_and_print_digits(a, b):
    sum_ = a + b
    print(len(str(sum_)))",lm
529,"def nth_jacobsthal_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return nth_jacobsthal_lucas(n - 1) + 2 * nth_jacobsthal_lucas(n - 2)",lm
764,"def number_ctr(str):
      number_ctr= 0
      for i in range(len(str)):
          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     
      return  number_ctr",human
741,"def all_Characters_Same(s) :
    n = len(s)
    for i in range(1,n) :
        if s[i] != s[0] :
            return False
    return True",human
540,"def find_Diff(arr,n): 
    arr.sort()  
    count = 0; max_count = 0; min_count = n 
    for i in range(0,(n-1)): 
        if arr[i] == arr[i + 1]: 
            count += 1
            continue
        else: 
            max_count = max(max_count,count) 
            min_count = min(min_count,count) 
            count = 0
    return max_count - min_count ",human
845,"def count_digits_in_factorial(n):
    if n < 0:
        return ""Invalid input""
    elif n == 0:
        return 1
    else:
        import math
        factorial = math.factorial(n)
        return len(str(factorial))",lm
18,"NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ",human
358,"def moddiv_list(nums1,nums2):
  result = map(lambda x, y: x % y, nums1, nums2)
  return list(result)",human
925,"def product_of_tuple(numbers):
    product = 1
    for number in numbers:
        product *= number
    return product",lm
13,"from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
",human
824,"def remove_even_numbers(lst):
    return [num for num in lst if num % 2 != 0]",lm
530,"from array import array
def negative_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x < 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",human
362,"def find_max_occurrences(input_list):
    if not input_list:
        return None
    return max(set(input_list), key = input_list.count)",lm
620,"def largest_subset(a, n):
	dp = [0 for i in range(n)]
	dp[n - 1] = 1; 
	for i in range(n - 2, -1, -1):
		mxm = 0;
		for j in range(i + 1, n):
			if a[j] % a[i] == 0 or a[i] % a[j] == 0:
				mxm = max(mxm, dp[j])
		dp[i] = 1 + mxm
	return max(dp)",human
765,"def nth_polite_number(n):
    count = 0
    number = 0
    while count < n:
        number += 1
        if (number & (number - 1)) != 0:
            count += 1
    return number",lm
817,"def find_divisible_numbers(numbers, m, n):
    return list(filter(lambda x: x % m == 0 or x % n == 0, numbers))",lm
953,"def subset(ar, n): 
    res = 0
    ar.sort() 
    for i in range(0, n) : 
        count = 1
        for i in range(n - 1): 
            if ar[i] == ar[i + 1]: 
                count+=1
            else: 
                break 
        res = max(res, count)  
    return res ",human
390,"def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string",human
796,"def sum_of_items(dictionary):
    return sum(dictionary.values())",lm
438,"def count_bidirectional_tuple_pairs(input_list):
    count = 0
    seen_pairs = set()
    for t in input_list:
        if isinstance(t, tuple) and len(t) == 2:
            reverse_t = (t[1], t[0])
            if reverse_t in seen_pairs:
                count += 1
            else:
                seen_pairs.add(t)
    return count",lm
304,"def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] ",human
693,"import re

def remove_multiple_spaces(s):
    return re.sub(r'\s+', ' ', s)",lm
719,"import re

def match_string(s):
    pattern = r'ab*'
    if re.match(pattern, s):
        return True
    else:
        return False",lm
663,"def find_largest_k(x, y):
    # Assuming x and y are positive integers with x > y
    if x <= y or y < 0:
        return None
    return (x - 1) + y",lm
581,"def surface_Area(b,s): 
    return 2 * b * s + pow(b,2) ",human
814,"def rombus_area(p,q):
  area=(p*q)/2
  return area",human
801,"def test_three_equal(x,y,z):
  result= set([x,y,z])
  if len(result)==3:
    return 0
  else:
    return (4-len(result))",human
934,"def dealnnoy_num(n, m): 
	if (m == 0 or n == 0) : 
		return 1
	return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)",human
755,"def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[1] ",human
451,"import re

def remove_whitespaces(text):
    return re.sub(r'\s+', '', text)",lm
743,"def rotate_list(input_list, n):
    n = n % len(input_list)
    return input_list[-n:] + input_list[:-n]",lm
366,"def adjacent_num_product(list_nums):
    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",human
206,"def concatenate_adjacent_elements(tuples_list):
    concatenated_list = []
    for i in range(len(tuples_list) - 1):
        concatenated_list.append((tuples_list[i][0], tuples_list[i+1][1]))
    return concatenated_list",lm
310,"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",human
236,"def No_of_Triangle(N,K):
    if (N < K):
        return -1;
    else:
        Tri_up = 0;
        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;
        Tri_down = 0;
        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;
        return Tri_up + Tri_down;",human
123,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)",human
309,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ",human
548,"def longest_increasing_subsequence(arr): 
	n = len(arr) 
	longest_increasing_subsequence = [1]*n 
	for i in range (1 , n): 
		for j in range(0 , i): 
			if arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : 
				longest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1
	maximum = 0
	for i in range(n): 
		maximum = max(maximum , longest_increasing_subsequence[i]) 
	return maximum",human
434,"import re

def match_ab(string):
    if re.search('ab+', string):
        return True
    else:
        return False",lm
649,"def sum_Range_list(nums, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += nums[i]                                                                                                                                                                                                  
    return sum_range   ",human
169,"def get_pell(n): 
	if (n <= 2): 
		return n 
	a = 1
	b = 2
	for i in range(3, n+1): 
		c = 2 * b + a 
		a = b 
		b = c 
	return b ",human
858,"def count_lists_square(list_of_lists):
    count = sum(isinstance(i, list) for i in list_of_lists)
    return count ** 2",lm
87,"import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict",human
517,"def largest_pos(list1): 
    max = list1[0] 
    for x in list1: 
        if x > max : 
             max = x  
    return max",human
8,"def square_nums(nums):
 square_nums = list(map(lambda x: x ** 2, nums))
 return square_nums",human
588,"def difference_largest_smallest(arr):
    return max(arr) - min(arr)",lm
941,"def count_until_tuple(lst):
    count = 0
    for element in lst:
        if isinstance(element, tuple):
            break
        count += 1
    return count",lm
809,"def check_tuples(tup1, tup2):
    return all(x > y for x, y in zip(tup1, tup2))",lm
643,"import re

def match_z(word):
    return re.search(r'\Bz\B', word) is not None",lm
794,"import re

def match_string(text):
    pattern = 'a.*b$'
    if re.search(pattern, text):
        return True
    else:
        return False",lm
142,"def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result",human
294,"def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)",human
469,"def maxProfit(k, prices):
    if not prices:
        return 0
    
    n = len(prices)
    if k >= n // 2:
        return sum(max(prices[i+1] - prices[i], 0) for i in range(n-1))
    
    dp = [[0] * n for _ in range(k+1)]
    
    for i in range(1, k+1):
        max_diff = -prices[0]
        for j in range(1, n):
            dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)
            max_diff = max(max_diff, dp[i-1][j] - prices[j])
    
    return dp[k][-1]",lm
555,"def difference(n) :  
    S = (n*(n + 1))//2;  
    res = S*(S-1);  
    return res;  ",human
392,"def max_sum(n, memo={}):
    if n == 0:
        return 0
    if n in memo:
        return memo[n]
    memo[n] = max(max_sum(n//2) + max_sum(n//3) + max_sum(n//4) + max_sum(n//5), n)
    return memo[n]",lm
189,"def first_Missing_Positive(arr,n): 
    ptr = 0
    for i in range(n):
        if arr[i] == 1:
            ptr = 1
            break
    if ptr == 0:
        return(1)
    for i in range(n):
        if arr[i] <= 0 or arr[i] > n:
            arr[i] = 1
    for i in range(n):
        arr[(arr[i] - 1) % n] += n
    for i in range(n):
        if arr[i] <= n:
            return(i + 1)
    return(n + 1)",human
485,"def largest_palindrome(arr):
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    largest = -1
    for num in arr:
        if is_palindrome(num) and num > largest:
            largest = num
    return largest",lm
27,"def remove_digits_from_strings(string_list):
    return [''.join(filter(lambda x: not x.isdigit(), s)) for s in string_list]",lm
550,"def find_max_in_sorted_rotated(arr):
    low, high = 0, len(arr) - 1
    while low <= high:
        if arr[low] <= arr[high]:  # Array is not rotated.
            return arr[high]
        mid = (low + high) // 2
        next = (mid + 1) % len(arr)
        prev = (mid - 1 + len(arr)) % len(arr)
        if arr[mid] >= arr[prev] and arr[mid] >= arr[next]:
            return arr[mid]
        elif arr[mid] <= arr[high]:
            low = mid + 1
        elif arr[mid] >= arr[low]:
            high = mid - 1
    return -1",lm
394,"def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return (res) ",human
463,"def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far",human
102,"def snake_to_camel(snake_str):
    components = snake_str.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])",lm
800,"import re
def remove_all_spaces(text):
 return (re.sub(r'\s+', '',text))",human
273,"def subtract_tuples(tuple1, tuple2):
    return tuple(a - b for a, b in zip(tuple1, tuple2))",lm
121,"def find_triplet_with_sum(arr, sum):
    arr.sort()
    n = len(arr)
    for i in range(n - 2):
        left = i + 1
        right = n - 1
        while left < right:
            current_sum = arr[i] + arr[left] + arr[right]
            if current_sum == sum:
                return [arr[i], arr[left], arr[right]]
            elif current_sum < sum:
                left += 1
            else:
                right -= 1
    return []",lm
39,"def canRearrangeString(s):
    from collections import Counter
    
    counter = Counter(s)
    max_count = max(counter.values())
    
    return max_count <= (len(s) + 1) // 2",lm
145,"def max_difference(arr):
    if not arr or len(arr) < 2:
        return 0
    min_element = arr[0]
    max_diff = arr[1] - arr[0]
    for i in range(1, len(arr)):
        if arr[i] - min_element > max_diff:
            max_diff = arr[i] - min_element
        if arr[i] < min_element:
            min_element = arr[i]
    return max_diff",lm
679,"def get_element_by_index(dictionary, key, index):
    try:
        return dictionary[key][index]
    except KeyError:
        return ""Key does not exist.""
    except IndexError:
        return ""Index out of range.""
    except Exception as e:
        return str(e)",lm
775,"def odd_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))",human
461,"def count_uppercase_chars(s):
    return sum(1 for char in s if char.isupper())",lm
214,"import math
def degree_radian(radian):
 degree = radian*(180/math.pi)
 return degree",human
475,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter",human
960,"def tiling_problem(n):
    if n == 0 or n == 1:
        return 1
    return tiling_problem(n-1) + tiling_problem(n-2)",lm
716,"def perimeter_rombus(side_length):
    return 4 * side_length",lm
33,"def decimal_to_binary(n):
    return bin(n).replace(""0b"", """")",lm
14,"def volume_of_triangular_prism(base, height, length):
    area_of_base_triangle = 0.5 * base * height
    volume = area_of_base_triangle * length
    return volume",lm
76,"def count_Squares(m,n):
    if(n < m):
        temp = m
        m = n
        n = temp
    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",human
113,"def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False",human
299,"from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])",human
972,"def concatenate_tuples(tuple1, tuple2):
    return (tuple1, tuple2)",lm
20,"def is_woodball(number):
    number_str = str(number)
    for digit in number_str:
        if digit == '0' or int(digit) % 2 == 0:
            continue
        else:
            return False
    return True",lm
149,"def longestSubseqWithDiffOne(arr):
    n = len(arr)
    dp = [1 for i in range(n)]
    
    for i in range(n):
        for j in range(i):
            if abs(arr[i] - arr[j]) == 1:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)",lm
603,"def get_lucid_number(n):
    lucid_numbers = [2]
    
    for i in range(3, n+1):
        count = 0
        for num in lucid_numbers:
            if i % num == 0:
                count += 1
        if count == 1:
            lucid_numbers.append(i)
    
    if n < 2:
        return None
    else:
        return max([num for num in lucid_numbers if num <= n])",lm
526,"def capitalize_first_last_letters(str1):
     str1 = result = str1.title()
     result =  """"
     for word in str1.split():
        result += word[:-1] + word[-1].upper() + "" ""
     return result[:-1]  ",human
572,"def two_unique_nums(nums):
  return [i for i in nums if nums.count(i)==1]",human
778,"def pack_consecutive_duplicates(lst):
    packed_list = []
    if not lst:  # Check if the list is empty
        return packed_list
    sublist = [lst[0]]  # Initialize the first sublist
    for element in lst[1:]:
        if element == sublist[-1]:
            sublist.append(element)
        else:
            packed_list.append(sublist)
            sublist = [element]
    packed_list.append(sublist)  # Add the last sublist
    return packed_list",lm
417,"def find_common_first_element(tuple_list):
    if not tuple_list:
        return None
    first_elements = [t[0] for t in tuple_list if t]
    common_element = set(first_elements)
    if len(common_element) == 1:
        return common_element.pop()
    else:
        return None",lm
220,"def replace_with_colon(text, n):
    characters_to_replace = [' ', ',', '.']
    output_text = ''
    count = 0
    for char in text:
        if count < n and char in characters_to_replace:
            output_text += ':'
            count += 1
        else:
            output_text += char
    return output_text",lm
606,"def degrees_to_radians(degrees):
    import math
    return degrees * (math.pi / 180)",lm
686,"from collections import defaultdict 
def freq_element(test_tup):
  res = defaultdict(int)
  for ele in test_tup:
    res[ele] += 1
  return (str(dict(res))) ",human
153,"def find_vertex(a, b, c):
    h = -b / (2 * a)
    k = c - (b ** 2) / (4 * a)
    return (h, k)",lm
204,"def count_char_occurrence(s, char):
    return s.count(char)",lm
236,"def max_equilateral_triangles(n):
    if n < 1:
        return 0
    return (n*(n+1))//2",lm
225,"def find_min_in_rotated_array(arr):
    left, right = 0, len(arr) - 1
    while left < right:
        mid = (left + right) // 2
        if arr[mid] > arr[right]:
            left = mid + 1
        else:
            right = mid
    return arr[left]",lm
629,"def find_even_numbers(mixed_list):
    return [item for item in mixed_list if isinstance(item, int) and item % 2 == 0]",lm
585,"import heapq
def expensive_items(items,n):
  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])
  return expensive_items",human
835,"def slope(x1,y1,x2,y2): 
    return (float)(y2-y1)/(x2-x1)  ",human
495,"import re

def remove_lowercase_substrings(s):
    return re.sub(r'[a-z]+', '', s)",lm
395,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None",human
341,"def set_to_ordered_tuples(s):
    return tuple(sorted(s))",lm
516,"def radix_sort(lst):
    RADIX = 10
    placement = 1
    max_digit = max(lst)

    while max_digit // placement > 0:
        buckets = [list() for _ in range(RADIX)]
        for i in lst:
            tmp = i // placement
            buckets[tmp % RADIX].append(i)
        a = 0
        for b in range(RADIX):
            for i in buckets[b]:
                lst[a] = i
                a += 1
        placement *= RADIX
    return lst",lm
272,"def extract_rear_elements(tuple_list):
    return [t[-1] for t in tuple_list]",lm
889,"def reverse_each_list(list_of_lists):
    return [lst[::-1] for lst in list_of_lists]",lm
476,"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum",human
303,"def are_inversion_counts_same(arr1, arr2):
    def merge_sort_counting_inversions(arr):
        if len(arr) < 2:
            return arr, 0
        mid = len(arr) // 2
        left, left_inversions = merge_sort_counting_inversions(arr[:mid])
        right, right_inversions = merge_sort_counting_inversions(arr[mid:])
        merged, split_inversions = merge_count_split_inversions(left, right)
        total_inversions = left_inversions + right_inversions + split_inversions
        return merged, total_inversions

    def merge_count_split_inversions(left, right):
        merged = []
        inversions = 0
        i, j = 0, 0
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                merged.append(left[i])
                i += 1
            else:
                merged.append(right[j])
                j += 1
                inversions += len(left) - i
        merged.extend(left[i:])
        merged.extend(right[j:])
        return merged, inversions

    _, count1 = merge_sort_counting_inversions(arr1)
    _, count2 = merge_sort_counting_inversions(arr2)
    return count1 == count2",lm
141,"def pancake_sort(arr):
    n = len(arr)
    for i in range(n, 1, -1):
        max_idx = arr.index(max(arr[:i]))
        if max_idx != i - 1:
            arr[:max_idx + 1] = arr[:max_idx + 1][::-1] # Flip the sub-array to bring the maximum element to the first position
            arr[:i] = arr[:i][::-1] # Flip the entire sub-array to bring the maximum element to its correct position
    return arr",lm
481,"def is_subset_sum(set, n, sum):
	if (sum == 0):
		return True
	if (n == 0):
		return False
	if (set[n - 1] > sum):
		return is_subset_sum(set, n - 1, sum)
	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",human
938,"import sys 

def find_closet(A, B, C, p, q, r): 
	diff = sys.maxsize 
	res_i = 0
	res_j = 0
	res_k = 0
	i = 0
	j = 0
	k = 0
	while(i < p and j < q and k < r): 
		minimum = min(A[i], min(B[j], C[k])) 
		maximum = max(A[i], max(B[j], C[k])); 
		if maximum-minimum < diff: 
			res_i = i 
			res_j = j 
			res_k = k 
			diff = maximum - minimum; 
		if diff == 0: 
			break
		if A[i] == minimum: 
			i = i+1
		elif B[j] == minimum: 
			j = j+1
		else: 
			k = k+1
	return A[res_i],B[res_j],C[res_k]",human
852,"def remove_negatives(numbers):
    return [num for num in numbers if num >= 0]",lm
547,"def sum_of_hamming_distances(n):
    sum_distance = 0
    for i in range(n):
        sum_distance += bin(i ^ (i + 1)).count('1')
    return sum_distance",lm
836,"from sys import maxsize 
def max_sub_array_sum(a,size): 
	max_so_far = -maxsize - 1
	max_ending_here = 0
	start = 0
	end = 0
	s = 0
	for i in range(0,size): 
		max_ending_here += a[i] 
		if max_so_far < max_ending_here: 
			max_so_far = max_ending_here 
			start = s 
			end = i 
		if max_ending_here < 0: 
			max_ending_here = 0
			s = i+1
	return (end - start + 1)",human
244,"def next_perfect_square(number):
    root = number ** 0.5
    if root.is_integer():
        return int((root + 1) ** 2)
    else:
        return int((root // 1 + 1) ** 2)",lm
159,"def month_season(month,days):
 if month in ('January', 'February', 'March'):
	 season = 'winter'
 elif month in ('April', 'May', 'June'):
	 season = 'spring'
 elif month in ('July', 'August', 'September'):
	 season = 'summer'
 else:
	 season = 'autumn'
 if (month == 'March') and (days > 19):
	 season = 'spring'
 elif (month == 'June') and (days > 20):
	 season = 'summer'
 elif (month == 'September') and (days > 21):
	 season = 'autumn'
 elif (month == 'October') and (days > 21):
	 season = 'autumn'
 elif (month == 'November') and (days > 21):
	 season = 'autumn'
 elif (month == 'December') and (days > 20):
	 season = 'winter'
 return season",human
86,"def nth_centered_hexagonal_number(n):
    return 3 * n * (n - 1) + 1",lm
645,"def get_product(val) : 
	res = 1
	for ele in val: 
		res *= ele 
	return res 
def find_k_product(test_list, K):
  res = get_product([sub[K] for sub in test_list])
  return (res) ",human
243,"def sort_on_occurence(lst): 
	dct = {} 
	for i, j in lst: 
		dct.setdefault(i, []).append(j) 
	return ([(i, *dict.fromkeys(j), len(j)) 
				for i, j in dct.items()]) ",human
212,"def sum_of_fourth_power(n):
    return sum(i**4 for i in range(1, n+1))",lm
252,"import cmath

def complex_to_polar(complex_num):
    return cmath.polar(complex_num)",lm
496,"import heapq as hq
def heap_queue_smallest(nums,n):
  smallest_nums = hq.nsmallest(n, nums)
  return smallest_nums",human
966,"def remove_empty_tuples(tuple_list):
    return [t for t in tuple_list if t]",lm
332,"def char_frequency(s):
    frequency = {}
    for char in s:
        frequency[char] = frequency.get(char, 0) + 1
    return frequency",lm
582,"def my_dict(dict1):
  if bool(dict1):
     return False
  else:
     return True",human
579,"def find_dissimilar(test_tup1, test_tup2):
  res = tuple(set(test_tup1) ^ set(test_tup2))
  return (res) ",human
787,"def match_abbb(text):
    import re
    pattern = 'ab{3}'
    if re.search(pattern, text):
        return True
    else:
        return False",lm
239,"def count_sequences(n, m):
    def count_recursive(start, length):
        if length == 1:
            return m - start + 1
        cnt = 0
        for i in range(start * 2, m + 1):
            cnt += count_recursive(i, length - 1)
        return cnt
    
    return count_recursive(1, n)",lm
740,"def tuple_to_dict(tup):
    return dict(zip(tup[::2], tup[1::2]))",lm
146,"def ascii_value_total(s):
    return sum(ord(char) for char in s)",lm
712,"def remove_duplicates_from_list_of_lists(list_of_lists):
    unique_lists = []
    unique_sets = set()
    for sublist in list_of_lists:
        sublist_tuple = tuple(sublist)
        if sublist_tuple not in unique_sets:
            unique_sets.add(sublist_tuple)
            unique_lists.append(sublist)
    return unique_lists",lm
128,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	",human
345,"def find_diff_consecutive_numbers(num_list):
    return [j - i for i, j in zip(num_list[:-1], num_list[1:])]",lm
30,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n): 
        for j in range(1,n-i+1):  
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ",human
24,"def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)",human
530,"def negative_ratio(arr):
    if not arr:
        return 0
    negative_count = sum(1 for x in arr if x < 0)
    return negative_count / len(arr)",lm
412,"def remove_odd_numbers(lst):
    return [num for num in lst if num % 2 == 0]",lm
445,"def multiply_tuples(tuple1, tuple2):
    result = tuple(a*b for a, b in zip(tuple1, tuple2))
    return result",lm
515,"def modular_sum(arr, n, m): 
	if (n > m): 
		return True
	DP = [False for i in range(m)] 
	for i in range(n): 
		if (DP[0]): 
			return True
		temp = [False for i in range(m)] 
		for j in range(m): 
			if (DP[j] == True): 
				if (DP[(j + arr[i]) % m] == False): 
					temp[(j + arr[i]) % m] = True
		for j in range(m): 
			if (temp[j]): 
				DP[j] = True
		DP[arr[i] % m] = True
	return DP[0]",human
782,"def Odd_Length_Sum(arr):
    Sum = 0
    l = len(arr)
    for i in range(l):
        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])
    return Sum",human
202,"def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2",human
226,"def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result",human
455,"def has_31_days(month_number):
    if month_number in [1, 3, 5, 7, 8, 10, 12]:
        return True
    return False",lm
853,"def sum_of_odd_factors(n):
    sum = 0
    for i in range(1, n + 1):
        if n % i == 0 and i % 2 != 0:
            sum += i
    return sum",lm
434,"import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
",human
667,"def count_vowels(s):
    vowels = 'aeiouAEIOU'
    count = 0
    for char in s:
        if char in vowels:
            count += 1
    return count",lm
110,"def find_missing_ranges(input_list, start_range, end_range):
    result = []
    expected = start_range
    for num in sorted(set(input_list)):
        if start_range <= num <= end_range:
            if num != expected:
                end = num - 1
                if expected == end:
                    result.append(str(expected))
                else:
                    result.append(f""{expected}-{end}"")
            expected = num + 1
    if expected <= end_range:
        if expected == end_range:
            result.append(str(expected))
        else:
            result.append(f""{expected}-{end_range}"")
    return result",lm
965,"def camel_to_snake(text):
        import re
        str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()",human
574,"def surfacearea_cylinder(r,h):
  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))
  return surfacearea",human
235,"def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) ",human
851,"def sum_of_inverse_of_divisors(n):
    sum_inverse = 0.0
    for i in range(1, n + 1):
        if n % i == 0:
            sum_inverse += 1 / i
    return sum_inverse",lm
300,"def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res ",human
291,"def countWays(n, k):
    if n == 0:
        return 0
    elif n == 1:
        return k
    same = k
    diff = k * (k-1)
    total = same + diff
    for i in range(3, n+1):
        same = diff
        diff = total * (k-1)
        total = same + diff
    return total",lm
891,"def same_Length(A,B): 
    while (A > 0 and B > 0): 
        A = A / 10; 
        B = B / 10; 
    if (A == 0 and B == 0): 
        return True; 
    return False; ",human
456,"def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result",human
321,"def demlo_number(n):
    return int(str(n) * n) ** 2",lm
674,"from collections import OrderedDict

def remove_duplicate_words(s):
    return ' '.join(OrderedDict.fromkeys(s.split()))",lm
605,"def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True",lm
104,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result",human
57,"def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ",human
594,"def diff_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even-first_odd)",human
3,"import math
def is_not_prime(n):
    result = False
    for i in range(2,int(math.sqrt(n)) + 1):
        if n % i == 0:
            result = True
    return result",human
949,"def count_digs(tup):
  return sum([len(str(ele)) for ele in tup ]) 
def sort_list(test_list):
  test_list.sort(key = count_digs)
  return (str(test_list))",human
246,"def babylonian_square_root(n, accuracy=1e-10):
    x = n
    while True:
        next_guess = 0.5 * (x + n / x)
        if abs(x - next_guess) < accuracy:
            break
        x = next_guess
    return x",lm
151,"def gcd(p,q):
    while q != 0:
        p, q = q,p%q
    return p
def is_coprime(x,y):
    return gcd(x,y) == 1",human
891,"def have_same_number_of_digits(num1, num2):
    return len(str(num1)) == len(str(num2))",lm
805,"def list_with_highest_sum(list_of_lists):
    return max(list_of_lists, key=sum)",lm
510,"def countSubsequences(arr, k):
    n = len(arr)
    
    def countSubsequencesUtil(arr, n, k, index, product):
        if index == n:
            if product < k:
                return 1
            else:
                return 0
        count = 0
        count += countSubsequencesUtil(arr, n, k, index + 1, product)  # Not including the current element
        if product * arr[index] < k:
            count += countSubsequencesUtil(arr, n, k, index + 1, product * arr[index])  # Including the current element
        return count
    
    return countSubsequencesUtil(arr, n, k, 0, 1) - 1  # Subtracting 1 to exclude the empty subsequence",lm
470,"def pairwise_addition(tuple1, tuple2):
    return tuple(a + b for a, b in zip(tuple1, tuple2))",lm
879,"import re

def match_string(text):
    pattern = '^a.*b$'
    if re.match(pattern, text):
        return True
    else:
        return False",lm
853,"import math
def sum_of_odd_Factors(n): 
    res = 1
    while n % 2 == 0: 
        n = n // 2 
    for i in range(3,int(math.sqrt(n) + 1)): 
        count = 0
        curr_sum = 1
        curr_term = 1
        while n % i == 0: 
            count+=1 
            n = n // i 
            curr_term *= i 
            curr_sum += curr_term    
        res *= curr_sum  
    if n >= 2: 
        res *= (1 + n) 
    return res ",human
38,"def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)",human
703,"def is_key_present(dictionary, key):
    return key in dictionary",lm
537,"def first_repeated_word(s):
    words = s.split()
    seen = set()
    for word in words:
        if word in seen:
            return word
        seen.add(word)
    return None",lm
329,"def neg_count(list):
  neg_count= 0
  for num in list: 
    if num <= 0: 
      neg_count += 1
  return neg_count ",human
576,"def is_subarray(main_array, sub_array):
    if not sub_array:  # An empty array is a subarray of any array
        return True
    if not main_array:  # An empty main array cannot have a subarray
        return False
    
    for i in range(len(main_array) - len(sub_array) + 1):
        for j in range(len(sub_array)):
            if main_array[i + j] != sub_array[j]:
                break
            elif j == len(sub_array) - 1:
                return True
    return False",lm
733,"def find_first_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result",human
519,"import math
def volume_tetrahedron(num):
	volume = (num ** 3 / (6 * math.sqrt(2)))	
	return round(volume, 2)",human
886,"def average(numbers):
    return sum(numbers) / len(numbers) if numbers else 0",lm
672,"def max_of_three(num1,num2,num3): 
    if (num1 >= num2) and (num1 >= num3):
       lnum = num1
    elif (num2 >= num1) and (num2 >= num3):
       lnum = num2
    else:
       lnum = num3
    return lnum",human
405,"def element_exists_in_tuple(tup, element):
    return element in tup",lm
272,"def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ",human
924,"def find_maximum(a, b):
    return max(a, b)",lm
745,"def find_divisible_numbers(start, end):
    def is_divisible(num):
        for digit in str(num):
            if digit == '0' or num % int(digit) != 0:
                return False
        return True
    
    divisible_numbers = []
    for number in range(start, end + 1):
        if is_divisible(number):
            divisible_numbers.append(number)
    
    return divisible_numbers",lm
509,"def average_of_odds(n):
    sum_of_odds = sum(range(1, n+1, 2))
    count_of_odds = len(range(1, n+1, 2))
    return sum_of_odds / count_of_odds",lm
768,"def check_Odd_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 1): 
        return True
    else: 
        return False",human
457,"def Find_Min(lst): 
    minList = min((x) for x in lst) 
    return minList",human
602,"def first_repeated_char(s):
    char_set = set()
    for char in s:
        if char in char_set:
            return char
        char_set.add(char)
    return None",lm
207,"def find_longest_repeating_subseq(str): 
	n = len(str) 
	dp = [[0 for k in range(n+1)] for l in range(n+1)] 
	for i in range(1, n+1): 
		for j in range(1, n+1): 
			if (str[i-1] == str[j-1] and i != j): 
				dp[i][j] = 1 + dp[i-1][j-1] 
			else: 
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 
	return dp[n][n]",human
145,"def max_Abs_Diff(arr,n): 
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ",human
371,"def smallest_missing(A, left_element, right_element):
    if left_element > right_element:
        return left_element
    mid = left_element + (right_element - left_element) // 2
    if A[mid] == mid:
        return smallest_missing(A, mid + 1, right_element)
    else:
        return smallest_missing(A, left_element, mid - 1)",human
843,"import heapq

def nthSuperUglyNumber(n, primes):
    uglies = [1]
    def gen(prime):
        for ugly in uglies:
            yield ugly * prime
    merged = heapq.merge(*map(gen, primes))
    unique = (x for x in merged if x != uglies[-1])
    while len(uglies) < n:
        uglies.append(next(unique))
    return uglies[-1]",lm
421,"def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) ",human
915,"def rearrange_array(arr):
    rearranged_array = sorted(arr, key=lambda x: (x >= 0, x))
    return rearranged_array",lm
937,"def most_common_char(s):
    char_frequency = {}
    for char in s:
        if char in char_frequency:
            char_frequency[char] += 1
        else:
            char_frequency[char] = 1
    return max(char_frequency, key=char_frequency.get)",lm
970,"def find_min(num1, num2):
    return min(num1, num2)",lm
231,"def max_sum_triangle(triangle):
    n = len(triangle)

    for i in range(n-2, -1, -1):
        for j in range(len(triangle[i])):
            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])

    return triangle[0][0]",lm
301,"def find_depth(d, level=1):
    if not isinstance(d, dict) or not d:
        return level
    return max(find_depth(v, level + 1) if isinstance(v, dict) else level for k, v in d.items())",lm
265,"def list_split(S, step):
    return [S[i::step] for i in range(step)]",human
356,"def find_angle(a,b):
 c = 180 - (a + b)
 return c
",human
875,"def min_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = min(temp)
  return (res) ",human
862,"from collections import Counter
import re
def n_common_words(text,n):
  words = re.findall('\w+',text)
  n_common_words= Counter(words).most_common(n)
  return list(n_common_words)",human
438,"def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return (str(res)) ",human
869,"def remove_sublists_outside_range(lst, min_size, max_size):
    return [sublist for sublist in lst if min_size <= len(sublist) <= max_size]",lm
393,"def find_max_length_list(lists):
    return max(lists, key=lambda x: len(x))",lm
490,"def extract_symmetric(test_list):
  temp = set(test_list) & {(b, a) for a, b in test_list}
  res = {(a, b) for a, b in temp if a < b}
  return (res) ",human
614,"def cummulative_sum(test_list):
  res = sum(map(sum, test_list))
  return (res)",human
948,"def get_item(tup1,index):
  item = tup1[index]
  return item",human
584,"import re

def find_adverbs(sentence):
    adverb_pattern = r'\w+ly\b'
    adverbs = re.findall(adverb_pattern, sentence)
    positions = [match.start() for match in re.finditer(adverb_pattern, sentence)]
    return list(zip(adverbs, positions))",lm
607,"import re

def search_pattern(text, pattern):
    matches = re.finditer(pattern, text)
    locations = [(match.start(), match.end()) for match in matches]
    return locations",lm
511,"def find_Min_Sum(num): 
    sum = 0
    i = 2
    while(i * i <= num): 
        while(num % i == 0): 
            sum += i 
            num /= i 
        i += 1
    sum += num 
    return sum",human
442,"from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",human
131,"def reverse_vowels(s):
    vowels = 'aeiouAEIOU'
    i, j = 0, len(s) - 1
    s_list = list(s)
    while i < j:
        if s_list[i] in vowels and s_list[j] in vowels:
            s_list[i], s_list[j] = s_list[j], s_list[i]
            i += 1
            j -= 1
        if s_list[i] not in vowels:
            i += 1
        if s_list[j] not in vowels:
            j -= 1
    return ''.join(s_list)",lm
876,"def find_lcm(a, b):
    if a > b:
        greater = a
    else:
        greater = b
        
    while(True):
        if((greater % a == 0) and (greater % b == 0)):
            lcm = greater
            break
        greater += 1
        
    return lcm",lm
6,"def differ_by_one_bit(num1, num2):
    xor_result = num1 ^ num2
    return xor_result and not (xor_result & (xor_result - 1))",lm
144,"def sum_of_absolute_differences(arr):
    sum_diff = 0
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            sum_diff += abs(arr[i] - arr[j])
    return sum_diff * 2",lm
546,"def find_last_occurrence(s, char):
    return s.rfind(char)",lm
567,"def issort_list(list1):
    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))
    return result",human
77,"def is_Diff(n): 
    return (n % 11 == 0) ",human
667,"def Check_Vow(string, vowels): 
    final = [each for each in string if each in vowels] 
    return(len(final)) 
",human
164,"import math 
def divSum(n): 
    sum = 1; 
    i = 2; 
    while(i * i <= n): 
        if (n % i == 0): 
            sum = (sum + i +math.floor(n / i)); 
        i += 1; 
    return sum; 
def areEquivalent(num1,num2): 
    return divSum(num1) == divSum(num2); ",human
795,"import heapq

def n_cheap_items(prices, n):
    return heapq.nsmallest(n, prices)",lm
222,"def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) ",human
177,"def find_numbers_with_lcm_in_range(low, high):
    for i in range(low, high + 1):
        for j in range(i + 1, high + 1):
            lcm = (i * j) // math.gcd(i, j)
            if low <= lcm <= high:
                return i, j
    return None",lm
768,"def check_odd_parity(number):
    return (bin(number).count(""1"") % 2) != 0",lm
49,"def extract_elements(lst, index=0):
    return [item[index] for item in lst if len(item) > index]",lm
745,"def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]",human
112,"def cylinder_perimeter(radius, height):
    return 2 * 3.14159 * radius + 2 * height",lm
302,"def set_Bit_Number(n): 
    if (n == 0): 
        return 0; 
    msb = 0; 
    n = int(n / 2); 
    while (n > 0): 
        n = int(n / 2); 
        msb += 1; 
    return (1 << msb)",human
779,"def count_unique_lists(list_of_lists):
    unique_lists = set(map(lambda x: tuple(sorted(x)), list_of_lists))
    return len(unique_lists)",lm
714,"def count_Fac(n):  
    m = n 
    count = 0
    i = 2
    while((i * i) <= m): 
        total = 0
        while (n % i == 0): 
            n /= i 
            total += 1 
        temp = 0
        j = 1
        while((temp + j) <= total): 
            temp += j 
            count += 1
            j += 1 
        i += 1
    if (n != 1): 
        count += 1 
    return count ",human
921,"def chunk_tuple(input_tuple, n):
    return [input_tuple[i:i + n] for i in range(0, len(input_tuple), n)]",lm
279,"def is_num_decagonal(n): 
	return 4 * n * n - 3 * n ",human
502,"def find(n,m):
  r = n%m
  return (r)",human
348,"def count_sequences(values, length):
    dp = [[0] * (length + 1) for _ in range(sum(values) + 1)]
    dp[0][0] = 1
    
    for i in range(1, length + 1):
        for sum_val in range(sum(values) + 1):
            for v in values:
                if sum_val >= v:
                    dp[sum_val][i] += dp[sum_val - v][i - 1]
    
    return sum(dp[sum_val][length] for sum_val in range(sum(values) + 1))",lm
503,"def add_consecutive_nums(nums):
    result = [b+a for a, b in zip(nums[:-1], nums[1:])]
    return result",human
894,"def convert_to_tuple(float_string):
    float_tuple = tuple(map(float, float_string.split(',')))
    return float_tuple",lm
969,"def join_tuples(tuples_list):
    result = []
    while tuples_list:
        first = tuples_list.pop(0)
        first_list = list(first)
        indexes_to_remove = []
        for i, other in enumerate(tuples_list):
            if first[0] == other[0]:
                first_list.extend(other[1:])
                indexes_to_remove.append(i)
        for i in sorted(indexes_to_remove, reverse=True):
            tuples_list.pop(i)
        result.append(tuple(first_list))
    return result",lm
311,"def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) ",human
621,"def increment_numerics(test_list, K):
  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]
  return res ",human
229,"def rearrange_elements(arr):
    left, right = 0, len(arr) - 1
    while left < right:
        while arr[left] < 0 and left < right:
            left += 1
        while arr[right] >= 0 and left < right:
            right -= 1
        if left < right:
            arr[left], arr[right] = arr[right], arr[left]
    return arr",lm
787,"import re
def text_match_three(text):
        patterns = 'ab{3}?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
942,"def is_element_present(input_list, element):
    return element in input_list",lm
56,"def check_number(n):
    reverse_n = int(str(n)[::-1])
    return n == 2 * reverse_n - 1",lm
626,"def triangle_area(r) :  
    if r < 0 : 
        return -1
    return r * r ",human
679,"def access_key(ditionary,key):
  return list(ditionary)[key]",human
717,"import math
import sys
def sd_calc(data):
    n = len(data)
    if n <= 1:
        return 0.0
    mean, sd = avg_calc(data), 0.0
    for el in data:
        sd += (float(el) - mean)**2
    sd = math.sqrt(sd / float(n-1))
    return sd
def avg_calc(ls):
    n, mean = len(ls), 0.0
    if n <= 1:
        return ls[0]
    for el in ls:
        mean = mean + float(el)
    mean = mean / float(n)
    return mean",human
194,"def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; ",human
447,"def find_cubes(elements):
    return list(map(lambda x: x**3, elements))",lm
513,"def add_str(test_tup, K):
  res = [ele for sub in test_tup for ele in (sub, K)]
  return (res) ",human
524,"def max_sum_increasing_subsequence(arr, n): 
	max = 0
	msis = [0 for x in range(n)] 
	for i in range(n): 
		msis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
				msis[i] < msis[j] + arr[i]): 
				msis[i] = msis[j] + arr[i] 
	for i in range(n): 
		if max < msis[i]: 
			max = msis[i] 
	return max",human
864,"def find_palindromes(str_list):
    return list(filter(lambda x: x == x[::-1], str_list))",lm
250,"def count_occurrences(tup, element):
    return tup.count(element)",lm
493,"import math
def calculate_polygons(startx, starty, endx, endy, radius):
    sl = (2 * radius) * math.tan(math.pi / 6)
    p = sl * 0.5
    b = sl * math.cos(math.radians(30))
    w = b * 2
    h = 2 * sl   
    startx = startx - w
    starty = starty - h
    endx = endx + w
    endy = endy + h
    origx = startx
    origy = starty
    xoffset = b
    yoffset = 3 * p
    polygons = []
    row = 1
    counter = 0
    while starty < endy:
        if row % 2 == 0:
            startx = origx + xoffset
        else:
            startx = origx
        while startx < endx:
            p1x = startx
            p1y = starty + p
            p2x = startx
            p2y = starty + (3 * p)
            p3x = startx + b
            p3y = starty + h
            p4x = startx + w
            p4y = starty + (3 * p)
            p5x = startx + w
            p5y = starty + p
            p6x = startx + b
            p6y = starty
            poly = [
                (p1x, p1y),
                (p2x, p2y),
                (p3x, p3y),
                (p4x, p4y),
                (p5x, p5y),
                (p6x, p6y),
                (p1x, p1y)]
            polygons.append(poly)
            counter += 1
            startx += w
        starty += yoffset
        row += 1
    return polygons",human
639,"def sum_names_length(names):
    return sum(len(name) for name in names if name[0].isupper())",lm
551,"def extract_column(list1, n):
   result = [i.pop(n) for i in list1]
   return result ",human
165,"def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars ",human
725,"import re
def extract_quotation(text1):
  return (re.findall(r'""(.*?)""', text1))",human
451,"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))",human
157,"from itertools import groupby
def encode_list(list1):
    return [[len(list(group)), key] for key, group in groupby(list1)]",human
184,"def find_values_greater_than_number(lst, number):
    return [x for x in lst if x > number]",lm
214,"def radians_to_degrees(radians):
    return radians * (180.0 / 3.141592653589793)",lm
693,"import re
def remove_multiple_spaces(text1):
  return (re.sub(' +',' ',text1))",human
364,"def min_flips_to_alternate(s):
    flips1 = 0  # For sequence starting with 0
    flips2 = 0  # For sequence starting with 1

    # Calculate flips for sequence starting with 0
    for i in range(len(s)):
        if i % 2 == 0 and s[i] != '0':
            flips1 += 1
        elif i % 2 != 0 and s[i] != '1':
            flips1 += 1

    # Calculate flips for sequence starting with 1
    for i in range(len(s)):
        if i % 2 == 0 and s[i] != '1':
            flips2 += 1
        elif i % 2 != 0 and s[i] != '0':
            flips2 += 1

    # Return the minimum flips required
    return min(flips1, flips2)",lm
555,"def difference_between_sums(n):
    sum_of_cubes = (n * (n + 1) // 2) ** 2
    sum_of_naturals = n * (n + 1) // 2
    return sum_of_cubes - sum_of_naturals",lm
21,"def find_multiples(n, m):
    return [n * i for i in range(1, m + 1)]",lm
575,"def find_nth_non_multiple(n, multiple):
    count, num = 0, 1
    while True:
        if num % multiple != 0:
            count += 1
            if count == n:
                return num
        num += 1",lm
246,"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;",human
684,"def count_char_occurrences(s, char, n):
    repeated_s = (s * (n // len(s))) + s[:n % len(s)]
    return repeated_s.count(char)",lm
122,"def nth_smart_number(n):
    smart_numbers = [1]
    i = 1
    while len(smart_numbers) < n:
        i += 1
        if i % 3 == 0 or i % 5 == 0:
            smart_numbers.append(i)
    return smart_numbers[-1]",lm
180,"import math

def calculate_distance(lat1, lng1, lat2, lng2):
    # Convert latitude and longitude from degrees to radians
    lat1, lng1, lat2, lng2 = map(math.radians, [lat1, lng1, lat2, lng2])
    # Haversine formula
    dlat = lat2 - lat1
    dlng = lng2 - lng1
    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlng/2)**2
    c = 2 * math.asin(math.sqrt(a))
    # Radius of Earth in kilometers. Use 3956 for miles
    r = 6371
    # Calculate the result
    return c * r",lm
462,"def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result",human
968,"def floor_Max(A,B,N):
    x = min(B - 1,N)
    return (A*x) // B",human
122,"MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] ",human
183,"def count_pairs(arr, n, k):
  count=0;
  for i in range(0,n):
    for j in range(i+1, n):
      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:
        count += 1
  return count",human
393,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)",human
215,"def decode_rle(encoded_list):
    decoded_list = []
    for element in encoded_list:
        count, value = element
        decoded_list.extend([value] * count)
    return decoded_list",lm
100,"def next_smallest_palindrome(number):
    number += 1
    while str(number) != str(number)[::-1]:
        number += 1
    return number",lm
362,"def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result",human
209,"import heapq as hq
def heap_replace(heap,a):
  hq.heapify(heap)
  hq.heapreplace(heap, a)
  return heap",human
791,"def remove_nested(test_tup):
  res = tuple()
  for count, ele in enumerate(test_tup):
    if not isinstance(ele, tuple):
      res = res + (ele, )
  return (res) ",human
370,"def sort_tuples(tuples_list):
    return sorted(tuples_list, key=lambda x: float(x[1]))",lm
288,"def modular_inverse(arr, N, P):
	current_element = 0
	for i in range(0, N):
		if ((arr[i] * arr[i]) % P == 1):
			current_element = current_element + 1
	return current_element",human
746,"def area_of_sector(radius, angle):
    return (angle / 360) * 3.1415926535 * (radius ** 2)",lm
564,"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] != arr[j]): 
                cnt += 1; 
    return cnt; ",human
225,"def find_Min(arr,low,high): 
    while (low < high): 
        mid = low + (high - low) // 2;   
        if (arr[mid] == arr[high]): 
            high -= 1; 
        elif (arr[mid] > arr[high]): 
            low = mid + 1; 
        else: 
            high = mid; 
    return arr[high]; ",human
408,"import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs",human
634,"def sum_of_fourth_power(n):
    sum = 0
    for i in range(2, 2*n+1, 2):
        sum += i**4
    return sum",lm
515,"def isSubsetSumDivisible(arr, n, m):
    if n > m:  
        return True
    DP = [False for i in range(m)]
    for i in range(n):
        temp = [False]*m
        for j in range(m):
            if DP[j] == True:
                if DP[(j + arr[i]) % m] == False:
                    temp[(j + arr[i]) % m] = True
        for j in range(m):
            if temp[j]:
                DP[j] = True
        DP[arr[i] % m] = True
    return DP[0]",lm
433,"def check_greater(arr, number):
  arr.sort()
  if number > arr[-1]:
    return ('Yes, the entered number is greater than those in the array')
  else:
    return ('No, entered number is less than those in the array')",human
635,"import heapq as hq
def heap_sort(iterable):
    h = []
    for value in iterable:
        hq.heappush(h, value)
    return [hq.heappop(h) for i in range(len(h))]",human
883,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) 
 return result",human
702,"def min_removals(arr, k):
    arr.sort()
    left, right = 0, 0
    min_removals = float('inf')
    
    while right < len(arr):
        while arr[right] - arr[left] > k:
            left += 1
        min_removals = min(min_removals, (len(arr) - (right - left + 1)))
        right += 1
        
    return min_removals",lm
433,"def is_number_greater_than_array_elements(number, array):
    return all(number > element for element in array)",lm
283,"def is_digit_frequency_valid(num):
    num_str = str(num)
    for digit in set(num_str):
        if num_str.count(digit) > int(digit):
            return False
    return True",lm
290,"def find_max_length_lists(list_of_lists):
    max_length = max(len(x) for x in list_of_lists)
    return [x for x in list_of_lists if len(x) == max_length]",lm
613,"def maximum_value(test_list):
  res = [(key, max(lst)) for key, lst in test_list]
  return (res) ",human
813,"def string_length(str1):
    count = 0
    for char in str1:
        count += 1
    return count",human
37,"def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part",human
486,"def nCr(n, r): 
	if (r > n / 2): 
		r = n - r 
	answer = 1 
	for i in range(1, r + 1): 
		answer *= (n - r + i) 
		answer /= i 
	return answer 
def binomial_probability(n, k, p): 
	return (nCr(n, k) * pow(p, k) *	pow(1 - p, n - k)) ",human
553,"def tuple_to_float(t):
    return float('.'.join(map(str, t)))",lm
627,"def find_smallest_missing_number(arr):
    arr.sort()
    for i in range(len(arr)):
        if arr[i] != i:
            return i
    return len(arr)",lm
294,"def find_max_in_heterogeneous_list(lst):
    max_value = None
    for item in lst:
        if isinstance(item, (int, float)):
            if max_value is None or item > max_value:
                max_value = item
    return max_value",lm
422,"def average_of_cubes(n):
    total = sum([i**3 for i in range(1, n+1)])
    return total / n",lm
377,"def remove_Char(s,c) :  
    counts = s.count(c) 
    s = list(s) 
    while counts :  
        s.remove(c) 
        counts -= 1 
    s = '' . join(s)   
    return (s) ",human
620,"def largest_divisible_subset(nums):
    nums.sort()
    dp = [[num] for num in nums]
    for i in range(len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0 and len(dp[i]) < len(dp[j]) + 1:
                dp[i] = dp[j] + [nums[i]]
    return max(dp, key=len)",lm
396,"import re

def check_same_start_end(s):
    return bool(re.match(r'^(.).*\1$', s))",lm
708,"def Convert(string): 
    li = list(string.split("" "")) 
    return li ",human
788,"def new_tuple(test_list, test_str):
  res = tuple(test_list + [test_str])
  return (res) ",human
512,"def flatten(test_tuple): 
	for tup in test_tuple: 
		if isinstance(tup, tuple): 
			yield from flatten(tup) 
		else: 
			yield tup 
def count_element_freq(test_tuple):
  res = {}
  for ele in flatten(test_tuple):
    if ele not in res:
      res[ele] = 0
    res[ele] += 1
  return (res) ",human
240,"def replace_last_with_list(original_list, new_list):
    if original_list:
        original_list[-1:] = new_list
    return original_list",lm
62,"def smallest_num(xs):
  return min(xs)
",human
583,"def nth_catalan_number(n):
    if n == 0 or n == 1:
        return 1
    catalan = [0] * (n + 1)
    catalan[0], catalan[1] = 1, 1

    for i in range(2, n + 1):
        for j in range(i):
            catalan[i] += catalan[j] * catalan[i - j - 1]
    return catalan[n]",lm
317,"from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]",human
921,"def chunk_tuples(test_tup, N):
  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]
  return (res) ",human
899,"def can_sort_by_corners(arr):
    if sorted(arr) == arr or sorted(arr, reverse=True) == arr:
        return True

    # Check if sorting is possible by moving the first element to the end
    if sorted(arr[1:] + [arr[0]]) == arr[1:] + [arr[0]]:
        return True

    # Check if sorting is possible by moving the last element to the beginning
    if sorted([arr[-1]] + arr[:-1]) == [arr[-1]] + arr[:-1]:
        return True
    
    return False",lm
448,"def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum",human
734,"def sum_Of_Subarray_Prod(arr,n):
    ans = 0
    res = 0
    i = n - 1
    while (i >= 0):
        incr = arr[i]*(1 + res)
        ans += incr
        res = incr
        i -= 1
    return (ans)",human
940,"def heapify(arr, n, i):
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2

    if l < n and arr[i] < arr[l]:
        largest = l

    if r < n and arr[largest] < arr[r]:
        largest = r

    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heapSort(arr):
    n = len(arr)

    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    for i in range(n-1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)",lm
531,"def findMinCoins(V, coins):
    n = len(coins)
    dp = [float('inf')] * (V + 1)
    dp[0] = 0
    
    for i in range(1, V + 1):
        for j in range(n):
            if coins[j] <= i:
                sub_res = dp[i - coins[j]]
                if sub_res != float('inf') and sub_res + 1 < dp[i]:
                    dp[i] = sub_res + 1
    
    return dp[V] if dp[V] != float('inf') else -1",lm
32,"import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)",human
280,"def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos",human
162,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)",human
471,"def find_remainder(arr, n):
    result = 1
    for i in arr:
        result = (result * i) % n
    return result",lm
541,"import math 
def get_sum(n): 
	sum = 0
	i = 1
	while i <= (math.sqrt(n)): 
		if n%i == 0: 
			if n/i == i : 
				sum = sum + i 
			else: 
				sum = sum + i 
				sum = sum + (n / i ) 
		i = i + 1
	sum = sum - n 
	return sum
def check_abundant(n): 
	if (get_sum(n) > n): 
		return True
	else: 
		return False",human
553,"def tuple_to_float(test_tup):
  res = float('.'.join(str(ele) for ele in test_tup))
  return (res) ",human
874,"def is_concatenated(s):
    if not s:
        return False
    for i in range(1, len(s)//2 + 1):
        if s[:i] * (len(s) // len(s[:i])) == s:
            return True
    return False",lm
62,"def find_smallest_number(lst):
    return min(lst)",lm
39,"import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")",human
915,"def rearrange_numbs(array_nums):
  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)
  return result ",human
852,"def remove_negs(num_list): 
    for item in num_list: 
        if item < 0: 
           num_list.remove(item) 
    return num_list",human
251,"def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list",human
66,"def count_positive_numbers(lst):
    return sum(1 for i in lst if i > 0)",lm
625,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp   
    return newList ",human
9,"def min_rotations_to_same(s):
    for i in range(len(s)):
        rotated_s = s[i:] + s[:i]
        if rotated_s == s:
            return i
    return len(s)",lm
974,"def minPathSum(triangle):
    if not triangle:
        return 0
    for row in range(len(triangle) - 2, -1, -1):
        for col in range(len(triangle[row])):
            triangle[row][col] += min(triangle[row + 1][col], triangle[row + 1][col + 1])
    return triangle[0][0]",lm
702,"def find_ind(key, i, n, 
			k, arr):
	ind = -1
	start = i + 1
	end = n - 1;
	while (start < end):
		mid = int(start +
				(end - start) / 2)
		if (arr[mid] - key <= k):
			ind = mid
			start = mid + 1
		else:
			end = mid
	return ind
def removals(arr, n, k):
	ans = n - 1
	arr.sort()
	for i in range(0, n):
		j = find_ind(arr[i], i, 
					n, k, arr)
		if (j != -1):
			ans = min(ans, n -
						(j - i + 1))
	return ans",human
523,"def check_string(str1):
    messg = [
    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',
    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',
    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',
    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]
    result = [x for x in [i(str1) for i in messg] if x != True]
    if not result:
        result.append('Valid string.')
    return result  ",human
224,"def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count ",human
386,"def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap",human
796,"def return_sum(dict):
  sum = 0
  for i in dict.values():
    sum = sum + i
  return sum",human
781,"import math 
def count_Divisors(n) : 
    count = 0
    for i in range(1, (int)(math.sqrt(n)) + 2) : 
        if (n % i == 0) : 
            if( n // i == i) : 
                count = count + 1
            else : 
                count = count + 2
    if (count % 2 == 0) : 
        return (""Even"") 
    else : 
        return (""Odd"") ",human
684,"def count_Char(str,x): 
    count = 0
    for i in range(len(str)):  
        if (str[i] == x) : 
            count += 1
    n = 10
    repititions = n // len(str)  
    count = count * repititions  
    l = n % len(str)  
    for i in range(l): 
        if (str[i] == x):  
            count += 1
    return count  ",human
195,"def find_first_position(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    if left < len(arr) and arr[left] == target:
        return left
    return -1",lm
179,"def is_keith_number(n):
    if n < 10:
        return False
        
    temp = n
    seq = []
    
    while temp > 0:
        seq.append(temp % 10)
        temp //= 10
    
    seq.reverse()
    
    while sum(seq) < n:
        seq.append(sum(seq))
        seq.pop(0)
    
    return sum(seq) == n",lm
798,"def _sum(arr):  
    sum=0
    for i in arr: 
        sum = sum + i      
    return(sum)  ",human
631,"import re

def replace_spaces(input_string):
    return re.sub(r"" "", ""_"", re.sub(r""_"", "" "", input_string))",lm
292,"def find_quotient(num1, num2):
    if num2 == 0:
        return ""Division by zero is not allowed.""
    else:
        return num1 / num2",lm
522,"def lbs(arr): 
	n = len(arr) 
	lis = [1 for i in range(n+1)] 
	for i in range(1 , n): 
		for j in range(0 , i): 
			if ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): 
				lis[i] = lis[j] + 1
	lds = [1 for i in range(n+1)] 
	for i in reversed(range(n-1)): 
		for j in reversed(range(i-1 ,n)): 
			if(arr[i] > arr[j] and lds[i] < lds[j] + 1): 
				lds[i] = lds[j] + 1
	maximum = lis[0] + lds[0] - 1
	for i in range(1 , n): 
		maximum = max((lis[i] + lds[i]-1), maximum) 
	return maximum",human
727,"import re

def clean_text(text):
    return re.sub('[^a-zA-Z0-9]', '', text)",lm
650,"def are_Equal(arr1,arr2,n,m):
    if (n != m):
        return False
    arr1.sort()
    arr2.sort()
    for i in range(0,n - 1):
        if (arr1[i] != arr2[i]):
            return False
    return True",human
732,"def replace_with_colon(s):
    return s.replace(' ', ':').replace(',', ':').replace('.', ':')",lm
676,"import re
def remove_extra_char(text1):
  pattern = re.compile('[\W_]+')
  return (pattern.sub('', text1))",human
535,"def cylinder_surface_area(radius, is_top):
    """"""
    Calculate the top or bottom surface area of a cylinder.
    
    Parameters:
    radius (float): The radius of the cylinder.
    is_top (bool): If True, calculate the top surface area, otherwise calculate the bottom surface area.
    
    Returns:
    float: The surface area of the requested part of the cylinder.
    """"""
    pi = 3.14159
    return pi * radius ** 2",lm
367,"class TreeNode:
    def __init__(self, value=0, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

def isBalanced(root):
    def checkHeight(node):
        if node is None:
            return 0
        leftHeight = checkHeight(node.left)
        rightHeight = checkHeight(node.right)
        if leftHeight == -1 or rightHeight == -1 or abs(leftHeight - rightHeight) > 1:
            return -1
        return 1 + max(leftHeight, rightHeight)

    return checkHeight(root) != -1",lm
680,"def has_increasing_trend(sequence):
    for i in range(len(sequence)-1):
        if sequence[i] >= sequence[i+1]:
            return False
    return True",lm
198,"import math

def find_largest_triangle_in_ellipse(a, b):
    """"""
    Finds the area of the largest triangle that can be inscribed in an ellipse with semi-major axis 'a' and
    semi-minor axis 'b'.
    
    Parameters:
        a (float): semi-major axis of the ellipse
        b (float): semi-minor axis of the ellipse
    
    Returns:
        float: area of the largest inscribed triangle
    """"""
    # The largest triangle inscribed in an ellipse is equilateral
    # The side length of the largest inscribed equilateral triangle is given by 
    # side = sqrt(3) * minor axis
    side_length = math.sqrt(3) * b
    
    # The area of an equilateral triangle is (sqrt(3) / 4) * side^2
    largest_area = (math.sqrt(3) / 4) * side_length ** 2
    
    return largest_area",lm
273,"def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) ",human
295,"def sum_of_divisors(n):
    sum_divisors = 0
    for i in range(1, n + 1):
        if n % i == 0:
            sum_divisors += i
    return sum_divisors",lm
274,"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ",human
907,"def print_lucky_numbers(n):
    def is_lucky(number):
        counter = 2
        while counter <= number:
            if number % counter == 0:
                return False
            number -= number // counter
            counter += 1
        return True

    count = 0
    number = 2
    while count < n:
        if is_lucky(number):
            print(number, end="" "")
            count += 1
        number += 1",lm
457,"def find_min_length_sublist(lst):
    min_length = float('inf')
    min_sublist = []
    for i in range(len(lst)):
        for j in range(i, len(lst)):
            sublist = lst[i:j+1]
            if len(sublist) < min_length:
                min_length = len(sublist)
                min_sublist = sublist
    return min_sublist",lm
508,"def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2",human
216,"def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist ",human
20,"def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False",human
91,"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False",human
46,"def all_numbers_different(numbers):
    return len(numbers) == len(set(numbers))",lm
895,"def max_sum_subseq(A):
    n = len(A)
    if n == 1:
        return A[0]
    look_up = [None] * n
    look_up[0] = A[0]
    look_up[1] = max(A[0], A[1])
    for i in range(2, n):
        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])
        look_up[i] = max(look_up[i], A[i])
    return look_up[n - 1]",human
665,"def shift_first_to_end(lst):
    if lst:
        lst.append(lst.pop(0))
    return lst",lm
187,"def longest_common_subsequence(X, Y, m, n): 
    if m == 0 or n == 0: 
       return 0 
    elif X[m-1] == Y[n-1]: 
       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
    else: 
       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",human
799,"INT_BITS = 32
def left_Rotate(n,d):   
    return (n << d)|(n >> (INT_BITS - d))  ",human
56,"def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ",human
799,"def left_rotate_bits(number, rotation):
    bit_length = number.bit_length()
    rotation = rotation % bit_length
    return (number << rotation) & (2**bit_length - 1) | (number >> (bit_length - rotation))",lm
358,"def modulo_division(list1, list2):
    return list(map(lambda x, y: x % y if y != 0 else 'div by zero', list1, list2))",lm
629,"def Split(list): 
    ev_li = [] 
    for i in list: 
        if (i % 2 == 0): 
            ev_li.append(i)  
    return ev_li",human
951,"def max_similar_indices(test_list1, test_list2):
  res = [(max(x[0], y[0]), max(x[1], y[1]))
   for x, y in zip(test_list1, test_list2)]
  return (res) ",human
601,"class Pair(object): 
	def __init__(self, a, b): 
		self.a = a 
		self.b = b 
def max_chain_length(arr, n): 
	max = 0
	mcl = [1 for i in range(n)] 
	for i in range(1, n): 
		for j in range(0, i): 
			if (arr[i].a > arr[j].b and
				mcl[i] < mcl[j] + 1): 
				mcl[i] = mcl[j] + 1
	for i in range(n): 
		if (max < mcl[i]): 
			max = mcl[i] 
	return max",human
280,"def sequential_search(arr, item):
    for i in range(len(arr)):
        if arr[i] == item:
            return i
    return -1",lm
260,"def nswn_prime(n):
    if n == 1:
        return 1
    elif n == 2:
        return 2
    else:
        a, b = 1, 2
        for _ in range(2, n):
            a, b = b, a + b + 2
        return b",lm
4,"import heapq as hq
def heap_queue_largest(nums,n):
  largest_nums = hq.nlargest(n, nums)
  return largest_nums",human
516,"def radix_sort(nums):
    RADIX = 10
    placement = 1
    max_digit = max(nums)

    while placement < max_digit:
      buckets = [list() for _ in range( RADIX )]
      for i in nums:
        tmp = int((i / placement) % RADIX)
        buckets[tmp].append(i)
      a = 0
      for b in range( RADIX ):
        buck = buckets[b]
        for i in buck:
          nums[a] = i
          a += 1
      placement *= RADIX
    return nums",human
935,"def sum_of_squares(n):
    return n * (n + 1) * (2 * n + 1) // 6",lm
598,"def is_armstrong(number):
    sum_of_powers = sum(int(char) ** len(str(number)) for char in str(number))
    return sum_of_powers == number",lm
971,"def max_segments(n, a, b, c):
    max_segments = -1
    for i in range(n // a + 1):
        for j in range((n - i * a) // b + 1):
            k = (n - i * a - j * b) / c
            if k.is_integer():
                k = int(k)
                max_segments = max(max_segments, i + j + k)
    return max_segments",lm
387,"def is_hex_even(hex_num):
    decimal_num = int(hex_num, 16)
    return decimal_num % 2 == 0",lm
21,"def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)",human
183,"def count_distinct_pairs_with_difference(arr, k):
    count = 0
    unique_elements = set(arr)
    for element in unique_elements:
        if element + k in unique_elements:
            count += 1
    return count",lm
136,"def calculate_electricity_bill(units):
    if units <= 100:
        bill_amount = units * 5
    elif units <= 200:
        bill_amount = 500 + (units - 100) * 7
    else:
        bill_amount = 1200 + (units - 200) * 10
    return bill_amount",lm
562,"def max_sublist_length(lst):
    max_length = 0
    for sublist in lst:
        if isinstance(sublist, list):
            max_length = max(max_length, len(sublist))
    return max_length",lm
15,"import re

def split_at_lowercase(s):
    return re.split('(?=[a-z])', s)",lm
644,"def reverse_array_upto(arr, position):
    if position > len(arr):
        return ""Position is beyond array length.""
    return arr[:position][::-1] + arr[position:]",lm
159,"def print_season(month, day):
    if (month == 12 and day >= 21) or (1 <= month <= 2) or (month == 3 and day < 21):
        print(""Winter"")
    elif (month == 3 and day >= 21) or (4 <= month <= 5) or (month == 6 and day < 21):
        print(""Spring"")
    elif (month == 6 and day >= 21) or (7 <= month <= 8) or (month == 9 and day < 23):
        print(""Summer"")
    elif (month == 9 and day >= 23) or (10 <= month <= 11) or (month == 12 and day < 21):
        print(""Fall"")",lm
169,"def nth_pell_number(n):
    if n <= 2:
        return n
    pell_prev, pell = 1, 2
    for i in range(3, n + 1):
        pell_prev, pell = pell, 2 * pell + pell_prev
    return pell",lm
793,"def last(arr,x,n):
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            low = mid + 1
    return res",human
807,"def first_odd_number(numbers):
    for number in numbers:
        if number % 2 != 0:
            return number
    return None",lm
902,"def combine_dictionaries(dict1, dict2):
    combined_dict = {}
    for key in dict1.keys() | dict2.keys():
        combined_dict[key] = dict1.get(key, 0) + dict2.get(key, 0)
    return combined_dict",lm
432,"def find_median_of_trapezium(a, b, c, d):
    """"""
    :param a: Length of the first parallel side
    :param b: Length of the second parallel side
    :param c: Length of the non-parallel side
    :param d: Length of the other non-parallel side
    :return: The median of the trapezium
    """"""
    median = (a + b) / 2
    return median",lm
112,"def perimeter(diameter,height) : 
    return 2*(diameter+height)  ",human
354,"def nth_term_arithmetic_progression(first_term, common_difference, n):
    return first_term + (n - 1) * common_difference",lm
549,"def sum_of_fifth_power(n):
    sum = 0
    count = 0
    i = 1
    while count < n:
        if i % 2 != 0:
            sum += i ** 5
            count += 1
        i += 1
    return sum",lm
587,"def list_tuple(listx):
  tuplex = tuple(listx)
  return tuplex",human
504,"def cube_sum_natural_numbers(n):
    return sum(i**3 for i in range(1, n+1))",lm
83,"def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)",human
888,"def substract_elements(test_tup1, test_tup2):
  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",human
598,"def armstrong_number(number):
 sum = 0
 times = 0
 temp = number
 while temp > 0:
           times = times + 1
           temp = temp // 10
 temp = number
 while temp > 0:
           reminder = temp % 10
           sum = sum + (reminder ** times)
           temp //= 10
 if number == sum:
           return True
 else:
           return False",human
449,"def check_Triangle(x1,y1,x2,y2,x3,y3): 
    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   
    if a == 0: 
        return ('No') 
    else: 
        return ('Yes') ",human
307,"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon",human
397,"def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median",human
957,"import math
def get_First_Set_Bit_Pos(n):
     return math.log2(n&-n)+1",human
900,"def starts_with_specific_number(s, number):
    return s.startswith(str(number))",lm
749,"def sort_numeric_strings(nums_str):
    result = [int(x) for x in nums_str]
    result.sort()
    return result",human
677,"def is_valid_triangle(side1, side2, side3):
    # Check if the sum of any two sides is greater than the third side.
    return (side1 + side2 > side3) and (side1 + side3 > side2) and (side2 + side3 > side1)",lm
625,"def interchange_first_last(lst):
    if len(lst) > 1:
        lst[0], lst[-1] = lst[-1], lst[0]
    return lst",lm
839,"def sort_tuples(tuples_list):
    return sorted(tuples_list, key=lambda x: x[0])",lm
196,"def remove_tuples_of_length_k(lst, k):
    return [t for t in lst if len(t) != k]",lm
760,"def unique_Element(arr,n):
    s = set(arr)
    if (len(s) == 1):
        return ('YES')
    else:
        return ('NO')",human
284,"def are_all_items_equal_to_string(lst, string):
    return all(item == string for item in lst)",lm
186,"import re
def check_literals(text, patterns):
  for pattern in patterns:
    if re.search(pattern,  text):
        return ('Matched!')
    else:
        return ('Not Matched!')",human
95,"def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ",human
565,"def split(word): 
    return [char for char in word] ",human
45,"def find_gcd(x, y): 
	while(y): 
		x, y = y, x % y 
	return x 
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd",human
726,"def multiply_elements(test_tup):
  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",human
500,"def concatenate_list_elements(list_elements):
    return ''.join(map(str, list_elements))",lm
810,"def repeat_elements(elements):
    for element in elements:
        for _ in range(elements[element]):
            print(element)",lm
108,"import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)",human
484,"def remove_matching_tuples(tuple1, tuple2):
    return tuple(item for item in tuple1 if item not in tuple2), tuple(item for item in tuple2 if item not in tuple1)",lm
738,"def geometric_sum(n):
  if n < 0:
    return 0
  else:
    return 1 / (pow(2, n)) + geometric_sum(n - 1)",human
408,"def k_pairs(arr1, arr2, k):
    pairs = []
    for i in arr1:
        for j in arr2:
            pairs.append((i, j))
    pairs.sort(key=lambda x: x[0] + x[1])
    return pairs[:k]",lm
715,"def str_to_tuple(test_str):
  res = tuple(map(int, test_str.split(', ')))
  return (res) ",human
896,"def last(n):
   return n[-1]
def sort_list_last(tuples):
  return sorted(tuples, key=last)",human
517,"def find_largest_positive_number(num_list):
    positive_numbers = [num for num in num_list if num > 0]
    return max(positive_numbers, default=""No positive numbers found"")",lm
562,"def Find_Max_Length(lst):  
    maxLength = max(len(x) for x in lst )
    return maxLength ",human
349,"def check(string) :
    p = set(string) 
    s = {'0', '1'} 
    if s == p or p == {'0'} or p == {'1'}: 
        return (""Yes"") 
    else : 
        return (""No"") ",human
822,"def is_password_valid(password):
    # Password is considered valid if it has at least one uppercase letter, one lowercase letter, one digit, and is at least 8 characters long
    if len(password) < 8:
        return False
    
    has_upper = any(c.isupper() for c in password)
    has_lower = any(c.islower() for c in password)
    has_digit = any(c.isdigit() for c in password)
    
    return has_upper and has_lower and has_digit",lm
311,"def set_leftmost_unset_bit(n):
    if n == 0:
        return 1
    m = n
    x = 0
    while m != 0:
        m = m >> 1
        x = (x << 1) + 1
    return n | (n + 1) & ~x",lm
468,"def maxProductIS(arr):
    if not arr:
        return 0
    
    n = len(arr)
    max_product = [0] * n
    for i in range(n):
        max_product[i] = arr[i]
    
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and max_product[i] < max_product[j] * arr[i]:
                max_product[i] = max_product[j] * arr[i]
                
    return max(max_product)",lm
72,"def is_difference_of_squares(n):
    for i in range(1, n):
        for j in range(i, n):
            if i**2 - j**2 == n or j**2 - i**2 == n:
                return True
    return False",lm
287,"def sum_of_squares_of_even_naturals(n):
    return sum([2*i*2*i for i in range(1, n+1)])",lm
121,"def check_triplet(A, n, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or n == 0 or sum < 0:
        return False
    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\
           check_triplet(A, n - 1, sum, count)",human
316,"def find_last_occurrence(arr, target):
    left, right = 0, len(arr) - 1
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            result = mid
            left = mid + 1
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return result",lm
442,"def ratio_of_positives(arr):
    positive_count = len([num for num in arr if num > 0])
    return positive_count / len(arr) if arr else 0",lm
874,"def check_Concat(str1,str2):
    N = len(str1)
    M = len(str2)
    if (N % M != 0):
        return False
    for i in range(N):
        if (str1[i] != str2[i % M]):
            return False         
    return True",human
628,"def replace_spaces(s):
    return s.replace("" "", ""%20"")",lm
80,"def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6",human
471,"def find_remainder(arr, lens, n): 
    mul = 1
    for i in range(lens):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n ",human
140,"def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) ",human
105,"def count(lst):   
    return sum(lst) ",human
154,"def extract_specified_elements(matrix, row_step, col_step):
    extracted_elements = []
    for i in range(0, len(matrix), row_step):
        for j in range(0, len(matrix[i]), col_step):
            extracted_elements.append(matrix[i][j])
    return extracted_elements",lm
518,"import math
def sqrt_root(num):
 sqrt_root = math.pow(num, 0.5)
 return sqrt_root ",human
823,"import re

def starts_with_substring(s, pattern):
    return bool(re.match(pattern, s))",lm
773,"import re
def occurance_substring(text,pattern):
 for match in re.finditer(pattern, text):
    s = match.start()
    e = match.end()
    return (text[s:e], s, e)",human
99,"def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ",human
323,"def rearrange_array(arr):
    positive = [num for num in arr if num > 0]
    negative = [num for num in arr if num < 0]
    rearranged_array = []
    
    min_len = min(len(positive), len(negative))
    for i in range(min_len):
        rearranged_array.append(positive[i])
        rearranged_array.append(negative[i])
        
    rearranged_array.extend(positive[min_len:])
    rearranged_array.extend(negative[min_len:])
    
    return rearranged_array",lm
627,"def find_First_Missing(array,start,end): 
    if (start > end): 
        return end + 1
    if (start != array[start]): 
        return start; 
    mid = int((start + end) / 2) 
    if (array[mid] == mid): 
        return find_First_Missing(array,mid+1,end) 
    return find_First_Missing(array,start,mid) ",human
347,"def count_Squares(m,n): 
    if (n < m): 
        temp = m 
        m = n 
        n = temp 
    return n * (n + 1) * (3 * m - n + 1) // 6",human
219,"
def extract_min_max(test_tup, K):
  res = []
  test_tup = list(test_tup)
  temp = sorted(test_tup)
  for idx, val in enumerate(temp):
    if idx < K or idx >= len(temp) - K:
      res.append(val)
  res = tuple(res)
  return (res) ",human
840,"def check_equal_opposite_roots(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant == 0:
        root = -b / (2*a)
        return root == -root
    else:
        return False",lm
365,"def count_digits(n):
    return len(str(abs(n)))",lm
753,"def find_min_k_records(tuple_list, k):
    sorted_list = sorted(tuple_list, key=lambda x:x[1])
    return sorted_list[:k]",lm
414,"def value_exists(sequence, value):
    return value in sequence",lm
723,"from operator import eq
def count_same_pair(nums1, nums2):
    result = sum(map(eq, nums1, nums2))
    return result",human
60,"def max_subsequence_diff(arr):
    if not arr:
        return 0
    dp = [1] * len(arr)  # Initialize DP array
    for i in range(1, len(arr)):
        for j in range(i):
            if abs(arr[i] - arr[j]) == 1:  # Check difference between elements
                dp[i] = max(dp[i], dp[j] + 1)
    return max(dp)",lm
752,"def jacobsthal_num(n): 
	dp = [0] * (n + 1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2] 
	return dp[n]",human
810,"from collections import Counter
def count_variable(a,b,c,d):
  c = Counter(p=a, q=b, r=c, s=d)
  return list(c.elements())",human
612,"def merge(lst):  
    return [list(ele) for ele in list(zip(*lst))] ",human
817,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) 
 return result",human
618,"def divide_lists(list1, list2):
    return list(map(lambda x, y: x / y if y != 0 else 'Division by zero', list1, list2))",lm
360,"def get_carol(n): 
	result = (2**n) - 1
	return result * result - 2",human
275,"import math as mt 
def get_Position(a,n,m): 
    for i in range(n): 
        a[i] = (a[i] // m + (a[i] % m != 0))  
    result,maxx = -1,-1
    for i in range(n - 1,-1,-1): 
        if (maxx < a[i]): 
            maxx = a[i] 
            result = i 
    return result + 1",human
527,"def get_pairs_count(arr, n, sum):
    count = 0 
    for i in range(0, n):
        for j in range(i + 1, n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count",human
265,"def split_list_every_nth(lst, n):
    return [lst[i:i + n] for i in range(0, len(lst), n)]",lm
918,"def count_coin_change(coins, amount):
    dp = [0] * (amount + 1)
    dp[0] = 1
    for coin in coins:
        for i in range(coin, amount + 1):
            dp[i] += dp[i - coin]
    return dp[amount]",lm
886,"def sum_num(numbers):
    total = 0
    for x in numbers:
        total += x
    return total/len(numbers) ",human
961,"def roman_to_int(s):
        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        int_val = 0
        for i in range(len(s)):
            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
            else:
                int_val += rom_val[s[i]]
        return int_val",human
860,"import re

def ends_with_alphanumeric(s):
    return bool(re.search(r'[A-Za-z0-9]$', s))",lm
67,"def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ",human
583,"def catalan_number(num):
    if num <=1:
         return 1   
    res_num = 0
    for i in range(num):
        res_num += catalan_number(i) * catalan_number(num-i-1)
    return res_num",human
602,"def first_repeated_char(str1):
  for index,c in enumerate(str1):
    if str1[:index+1].count(c) > 1:
      return c 
  return ""None""",human
398,"def sum_of_digits(numbers):
    return [sum(int(digit) for digit in str(number)) for number in numbers]",lm
590,"import math

def polar_to_rectangular(r, theta):
    x = r * math.cos(theta)
    y = r * math.sin(theta)
    return (x, y)",lm
619,"def move_numbers_to_string(s):
    numbers = ''.join(filter(str.isdigit, s))
    letters = ''.join(filter(lambda x: not x.isdigit(), s))
    return letters + numbers",lm
293,"def find_third_side(side1, side2, known_side='hypotenuse'):
    if known_side == 'hypotenuse':
        # If hypotenuse is known, return one of the legs
        return (side1**2 - side2**2)**0.5
    else:
        # If one leg is known, return the hypotenuse
        return (side1**2 + side2**2)**0.5",lm
288,"def count_self_inverses(arr, p):
    count = 0
    for num in arr:
        if (num * num) % p == 1:
            count += 1
    return count",lm
619,"def move_num(test_str):
  res = ''
  dig = ''
  for ele in test_str:
    if ele.isdigit():
      dig += ele
    else:
      res += ele
  res += dig
  return (res) ",human
59,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ",human
580,"def extract_even_elements(nested_tuple):
    def flatten_and_filter(t):
        for item in t:
            if isinstance(item, (list, tuple)):
                for sub_item in flatten_and_filter(item):
                    yield sub_item
            elif isinstance(item, int) and item % 2 == 0:
                yield item
    
    return tuple(flatten_and_filter(nested_tuple))",lm
242,"def count_characters(s):
    return len(s)",lm
179,"def is_num_keith(x): 
	terms = [] 
	temp = x 
	n = 0 
	while (temp > 0): 
		terms.append(temp % 10) 
		temp = int(temp / 10) 
		n+=1 
	terms.reverse() 
	next_term = 0 
	i = n 
	while (next_term < x): 
		next_term = 0 
		for j in range(1,n+1): 
			next_term += terms[i - j] 
		terms.append(next_term) 
		i+=1 
	return (next_term == x) ",human
532,"def check_permutation(str1, str2):
  n1=len(str1)
  n2=len(str2)
  if(n1!=n2):
    return False
  a=sorted(str1)
  str1="" "".join(a)
  b=sorted(str2)
  str2="" "".join(b)
  for i in range(0, n1, 1):
    if(str1[i] != str2[i]):
      return False
  return True",human
542,"import re
def fill_spaces(text):
  return (re.sub(""[ ,.]"", "":"", text))",human
120,"def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max",human
488,"def area_of_pentagon(side_length):
    import math
    return (5 * side_length ** 2) / (4 * math.tan(math.pi / 5))",lm
81,"def zip_tuples(tuple1, tuple2):
    return tuple(zip(tuple1, tuple2))",lm
829,"def second_most_repeated_string(sequence):
    frequency = {}
    for item in sequence:
        frequency[item] = frequency.get(item, 0) + 1
    sorted_items = sorted(frequency.items(), key=lambda x: x[1], reverse=True)
    return sorted_items[1][0] if len(sorted_items) > 1 else None",lm
343,"def calculate_digits_and_letters(s):
    digits = sum(c.isdigit() for c in s)
    letters = sum(c.isalpha() for c in s)
    return digits, letters",lm
573,"def unique_product(list_data):
    temp = list(set(list_data))
    p = 1
    for i in temp:
        p *= i
    return p",human
507,"def remove_words(list1, removewords):
    for word in list(list1):
        if word in removewords:
            list1.remove(word)
    return list1  ",human
407,"def next_bigger_number(n):
    number_list = list(str(n))
    i = len(number_list) - 1
    while i > 0 and number_list[i - 1] >= number_list[i]:
        i -= 1
    if i <= 0:
        return -1
    j = len(number_list) - 1
    while number_list[j] <= number_list[i - 1]:
        j -= 1
    number_list[i - 1], number_list[j] = number_list[j], number_list[i - 1]
    number_list[i:] = number_list[len(number_list) - 1: i - 1: -1]
    return int(''.join(number_list))",lm
932,"def remove_duplicate_words(string_list):
    return list(dict.fromkeys(string_list))",lm
599,"def sum_and_average(n):
    sum_natural = n * (n + 1) // 2
    average = sum_natural / n
    return sum_natural, average",lm
379,"def surfacearea_cuboid(l,w,h):
  SA = 2*(l*w + l * h + w * h)
  return SA",human
566,"def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))",human
421,"def concatenate_elements(tuples, delimiter):
    return [delimiter.join(map(str, t)) for t in tuples]",lm
750,"def add_tuple_to_list(lst, tpl):
    lst.append(tpl)
    return lst",lm
926,"def rencontres_number(n, m):
    if m == 0:
        if n == 0:
            return 1
        else:
            return (n - 1) * (rencontres_number(n - 1, 0) + rencontres_number(n - 2, 0))
    else:
        return (n - m) * rencontres_number(n - 1, m) + rencontres_number(n - 1, m - 1)",lm
706,"def is_subset(arr1, arr2):
    set1 = set(arr1)
    set2 = set(arr2)
    return set2.issubset(set1)",lm
623,"def nth_nums(nums,n):
 nth_nums = list(map(lambda x: x ** n, nums))
 return nth_nums",human
15,"import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))",human
447,"def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums",human
492,"def binary_search(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1",lm
925,"def mutiple_tuple(nums):
    temp = list(nums)
    product = 1 
    for x in temp:
        product *= x
    return product",human
131,"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string",human
604,"def reverse_words(s):
    return ' '.join(reversed(s.split()))",lm
418,"def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList",human
264,"def calculate_dogs_age_in_dog_years(human_years):
    if human_years <= 2:
        dog_years = human_years * 10.5
    else:
        dog_years = 21 + (human_years - 2) * 4
    return dog_years",lm
960,"def get_noOfways(n):
    if (n == 0):
        return 0;
    if (n == 1):
        return 1; 
    return get_noOfways(n - 1) + get_noOfways(n - 2);",human
98,"def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ",human
554,"def Split(list): 
    od_li = [] 
    for i in list: 
        if (i % 2 != 0): 
            od_li.append(i)  
    return od_li",human
708,"def string_to_list(s):
    return list(s)",lm
267,"def sum_of_squares_odd(n):
    return sum([(2*i + 1)**2 for i in range(n)])",lm
524,"def max_sum_increasing_subsequence(arr):
    n = len(arr)
    max_sum = [0] * n
    for i in range(n):
        max_sum[i] = arr[i]

    for i in range(1, n):
        for j in range(0, i):
            if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]:
                max_sum[i] = max_sum[j] + arr[i]

    return max(max_sum)",lm
966,"def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]
   tuple1 = [t for t in tuple1 if t]
   return tuple1",human
165,"def count_matching_positions(s):
    count = 0
    for i, char in enumerate(s):
        if char.lower() == chr(97 + i):
            count += 1
    return count",lm
505,"def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A",human
209,"import heapq

def delete_smallest_insert_new(heap, item):
    if heap:
        # Remove the smallest element
        heapq.heappop(heap)
    # Insert the new item
    heapq.heappush(heap, item)",lm
756,"import re
def text_match_zero_one(text):
        patterns = 'ab?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
76,"def count_squares(length, width):
    count = 0
    for i in range(1, min(length, width) + 1):
        count += (length - i + 1) * (width - i + 1)
    return count",lm
69,"def contains_sublist(lst, sublist):
    for i in range(len(lst) - len(sublist) + 1):
        if lst[i:i+len(sublist)] == sublist:
            return True
    return False",lm
53,"def check_first_last_char_equal(s):
    return s[0] == s[-1] if s else False",lm
973,"def left_rotate(s,d):
    tmp = s[d : ] + s[0 : d]
    return tmp  ",human
78,"def count_odd_set_bits(nums):
    def count_set_bits(n):
        count = 0
        while n:
            count += n & 1
            n >>= 1
        return count
    
    odd_set_bits_count = sum(1 for num in nums if count_set_bits(num) % 2 != 0)

    return odd_set_bits_count",lm
907,"def lucky_num(n):
 List=range(-1,n*n+9,2)
 i=2
 while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1
 return List[1:n+1]",human
157,"def run_length_encode(lst):
    if not lst:
        return []
    
    encoded_list = []
    current_element = lst[0]
    count = 1
    
    for element in lst[1:]:
        if element == current_element:
            count += 1
        else:
            encoded_list.append((current_element, count))
            current_element = element
            count = 1
            
    encoded_list.append((current_element, count))
    return encoded_list",lm
368,"def repeat_tuples(test_tup, N):
  res = ((test_tup, ) * N)
  return (res) ",human
290,"def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)",human
818,"def count_lower_case_letters(s):
    return sum(1 for char in s if char.islower())",lm
188,"def checkProductOfSquares(n):
    if n <= 0:
        return False
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            j = n // i
            if (i**0.5).is_integer() and (j**0.5).is_integer():
                return True
    return False",lm
301,"def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0",human
453,"import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res ",human
168,"def find_frequency(arr, number):
    return arr.count(number)",lm
903,"def count_unset_bits(n):
    count = 0
    for i in range(1, n + 1):
        # Use bin to convert i to binary representation and count the '0's
        # The '0b' prefix is not counted as unset bits
        count += bin(i)[2:].count('0')
    return count",lm
450,"def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result",human
401,"def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",human
335,"def ap_sum(a,n,d):
  total = (n * (2 * a + (n - 1) * d)) / 2
  return total",human
277,"def filter_dict_by_value(input_dict, filter_criteria):
    return {key: value for key, value in input_dict.items() if filter_criteria(value)}",lm
825,"def access_elements(nums, list_index):
    result = [nums[i] for i in list_index]
    return result",human
549,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n+1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j*j)     
    return sm ",human
844,"def find_kth_element(arr, k):
    odd_elements = [x for x in arr if x % 2 == 1]
    even_elements = [x for x in arr if x % 2 == 0]
    combined = odd_elements + even_elements
    return combined[k-1] if k-1 < len(combined) else None",lm
437,"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2",human
543,"def count_digits(num1,num2):
    number=num1+num2
    count = 0
    while(number > 0):
        number = number // 10
        count = count + 1
    return count",human
610,"def remove_kth_element(list1, L):
    return  list1[:L-1] + list1[L:]",human
617,"def jumps_to_point(d, jump_length):
    return abs(d) // jump_length + (1 if abs(d) % jump_length > 0 else 0)",lm
379,"def surface_area_of_cuboid(length, width, height):
    return 2 * (length * width + width * height + height * length)",lm
939,"def sorted_models(models):
 sorted_models = sorted(models, key = lambda x: x['color'])
 return sorted_models",human
848,"def trapezium_area(base1, base2, height):
    return 0.5 * (base1 + base2) * height",lm
369,"def lateral_surface_area(length, width, height):
    return 2 * height * (length + width)",lm
412,"def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l",human
9,"def find_Rotations(str): 
    tmp = str + str
    n = len(str) 
    for i in range(1,n + 1): 
        substring = tmp[i: i+n] 
        if (str == substring): 
            return i 
    return n ",human
680,"def increasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False",human
688,"def complex_number_length(complex_num):
    return abs(complex_num)",lm
491,"import math
def sum_gp(a,n,r):
 total = (a * (1 - math.pow(r, n ))) / (1- r)
 return total",human
502,"def find_remainder(num1, num2):
    return num1 % num2",lm
773,"def find_substring_occurrences(s, sub):
    occurrences = []
    start = 0
    while True:
        start = s.find(sub, start)
        if start == -1:
            break
        occurrences.append(start)
        start += 1
    return len(occurrences), occurrences",lm
207,"def longest_repeating_subsequence(s):
    n = len(s)
    dp = [[0 for i in range(n+1)] for j in range(n+1)]

    for i in range(1, n+1):
        for j in range(1, n+1):
            if s[i-1] == s[j-1] and i != j:
                dp[i][j] = 1 + dp[i-1][j-1]
            else:
                dp[i][j] = max(dp[i][j-1], dp[i-1][j])

    return dp[n][n]",lm
559,"def max_sub_array_sum(a, size):
  max_so_far = 0
  max_ending_here = 0
  for i in range(0, size):
    max_ending_here = max_ending_here + a[i]
    if max_ending_here < 0:
      max_ending_here = 0
    elif (max_so_far < max_ending_here):
      max_so_far = max_ending_here
  return max_so_far",human
366,"def largest_product_adjacent(nums):
    if len(nums) < 2:
        return None
    max_product = nums[0] * nums[1]
    for i in range(1, len(nums) - 1):
        product = nums[i] * nums[i + 1]
        if product > max_product:
            max_product = product
    return max_product",lm
410,"def find_min_value(heterogeneous_list):
    numeric_values = [item for item in heterogeneous_list if isinstance(item, (int, float))]
    return min(numeric_values) if numeric_values else None",lm
842,"def find_odd_occurrence(arr):
    result = 0
    for number in arr:
        result ^= number
    return result",lm
786,"import bisect
def right_insertion(a, x):
    i = bisect.bisect_right(a, x)
    return i",human
437,"def remove_odd_characters(s):
    return ''.join([char for index, char in enumerate(s) if index % 2 == 0])",lm
132,"def tup_string(tup1):
  str =  ''.join(tup1)
  return str",human
877,"def sort_String(str) : 
    str = ''.join(sorted(str)) 
    return (str) ",human
536,"def nth_items(list,n):
 return list[::n]",human
563,"def extract_quoted_values(s):
    import re
    pattern = r'""([^""]*)""'
    return re.findall(pattern, s)",lm
724,"def power_base_sum(base, power):
    return sum([int(i) for i in str(pow(base, power))])",human
534,"def search_literal_in_string(pattern, text):
    occurrences = []
    index = 0
    while index < len(text):
        index = text.find(pattern, index)
        if index == -1:
            break
        occurrences.append(index)
        index += 1
    return occurrences",lm
74,"def follows_pattern(sequence, patterns):
    for pattern in patterns:
        if len(sequence) != len(pattern):
            continue
        if all(s == p or p == '*' for s, p in zip(sequence, pattern)):
            return True
    return False",lm
435,"def last_digit(number):
    return abs(number) % 10",lm
17,"def square_perimeter(side_length):
    return 4 * side_length",lm
704,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1))",human
713,"def check_valid(test_tup):
  res = not any(map(lambda ele: not ele, test_tup))
  return (res) ",human
757,"def count_reverse_pairs(test_list):
  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( 
	test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) 
  return str(res)",human
338,"def count_substrings_same_first_last(s):
    count = 0
    n = len(s)
    for i in range(n):
        for j in range(i, n):
            if s[i] == s[j]:
                count += 1
    return count",lm
520,"def find_lcm(num1, num2): 
	if(num1>num2): 
		num = num1 
		den = num2 
	else: 
		num = num2 
		den = num1 
	rem = num % den 
	while (rem != 0): 
		num = den 
		den = rem 
		rem = num % den 
	gcd = den 
	lcm = int(int(num1 * num2)/int(gcd)) 
	return lcm 
def get_lcm(l):
  num1 = l[0]
  num2 = l[1]
  lcm = find_lcm(num1, num2)
  for i in range(2, len(l)):
    lcm = find_lcm(lcm, l[i])
  return lcm ",human
696,"def zip_list(list1,list2):  
 result = list(map(list.__add__, list1, list2)) 
 return result",human
359,"def check_root_relation(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return False
    else:
        root1 = (-b + discriminant**0.5) / (2*a)
        root2 = (-b - discriminant**0.5) / (2*a)
        return root1 == 2*root2 or root2 == 2*root1",lm
716,"def rombus_perimeter(a):
  perimeter=4*a
  return perimeter",human
216,"def is_subset_nested(subset, superset):
    def is_subset(sub, sup):
        if not sub:
            return True
        if not sup:
            return False
        if type(sub[0]) == list:
            for i in range(len(sup)):
                if sup[i] == sub[0] or (type(sup[i]) == list and is_subset(sub[0], sup[i])):
                    return is_subset(sub[1:], sup[i+1:])
        else:
            if sub[0] in sup:
                return is_subset(sub[1:], sup[sup.index(sub[0])+1:])
        return False
    return is_subset(subset, superset)",lm
336,"def has_28_days(month_name):
    return month_name.lower() in ['february']",lm
277,"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result",human
802,"def count_rotations(arr):
    n = len(arr)
    for i in range(n):
        if arr[i] > arr[(i + 1) % n]:
            return (i + 1) % n
    return 0",lm
161,"def remove_elements(list1, list2):
    return [item for item in list1 if item not in list2]",lm
782,"def sumOddLengthSubarrays(arr):
    total_sum = 0
    n = len(arr)
    for i in range(n):
        for j in range(i, n, 2):
            total_sum += sum(arr[i:j+1])
    return total_sum",lm
739,"import math 
def find_Index(n): 
    x = math.sqrt(2 * math.pow(10,(n - 1))); 
    return round(x); ",human
439,"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x",human
888,"def subtract_nested_tuples(tuples):
    def subtract_tuple(t):
        return t[0] - t[1] if len(t) == 2 else t[0] - subtract_tuple(t[1:])
    
    return tuple(subtract_tuple(t) for t in tuples)",lm
618,"def div_list(nums1,nums2):
  result = map(lambda x, y: x / y, nums1, nums2)
  return list(result)",human
402,"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ",human
604,"def reverse_words(s):
        return ' '.join(reversed(s.split()))",human
837,"def cube_sum_odd_natural(n):
    sum = 0
    odd_numbers = [x for x in range(1, 2*n, 2)]
    for number in odd_numbers:
        sum += number ** 3
    return sum",lm
305,"def match_words_with_p(words):
    p_words = [word for word in words if word.startswith('p')]
    matched_words = []
    for i in range(len(p_words)):
        for j in range(i + 1, len(p_words)):
            if p_words[i] == p_words[j]:
                matched_words.append(p_words[i])
    return matched_words",lm
770,"def sum_of_fourth_powers(n):
    total = 0
    odd_count = 0
    num = 1
    while odd_count < n:
        if num % 2 != 0:
            total += num**4
            odd_count += 1
        num += 1
    return total",lm
370,"def float_sort(price):
  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)
  return float_sort",human
682,"def mul_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)",human
32,"def largest_prime_factor(n):
    prime_factor = 1
    i = 2

    while i <= n / i:
        if n % i == 0:
            prime_factor = i
            n //= i
        else:
            i += 1

    if n > prime_factor:
        prime_factor = n

    return int(prime_factor)",lm
175,"def is_valid_parenthese( str1):
        stack, pchar = [], {""("": "")"", ""{"": ""}"", ""["": ""]""}
        for parenthese in str1:
            if parenthese in pchar:
                stack.append(parenthese)
            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:
                return False
        return len(stack) == 0",human
404,"def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ",human
673,"def convert(list): 
    s = [str(i) for i in list] 
    res = int("""".join(s))  
    return (res) ",human
191,"def has_30_days(month_name):
    months_with_30_days = ['April', 'June', 'September', 'November']
    return month_name in months_with_30_days",lm
40,"from collections import Counter

def frequency_of_elements(list_of_lists):
    flat_list = [item for sublist in list_of_lists for item in sublist]
    return dict(Counter(flat_list))",lm
882,"def calculate_perimeter(base, side):
    return 2 * (base + side)",lm
498,"def gcd(x, y):
    gcd = 1
    if x % y == 0:
        return y
    for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd = k
            break  
    return gcd",human
688,"import cmath
def len_complex(a,b):
  cn=complex(a,b)
  length=abs(cn)
  return length",human
113,"def is_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False",lm
480,"def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch",human
728,"def sum_list(lst1,lst2):
  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] 
  return res_list",human
818,"def lower_ctr(str):
      lower_ctr= 0
      for i in range(len(str)):
          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     
      return  lower_ctr",human
424,"def extract_rear_index_elements(input_tuple):
    return tuple(s[-1] for s in input_tuple)",lm
649,"def sum_in_range(numbers_list, start_index, end_index):
    return sum(numbers_list[start_index:end_index+1])",lm
872,"def is_nested_subset(subset, main_set):
    if isinstance(subset, list) and isinstance(main_set, list):
        return all(any(is_nested_subset(subitem, item) if isinstance(subitem, list) else subitem == item for item in main_set) for subitem in subset)
    else:
        return subset == main_set",lm
733,"def find_first_occurrence(arr, target):
    low, high = 0, len(arr) - 1
    result = -1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            result = mid
            high = mid - 1
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return result",lm
263,"def merge_dictionaries(dict1, dict2):
    merged_dict = dict1.copy()
    merged_dict.update(dict2)
    return merged_dict",lm
933,"import re
def camel_to_snake(text):
  str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
  return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()",human
60,"def max_len_sub( arr, n): 
	mls=[] 
	max = 0
	for i in range(n): 
		mls.append(1) 
	for i in range(n): 
		for j in range(i): 
			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 
				mls[i] = mls[j] + 1
	for i in range(n): 
		if (max < mls[i]): 
			max = mls[i] 
	return max",human
690,"def mul_consecutive_nums(nums):
    result = [b*a for a, b in zip(nums[:-1], nums[1:])]
    return result",human
201,"def chkList(lst): 
    return len(set(lst)) == 1",human
391,"def lists_to_nested_dict(*args):
    nested_dict = current_level = {}
    for lst in args:
        for item in lst:
            current_level[item] = {}
            current_level = current_level[item]
        current_level = nested_dict
    return nested_dict",lm
919,"def multiply_list(items):
    tot = 1
    for x in items:
        tot *= x
    return tot",human
767,"def count_pairs_with_sum(arr, sum):
    count = 0
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[i] + arr[j] == sum:
                count += 1
    return count",lm
861,"def find_anagrams(s, lst):
    return list(filter(lambda word: sorted(word) == sorted(s), lst))",lm
79,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False",human
422,"def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) ",human
494,"def binary_to_integer(test_tup):
  res = int("""".join(str(ele) for ele in test_tup), 2)
  return (str(res)) ",human
310,"def string_to_tuple(s):
    return tuple(s)",lm
945,"def tuple_to_set(given_tuple):
    return set(given_tuple)",lm
75,"def find_divisible_tuples(tuples_list, k):
    return [t for t in tuples_list if all(element % k == 0 for element in t)]",lm
944,"import re
def num_position(text):
 for m in re.finditer(""\d+"", text):
    return m.start()",human
511,"def min_sum_factors(number):
    if number < 2:
        return number
    sum_of_factors = 0
    while number % 2 == 0:
        sum_of_factors += 2
        number //= 2
    for i in range(3, int(number**0.5)+1, 2):
        while number % i == 0:
            sum_of_factors += i
            number //= i
    if number > 2:
        sum_of_factors += number
    return sum_of_factors",lm
38,"def divide_first_even_odd(numbers):
    even, odd = None, None
    for number in numbers:
        if number % 2 == 0 and even is None:
            even = number
        elif number % 2 != 0 and odd is None:
            odd = number
        if even is not None and odd is not None:
            break
    if even is not None and odd is not None:
        return even / odd
    else:
        return ""Cannot perform division as required even or odd number is not found""",lm
108,"import heapq

def merge_sorted_iterators(*iterables):
    return heapq.merge(*iterables)",lm
566,"def sum_of_digits(n):
    return sum(int(digit) for digit in str(n))",lm
856,"def minSwapsToSortBinaryArray(arr):
    ones = arr.count(1)
    min_swaps, current_ones = float('inf'), 0
    
    for i in range(len(arr) + ones - 1):
        if i >= ones:
            current_ones -= arr[i-ones]
        current_ones += arr[i % len(arr)]
        min_swaps = min(min_swaps, ones - current_ones)
    
    return min_swaps",lm
135,"def nth_hexagonal_number(n):
    return n * (2 * n - 1)",lm
731,"import math
def lateralsurface_cone(r,h):
  l = math.sqrt(r * r + h * h)
  LSA = math.pi * r  * l
  return LSA",human
464,"def all_values_same(d):
    return all(value == next(iter(d.values())) for value in d.values())",lm
298,"def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result",human
96,"def count_divisors(n):
    count = 0
    for i in range(1, n+1):
        if n % i == 0:
            count += 1
    return count",lm
363,"def add_k_to_tuple_elements(input_tuple, k):
    return tuple(element + k for element in input_tuple)",lm
701,"def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum=0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1",human
337,"import re
def text_match_word(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'",human
424,"def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) ",human
640,"import re
def remove_parenthesis(items):
 for item in items:
    return (re.sub(r"" ?\([^)]+\)"", """", item))",human
655,"def fifth_Power_Sum(n) : 
    sm = 0 
    for i in range(1,n+1) : 
        sm = sm + (i*i*i*i*i) 
    return sm ",human
815,"def sort_array_with_012(arr):
    count_0, count_1, count_2 = 0, 0, 0
    for num in arr:
        if num == 0:
            count_0 += 1
        elif num == 1:
            count_1 += 1
        else:
            count_2 += 1
    arr[:count_0] = [0] * count_0
    arr[count_0:count_0+count_1] = [1] * count_1
    arr[count_0+count_1:] = [2] * count_2
    return arr",lm
97,"def frequency_count(list_of_lists):
    frequency = {}
    for l in list_of_lists:
        for item in l:
            if item in frequency:
                frequency[item] += 1
            else:
                frequency[item] = 1
    return frequency",lm
656,"def find_Min_Sum(a,b,n): 
    a.sort() 
    b.sort() 
    sum = 0  
    for i in range(n): 
        sum = sum + abs(a[i] - b[i]) 
    return sum",human
152,"def merge(a,b):
    c = []
    while len(a) != 0 and len(b) != 0:
        if a[0] < b[0]:
            c.append(a[0])
            a.remove(a[0])
        else:
            c.append(b[0])
            b.remove(b[0])
    if len(a) == 0:
        c += b
    else:
        c += a
    return c
def merge_sort(x):
    if len(x) == 0 or len(x) == 1:
        return x
    else:
        middle = len(x)//2
        a = merge_sort(x[:middle])
        b = merge_sort(x[middle:])
        return merge(a,b)
",human
820,"def check_monthnum_number(monthnum1):
  if monthnum1 == 2:
    return True
  else:
    return False",human
815,"def sort_by_dnf(arr, n):
  low=0
  mid=0
  high=n-1
  while mid <= high:
    if arr[mid] == 0:
      arr[low], arr[mid] = arr[mid], arr[low]
      low = low + 1
      mid = mid + 1
    elif arr[mid] == 1:
      mid = mid + 1
    else:
      arr[mid], arr[high] = arr[high], arr[mid]
      high = high - 1
  return arr",human
646,"def count_cubes(n, k):
    return (n - k + 1) ** 3",lm
267,"def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ",human
11,"def remove_first_last_char(s, char):
    first = s.find(char)
    last = s.rfind(char)
    if first != -1:
        s = s[:first] + s[first+1:]
    if last != -1 and last != first:
        s = s[:last-1] + s[last:]
    return s",lm
757,"def count_reverse_pairs(str_list):
    reverse_pairs = 0
    checked_pairs = set()
    
    for i, s in enumerate(str_list):
        if s not in checked_pairs:
            reverse = s[::-1]
            if reverse in str_list[i+1:]:
                reverse_pairs += 1
                checked_pairs.add(s)
                checked_pairs.add(reverse)
                
    return reverse_pairs",lm
687,"def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)",lm
52,"def parallelogram_area(b,h):
  area=b*h
  return area",human
866,"def has_31_days(month_name):
    months_with_31_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']
    return month_name in months_with_31_days",lm
641,"def is_nonagonal(n): 
	return int(n * (7 * n - 5) / 2) ",human
420,"def cube_sum_even_naturals(n):
    sum = 0
    for i in range(2, 2*n+1, 2):
        sum += i**3
    return sum",lm
577,"def last_digit_of_factorial(n):
    if n < 0:
        return -1
    elif n <= 1:
        return 1
    else:
        factorial = 1
        for i in range(2, n + 1):
            factorial *= i
        return factorial % 10",lm
285,"import re

def match_ab(string):
    return bool(re.search('ab{2,3}', string))",lm
24,"def binary_to_decimal(binary_str):
    return int(binary_str, 2)",lm
243,"def sort_by_first_element_occurrence(lst):
    count_map = {}
    for item in lst:
        if item[0] in count_map:
            count_map[item[0]] += 1
        else:
            count_map[item[0]] = 1
    return sorted(lst, key=lambda x: count_map[x[0]], reverse=True)",lm
322,"def position_min(list1):
    min_val = min(list1)
    min_result = [i for i, j in enumerate(list1) if j == min_val]
    return min_result",human
564,"def count_unequal_pairs(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] != arr[j]:
                count += 1
    return count",lm
933,"import re

def camel_to_snake(s):
    return re.sub(r'(?<!^)(?=[A-Z])', '_', s).lower()",lm
158,"def min_Ops(arr,n,k): 
    max1 = max(arr) 
    res = 0
    for i in range(0,n):  
        if ((max1 - arr[i]) % k != 0): 
            return -1 
        else: 
            res += (max1 - arr[i]) / k 
    return int(res) ",human
642,"def remove_similar_row(test_list):
  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))
  return (res) ",human
375,"def round_to_nearest(x, base):
    return round(base * round(float(x)/base))",lm
134,"def check_last (arr,n,p): 
    _sum = 0
    for i in range(n): 
        _sum = _sum + arr[i] 
    if p == 1: 
        if _sum % 2 == 0: 
            return ""ODD""
        else: 
            return ""EVEN""
    return ""EVEN""
      ",human
233,"def lateral_surface_area(radius, height):
    return 2 * 3.141592653589793 * radius * height",lm
261,"def divide_tuples(tup1, tup2):
    return tuple(a / b for a, b in zip(tup1, tup2))",lm
923,"def super_seq(X, Y, m, n):
	if (not m):
		return n
	if (not n):
		return m
	if (X[m - 1] == Y[n - 1]):
		return 1 + super_seq(X, Y, m - 1, n - 1)
	return 1 + min(super_seq(X, Y, m - 1, n),	super_seq(X, Y, m, n - 1))",human
611,"def max_of_nth(test_list, N):
  res = max([sub[N] for sub in test_list])
  return (res) ",human
725,"import re

def extract_quoted_values(s):
    return re.findall(r'""([^""]*)""', s)",lm
965,"def camel_to_snake(name):
    return ''.join(['_' + i.lower() if i.isupper() else i for i in name]).lstrip('_')",lm
736,"import bisect
def left_insertion(a, x):
    i = bisect.bisect_left(a, x)
    return i",human
652,"def matrix_to_list(test_list):
  temp = [ele for sub in test_list for ele in sub]
  res = list(zip(*temp))
  return (str(res))",human
547,"def Total_Hamming_Distance(n):   
    i = 1
    sum = 0
    while (n // i > 0):  
        sum = sum + n // i  
        i = i * 2     
    return sum",human
327,"def check_isosceles(x,y,z):
  if x==y or y==z or z==x:
	   return True
  else:
     return False",human
657,"import math 
def first_Digit(n) : 
    fact = 1
    for i in range(2,n + 1) : 
        fact = fact * i 
        while (fact % 10 == 0) :  
            fact = int(fact / 10) 
    while (fact >= 10) : 
        fact = int(fact / 10) 
    return math.floor(fact) ",human
651,"def check_subset(test_tup1, test_tup2):
  res = set(test_tup2).issubset(test_tup1)
  return (res) ",human
106,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ",human
661,"def max_sum_of_three_consecutive(arr, n): 
	sum = [0 for k in range(n)] 
	if n >= 1: 
		sum[0] = arr[0] 
	if n >= 2: 
		sum[1] = arr[0] + arr[1] 
	if n > 2: 
		sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) 
	for i in range(3, n): 
		sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) 
	return sum[n-1]",human
721,"M = 100
def maxAverageOfPath(cost, N): 
	dp = [[0 for i in range(N + 1)] for j in range(N + 1)] 
	dp[0][0] = cost[0][0] 
	for i in range(1, N): 
		dp[i][0] = dp[i - 1][0] + cost[i][0] 
	for j in range(1, N): 
		dp[0][j] = dp[0][j - 1] + cost[0][j] 
	for i in range(1, N): 
		for j in range(1, N): 
			dp[i][j] = max(dp[i - 1][j], 
						dp[i][j - 1]) + cost[i][j] 
	return dp[N - 1][N - 1] / (2 * N - 1)",human
669,"import re

def is_valid_ip(ip):
    pattern = r""^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.\
(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.\
(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.\
(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$""
    if re.match(pattern, ip):
        return True
    else:
        return False",lm
906,"import re

def extract_date_from_url(url):
    match = re.search(r'/(\d{4})/(\d{2})/(\d{2})/', url)
    if match:
        year, month, date = match.groups()
        return year, month, date
    else:
        return None, None, None",lm
483,"def find_factorial_divisible_by_x(x):
    factorial = 1
    n = 1
    while True:
        factorial *= n
        if factorial % x == 0:
            return n
        n += 1",lm
621,"def increment_values_in_string(s, k):
    result = ''
    num = ''
    for char in s:
        if char.isdigit():
            num += char
        else:
            if num != '':
                result += str(int(num) + k)
                num = ''
            result += char
    if num != '':
        result += str(int(num) + k)
    return result",lm
971,"def maximum_segments(n, a, b, c) : 
	dp = [-1] * (n + 10) 
	dp[0] = 0
	for i in range(0, n) : 
		if (dp[i] != -1) : 
			if(i + a <= n ): 
				dp[i + a] = max(dp[i] + 1, 
							dp[i + a]) 
			if(i + b <= n ): 
				dp[i + b] = max(dp[i] + 1, 
							dp[i + b]) 
			if(i + c <= n ): 
				dp[i + c] = max(dp[i] + 1, 
							dp[i + c]) 
	return dp[n]",human
409,"def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min",human
33,"def decimal_To_Binary(N): 
    B_Number = 0
    cnt = 0
    while (N != 0): 
        rem = N % 2
        c = pow(10,cnt)  
        B_Number += rem*c  
        N //= 2 
        cnt += 1
    return B_Number  ",human
255,"from itertools import product

def generate_combinations(num):
    colours = ['Red', 'Green', 'Blue']
    return list(product(colours, repeat=num))",lm
116,"def tuple_to_integer(t):
    return int(''.join(map(str, t)))",lm
911,"def maximum_product(nums):
    import heapq
    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)
    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])",human
826,"def check_Type_Of_Triangle(a,b,c): 
    sqa = pow(a,2) 
    sqb = pow(b,2) 
    sqc = pow(c,2) 
    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): 
        return (""Right-angled Triangle"") 
    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): 
        return (""Obtuse-angled Triangle"") 
    else: 
        return (""Acute-angled Triangle"") ",human
248,"def harmonic_sum(n):
    if n == 1:
        return 1
    else:
        return 1 / n + harmonic_sum(n - 1)",lm
894,"def float_to_tuple(test_str):
  res = tuple(map(float, test_str.split(', ')))
  return (res) ",human
374,"from itertools import permutations

def print_all_permutations(s):
    perm = permutations(s)
    for p in perm:
        print(''.join(p))",lm
501,"def find_common_divisors(num1, num2):
    common_divisors = []
    for i in range(1, min(num1, num2) + 1):
        if num1 % i == 0 and num2 % i == 0:
            common_divisors.append(i)
    return common_divisors",lm
258,"def count_odd(array_nums):
   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
   return count_odd",human
526,"def capitalize_first_last_letters(s):
    words = s.split()
    capitalized_words = []
    for word in words:
        if len(word) > 1:
            capitalized_word = word[0].upper() + word[1:-1] + word[-1].upper()
        else:
            capitalized_word = word.upper()
        capitalized_words.append(capitalized_word)
    return ' '.join(capitalized_words)",lm
319,"import re

def find_five_char_words(s):
    return re.findall(r'\b\w{5}\b', s)",lm
173,"def remove_non_alphanumeric(s):
    return ''.join(e for e in s if e.isalnum())",lm
29,"def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1",human
868,"def length_Of_Last_Word(a): 
    l = 0
    x = a.strip() 
    for i in range(len(x)): 
        if x[i] == "" "": 
            l = 0
        else: 
            l += 1
    return l ",human
473,"def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)",human
804,"def is_product_even(*numbers):
    product = 1
    for num in numbers:
        product *= num
    return product % 2 == 0",lm
710,"def front_and_rear(test_tup):
  res = (test_tup[0], test_tup[-1])
  return (res) ",human
22,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate",human
247,"def longest_palindromic_subsequence(s):
    def helper(start, end):
        if start > end: return 0
        if start == end: return 1
        if s[start] == s[end]:
            return 2 + helper(start + 1, end - 1)
        else:
            return max(helper(start + 1, end), helper(start, end - 1))
        
    return helper(0, len(s) - 1)",lm
658,"def find_max_occurrences(items):
    if not items:
        return None
    item_count = {}
    for item in items:
        if item in item_count:
            item_count[item] += 1
        else:
            item_count[item] = 1
    max_occurrences = max(item_count.values())
    for item, count in item_count.items():
        if count == max_occurrences:
            return item",lm
28,"def binomial_Coeff(n,k): 
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1 
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",human
417,"def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] ",human
25,"def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; ",human
720,"def add_dict_to_tuple(my_tuple, my_dict):
    return my_tuple + (my_dict,)",lm
406,"def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return (""Odd Parity""); 
    return (""Even Parity""); ",human
44,"import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'",human
738,"def geometric_sum(n):
    if n < 0:
        return 0
    else:
        return 1 / (2**n) + geometric_sum(n-1)",lm
533,"def remove_elements(input_tuple, data_type):
    return tuple(element for element in input_tuple if not isinstance(element, data_type))",lm
850,"def is_triangle_possible(angle1, angle2, angle3):
    return (angle1 + angle2 + angle3 == 180) and angle1 > 0 and angle2 > 0 and angle3 > 0",lm
762,"def has_30_days(month):
    if month in [4, 6, 9, 11]:
        return True
    else:
        return False",lm
737,"import re

def starts_with_vowel(s):
    return bool(re.match('^[aeiouAEIOU]', s))",lm
355,"def count_Rectangles(radius):  
    rectangles = 0 
    diameter = 2 * radius 
    diameterSquare = diameter * diameter 
    for a in range(1, 2 * radius):  
        for b in range(1, 2 * radius): 
            diagnalLengthSquare = (a * a +  b * b)  
            if (diagnalLengthSquare <= diameterSquare) : 
                rectangles += 1
    return rectangles ",human
650,"def are_arrays_equal(arr1, arr2):
    return arr1 == arr2",lm
388,"def highest_power_of_2(n):
    power = 1
    while power * 2 <= n:
        power *= 2
    return power",lm
959,"def find_average(lst):
    return sum(lst) / len(lst) if lst else 0",lm
833,"def get_key(dict): 
    list = [] 
    for key in dict.keys(): 
        list.append(key)           
    return list",human
550,"def find_Max(arr,low,high): 
    if (high < low): 
        return arr[0] 
    if (high == low): 
        return arr[low] 
    mid = low + (high - low) // 2 
    if (mid < high and arr[mid + 1] < arr[mid]): 
        return arr[mid] 
    if (mid > low and arr[mid] < arr[mid - 1]): 
        return arr[mid - 1]  
    if (arr[low] > arr[mid]): 
        return find_Max(arr,low,mid - 1) 
    else: 
        return find_Max(arr,mid + 1,high) ",human
664,"def average_Even(n) : 
    if (n% 2!= 0) : 
        return (""Invalid Input"") 
        return -1  
    sm = 0
    count = 0
    while (n>= 2) : 
        count = count+1
        sm = sm+n 
        n = n-2
    return sm // count ",human
129,"def generate_magic_square(n):
    magic_square = [[0] * n for _ in range(n)]
    
    num = 1
    i, j = 0, n // 2
    
    while num <= n ** 2:
        magic_square[i][j] = num
        num += 1
        newi, newj = (i - 1) % n, (j + 1) % n
        if magic_square[newi][newj]:
            i += 1
        else:
            i, j = newi, newj
    
    return magic_square",lm
593,"def remove_leading_zeroes(ip):
    parts = ip.split('.')
    stripped_parts = [str(int(part)) for part in parts]
    stripped_ip = '.'.join(stripped_parts)
    return stripped_ip",lm
812,"import re
def road_rd(street):
  return (re.sub('Road$', 'Rd.', street))",human
489,"def frequency_Of_Largest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] >mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ",human
93,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)",human
293,"import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s",human
752,"def nth_jacobsthal(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return nth_jacobsthal(n-1) + 2*nth_jacobsthal(n-2)",lm
329,"def count_negatives(nums):
    return sum(1 for num in nums if num < 0)",lm
501,"def ngcd(x,y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i;
        i+=1
    return gcd;
def num_comm_div(x,y):
  n = ngcd(x,y)
  result = 0
  z = int(n**0.5)
  i = 1
  while(i <= z):
    if(n % i == 0):
      result += 2 
      if(i == n/i):
        result-=1
    i+=1
  return result",human
718,"def alternate_elements(list1):
    result=[]
    for item in list1[::2]:
        result.append(item)
    return result ",human
467,"def decimal_to_octal(decimal_num):
    if decimal_num == 0:
        return ""0""
    octal_num = """"
    while decimal_num > 0:
        octal_num = str(decimal_num % 8) + octal_num
        decimal_num = decimal_num // 8
    return octal_num",lm
595,"def min_swaps_to_convert(s1, s2):
    if len(s1) != len(s2) or s1.count('0') != s2.count('0') or s1.count('1') != s2.count('1'):
        return -1
    swap_count = 0
    for i in range(len(s1)):
        if s1[i] != s2[i]:
            swap_count += 1
    return swap_count // 2",lm
905,"def factorial(start,end): 
    res = 1 
    for i in range(start,end + 1): 
        res *= i      
    return res 
def sum_of_square(n): 
   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ",human
425,"def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr",human
490,"def find_symmetric_pairs(data):
    symmetric_pairs = []
    pairs_set = set()

    for pair in data:
        reverse_pair = (pair[1], pair[0])
        if reverse_pair in pairs_set:
            symmetric_pairs.append(pair)
            symmetric_pairs.append(reverse_pair)
        pairs_set.add(pair)

    # Remove duplicates
    symmetric_pairs = list(set(symmetric_pairs))
    
    return symmetric_pairs",lm
666,"def count_char(string,char):
 count = 0
 for i in range(len(string)):
    if(string[i] == char):
        count = count + 1
 return count",human
176,"def perimeter_triangle(a,b,c):
  perimeter=a+b+c
  return perimeter",human
459,"import re

def remove_uppercase_substrings(text):
    return re.sub(r'[A-Z]+', '', text)",lm
372,"import heapq

def sort_list_with_heapq(lst):
    heapq.heapify(lst)
    return [heapq.heappop(lst) for _ in range(len(lst))]",lm
365,"def count_Digit(n):
    count = 0
    while n != 0:
        n //= 10
        count += 1
    return count",human
850,"def is_triangleexists(a,b,c): 
    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): 
        if((a + b)>= c or (b + c)>= a or (a + c)>= b): 
            return True 
        else:
            return False
    else:
        return False",human
709,"def count_unique_keys_per_value(input_tuple):
    key_count = {}
    for key, value in input_tuple:
        if value not in key_count:
            key_count[value] = {key}
        else:
            key_count[value].add(key)
    return {value: len(keys) for value, keys in key_count.items()}",lm
946,"def most_common_elements(text):
    from collections import Counter
    counter = Counter(text)
    most_common = counter.most_common()
    return most_common",lm
303,"import sys 
def solve(a,n):   
    mx = -sys.maxsize - 1
    for j in range(1,n):  
        if (mx > a[j]):  
            return False  
        mx = max(mx,a[j - 1])    
    return True",human
144,"def sum_Pairs(arr,n): 
    sum = 0
    for i in range(n - 1,-1,-1): 
        sum += i*arr[i] - (n-1-i) * arr[i] 
    return sum",human
660,"def find_Points(l1,r1,l2,r2): 
    x = min(l1,l2) if (l1 != l2) else -1
    y = max(r1,r2) if (r1 != r2) else -1
    return (x,y)",human
492,"def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found",human
460,"def Extract(lst): 
    return [item[0] for item in lst] ",human
162,"def sum_of_integers(n):
    sum = 0
    while n > 0:
        sum += n
        n -= 2
    return sum",lm
465,"def drop_empty_items(d):
    return {k: v for k, v in d.items() if v}",lm
41,"def filter_even_numbers(lst):
    return list(filter(lambda x: x % 2 == 0, lst))",lm
211,"def count_numbers_with_0th_and_nth_bit_set(n, count):
    result = 0
    for i in range(count):
        if (i & 1) and (i & (1 << n)):
            result += 1
    return result",lm
608,"def bell_Number(n): 
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] 
    return bell[n][0] ",human
304,"def findElementAfterRotations(arr, ranges, index):
    for start, end in reversed(ranges):
        if start <= index <= end:
            if index == start:
                index = end
            else:
                index -= 1
    return arr[index]",lm
441,"def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea",human
85,"def sphere_surface_area(radius):
    import math
    return 4 * math.pi * radius ** 2",lm
276,"def cylinder_volume(radius, height):
    pi = 3.141592653589793
    return pi * (radius ** 2) * height",lm
811,"def are_lists_identical(list1, list2):
    return sorted(list1) == sorted(list2)",lm
371,"def find_smallest_missing(arr):
    start, end = 0, len(arr) - 1
    while start <= end:
        mid = start + (end - start) // 2
        if arr[mid] == mid:
            start = mid + 1
        else:
            end = mid - 1
    return start",lm
707,"def count_Set_Bits(n) :  
    n += 1; 
    powerOf2 = 2;   
    cnt = n // 2;  
    while (powerOf2 <= n) : 
        totalPairs = n // powerOf2;  
        cnt += (totalPairs // 2) * powerOf2;  
        if (totalPairs & 1) : 
            cnt += (n % powerOf2) 
        else : 
            cnt += 0
        powerOf2 <<= 1;    
    return cnt;  ",human
505,"def move_zeroes_to_end(arr):
    count = 0 
    for i in range(len(arr)):
        if arr[i] != 0:
            arr[count], arr[i] = arr[i], arr[count]
            count += 1
    return arr",lm
281,"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True",human
504,"def sum_Of_Series(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += i * i*i       
    return sum",human
42,"def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])",human
17,"def square_perimeter(a):
  perimeter=4*a
  return perimeter",human
772,"def remove_length(test_str, K):
  temp = test_str.split()
  res = [ele for ele in temp if len(ele) != K]
  res = ' '.join(res)
  return (res) ",human
834,"def generate_matrix(n):
        if n<=0:
            return [] 
        matrix=[row[:] for row in [[0]*n]*n]        
        row_st=0
        row_ed=n-1        
        col_st=0
        col_ed=n-1
        current=1        
        while (True):
            if current>n*n:
                break
            for c in range (col_st, col_ed+1):
                matrix[row_st][c]=current
                current+=1
            row_st+=1
            for r in range (row_st, row_ed+1):
                matrix[r][col_ed]=current
                current+=1
            col_ed-=1
            for c in range (col_ed, col_st-1, -1):
                matrix[row_ed][c]=current
                current+=1
            row_ed-=1
            for r in range (row_ed, row_st-1, -1):
                matrix[r][col_st]=current
                current+=1
            col_st+=1
        return matrix",human
343,"def dig_let(s):
 d=l=0
 for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
 return (l,d)",human
41,"def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums",human
204,"def count(s,c) : 
    res = 0 
    for i in range(len(s)) : 
        if (s[i] == c): 
            res = res + 1
    return res ",human
961,"def romanToInt(s: str) -> int:
    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    total = 0
    prev_value = 0
    
    for char in reversed(s):
        value = roman_map[char]
        if value < prev_value:
            total -= value
        else:
            total += value
        prev_value = value
    
    return total",lm
175,"def isValid(s):
    stack = []
    mapping = {"")"": ""("", ""}"": ""{"", ""]"": ""[""}
    for char in s:
        if char in mapping:
            top_element = stack.pop() if stack else '#'
            if mapping[char] != top_element:
                return False
        else:
            stack.append(char)
    return not stack",lm
253,"def count_integers(given_list):
    return sum(isinstance(item, int) for item in given_list)",lm
340,"def sum_of_three_lowest_positives(numbers):
    positive_numbers = sorted([num for num in numbers if num > 0])
    return sum(positive_numbers[:3])",lm
683,"def can_be_sum_of_two_squares(n):
    for i in range(int(n**0.5) + 1):
        for j in range(i, int(n**0.5)+1):
            if i*i + j*j == n:
                return True
    return False",lm
473,"def tuple_intersection(tuple_list):
    # Convert each tuple in the list to a set
    converted_to_set = [set(tup) for tup in tuple_list]
    # Find intersection among all sets
    intersection_set = set.intersection(*converted_to_set)
    # Convert the resulting set back to a tuple
    return tuple(intersection_set)",lm
830,"def round_up(number, digits = 0):
    multiplier = 10 ** digits
    return round(number * multiplier + 0.5 * (1 if number >= 0 else -1)) / multiplier",lm
809,"def check_smaller(test_tup1, test_tup2):
  res = all(x > y for x, y in zip(test_tup1, test_tup2))
  return (res) ",human
623,"def nth_power(elements, n):
    return list(map(lambda x: x**n, elements))",lm
104,"def sort_sublists(input_list):
    return sorted(input_list, key=lambda x: tuple(sorted(x)))",lm
922,"def max_product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return None     
    x = arr[0]; y = arr[1]    
    for i in range(0, arr_len): 
        for j in range(i + 1, arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y   ",human
498,"def find_gcd(x, y):
    while(y):
        x, y = y, x % y
    return x",lm
266,"def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA",human
284,"def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element",human
477,"def to_lower_case(s):
    return s.lower()",lm
719,"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
360,"def nth_carol_number(n):
    return (2 ** n - 1) ** 2 - 2",lm
717,"def calculate_standard_deviation(numbers):
    if not numbers:
        return 0.0
    mean = sum(numbers) / len(numbers)
    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)
    return variance ** 0.5",lm
150,"def is_number_in_sequence(number):
    sequence_element = 0
    increment = 1
    while sequence_element < number:
        sequence_element += increment
        increment += 1
    return sequence_element == number",lm
218,"import math   
def min_Operations(A,B):  
    if (A > B): 
        swap(A,B)  
    B = B // math.gcd(A,B);  
    return B - 1",human
594,"def find_difference(lst):
    even, odd = None, None
    for num in lst:
        if even is None and num % 2 == 0:
            even = num
        elif odd is None and num % 2 != 0:
            odd = num
        if even is not None and odd is not None:
            break
    if even is not None and odd is not None:
        return even - odd
    return None",lm
880,"def find_num_solutions(a, b, c):
    discriminator = b**2 - 4*a*c
    if discriminator > 0:
        return 2
    elif discriminator == 0:
        return 1
    else:
        return 0",lm
637,"def no_profit_no_loss(cost_price, selling_price):
    return cost_price == selling_price",lm
597,"def findKthElement(arr1, arr2, k):
    m, n = len(arr1), len(arr2)
    if m > n:
        return findKthElement(arr2, arr1, k)

    low, high = 0, min(k, m)

    while low <= high:
        cut1 = (low + high) // 2
        cut2 = k - cut1
        left1 = float('-inf') if cut1 == 0 else arr1[cut1 - 1]
        left2 = float('-inf') if cut2 == 0 else arr2[cut2 - 1]
        right1 = float('inf') if cut1 == m else arr1[cut1]
        right2 = float('inf') if cut2 == n else arr2[cut2]

        if left1 <= right2 and left2 <= right1:
            return max(left1, left2)
        elif left1 > right2:
            high = cut1 - 1
        else:
            low = cut1 + 1

    return -1",lm
270,"def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum",human
909,"def previous_palindrome(num):
    for x in range(num-1,0,-1):
        if str(x) == str(x)[::-1]:
            return x",human
18,"def remove_chars(s1, s2):
    return ''.join(filter(lambda x: x not in s2, s1))",lm
396,"import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ",human
228,"def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False",human
831,"def count_equal_element_pairs(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[i] == arr[j]:
                count += 1
    return count",lm
199,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; ",human
635,"import heapq

def heap_sort(values):
    heap = []
    for value in values:
        heapq.heappush(heap, value)
    sorted_values = []
    while heap:
        sorted_values.append(heapq.heappop(heap))
    return sorted_values",lm
444,"def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) ",human
651,"def is_subset_tuple(tuple1, tuple2):
    return all(item in tuple2 for item in tuple1)",lm
539,"def power_list(bases):
    return list(map(lambda x: x**bases.index(x), bases))",lm
234,"def cube_volume(side_length):
    return side_length ** 3",lm
938,"def find_closest_elements(arr1, arr2, arr3):
    i, j, k = 0, 0, 0
    min_diff = float('inf')
    closest_triplet = (0, 0, 0)

    while i < len(arr1) and j < len(arr2) and k < len(arr3):
        # Find the maximum and minimum of the current three elements
        current_max = max(arr1[i], arr2[j], arr3[k])
        current_min = min(arr1[i], arr2[j], arr3[k])
        
        # Update the smallest difference and the result
        if current_max - current_min < min_diff:
            min_diff = current_max - current_min
            closest_triplet = (arr1[i], arr2[j], arr3[k])
        
        # Move to the next element in the array with the smallest value
        if arr1[i] == current_min:
            i += 1
        elif arr2[j] == current_min:
            j += 1
        else:
            k += 1
    
    return closest_triplet",lm
92,"def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True",human
124,"def get_complex_angle(z):
    import cmath
    return cmath.phase(z)",lm
152,"def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]

        merge_sort(L)
        merge_sort(R)

        i = j = k = 0

        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1",lm
589,"def perfect_squares(a, b):
    lists=[]
    for i in range (a,b+1):
        j = 1;
        while j*j <= i:
            if j*j == i:
                 lists.append(i)  
            j = j+1
        i = i+1
    return lists",human
974,"def min_sum_path(A): 
	memo = [None] * len(A) 
	n = len(A) - 1
	for i in range(len(A[n])): 
		memo[i] = A[n][i] 
	for i in range(len(A) - 2, -1,-1): 
		for j in range( len(A[i])): 
			memo[j] = A[i][j] + min(memo[j], 
									memo[j + 1]) 
	return memo[0]",human
111,"def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result",human
748,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)",human
833,"def get_dict_keys_as_list(dictionary):
    return list(dictionary.keys())",lm
172,"def find_std_occurrence(s):
    return s.count('std')",lm
443,"def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max",human
483,"def first_Factorial_Divisible_Number(x): 
    i = 1;
    fact = 1; 
    for i in range(1,x): 
        fact = fact * i 
        if (fact % x == 0): 
            break
    return i ",human
617,"def min_Jumps(a, b, d): 
    temp = a 
    a = min(a, b) 
    b = max(temp, b) 
    if (d >= b): 
        return (d + b - 1) / b 
    if (d == 0): 
        return 0
    if (d == a): 
        return 1
    else:
        return 2",human
154,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result",human
376,"def remove_replica(test_tup):
  temp = set()
  res = tuple(ele if ele not in temp and not temp.add(ele) 
				else 'MSP' for ele in test_tup)
  return (res)",human
763,"def min_difference(arr):
    arr.sort()
    min_diff = float('inf')
    for i in range(1, len(arr)):
        diff = arr[i] - arr[i-1]
        if diff < min_diff:
            min_diff = diff
    return min_diff",lm
418,"def find_max_length_sublist(lst):
    max_length = 0
    max_length_sublist = None
    for i in range(len(lst)):
        for j in range(i, len(lst)):
            if len(lst[i:j+1]) > max_length:
                max_length = len(lst[i:j+1])
                max_length_sublist = lst[i:j+1]
    return max_length_sublist",lm
126,"def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum",human
264,"def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age",human
194,"def octal_to_decimal(octal_num):
    decimal_num = 0
    base = 1
    while octal_num:
        last_digit = octal_num % 10
        octal_num = int(octal_num / 10)
        decimal_num += last_digit * base
        base = base * 8
    return decimal_num",lm
714,"def count_distinct_prime_powers(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    prime_powers = set()
    for i in range(2, n + 1):
        if n % i == 0 and is_prime(i):
            count = 0
            while n % i == 0:
                n //= i
                count += 1
            prime_powers.add(count)
    return len(prime_powers)",lm
208,"import re
def is_decimal(num):
  num_fetch = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
  result = num_fetch.search(num)
  return bool(result)",human
499,"def circle_diameter(radius):
    return 2 * radius",lm
951,"def max_of_similar_indices(list1, list2):
    max_values = []
    for i, val in enumerate(list1):
        if i < len(list2) and val[0] == list2[i][0]:
            max_values.append(max(val[1], list2[i][1]))
    return max_values",lm
397,"def find_median_of_three(a, b, c):
    return sorted([a, b, c])[1]",lm
610,"def remove_kth_element(list_input, k):
    if k < len(list_input):
        del list_input[k]
    return list_input",lm
192,"def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n ",human
497,"import math

def cone_surface_area(radius, height):
    base_area = math.pi * (radius ** 2)
    side_area = math.pi * radius * math.sqrt((radius ** 2) + (height ** 2))
    return base_area + side_area",lm
468,"def max_product(arr, n ): 
	mpis =[0] * (n) 
	for i in range(n): 
		mpis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
					mpis[i] < (mpis[j] * arr[i])): 
						mpis[i] = mpis[j] * arr[i] 
	return max(mpis)",human
495,"import re
def remove_lowercase(str1):
  remove_lower = lambda text: re.sub('[a-z]', '', text)
  result =  remove_lower(str1)
  return (result)",human
841,"def get_inv_count(arr, n): 
	inv_count = 0
	for i in range(n): 
		for j in range(i + 1, n): 
			if (arr[i] > arr[j]): 
				inv_count += 1
	return inv_count ",human
88,"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count",human
276,"def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume",human
790,"def even_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))",human
7,"import re

def find_long_words(text):
    return re.findall(r'\b\w{4,}\b', text)",lm
346,"def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)",human
940,"def heap_sort(arr):
    heapify(arr)  
    end = len(arr) - 1
    while end > 0:
        arr[end], arr[0] = arr[0], arr[end]
        shift_down(arr, 0, end - 1)
        end -= 1
    return arr

def heapify(arr):
    start = len(arr) // 2
    while start >= 0:
        shift_down(arr, start, len(arr) - 1)
        start -= 1
def shift_down(arr, start, end):
    root = start
    while root * 2 + 1 <= end:
        child = root * 2 + 1
        if child + 1 <= end and arr[child] < arr[child + 1]:
            child += 1
        if child <= end and arr[root] < arr[child]:
            arr[root], arr[child] = arr[child], arr[root]
            root = child
        else:
            return
",human
10,"import heapq
def small_nnum(list1,n):
  smallest=heapq.nsmallest(n,list1)
  return smallest",human
35,"def nth_rectangular_number(n):
    return n * (n + 1) // 2",lm
513,"def tuple_to_list_with_string(tup, string):
    result = []
    for element in tup:
        result.append(element)
        result.append(string)
    result.pop()  # Remove the last added string, assuming it's not needed after the last element
    return result",lm
314,"def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)",human
263,"def merge_dict(d1,d2):
 d = d1.copy()
 d.update(d2)
 return d",human
261,"def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",human
23,"def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi ",human
763,"def find_Min_Diff(arr,n): 
    arr = sorted(arr) 
    diff = 10**20 
    for i in range(n-1): 
        if arr[i+1] - arr[i] < diff: 
            diff = arr[i+1] - arr[i]  
    return diff ",human
593,"import re
def removezero_ip(ip):
 string = re.sub('\.[0]*', '.', ip)
 return string",human
509,"def average_Odd(n) : 
    if (n%2==0) : 
        return (""Invalid Input"") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count ",human
123,"def sum_of_amicable_numbers(n):
    def d(num):
        return sum([i for i in range(1, num) if num % i == 0])
    
    amicable_numbers = set()
    
    for number in range(1, n + 1):
        partner = d(number)
        if d(partner) == number and number != partner:
            amicable_numbers.add(number)
            amicable_numbers.add(partner)
    
    return sum(amicable_numbers)",lm
847,"def lcopy(xs):
  return xs[:]
",human
328,"def rotate_left(list1,m,n):
  result =  list1[m:]+list1[:n]
  return result",human
416,"MAX = 1000000
def breakSum(n): 
	dp = [0]*(n+1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); 
	return dp[n]",human
777,"def sum_of_non_repeated(arr):
    unique_elements = [x for x in arr if arr.count(x) == 1]
    return sum(unique_elements)",lm
386,"def min_swaps_for_bracket_balancing(s):
    imbalance, swaps = 0, 0
    open_brackets, close_brackets = 0, 0
    
    for bracket in s:
        if bracket == '[':
            open_brackets += 1
            if imbalance > 0:
                swaps += imbalance
                imbalance -= 1
        else:
            close_brackets += 1
            imbalance = close_brackets - open_brackets
    
    return swaps",lm
205,"def find_inversions_in_tuple_list(tuple_list):
    def count_inversions_in_tuple(a_tuple):
        count = 0
        for i in range(len(a_tuple)):
            for j in range(i + 1, len(a_tuple)):
                if a_tuple[i] > a_tuple[j]:
                    count += 1
        return count
    
    return [count_inversions_in_tuple(t) for t in tuple_list]",lm
552,"def is_linear_sequence(sequence):
    if len(sequence) < 3:  # A sequence with less than 3 elements is considered linear
        return True

    if sequence[1] == sequence[0]:  # Avoid division by zero in ratio calculation
        return all(x == sequence[0] for x in sequence)

    ratio = (sequence[2] - sequence[1]) / (sequence[1] - sequence[0])

    for i in range(1, len(sequence) - 1):
        if (sequence[i + 1] - sequence[i]) / (sequence[i] - sequence[i - 1]) != ratio:
            return False
    return True",lm
392,"def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]",human
35,"def find_rect_num(n):
  return n*(n + 1) ",human
197,"def exponentiate_tuples(tuple1, tuple2):
    return tuple(a ** b for a, b in zip(tuple1, tuple2))",lm
91,"def is_substring_present(substring, string_list):
    for string in string_list:
        if substring in string:
            return True
    return False",lm
518,"def square_root_perfect_number(number):
    return number**(1/2)",lm
521,"def is_scalene_triangle(side1, side2, side3):
    if side1 != side2 and side1 != side3 and side2 != side3:
        return True
    return False",lm
429,"def extract_elementwise_and_tuples(tuple1, tuple2):
    return tuple(a & b for a, b in zip(tuple1, tuple2))",lm
802,"def count_Rotation(arr,n):   
    for i in range (1,n): 
        if (arr[i] < arr[i - 1]): 
            return i  
    return 0",human
797,"def sum_odd_numbers(l, r):
    sum_odd = sum(number for number in range(l, r + 1) if number % 2 != 0)
    return sum_odd",lm
834,"def generate_spiral_square_matrix(n):
    matrix = [[0] * n for _ in range(n)]
    num = 1
    for layer in range((n + 1) // 2):
        # Top row
        for i in range(layer, n - layer):
            matrix[layer][i] = num ** 2
            num += 1
        # Right column
        for j in range(layer + 1, n - layer):
            matrix[j][n - layer - 1] = num ** 2
            num += 1
        # Bottom row
        for k in range(n - layer - 2, layer - 1, -1):
            matrix[n - layer - 1][k] = num ** 2
            num += 1
        # Left column
        for l in range(n - layer - 2, layer, -1):
            matrix[l][layer] = num ** 2
            num += 1
    return matrix",lm
771,"def is_balanced(expression):
    stack = []
    opening_brackets = ""([{""
    closing_brackets = "")]}""
    matching_pairs = dict(zip(closing_brackets, opening_brackets))
    
    for char in expression:
        if char in opening_brackets:
            stack.append(char)
        elif char in closing_brackets:
            if stack and stack[-1] == matching_pairs[char]:
                stack.pop()
            else:
                return False
    return not stack",lm
586,"def split_Arr(a,n,k):  
   b = a[:k] 
   return (a[k::]+b[::]) ",human
697,"def count_even(array_nums):
   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))
   return count_even",human
270,"def sum_even_numbers_even_positions(lst):
    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 0)",lm
351,"def first_Element(arr,n,k): 
    count_map = {}; 
    for i in range(0, n): 
        if(arr[i] in count_map.keys()): 
            count_map[arr[i]] += 1
        else: 
            count_map[arr[i]] = 1
        i += 1
    for i in range(0, n):  
        if (count_map[arr[i]] == k): 
            return arr[i] 
        i += 1 
    return -1",human
319,"import re
def find_long_word(text):
  return (re.findall(r""\b\w{5}\b"", text))",human
221,"def find_first_even(numbers):
    for number in numbers:
        if number % 2 == 0:
            return number
    return None",lm
563,"import re
def extract_values(text):
 return (re.findall(r'""(.*?)""', text))",human
759,"def is_decimal_with_precision_of_two(value):
    try:
        value = float(value)
        return bool(abs(value - round(value, 2)) < 1e-9)
    except ValueError:
        return False",lm
947,"def len_log(list1):
    min=len(list1[0])
    for i in list1:
        if len(i)<min:
            min=len(i)
    return min",human
609,"import numpy as np
from scipy.optimize import minimize_scalar

def find_minimum_periodic(f, period, bounds=(0, 1), tol=1e-5):
    def wrapped_f(x):
        return f(x % period)
    
    res = minimize_scalar(wrapped_f, bounds=bounds, method='bounded', options={'xatol': tol})
    return res.fun",lm
611,"def max_in_nth_column(tuple_list, n):
    return max(tuple_list, key=lambda x: x[n])[n]",lm
942,"def check_element(test_tup, check_list):
  res = False
  for ele in check_list:
    if ele in test_tup:
      res = True
      break
  return (res) ",human
775,"def check_odd_index_odd_numbers(lst):
    return all(lst[i] % 2 != 0 for i in range(1, len(lst), 2))",lm
532,"def are_permutations(str1, str2):
    if len(str1) != len(str2):
        return False
    return sorted(str1) == sorted(str2)",lm
350,"def minimum_Length(s) : 
    maxOcc = 0
    n = len(s) 
    arr = [0]*26
    for i in range(n) : 
        arr[ord(s[i]) -ord('a')] += 1
    for i in range(26) : 
        if arr[i] > maxOcc : 
            maxOcc = arr[i] 
    return n - maxOcc ",human
315,"def find_Max_Len_Even(str): 
    n = len(str) 
    i = 0
    currlen = 0
    maxlen = 0
    st = -1
    while (i < n): 
        if (str[i] == ' '): 
            if (currlen % 2 == 0): 
                if (maxlen < currlen): 
                    maxlen = currlen 
                    st = i - currlen 
            currlen = 0 
        else : 
            currlen += 1
        i += 1
    if (currlen % 2 == 0): 
        if (maxlen < currlen): 
            maxlen = currlen 
            st = i - currlen 
    if (st == -1): 
        return ""-1"" 
    return str[st: st + maxlen] ",human
613,"def find_max_value(records):
    max_value = None
    for record in records:
        if max_value is None or record[1] > max_value:
            max_value = record[1]
    return max_value",lm
557,"def toggle_string(string):
 string1 = string.swapcase()
 return string1",human
378,"def shift_last_to_first(given_list):
    if given_list:
        given_list.insert(0, given_list.pop())
    return given_list",lm
947,"def shortest_word_length(s):
    words = s.split()
    return len(min(words, key=len))",lm
30,"def count_substrings_same_start_end(s):
    n = len(s)
    count = 0
    for i in range(n):
        for j in range(i, n):
            if s[i] == s[j]:
                count += 1
    return count",lm
828,"def count_components(input_string):
    alphabets = digits = special_characters = 0
    for character in input_string:
        if character.isalpha():
            alphabets += 1
        elif character.isdigit():
            digits += 1
        else:
            special_characters += 1
    return alphabets, digits, special_characters",lm
36,"def find_nth_digit_in_fraction(numerator, denominator, n):
    fraction = numerator / denominator
    fraction_str = str(fraction).split('.')[1]  # Remove the integer part
    if n <= len(fraction_str):
        return fraction_str[n-1]
    else:
        return ""Nth digit does not exist.""",lm
138,"def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True",human
151,"def is_coprime(a, b):
    while b != 0:
        a, b = b, a % b
    return a == 1",lm
336,"def check_monthnum(monthname1):
  if monthname1 == ""February"":
    return True
  else:
    return False",human
89,"def closest_smaller_number(n, numbers_list):
    closest = None
    for number in numbers_list:
        if number < n:
            if closest is None or n - number < n - closest:
                closest = number
    return closest",lm
218,"def min_operations_to_make_equal(a, b):
    return abs(a - b)",lm
316,"def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result ",human
580,"def even_ele(test_tuple, even_fnc): 
	res = tuple() 
	for ele in test_tuple: 
		if isinstance(ele, tuple): 
			res += (even_ele(ele, even_fnc), ) 
		elif even_fnc(ele): 
			res += (ele, ) 
	return res 
def extract_even(test_tuple):
  res = even_ele(test_tuple, lambda x: x % 2 == 0)
  return (res) ",human
406,"def find_parity(number):
    return ""Even"" if number % 2 == 0 else ""Odd""",lm
480,"def max_occurring_char(s):
    char_frequency = {}
    for char in s:
        if char in char_frequency:
            char_frequency[char] += 1
        else:
            char_frequency[char] = 1
    return max(char_frequency, key=char_frequency.get)",lm
722,"def filter_student_size(student_sizes, min_height=None, max_height=None, min_width=None, max_width=None):
    filtered_students = {}
    for student, sizes in student_sizes.items():
        height, width = sizes
        if ((min_height is None or height >= min_height) and
                (max_height is None or height <= max_height) and
                (min_width is None or width >= min_width) and
                (max_width is None or width <= max_width)):
            filtered_students[student] = sizes
    return filtered_students",lm
260,"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)",human
735,"def set_middle_bits(n):  
    n |= n >> 1; 
    n |= n >> 2; 
    n |= n >> 4; 
    n |= n >> 8; 
    n |= n >> 16;  
    return (n >> 1) ^ 1
def toggle_middle_bits(n): 
    if (n == 1): 
        return 1
    return n ^ set_middle_bits(n) ",human
579,"def find_dissimilar_elements(tuple1, tuple2):
    return set(tuple1).symmetric_difference(set(tuple2))",lm
382,"def find_rotation_count(A):
    (left, right) = (0, len(A) - 1)
    while left <= right:
        if A[left] <= A[right]:
            return left
        mid = (left + right) // 2
        next = (mid + 1) % len(A)
        prev = (mid - 1 + len(A)) % len(A)
        if A[mid] <= A[next] and A[mid] <= A[prev]:
            return mid
        elif A[mid] <= A[right]:
            right = mid - 1
        elif A[mid] >= A[left]:
            left = mid + 1
    return -1",human
591,"def interchange_first_last(lst):
    if not lst:
        return lst
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst",lm
736,"def left_insertion_point(sorted_list, value):
    start, end = 0, len(sorted_list) - 1
    while start <= end:
        mid = (start + end) // 2
        if sorted_list[mid] < value:
            start = mid + 1
        else:
            end = mid - 1
    return start",lm
450,"def extract_strings_of_size(strings, size):
    return [string for string in strings if len(string) == size]",lm
723,"def count_same_pairs(list1, list2):
    return sum(map(lambda x, y: x == y, list1, list2))",lm
885,"def is_Isomorphic(str1,str2):          
    dict_str1 = {}
    dict_str2 = {}
    for i, value in enumerate(str1):
        dict_str1[value] = dict_str1.get(value,[]) + [i]        
    for j, value in enumerate(str2):
        dict_str2[value] = dict_str2.get(value,[]) + [j]
    if sorted(dict_str1.values()) == sorted(dict_str2.values()):
        return True
    else:
        return False",human
729,"def add_lists(list1, list2):
    return list(map(lambda x, y: x + y, list1, list2))",lm
177,"def answer(L,R): 
    if (2 * L <= R): 
        return (L ,2*L)
    else: 
        return (-1) ",human
673,"def merge_integers(list_of_integers):
    return int("""".join(map(str, list_of_integers)))",lm
470,"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",human
87,"def merge_dictionaries(dict1, dict2, dict3):
    return {**dict1, **dict2, **dict3}",lm
198,"import math
def largest_triangle(a,b): 
    if (a < 0 or b < 0): 
        return -1 
    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  
    return area ",human
529,"def jacobsthal_lucas(n): 
	dp=[0] * (n + 1) 
	dp[0] = 2
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2]; 
	return dp[n]",human
654,"def rectangle_perimeter(l,b):
  perimeter=2*(l+b)
  return perimeter",human
232,"def get_n_largest_items(dataset, n):
    return sorted(dataset, reverse=True)[:n]",lm
181,"def common_prefix_util(str1, str2): 
	result = """"; 
	n1 = len(str1) 
	n2 = len(str2) 
	i = 0
	j = 0
	while i <= n1 - 1 and j <= n2 - 1: 
		if (str1[i] != str2[j]): 
			break
		result += str1[i] 
		i += 1
		j += 1
	return (result) 
def common_prefix (arr, n): 
	prefix = arr[0] 
	for i in range (1, n): 
		prefix = common_prefix_util(prefix, arr[i]) 
	return (prefix) ",human
166,"def count_even_xor_pairs(arr):
    even_count, odd_count = 0, 0

    for num in arr:
        if num % 2 == 0:
            even_count += 1
        else:
            odd_count += 1

    even_xor_pairs = (even_count * (even_count - 1) // 2) + (odd_count * (odd_count - 1) // 2)
    return even_xor_pairs",lm
908,"def find_fixed_point(arr):
    for i in range(len(arr)):
        if arr[i] == i:
            return i
    return None",lm
27,"import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list",human
221,"def first_even(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    return first_even",human
405,"def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False",human
166,"def find_even_Pair(A,N): 
    evenPair = 0
    for i in range(0,N): 
        for j in range(i+1,N): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; ",human
83,"def add_chars(s):
    result_char = chr(sum(ord(char) for char in s) % 256)
    return result_char",lm
795,"import heapq
def cheap_items(items,n):
  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])
  return cheap_items",human
46,"def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;",human
880,"def Check_Solution(a,b,c) : 
    if ((b*b) - (4*a*c)) > 0 : 
        return (""2 solutions"") 
    elif ((b*b) - (4*a*c)) == 0 : 
        return (""1 solution"") 
    else : 
        return (""No solutions"") ",human
240,"def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
",human
224,"def count_set_bits(n):
    count = 0
    while n:
        count += n & 1
        n >>= 1
    return count",lm
739,"def index_of_smallest_triangular_number_with_n_digits(n):
    def is_n_digits(number, n):
        return 10**(n-1) <= number < 10**n

    def triangular_number(k):
        return k * (k + 1) // 2

    k = 1
    while not is_n_digits(triangular_number(k), n):
        k += 1
    return k",lm
835,"def find_slope(x1, y1, x2, y2):
    if x2 - x1 == 0:
        return None  # Can't divide by zero, line is vertical
    return (y2 - y1) / (x2 - x1)",lm
847,"def copy_list_from_singleton_tuple(tuple_with_list):
    if tuple_with_list and isinstance(tuple_with_list[0], list):
        return tuple_with_list[0].copy()
    return []",lm
653,"from collections import defaultdict
def grouping_dictionary(l):
    d = defaultdict(list)
    for k, v in l:
        d[k].append(v)
    return d",human
201,"def check_elements_same(lst):
    return all(element == lst[0] for element in lst)",lm
675,"def add_integers_with_condition(a, b, range_start, range_end):
    sum = a + b
    if range_start <= sum <= range_end:
        return 20
    else:
        return sum",lm
199,"def highest_power_of_2(n):
    i = 1
    while i * 2 <= n:
        i *= 2
    return i",lm
241,"def generate_3d_array(dim1, dim2, dim3):
    return [[['*' for _ in range(dim3)] for _ in range(dim2)] for _ in range(dim1)]",lm
140,"def extract_singles(tuple_list):
    from collections import Counter
    # Flatten the tuple list and count occurrences of each element
    flattened_list = [item for sublist in tuple_list for item in sublist]
    element_counts = Counter(flattened_list)
    # Extract elements that occur exactly once
    singles = [element for element, count in element_counts.items() if count == 1]
    return singles",lm
153,"def parabola_vertex(a, b, c): 
  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))
  return vertex",human
659,"def print_duplicates(input_list):
    seen = {}
    duplicates = []
    for number in input_list:
        if number in seen:
            if seen[number] == 1:
                duplicates.append(number)
            seen[number] += 1
        else:
            seen[number] = 1
    for duplicate in duplicates:
        print(duplicate)",lm
849,"def Sum(N): 
    SumOfPrimeDivisors = [0]*(N + 1)   
    for i in range(2,N + 1) : 
        if (SumOfPrimeDivisors[i] == 0) : 
            for j in range(i,N + 1,i) : 
                SumOfPrimeDivisors[j] += i           
    return SumOfPrimeDivisors[N] ",human
100,"import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i",human
841,"def count_inversions(array):
    def merge_sort(arr, temp_arr, left, right):
        inv_count = 0
        if left < right:
            mid = (left + right) // 2
            inv_count += merge_sort(arr, temp_arr, left, mid)
            inv_count += merge_sort(arr, temp_arr, mid + 1, right)
            inv_count += merge(arr, temp_arr, left, mid, right)
        return inv_count
    
    def merge(arr, temp_arr, left, mid, right):
        i = left
        j = mid + 1
        k = left
        inv_count = 0
        while i <= mid and j <= right:
            if arr[i] <= arr[j]:
                temp_arr[k] = arr[i]
                k += 1
                i += 1
            else:
                temp_arr[k] = arr[j]
                k += 1
                j += 1
                inv_count += (mid - i + 1)
        while i <= mid:
            temp_arr[k] = arr[i]
            k += 1
            i += 1
        while j <= right:
            temp_arr[k] = arr[j]
            k += 1
            j += 1
        for loop_var in range(left, right + 1):
            arr[loop_var] = temp_arr[loop_var]
        return inv_count

    n = len(array)
    temp_array = [0]*n
    return merge_sort(array, temp_array, 0, n - 1)",lm
612,"def merge_first_last(list_of_lists):
    if not list_of_lists:
        return []
    return [list_of_lists[0][0]] + [list_of_lists[-1][-1]]",lm
882,"def parallelogram_perimeter(b,h):
  perimeter=2*(b*h)
  return perimeter",human
252,"import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) ",human
491,"def sum_of_gp(a, r, n):
    if r == 1:
        return a * n
    else:
        return a * (1 - r ** n) / (1 - r)",lm
52,"def parallelogram_area(base, height):
    return base * height",lm
459,"import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)",human
137,"def find_zero_ratio(arr):
    zero_count = arr.count(0)
    total_count = len(arr)
    if total_count == 0:
        return 0
    return zero_count / total_count",lm
115,"def check_all_empty(list_of_dicts):
    return all(not d for d in list_of_dicts)",lm
558,"def digit_distance_nums(n1, n2):
         return sum(map(int,str(abs(n1-n2))))",human
697,"def count_even_elements(lst):
    count_evens = len(list(filter(lambda x: x % 2 == 0, lst)))
    return count_evens",lm
364,"def make_flip(ch): 
	return '1' if (ch == '0') else '0'
def get_flip_with_starting_charcter(str, expected): 
	flip_count = 0
	for i in range(len( str)): 
		if (str[i] != expected): 
			flip_count += 1
		expected = make_flip(expected) 
	return flip_count 
def min_flip_to_make_string_alternate(str): 
	return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",human
399,"def bitwise_xor_tuples(tuple1, tuple2):
    return tuple(a ^ b for a, b in zip(tuple1, tuple2))",lm
55,"import math
def tn_gp(a,n,r):
  tn = a * (math.pow(r, n - 1))
  return tn",human
428,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list",human
340,"def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])",human
180,"from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):
 dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
 return dist",human
692,"def last_Two_Digits(N): 
    if (N >= 10): 
        return
    fac = 1
    for i in range(1,N + 1): 
        fac = (fac * i) % 100
    return (fac) ",human
238,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ",human
85,"import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea",human
485,"def is_palindrome(n) : 
	divisor = 1
	while (n / divisor >= 10) : 
		divisor *= 10
	while (n != 0) : 
		leading = n // divisor 
		trailing = n % 10
		if (leading != trailing) : 
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) : 
	A.sort() 
	for i in range(n - 1, -1, -1) : 
		if (is_palindrome(A[i])) : 
			return A[i] 
	return -1",human
446,"def count_elements_in_tuple(my_list, my_tuple):
    count_dict = {}
    for item in my_list:
        count_dict[item] = my_tuple.count(item)
    return count_dict",lm
282,"def subtract_lists(list1, list2):
    return list(map(lambda x, y: x - y, list1, list2))",lm
249,"def intersect_arrays(arr1, arr2):
    return list(filter(lambda x: x in arr2, arr1))",lm
892,"def remove_multiple_spaces(s):
    return ' '.join(s.split())",lm
630,"def get_adjacent_coordinates(coord):
    x, y = coord
    adjacents = [(x-1, y), (x+1, y), (x, y-1), (x, y+1),
                 (x-1, y-1), (x-1, y+1), (x+1, y-1), (x+1, y+1)]
    return adjacents",lm
559,"def max_subarray_sum(arr):
    if not arr:
        return 0
    max_ending_here = max_so_far = arr[0]
    for x in arr[1:]:
        max_ending_here = max(x, max_ending_here + x)
        max_so_far = max(max_so_far, max_ending_here)
    return max_so_far",lm
411,"import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))",human
313,"def print_positive_numbers(number_list):
    for number in number_list:
        if number > 0:
            print(number)",lm
751,"def isMinHeap(arr):
    n = len(arr)
    for i in range(int(n / 2)):
        left = 2 * i + 1
        right = 2 * i + 2
        if left < n and arr[i] > arr[left]:
            return False
        if right < n and arr[i] > arr[right]:
            return False
    return True",lm
306,"def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]",human
772,"def remove_words_with_length_k(input_string, k):
    words = input_string.split()
    return ' '.join(word for word in words if len(word) != k)",lm
73,"import re
def multiple_split(text):
  return (re.split('; |, |\*|\n',text))",human
248,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ",human
193,"def remove_duplicates_from_tuple(input_tuple):
    return tuple(set(input_tuple))",lm
586,"def split_and_add(arr, split_index):
    return arr[split_index:] + arr[:split_index]",lm
622,"def find_median_sorted_arrays(arr1, arr2):
    merged_array = sorted(arr1 + arr2)
    n = len(merged_array)
    if n % 2 == 0:
        return (merged_array[n//2 - 1] + merged_array[n//2]) / 2
    else:
        return merged_array[n//2]",lm
257,"def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)",human
542,"import re

def replace_with_colon(text):
    return re.sub(r'[ ,.]', ':', text)",lm
766,"def iterate_consecutive_pairs(given_list):
    for i in range(len(given_list) - 1):
        yield given_list[i], given_list[i + 1]",lm
64,"def sort_tuples_list(tuples_list):
    return sorted(tuples_list, key=lambda x: x[0])",lm
297,"def flatten_list(nested_list):
    flattened = []
    for element in nested_list:
        if type(element) is list:
            flattened.extend(flatten_list(element))
        else:
            flattened.append(element)
    return flattened",lm
695,"def check_tuples(tup1, tup2):
    return all(y > tup1[i] for i, y in enumerate(tup2))",lm
50,"def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)",human
761,"def arc_length(d,a):
    pi=22/7
    if a >= 360:
        return None
    arclength = (pi*d) * (a/360)
    return arclength",human
814,"def area_of_rhombus(diagonal1, diagonal2):
    return 0.5 * diagonal1 * diagonal2",lm
373,"def volume_of_cuboid(length, width, height):
    return length * width * height",lm
497,"import math
def surfacearea_cone(r,h):
  l = math.sqrt(r * r + h * h)
  SA = math.pi * r * (r + l)
  return SA",human
262,"def split_two_parts(list1, L):
    return list1[:L], list1[L:]",human
674,"from collections import OrderedDict
def remove_duplicate(string):
  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())
  return result",human
944,"def separate_numbers_and_positions(s):
    for i, char in enumerate(s):
        if char.isdigit():
            print(f""Number: {char}, Position: {i}"")",lm
746,"def sector_area(r,a):
    pi=22/7
    if a >= 360:
        return None
    sectorarea = (pi*r**2) * (a/360)
    return sectorarea",human
715,"def convert_to_tuple(s):
    return tuple(map(int, s.split()))",lm
730,"def remove_consecutive_duplicates(lst):
    if not lst:
        return lst
    new_lst = [lst[0]]
    for i in range(1, len(lst)):
        if lst[i] != lst[i-1]:
            new_lst.append(lst[i])
    return new_lst",lm
99,"def decimal_to_binary(decimal_number):
    return bin(decimal_number).replace(""0b"", """")",lm
300,"def count_binary_sequences(n):
    def binomial_coefficient(n, k):
        if k == 0 or k == n:
            return 1
        return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)

    count = 0
    for i in range(n + 1):
        count += binomial_coefficient(n, i) ** 2
    return count",lm
658,"def max_occurrences(list1):
    max_val = 0
    result = list1[0] 
    for i in list1:
        occu = list1.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result",human
683,"def sum_Square(n) : 
    i = 1 
    while i*i <= n : 
        j = 1
        while (j*j <= n) : 
            if (i*i+j*j == n) : 
                return True
            j = j+1
        i = i+1     
    return False",human
475,"from collections import Counter

def sort_counter_by_value(counter):
    return {k: v for k, v in sorted(counter.items(), key=lambda item: item[1], reverse=True)}",lm
213,"def concatenate_strings(test_tup1, test_tup2):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",human
334,"def is_valid_triangle(a, b, c):
    return a + b > c and a + c > b and b + c > a",lm
744,"def has_none_value(input_tuple):
    return any(item is None for item in input_tuple)",lm
334,"def check_Validity(a,b,c):  
    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 
        return False
    else: 
        return True        ",human
466,"def find_peak_element(arr):
    left, right = 0, len(arr) - 1
    while left < right:
        mid = (left + right) // 2
        if arr[mid] > arr[mid + 1]:
            right = mid
        else:
            left = mid + 1
    return left",lm
642,"def remove_similar_rows(matrix):
    return tuple(sorted(set(matrix), key=matrix.index))",lm
105,"def count_true_booleans(lst):
    return sum(1 for item in lst if item is True)",lm
178,"def search_literals(search_for, search_in):
    results = {literal: literal in search_in for literal in search_for}
    return results",lm
226,"def remove_odd_index_chars(input_string):
    return ''.join([char for index, char in enumerate(input_string) if index % 2 == 0])",lm
200,"def position_max(list1):
    max_val = max(list1)
    max_result = [i for i, j in enumerate(list1) if j == max_val]
    return max_result",human
887,"def is_odd(number):
    return number & 1 == 1",lm
568,"def empty_list(length):
 empty_list = [{} for _ in range(length)]
 return empty_list",human
615,"def average_tuple_of_tuples(data):
    total_sum = 0
    count = 0
    for sub_tuple in data:
        total_sum += sum(sub_tuple)
        count += len(sub_tuple)
    return total_sum / count if count else 0",lm
130,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result",human
327,"def is_isosceles(a, b, c):
    if a == b or b == c or a == c:
        return True
    else:
        return False",lm
793,"def find_last_position(arr, target):
    left, right = 0, len(arr) - 1
    position = -1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            position = mid
            left = mid + 1
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return position",lm
863,"def find_longest_conseq_subseq(arr, n): 
	ans = 0
	count = 0
	arr.sort() 
	v = [] 
	v.append(arr[0]) 
	for i in range(1, n): 
		if (arr[i] != arr[i - 1]): 
			v.append(arr[i]) 
	for i in range(len(v)): 
		if (i > 0 and v[i] == v[i - 1] + 1): 
			count += 1
		else: 
			count = 1
		ans = max(ans, count) 
	return ans ",human
558,"def digit_distance(num1, num2):
    str_num1 = str(num1)
    str_num2 = str(num2)
    distance = 0
    for i in range(len(str_num1)):
        distance += abs(int(str_num1[i]) - int(str_num2[i]))
    return distance",lm
664,"def average_even(n):
    if n % 2 != 0:
        return ""Input must be an even number""
    total = sum(range(0, n+1, 2))
    count = n // 2 + 1
    return total / count",lm
71,"def comb_sort(arr):
    gap = len(arr)
    swapped = True
    while gap != 1 or swapped:
        gap = max(1, int(gap / 1.3))
        swapped = False
        for i in range(len(arr) - gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap] = arr[i + gap], arr[i]
                swapped = True
    return arr",lm
969,"def join_tuples(test_list):
  res = []
  for sub in test_list:
    if res and res[-1][0] == sub[0]:
      res[-1].extend(sub[1:])
    else:
      res.append([ele for ele in sub])
  res = list(map(tuple, res))
  return (res) ",human
756,"import re

def match_ab(string):
    pattern = r'ab?'
    if re.search(pattern, string):
        return True
    else:
        return False",lm
699,"def min_swaps_to_convert(s1, s2):
    if len(s1) != len(s2) or s1.count('0') != s2.count('0') or s1.count('1') != s2.count('1'):
        return -1
    swaps = 0
    for i in range(len(s1)):
        if s1[i] != s2[i]:
            swaps += 1
    return swaps // 2",lm
646,"def No_of_cubes(N,K):
    No = 0
    No = (N - K + 1)
    No = pow(No, 3)
    return No",human
531,"import sys 
def min_coins(coins, m, V): 
    if (V == 0): 
        return 0
    res = sys.maxsize 
    for i in range(0, m): 
        if (coins[i] <= V): 
            sub_res = min_coins(coins, m, V-coins[i]) 
            if (sub_res != sys.maxsize and sub_res + 1 < res): 
                res = sub_res + 1  
    return res ",human
812,"def abbreviate_road(address):
    return address.replace('road', 'rd.')",lm
576,"def is_Sub_Array(A,B,n,m): 
    i = 0; j = 0; 
    while (i < n and j < m):  
        if (A[i] == B[j]): 
            i += 1; 
            j += 1; 
            if (j == m): 
                return True;  
        else: 
            i = i - j + 1; 
            j = 0;       
    return False; ",human
230,"def replace_blank(input_string, char):
    return input_string.replace(' ', char)",lm
269,"def find_ascii_value(char):
    return ord(char)",lm
275,"def find_last_removed_position(arr):
    if not arr:
        return -1
    original_length = len(arr)
    arr = list(set(arr))
    arr.sort()
    return original_length - len(arr)",lm
254,"def find_words_starting_with_a_e(input_string):
    words_starting_with_a_e = []
    for word in input_string.split():
        if word.lower().startswith(('a', 'e')):
            words_starting_with_a_e.append(word)
    return words_starting_with_a_e",lm
592,"from math import comb

def sum_of_product_of_binomial_coefficients(n):
    total_sum = 0
    for i in range(n + 1):
        for j in range(n + 1 - i):
            total_sum += comb(n, i) * comb(n - i, j)
    return total_sum",lm
474,"def replace_characters(s, old_char, new_char):
    return s.replace(old_char, new_char)",lm
253,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr",human
369,"def lateralsurface_cuboid(l,w,h):
  LSA = 2*h*(l+w)
  return LSA",human
389,"def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ",human
232,"import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest",human
6,"def is_Power_Of_Two (x): 
    return x and (not(x & (x - 1))) 
def differ_At_One_Bit_Pos(a,b): 
    return is_Power_Of_Two(a ^ b)",human
342,"from heapq import heappop, heappush
class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index
    def __lt__(self, other):
        return self.value < other.value
def find_minimum_range(list):
    high = float('-inf')
    p = (0, float('inf'))
    pq = []
    for i in range(len(list)):
        heappush(pq, Node(list[i][0], i, 0))
        high = max(high, list[i][0])
    while True:
        top = heappop(pq)
        low = top.value
        i = top.list_num
        j = top.index
        if high - low < p[1] - p[0]:
            p = (low, high)
        if j == len(list[i]) - 1:
            return p
        heappush(pq, Node(list[i][j + 1], i, j + 1))
        high = max(high, list[i][j + 1])",human
948,"def get_item_of_tuple(t, index):
    try:
        return t[index]
    except IndexError:
        return ""Index out of range""",lm
443,"def find_largest_negative(lst):
    largest_negative = None
    for num in lst:
        if num < 0:
            if largest_negative is None or num > largest_negative:
                largest_negative = num
    return largest_negative",lm
132,"def tuple_to_string(tup):
    return ''.join(map(str, tup))",lm
92,"def is_undulating(number):
    num_str = str(number)
    if len(num_str) < 3 or len(set(num_str)) != 2:
        return False
    for i in range(len(num_str) - 2):
        if num_str[i] != num_str[i+2]:
            return False
    return True",lm
914,"def is_alternating(s):
    if len(s) < 2:
        return False
    for i in range(len(s) - 1):
        if s[i] == s[i + 1]:
            return False
    return True",lm
368,"def repeat_tuple(tup, n):
    return tup * n",lm
143,"def count_lists_in_tuple(tup):
    return sum(isinstance(i, list) for i in tup)",lm
956,"import re

def split_at_uppercase(s):
    return re.findall('.[^A-Z]*', s)",lm
789,"from math import tan, pi
def perimeter_polygon(s,l):
  perimeter = s*l
  return perimeter",human
150,"def does_Contain_B(a,b,c): 
    if (a == b): 
        return True
    if ((b - a) * c > 0 and (b - a) % c == 0): 
        return True
    return False",human
962,"def sum_even_numbers(l, r):
    return sum(number for number in range(l, r + 1) if number % 2 == 0)",lm
939,"def sort_list_of_dicts(list_dicts, sort_key):
    return sorted(list_dicts, key=lambda x: x[sort_key])",lm
928,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
        return change_date_format(dt)",human
487,"def sort_tuple(tup): 
	lst = len(tup) 
	for i in range(0, lst): 
		for j in range(0, lst-i-1): 
			if (tup[j][-1] > tup[j + 1][-1]): 
				temp = tup[j] 
				tup[j]= tup[j + 1] 
				tup[j + 1]= temp 
	return tup",human
115,"def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit",human
384,"def frequency_of_smallest(arr):
    if not arr:
        return 0
    smallest = min(arr)
    return arr.count(smallest)",lm
413,"def extract_nth_element(tuple_list, n):
    return [x[n] for x in tuple_list]",lm
147,"def max_path_sum(triangle):
    if not triangle:
        return 0
    
    for row in range(len(triangle) - 2, -1, -1):
        for col in range(len(triangle[row])):
            triangle[row][col] += max(triangle[row + 1][col], triangle[row + 1][col + 1])
    
    return triangle[0][0]",lm
413,"def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result",human
460,"def get_first_elements(list_of_lists):
    return [sublist[0] for sublist in list_of_lists if sublist]",lm
897,"def is_Word_Present(sentence,word): 
    s = sentence.split("" "") 
    for i in s:  
        if (i == word): 
            return True
    return False",human
333,"def sort_list_second_element(lst):
    return sorted(lst, key=lambda x: x[1])",lm
494,"def binary_tuple_to_integer(binary_tuple):
    return int(''.join(map(str, binary_tuple)), 2)",lm
43,"import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')",human
79,"def is_length_odd(word):
    return len(word) % 2 != 0",lm
914,"def is_Two_Alter(s):  
    for i in range (len( s) - 2) : 
        if (s[i] != s[i + 2]) : 
            return False
    if (s[0] == s[1]): 
        return False
    return True",human
395,"def first_non_repeated_character(s):
    char_count = {}
    for char in s:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    for char in s:
        if char_count[char] == 1:
            return char
    return None",lm
429,"def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",human
114,"from collections import Counter 
def assign_freq(test_list):
  res = [(*key, val) for key, val in Counter(test_list).items()]
  return (str(res)) ",human
829,"from collections import Counter 
	
def second_frequent(input): 
	dict = Counter(input) 
	value = sorted(dict.values(), reverse=True)  
	second_large = value[1] 
	for (key, val) in dict.items(): 
		if val == second_large: 
			return (key) ",human
428,"def shell_sort(arr):
    interval = len(arr) // 2
    while interval > 0:
        for i in range(interval, len(arr)):
            temp = arr[i]
            j = i
            while j >= interval and arr[j - interval] > temp:
                arr[j] = arr[j - interval]
                j -= interval
            arr[j] = temp
        interval //= 2
    return arr",lm
239,"def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]",human
344,"def count_odd_factors_in_range(start, end):
    count = 0
    for num in range(start, end + 1):
        sqrt_num = int(num ** 0.5)
        if sqrt_num * sqrt_num == num:
            count += 1
    return count",lm
808,"def check_K(test_tup, K):
  res = False
  for ele in test_tup:
    if ele == K:
      res = True
      break
  return (res) ",human
278,"def find_element_before_count(record, element):
    count = 0
    for item in record:
        if item == element:
            break
        count += 1
    else:
        return -1  # Element not found
    return count",lm
423,"def getMaxGold(grid):
    def isValid(x, y):
        return x >= 0 and x < m and y >= 0 and y < n

    def getMaxGoldUtil(x, y):
        if not isValid(x, y) or grid[x][y] == 0:
            return 0

        grid[x][y] = -grid[x][y]  # Mark visited

        # Possible moves: right, right-up, right-down
        right = getMaxGoldUtil(x, y + 1)
        right_up = getMaxGoldUtil(x - 1, y + 1)
        right_down = getMaxGoldUtil(x + 1, y + 1)

        # Backtrack to unmark visited
        grid[x][y] = -grid[x][y]

        # Return the max gold that can be collected by moving right
        return grid[x][y] + max(right, right_up, right_down)

    if not grid:
        return 0

    m, n = len(grid), len(grid[0])
    max_gold = 0

    # Try starting from each cell
    for i in range(m):
        for j in range(n):
            if grid[i][j] != 0:
                max_gold = max(max_gold, getMaxGoldUtil(i, j))

    return max_gold",lm
622,"def get_median(arr1, arr2, n):
  i = 0
  j = 0
  m1 = -1
  m2 = -1
  count = 0
  while count < n + 1:
    count += 1
    if i == n:
      m1 = m2
      m2 = arr2[0]
      break
    elif j == n:
      m1 = m2
      m2 = arr1[0]
      break
    if arr1[i] <= arr2[j]:
      m1 = m2
      m2 = arr1[i]
      i += 1
    else:
      m1 = m2
      m2 = arr2[j]
      j += 1
  return (m1 + m2)/2",human
906,"import re
def extract_date(url):
        return re.findall(r'/(\d{4})/(\d{1,2})/(\d{1,2})/', url)",human
506,"def permutation_coefficient(n, k):
    if k == 0:
        return 1
    elif n == 0:
        return 0
    else:
        return permutation_coefficient(n-1, k) + k * permutation_coefficient(n-1, k-1)",lm
381,"def sort_list_of_lists(lst, index):
    return sorted(lst, key=lambda x: x[index])",lm
441,"def surface_area_of_cube(side_length):
    return 6 * side_length ** 2",lm
269,"def ascii_value(k):
  ch=k
  return ord(ch)",human
633,"def sum_xor_pairs(arr):
    result = 0
    n = len(arr)
    for i in range(32):
        count_set_bits = 0
        for j in range(n):
            if (arr[j] & (1 << i)):
                count_set_bits += 1
        result += (1 << i) * count_set_bits * (n - count_set_bits)
    return result",lm
806,"def max_run_uppercase(s):
    max_run = 0
    current_run = 0
    for char in s:
        if char.isupper():
            current_run += 1
            max_run = max(max_run, current_run)
        else:
            current_run = 0
    return max_run",lm
472,"def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) ",human
305,"import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()",human
286,"def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far",human
223,"def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1",human
776,"def count_vowels(test_str):
  res = 0
  vow_list = ['a', 'e', 'i', 'o', 'u']
  for idx in range(1, len(test_str) - 1):
    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):
      res += 1
  if test_str[0] not in vow_list and test_str[1] in vow_list:
    res += 1
  if test_str[-1] not in vow_list and test_str[-2] in vow_list:
    res += 1
  return (res) ",human
774,"import re 
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
def check_email(email): 
	if(re.search(regex,email)): 
		return (""Valid Email"") 
	else: 
		return (""Invalid Email"") ",human
414,"def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0",human
765,"import math 
def is_polite(n): 
	n = n + 1
	return (int)(n+(math.log((n + math.log(n, 2)), 2))) ",human
322,"def find_min_indices(lst):
    min_value = min(lst)
    return [index for index, value in enumerate(lst) if value == min_value]",lm
440,"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))",human
565,"def split_string_into_characters(s):
    return list(s)",lm
312,"import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume",human
637,"def noprofit_noloss(actual_cost,sale_amount): 
  if(sale_amount == actual_cost):
    return True
  else:
    return False",human
931,"import math 
def sum_series(number):
 total = 0
 total = math.pow((number * (number + 1)) /2, 2)
 return total",human
287,"def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)",human
660,"def choose_non_overlapping_points(range1, range2):
    set1 = set(range(range1[0], range1[1]+1))
    set2 = set(range(range2[0], range2[1]+1))
    
    non_overlapping_points = set1.symmetric_difference(set2)
    return list(non_overlapping_points)",lm
58,"def have_opposite_signs(x, y):
    return (x ^ y) < 0",lm
257,"def swap_numbers(a, b):
    return b, a",lm
185,"def find_focus(a, b, c):
    focus_x = -b / (2*a)
    focus_y = (1 - (b**2 - 4*a*c)) / (4*a)
    return (focus_x, focus_y)",lm
755,"def find_second_smallest(numbers):
    if len(numbers) < 2:
        return None
    first, second = float('inf'), float('inf')
    for num in numbers:
        if num < first:
            second = first
            first = num
        elif first < num < second:
            second = num
    if second == float('inf'):
        return None
    return second",lm
587,"def list_to_tuple(lst):
    return tuple(lst)",lm
727,"import re 
def remove_char(S):
  result = re.sub('[\W_]+', '', S) 
  return result",human
176,"def triangle_perimeter(a, b, c):
    return a + b + c",lm
744,"def check_none(test_tup):
  res = any(map(lambda ele: ele is None, test_tup))
  return (res) ",human
970,"def min_of_two( x, y ):
    if x < y:
        return x
    return y",human
561,"def assign_elements(test_list):
  res = dict()
  for key, val in test_list:
    res.setdefault(val, [])
    res.setdefault(key, []).append(val)
  return (res) ",human
779,"def unique_sublists(list1):
    result ={}
    for l in list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result",human
354,"def tn_ap(a,n,d):
  tn = a + (n - 1) * d
  return tn",human
389,"def nth_lucas(n):
    if n == 0:
        return 2
    if n == 1:
        return 1
    return nth_lucas(n-1) + nth_lucas(n-2)",lm
237,"def check_similar_occurrences(records):
    # Count occurrences of each record
    occurrence_counter = {}
    for record in records:
        if record in occurrence_counter:
            occurrence_counter[record] += 1
        else:
            occurrence_counter[record] = 1
    
    # Count how many times each occurrence count occurs
    occurrences_of_occurrences = {}
    for count in occurrence_counter.values():
        if count in occurrences_of_occurrences:
            occurrences_of_occurrences[count] += 1
        else:
            occurrences_of_occurrences[count] = 1
    
    # Check if all occurrences are similar
    return len(set(occurrences_of_occurrences.values())) == 1",lm
452,"def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return None",human
685,"def sum_of_primes(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    total = sum(i for i in range(2, n + 1) if is_prime(i))
    return total",lm
777,"def find_Sum(arr,n): 
    arr.sort() 
    sum = arr[0] 
    for i in range(0,n-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum",human
875,"def min_diff_in_pairs(tuples):
    min_diff = float('inf')
    for i in range(len(tuples)):
        diff = abs(tuples[i][0] - tuples[i][1])
        min_diff = min(min_diff, diff)
    return min_diff",lm
125,"def max_diff_zeros_ones(binary_str):
    max_diff = 0
    current_diff = 0

    for char in binary_str:
        if char == '0':
            current_diff += 1
        else:
            current_diff -= 1

        if current_diff < 0:
            current_diff = 0
        max_diff = max(max_diff, current_diff)

    if max_diff == 0:
        return -1  # Indicates all 1s and no 0s

    return max_diff",lm
615,"def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result",human
858,"def count_list(input_list): 
    return (len(input_list))**2",human
234,"def volume_cube(l):
  volume = l * l * l
  return volume",human
387,"def even_or_odd(N): 
    l = len(N) 
    if (N[l-1] =='0'or N[l-1] =='2'or 
        N[l-1] =='4'or N[l-1] =='6'or 
        N[l-1] =='8'or N[l-1] =='A'or 
        N[l-1] =='C'or N[l-1] =='E'): 
        return (""Even"") 
    else: 
        return (""Odd"") ",human
943,"from heapq import merge
def combine_lists(num1,num2):
  combine_lists=list(merge(num1, num2))
  return combine_lists",human
572,"def remove_two_duplicates(number_list):
    from collections import Counter
    count = Counter(number_list)
    return [num for num in number_list if count[num] < 3]",lm
427,"import re

def convert_date_format(date_str):
    return re.sub(r'(\d{4})-(\d{2})-(\d{2})', r'\3-\2-\1', date_str)",lm
271,"def sum_of_fifth_power(n):
    return sum([i**5 for i in range(2, 2*n+1, 2)])",lm
774,"import re

def is_valid_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))",lm
512,"def count_element_frequency(mixed_nested_tuple):
    from collections import Counter

    def flatten(items):
        for item in items:
            if isinstance(item, (list, tuple)):
                for sub_item in flatten(item):
                    yield sub_item
            else:
                yield item

    flat_list = list(flatten(mixed_nested_tuple))
    return dict(Counter(flat_list))",lm
754,"def extract_index_list(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result",human
963,"def discriminant_value(x,y,z):
    discriminant = (y**2) - (4*x*z)
    if discriminant > 0:
        return (""Two solutions"",discriminant)
    elif discriminant == 0:
        return (""one solution"",discriminant)
    elif discriminant < 0:
        return (""no real solution"",discriminant)",human
889,"def reverse_list_lists(lists):
    for l in lists:
        l.sort(reverse = True)
    return lists ",human
762,"def check_monthnumber_number(monthnum3):
  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):
    return True
  else:
    return False",human
23,"def max_sum_of_lists(list_of_lists):
    return max(sum(inner_list) for inner_list in list_of_lists)",lm
26,"def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ",human
210,"import re
def is_allowed_specific_char(string):
    get_char = re.compile(r'[^a-zA-Z0-9.]')
    string = get_char.search(string)
    return not bool(string)",human
698,"def sort_dict_item(test_dict):
  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}
  return  (res) 
",human
644,"def reverse_Array_Upto_K(input, k): 
  return (input[k-1::-1] + input[k:]) ",human
883,"def find_divisible(numbers, m, n):
    return list(filter(lambda x: (x % m == 0) and (x % n == 0), numbers))",lm
274,"def sum_even_index_binomials(n):
    sum = 0
    for i in range(0, n+1, 2):
        sum += binomialCoeff(n, i)
    return sum

def binomialCoeff(n, k):
    res = 1
    if k > n - k:
        k = n - k
    for i in range(k):
        res *= (n - i)
        res //= (i + 1)
    return res",lm
606,"import math
def radian_degree(degree):
 radian = degree*(math.pi/180)
 return radian",human
259,"def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",human
174,"def group_keyvalue(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result",human
913,"def check_number_at_end(string):
    return string[-1].isdigit()",lm
963,"def calculate_discriminant(a, b, c):
    return b**2 - 4*a*c",lm
577,"def last_Digit_Factorial(n): 
    if (n == 0): return 1
    elif (n <= 2): return n  
    elif (n == 3): return 6
    elif (n == 4): return 4 
    else: 
      return 0",human
872,"def check_subset(list1,list2): 
    return all(map(list1.__contains__,list2)) ",human
215,"def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]",human
780,"from itertools import combinations 
def find_combinations(test_list):
  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]
  return (res) ",human
545,"def toggle_first_last_bits(number):
    # XOR the number with 1 to toggle the last bit
    # Shift 1 left by the number of bits in 'number' minus 1 to get a mask for the first bit
    first_bit_mask = 1 << (number.bit_length() - 1)
    # Toggle the first bit using XOR with the mask
    return number ^ 1 ^ first_bit_mask",lm
964,"def is_even_length(word):
    return len(word) % 2 == 0",lm
624,"def convert_to_upper(s):
    return s.upper()",lm
11,"def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ",human
47,"def compute_Last_Digit(A,B): 
    variable = 1
    if (A == B): 
        return 1
    elif ((B - A) >= 5):  
        return 0
    else:   
        for i in range(A + 1,B + 1): 
            variable = (variable * (i % 10)) % 10
        return variable % 10",human
595,"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) :  
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") ",human
193,"def remove_tuple(test_tup):
  res = tuple(set(test_tup))
  return (res) ",human
540,"def diff_max_min_frequencies(arr):
    frequency_count = {}
    for elem in arr:
        if elem in frequency_count:
            frequency_count[elem] += 1
        else:
            frequency_count[elem] = 1
    max_frequency = max(frequency_count.values())
    min_frequency = min(frequency_count.values())
    return max_frequency - min_frequency",lm
806,"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)",human
348,"def bin_coff(n, r): 
	val = 1
	if (r > (n - r)): 
		r = (n - r) 
	for i in range(0, r): 
		val *= (n - i) 
		val //= (i + 1) 
	return val 
def find_ways(M): 
	n = M // 2
	a = bin_coff(2 * n, n) 
	b = a // (n + 1) 
	return (b) ",human
181,"def longest_common_prefix(strs):
    if not strs:
        return """"
    shortest = min(strs,key=len)
    for i, char in enumerate(shortest):
        for other in strs:
            if other[i] != char:
                return shortest[:i]
    return shortest",lm
259,"def maximize_tuples(tuple1, tuple2):
    return max(tuple1, tuple2, key=sum)",lm
458,"def rectangle_area(l,b):
  area=l*b
  return area",human
63,"def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ",human
22,"def first_duplicate(arr):
    seen = set()
    for num in arr:
        if num in seen:
            return num
        seen.add(num)
    return -1",lm
657,"def first_digit_of_factorial(n):
    # Initial approximation of factorial
    factorial = 1
    for i in range(2, n + 1):
        factorial *= i
    
    # Converting factorial into string to extract first digit
    first_digit = str(factorial)[0]
    return int(first_digit)",lm
415,"def max_product_pair(arr):
    if len(arr) < 2:
        return None
    
    # Initialize maximum and second maximum
    max1 = max(arr[0], arr[1])
    max2 = min(arr[0], arr[1])
    
    # Traverse given array
    for i in range(2, len(arr)):
        if arr[i] > max1:
            max2 = max1
            max1 = arr[i]
        elif arr[i] > max2:
            max2 = arr[i]
    
    return (max1, max2)",lm
372,"import heapq as hq
def heap_assending(nums):
  hq.heapify(nums)
  s_result = [hq.heappop(nums) for i in range(len(nums))]
  return s_result",human
466,"def find_peak_util(arr, low, high, n): 
	mid = low + (high - low)/2
	mid = int(mid) 
	if ((mid == 0 or arr[mid - 1] <= arr[mid]) and
		(mid == n - 1 or arr[mid + 1] <= arr[mid])): 
		return mid 
	elif (mid > 0 and arr[mid - 1] > arr[mid]): 
		return find_peak_util(arr, low, (mid - 1), n) 
	else: 
		return find_peak_util(arr, (mid + 1), high, n) 
def find_peak(arr, n): 
	return find_peak_util(arr, 0, n - 1, n) ",human
662,"def sorted_dict(dict1):
  sorted_dict = {x: sorted(y) for x, y in dict1.items()}
  return sorted_dict",human
909,"def find_previous_palindrome(num):
    num -= 1
    while not str(num) == str(num)[::-1]:
        num -= 1
    return num",lm
749,"def sort_numeric_strings(lst):
    return sorted(lst, key=lambda x: int(x))",lm
244,"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ",human
378,"def move_first(test_list):
  test_list = test_list[-1:] + test_list[:-1]  
  return test_list",human
350,"def minimize_string_length(s):
    if not s:
        return s
    char_counts = {}
    for char in s:
        char_counts[char] = char_counts.get(char, 0) + 1
    min_char = min(char_counts, key=char_counts.get)
    return s.replace(min_char, '')",lm
758,"def count_unique_lists(input_list):
    unique_lists = [list(x) for x in set(tuple(sorted(x)) for x in input_list)]
    return len(unique_lists)",lm
426,"def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums",human
539,"def basesnum_coresspondingnum(bases_num,index):
  result = list(map(pow, bases_num, index))
  return result",human
359,"def Check_Solution(a,b,c): 
    if (2*b*b == 9*a*c): 
        return (""Yes""); 
    else: 
        return (""No""); ",human
597,"def find_kth(arr1, arr2, m, n, k):
	sorted1 = [0] * (m + n)
	i = 0
	j = 0
	d = 0
	while (i < m and j < n):
		if (arr1[i] < arr2[j]):
			sorted1[d] = arr1[i]
			i += 1
		else:
			sorted1[d] = arr2[j]
			j += 1
		d += 1
	while (i < m):
		sorted1[d] = arr1[i]
		d += 1
		i += 1
	while (j < n):
		sorted1[d] = arr2[j]
		d += 1
		j += 1
	return sorted1[k - 1]",human
689,"def min_jumps(arr):
    n = len(arr)
    if n <= 1:
        return 0
    if arr[0] == 0:
        return -1
    max_reach = arr[0]
    step = arr[0]
    jump = 1
    for i in range(1, n):
        if i == n - 1:
            return jump
        max_reach = max(max_reach, i + arr[i])
        step -= 1
        if step == 0:
            jump += 1
            if i >= max_reach:
                return -1
            step = max_reach - i
    return -1",lm
173,"import re
def remove_splchar(text): 
 pattern = re.compile('[\W_]+')
 return (pattern.sub('', text))",human
188,"def prod_Square(n):
    for i in range(2,(n) + 1):
        if (i*i < (n+1)):
            for j in range(2,n + 1):
                if ((i*i*j*j) == n):
                    return True;
    return False;",human
68,"def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",human
463,"def maxProductSubarray(arr):
    if not arr:
        return 0

    max_product = min_product = max_so_far = arr[0]

    for num in arr[1:]:
        temp_max = max(num, max_product * num, min_product * num)
        min_product = min(num, max_product * num, min_product * num)
        max_product = temp_max
        
        max_so_far = max(max_so_far, max_product)

    return max_so_far",lm
574,"def cylinder_surface_area(radius, height):
    pi = 3.141592653589793
    surface_area = 2 * pi * radius * (radius + height)
    return surface_area",lm
827,"def sum_column(list1, C):
    result = sum(row[C] for row in list1)
    return result",human
168,"def frequency(a,x): 
    count = 0  
    for i in a: 
        if i == x: count += 1
    return count ",human
707,"def countSetBits(n):
    count = 0
    for i in range(1, n + 1):
        count += bin(i).count(""1"")
    return count",lm
747,"def longest_common_subsequence(str1, str2, str3):
    len1, len2, len3 = len(str1), len(str2), len(str3)
    dp = [[[0 for _ in range(len3 + 1)] for _ in range(len2 + 1)] for _ in range(len1 + 1)]

    for i in range(1, len1 + 1):
        for j in range(1, len2 + 1):
            for k in range(1, len3 + 1):
                if str1[i - 1] == str2[j - 1] == str3[k - 1]:
                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1
                else:
                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])
    return dp[-1][-1][-1]",lm
160,"def solution (a, b, n): 
	i = 0
	while i * a <= n: 
		if (n - (i * a)) % b == 0: 
			return (""x = "",i ,"", y = "", 
			int((n - (i * a)) / b)) 
			return 0
		i = i + 1
	return (""No solution"") ",human
922,"def find_pair_with_highest_product(arr):
    if len(arr) < 2:
        return None
    if len(arr) == 2:
        return (arr[0], arr[1])
    
    max_product = float('-inf')
    pair = (0, 0)

    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            current_product = arr[i] * arr[j]
            if current_product > max_product:
                max_product = current_product
                pair = (arr[i], arr[j])

    return pair",lm
117,"def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return (str(res)) ",human
161,"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result",human
785,"def convert_tuple_string_to_integer_tuple(tuple_str):
    return tuple(map(int, tuple_str.strip(""()"").split("","")))",lm
928,"def convert_date_format(date_str):
    yyyy, mm, dd = date_str.split('-')
    return f'{dd}-{mm}-{yyyy}'",lm
968,"import numpy as np
from scipy.optimize import minimize_scalar

def find_maximum_periodic(func, period, start=0, end=None):
    if end is None:
        end = start + period
    
    # Defining the negative of the function for minimization (to find maxima)
    neg_func = lambda x: -func(x)
    
    # Using scipy's minimize_scalar function over the bounded period of the function
    result = minimize_scalar(neg_func, bounds=(start, end), method='bounded')
    
    # Returning the maximum value found (negated back)
    return -result.fun",lm
454,"import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
931,"def sum_of_series(n):
    return sum(i**3 for i in range(1, n+1))",lm
331,"def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  ",human
713,"def check_valid_tuple(input_tuple):
    return all(type(item) in [int, float, str] for item in input_tuple)",lm
51,"def is_equilateral_triangle(side1, side2, side3):
    if side1 == side2 and side2 == side3:
        print(""The triangle is equilateral."")
    else:
        print(""The triangle is not equilateral."")",lm
533,"def remove_datatype(test_tuple, data_type):
  res = []
  for ele in test_tuple:
    if not isinstance(ele, data_type):
      res.append(ele)
  return (res) ",human
881,"def sum_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even+first_odd)",human
106,"def add_list_to_tuples(the_list, the_tuples):
    return [(t[0], t[1] + the_list) for t in the_tuples]",lm
5,"def ways_to_fill_board(n):
    a, b = 1, 0
    for _ in range(n):
        a, b = b, a + b
    return b",lm
223,"def is_majority_element(arr, n):
    mid_index = n // 2
    target = arr[mid_index]
    count = 0
    for num in arr:
        if num == target:
            count += 1
    return count > n // 2",lm
385,"def perrin(n):
    if n == 0:
        return 3
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    else:
        return perrin(n - 2) + perrin(n - 3)",lm
506,"def permutation_coefficient(n, k): 
	P = [[0 for i in range(k + 1)] 
			for j in range(n + 1)] 
	for i in range(n + 1): 
		for j in range(min(i, k) + 1): 
			if (j == 0): 
				P[i][j] = 1
			else: 
				P[i][j] = P[i - 1][j] + ( 
						j * P[i - 1][j - 1]) 
			if (j < k): 
				P[i][j + 1] = 0
	return P[n][k] ",human
81,"def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ",human
42,"def sum_of_repeated_elements(arr):
    element_count = {}
    for element in arr:
        if element in element_count:
            element_count[element] += 1
        else:
            element_count[element] = 1
    
    return sum(element * count for element, count in element_count.items() if count > 1)",lm
704,"def harmonic_sum(n):
    if n == 1:
        return 1
    else:
        return 1 / n + harmonic_sum(n - 1)",lm
330,"import re
def find_char(text):
  return (re.findall(r""\b\w{3,5}\b"", text))",human
655,"def sum_of_fifth_power(n):
    return sum([i**5 for i in range(1, n+1)])",lm
70,"def check_tuples_length(*tuples):
    if not tuples:
        return False
    length = len(tuples[0])
    return all(len(t) == length for t in tuples)",lm
185,"def parabola_focus(a, b, c): 
  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))
  return focus",human
452,"def calculate_loss(amount):
    if amount < 0:
        return -amount
    else:
        return None",lm
599,"def sum_average(number):
 total = 0
 for value in range(1, number + 1):
    total = total + value
 average = total / number
 return (total,average)",human
826,"def triangle_type(a, b, c):
    if a == b == c:
        return ""Equilateral""
    elif a == b or b == c or a == c:
        return ""Isosceles""
    else:
        return ""Scalene""",lm
573,"def product_of_unique_numbers(lst):
    unique_numbers = set(lst)
    product = 1
    for number in unique_numbers:
        product *= number
    return product",lm
890,"def find_extra(arr1, arr2):
    index = -1
    for i in range(len(arr2)):
        if arr1[i] != arr2[i]:
            index = i
            break
    if index == -1:
        index = len(arr1) - 1
    return index",lm
917,"import re

def find_sequences(text):
    return re.findall(r'[A-Z][a-z]+', text)",lm
857,"def list_individual_strings(strings):
    return list(map(list, strings))",lm
711,"def product_Equal(n): 
    if n < 10: 
        return False
    prodOdd = 1; prodEven = 1
    while n > 0: 
        digit = n % 10
        prodOdd *= digit 
        n = n//10
        if n == 0: 
            break; 
        digit = n % 10
        prodEven *= digit 
        n = n//10
    if prodOdd == prodEven: 
        return True
    return False",human
805,"def max_sum_list(lists):
 return max(lists, key=sum)",human
838,"def min_swaps_to_equal(s1, s2):
    if len(s1) != len(s2) or s1.count('0') != s2.count('0') or s1.count('1') != s2.count('1'):
        return -1
    swap_count = 0
    for i in range(len(s1)):
        if s1[i] != s2[i]:
            swap_count += 1
    return swap_count // 2",lm
289,"def calculate_odd_days(year):
    if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
        # Leap year
        return 2
    else:
        # Non-leap year
        return 1",lm
902,"from collections import Counter
def add_dict(d1,d2):
   add_dict = Counter(d1) + Counter(d2)
   return add_dict",human
461,"def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr",human
508,"def check_common_elements_order(list1, list2):
    common_elements = [element for element in list1 if element in list2]
    filtered_list2 = [element for element in list2 if element in common_elements]

    return common_elements == filtered_list2",lm
72,"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False",human
5,"def count_ways(n): 
	A = [0] * (n + 1) 
	B = [0] * (n + 1) 
	A[0] = 1
	A[1] = 0
	B[0] = 0
	B[1] = 1
	for i in range(2, n+1): 
		A[i] = A[i - 2] + 2 * B[i - 1] 
		B[i] = A[i - 1] + B[i - 2] 
	return A[n] ",human
661,"def max_sum_no_three_consecutive(arr):
    n = len(arr)
    if n == 0:
        return 0
    if n == 1:
        return arr[0]
    if n == 2:
        return arr[0] + arr[1]
    
    dp = [0] * n
    dp[0] = arr[0]
    dp[1] = arr[0] + arr[1]
    dp[2] = max(dp[1], max(arr[0] + arr[2], arr[1] + arr[2]))
    
    for i in range(3, n):
        dp[i] = max(dp[i-1], max(dp[i-2] + arr[i], dp[i-3] + arr[i-1] + arr[i]))
    
    return dp[-1]",lm
436,"def print_negative_numbers(lst):
    for num in lst:
        if num < 0:
            print(num)",lm
48,"def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)",human
308,"def find_largest_products(list1, list2, n):
    from heapq import nlargest
    products = [x * y for x in list1 for y in list2]
    return nlargest(n, products)",lm
955,"def is_abundant(n):
    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctrsum > n",human
36,"def find_Nth_Digit(p,q,N) :  
    while (N > 0) : 
        N -= 1;  
        p *= 10;  
        res = p // q;  
        p %= q;  
    return res;  ",human
677,"def validity_triangle(a,b,c):
 total = a + b + c
 if total == 180:
    return True
 else:
    return False",human
589,"def find_perfect_squares(start, end):
    perfect_squares = []
    for number in range(start, end + 1):
        root = number ** 0.5
        if root.is_integer():
            perfect_squares.append(number)
    return perfect_squares",lm
639,"def sample_nam(sample_names):
  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))
  return len(''.join(sample_names))",human
197,"def find_exponentio(test_tup1, test_tup2):
  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res)
",human
932,"def remove_duplic_list(l):
    temp = []
    for x in l:
        if x not in temp:
            temp.append(x)
    return temp",human
338,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n):
        for j in range(1,n-i+1): 
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ",human
735,"def toggle_bits_except_first_last(number):
    # Calculating the number of bits in 'number'
    num_bits = number.bit_length()
    
    # Generating the mask: set all bits to 1 except the first and the last bit
    # First bit is 1 << (num_bits - 1), last bit is 1, 
    # so toggling all bits except these gives: ((1 << num_bits) - 1) ^ ((1 << (num_bits - 1)) | 1)
    mask = ((1 << num_bits) - 1) ^ ((1 << (num_bits - 1)) | 1)
    
    # Toggling the bits of 'number' except the first and the last bit
    toggled_number = number ^ mask
    
    return toggled_number",lm
770,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n + 1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j)   
    return sm ",human
203,"def hamming_Distance(n1,n2) : 
    x = n1 ^ n2  
    setBits = 0
    while (x > 0) : 
        setBits += x & 1
        x >>= 1
    return setBits  ",human
871,"def are_rotations(str1, str2):
    if len(str1) != len(str2):
        return False
    return str2 in str1 + str1",lm
930,"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return ('Found a match!')
        else:
                return ('Not matched!')",human
347,"def count_squares(length, width):
    count = 0
    for i in range(1, min(length, width)+1):
        count += (length - i + 1) * (width - i + 1)
    return count",lm
103,"def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",human
901,"def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i",human
331,"def count_unset_bits(n):
    unset_bits = 0
    while n > 0:
        if not n & 1:
            unset_bits += 1
        n = n >> 1
    return unset_bits",lm
415,"def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    ",human
503,"def add_consecutive_numbers(input_list):
    return [input_list[i] + input_list[i+1] for i in range(len(input_list) - 1)]",lm
956,"import re
def split_list(text):
  return (re.findall('[A-Z][^A-Z]*', text))",human
647,"def split_at_uppercase(s):
    import re
    return re.findall('.[^A-Z]*', s)",lm
946,"from collections import Counter 
def most_common_elem(s,a):
  most_common_elem=Counter(s).most_common(a)
  return most_common_elem",human
718,"def alternate_elements(input_list):
    return input_list[::2]",lm
878,"def check_tuples(test_tuple, K):
  res = all(ele in K for ele in test_tuple)
  return (res) ",human
912,"def binomial_coeff(n, k): 
	C = [[0 for j in range(k + 1)] 
			for i in range(n + 1)] 
	for i in range(0, n + 1): 
		for j in range(0, min(i, k) + 1): 
			if (j == 0 or j == i): 
				C[i][j] = 1
			else: 
				C[i][j] = (C[i - 1][j - 1] 
							+ C[i - 1][j]) 
	return C[n][k] 
def lobb_num(n, m): 
	return (((2 * m + 1) *
		binomial_coeff(2 * n, m + n)) 
					/ (m + n + 1))",human
640,"def remove_parentheses(s):
    result = ''
    depth = 0
    for char in s:
        if char == '(':
            depth += 1
        elif char == ')' and depth:
            depth -= 1
        elif depth == 0:
            result += char
    return result",lm
14,"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ",human
720,"def add_dict_to_tuple(test_tup, test_dict):
  test_tup = list(test_tup)
  test_tup.append(test_dict)
  test_tup = tuple(test_tup)
  return (test_tup) ",human
353,"def remove_column(nested_list, col):
    for row in nested_list:
        if col < len(row):
            row.pop(col)
    return nested_list",lm
10,"def get_n_smallest_items(data, n):
    return sorted(data)[:n]",lm
40,"from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result",human
245,"def max_sum(arr, n): 
	MSIBS = arr[:] 
	for i in range(n): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, n + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float(""-Inf"") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum",human
838,"def min_Swaps(s1,s2) :  
    c0 = 0; c1 = 0;  
    for i in range(len(s1)) :  
        if (s1[i] == '0' and s2[i] == '1') : 
            c0 += 1;    
        elif (s1[i] == '1' and s2[i] == '0') : 
            c1 += 1;  
    result = c0 // 2 + c1 // 2;  
    if (c0 % 2 == 0 and c1 % 2 == 0) : 
        return result;  
    elif ((c0 + c1) % 2 == 0) : 
        return result + 2;  
    else : 
        return -1;  ",human
50,"def find_min_length_list(lists):
    return min(lists, key=lambda x: len(x))",lm
863,"def longest_consecutive_subsequence(arr):
    if not arr:
        return 0
    s = set(arr)
    longest_streak = 0
    for num in s:
        if num - 1 not in s:
            current_num = num
            current_streak = 1
            while current_num + 1 in s:
                current_num += 1
                current_streak += 1
            longest_streak = max(longest_streak, current_streak)
    return longest_streak",lm
384,"def frequency_Of_Smallest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] < mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ",human
82,"def sphere_volume(radius):
    pi = 3.141592653589793
    return (4/3) * pi * (radius ** 3)",lm
750,"def add_tuple(test_list, test_tup):
  test_list += test_tup
  return (test_list) ",human
361,"def remove_empty_lists(list_of_lists):
    return [lst for lst in list_of_lists if lst]",lm
950,"def chinese_zodiac_sign(year):
    zodiac_animals = [""Rat"", ""Ox"", ""Tiger"", ""Rabbit"", ""Dragon"", ""Snake"", ""Horse"", ""Goat"", ""Monkey"", ""Rooster"", ""Dog"", ""Pig""]
    return zodiac_animals[(year - 4) % 12]",lm
557,"def toggle_case(s):
    return s.swapcase()",lm
47,"def last_digit_of_factorial_division(a, b):
    if a > b:
        return 0
    result = 1
    for i in range(b, a, -1):
        result = (result * i) % 10
    return result",lm
148,"def max_digit_sum_division(number):
    num_str = str(number)
    max_sum = 0
    final_split = (0, number)
    
    for i in range(1, len(num_str)):
        part1 = num_str[:i]
        part2 = num_str[i:]
        current_sum = sum(map(int, part1)) + sum(map(int, part2))
        
        if current_sum > max_sum:
            max_sum = current_sum
            final_split = (int(part1), int(part2))
    
    return final_split",lm
357,"def find_max_in_tuples(*args):
    return max(max(tup) for tup in args)",lm
57,"def largest_number(digits):
    if not digits:
        return ""Error""
    return int("""".join(sorted([str(digit) for digit in digits], reverse=True)))",lm
31,"def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result",human
481,"def is_subset_sum(set, n, sum):
    if sum == 0:
        return True
    if n == 0:
        return False
    if set[n - 1] > sum:
        return is_subset_sum(set, n - 1, sum)
    return is_subset_sum(set, n - 1, sum) or is_subset_sum(set, n - 1, sum - set[n - 1])",lm
317,"def modified_run_length_encoding(lst):
    def single_or_tuple(element):
        return element[1] if element[0] == 1 else element

    from itertools import groupby
    return [single_or_tuple((len(list(group)), key)) for key, group in groupby(lst)]",lm
427,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)",human
901,"def find_smallest_multiple(n):
    def gcd(x, y):
        while y:
            x, y = y, x % y
        return x

    def lcm(x, y):
        return x * y // gcd(x, y)

    smallest_multiple = 1
    for i in range(1, n + 1):
        smallest_multiple = lcm(smallest_multiple, i)
    return smallest_multiple",lm
873,"def fibonacci(n):
  if n == 1 or n == 2:
    return 1
  else:
    return (fibonacci(n - 1) + (fibonacci(n - 2)))",human
202,"def remove_even_characters(s):
    return ''.join([c for i, c in enumerate(s) if i % 2 != 0])",lm
230,"def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2",human
828,"def count_alpha_dig_spl(string):
  alphabets=digits = special = 0
  for i in range(len(string)):
    if(string[i].isalpha()):
        alphabets = alphabets + 1
    elif(string[i].isdigit()):
        digits = digits + 1
    else:
        special = special + 1
  return (alphabets,digits,special)   ",human
426,"def filter_odd_numbers(numbers):
    return list(filter(lambda x: x % 2 != 0, numbers))",lm
686,"def frequency_of_elements(given_list):
    frequency_dict = {}
    for element in given_list:
        if element in frequency_dict:
            frequency_dict[element] += 1
        else:
            frequency_dict[element] = 1
    return frequency_dict",lm
146,"def ascii_value_string(str1):
  for i in range(len(str1)):
   return ord(str1[i])",human
1,"R = 3
C = 3
def min_cost(cost, m, n): 
	tc = [[0 for x in range(C)] for x in range(R)] 
	tc[0][0] = cost[0][0] 
	for i in range(1, m+1): 
		tc[i][0] = tc[i-1][0] + cost[i][0] 
	for j in range(1, n+1): 
		tc[0][j] = tc[0][j-1] + cost[0][j] 
	for i in range(1, m+1): 
		for j in range(1, n+1): 
			tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] 
	return tc[m][n]",human
419,"def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum",human
256,"def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr",human
896,"def sort_list_tuples(input_list):
    return sorted(input_list, key=lambda x: x[-1])",lm
923,"def shortest_common_supersequence(str1, str2):
    m, n = len(str1), len(str2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0 or j == 0:
                dp[i][j] = i + j
            elif str1[i-1] == str2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1
    
    return dp[m][n]",lm
431,"def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result",human
854,"import heapq as hq
def raw_heap(rawheap):
  hq.heapify(rawheap)
  return rawheap",human
54,"def counting_sort(arr):
    maximum = max(arr)
    minimum = min(arr)
    range_of_elements = maximum - minimum + 1
    count = [0] * range_of_elements
    output = [0] * len(arr)

    for i in range(0, len(arr)):
        count[arr[i]-minimum] += 1

    for i in range(1, len(count)):
        count[i] += count[i-1]

    for i in range(len(arr)-1, -1, -1):
        output[count[arr[i] - minimum] - 1] = arr[i]
        count[arr[i] - minimum] -= 1

    for i in range(0, len(arr)):
        arr[i] = output[i]",lm
930,"import re

def match_string(s):
    return bool(re.match('ab*', s))",lm
71,"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums",human
210,"import re

def check_characters(string):
    pattern = re.compile(""^[A-Za-z0-9]+$"")
    return bool(pattern.match(string))",lm
255,"from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))",human
920,"def remove_tuple(test_list):
  res = [sub for sub in test_list if not all(ele == None for ele in sub)]
  return (str(res)) ",human
711,"def check_product_equal(number):
    number_str = str(number)
    odd_product = 1
    even_product = 1
    
    for i in range(len(number_str)):
        if i % 2 == 0:
            even_product *= int(number_str[i])
        else:
            odd_product *= int(number_str[i])
    
    return odd_product == even_product",lm
37,"def sort_mixed_list(mixed_list):
    return sorted(mixed_list, key=lambda x: (isinstance(x, str), x))",lm
609,"def floor_Min(A,B,N):
    x = max(B - 1,N)
    return (A*x) // B",human
865,"def ntimes_list(nums,n):
    result = map(lambda x:n*x, nums) 
    return list(result)",human
196,"def remove_tuples(test_list, K):
  res = [ele for ele in test_list if len(ele) != K]
  return (res) ",human
107,"def count_hex_numbers(start, end):
    count = 0
    for i in range(start, end + 1):
        if all(c in '0123456789ABCDEFabcdef' for c in hex(i)[2:]):
            count += 1
    return count",lm
137,"from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",human
669,"import re 
regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''
def check_IP(Ip): 
	if(re.search(regex, Ip)): 
		return (""Valid IP address"") 
	else: 
		return (""Invalid IP address"") ",human
321,"def find_demlo(s): 
	l = len(s) 
	res = """" 
	for i in range(1,l+1): 
		res = res + str(i) 
	for i in range(l-1,0,-1): 
		res = res + str(i) 
	return res 	",human
528,"def find_min_length_lists(list_of_lists):
    if not list_of_lists:
        return []
    min_length = min(len(lst) for lst in list_of_lists)
    return [lst for lst in list_of_lists if len(lst) == min_length]",lm
780,"from itertools import combinations

def find_combinations_sums(tuples_list):
    results = []
    for r in range(1, len(tuples_list)+1):
        for combo in combinations(tuples_list, r):
            sum_combination = sum([sum(tup) for tup in combo])
            results.append((combo, sum_combination))
    return results",lm
200,"def find_max_indices(nums):
    if not nums:
        return []
    max_value = max(nums)
    return [i for i, num in enumerate(nums) if num == max_value]",lm
584,"import re
def find_adverbs(text):
  for m in re.finditer(r""\w+ly"", text):
    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))",human
681,"def smallest_prime_divisor(n):
    if n <= 1:
        return None
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return i
    return n",lm
476,"def sum_largest_smallest(arr):
    if not arr:
        return None
    return min(arr) + max(arr)",lm
93,"def power(a, b):
    return a ** b",lm
29,"def find_odd_occurrences(arr):
    result = 0
    for number in arr:
        result ^= number
    return result",lm
521,"def check_isosceles(x,y,z):
  if x!=y & y!=z & z!=x:
	   return True
  else:
     return False",human
581,"def surface_area_square_pyramid(base_length, slant_height):
    base_area = base_length ** 2
    lateral_area = 4 * (0.5 * base_length * slant_height)
    total_surface_area = base_area + lateral_area
    return total_surface_area",lm
326,"def most_frequent_word(strings_list):
    word_frequency = {}
    for string in strings_list:
        words = string.split()
        for word in words:
            if word in word_frequency:
                word_frequency[word] += 1
            else:
                word_frequency[word] = 1
    max_occurrences = max(word_frequency.values())
    for word, occurrences in word_frequency.items():
        if occurrences == max_occurrences:
            return word",lm
908,"def find_fixed_point(arr, n): 
	for i in range(n): 
		if arr[i] is i: 
			return i 
	return -1",human
163,"from math import tan, pi
def area_polygon(s,l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area",human
654,"def rectangle_perimeter(length, width):
    return 2 * (length + width)",lm
139,"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter",human
605,"def prime_num(num):
  if num >=1:
   for i in range(2, num//2):
     if (num % i) == 0:
                return False
     else:
                return True
  else:
          return False",human
692,"def last_two_digits_of_factorial(n):
    if n == 0 or n == 1:
        return ""01""
    elif n == 2:
        return ""02""
    elif n == 3:
        return ""06""
    elif n == 4:
        return ""24""
    elif n == 5:
        return ""20""
    else:
        return ""00""",lm
687,"def recur_gcd(a, b):
	low = min(a, b)
	high = max(a, b)
	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return recur_gcd(low, high%low)",human
514,"def sum_tuples(tuple_list):
    return [sum(t) for t in tuple_list]",lm
790,"def check_even_indices_even_numbers(lst):
    return all(x % 2 == 0 for i, x in enumerate(lst) if i % 2 == 0)",lm
446,"from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  ",human
65,"def recursive_list_sum(data_list):
    total = 0
    for element in data_list:
        if type(element) == list:
            total += recursive_list_sum(element)
        else:
            total += element
    return total",lm
643,"import re
def text_match_wordz_middle(text):
        patterns = '\Bz\B'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
592,"def binomial_Coeff(n,k): 
    C = [0] * (k + 1); 
    C[0] = 1; # nC0 is 1 
    for i in range(1,n + 1):  
        for j in range(min(i, k),0,-1): 
            C[j] = C[j] + C[j - 1]; 
    return C[k]; 
def sum_Of_product(n): 
    return binomial_Coeff(2 * n,n - 1); ",human
865,"def print_n_times(a_list, n):
    list(map(lambda x: print(x), a_list * n))",lm
648,"def exchange_positions(lst):
    for i in range(0, len(lst)-1, 2):
        lst[i], lst[i+1] = lst[i+1], lst[i]
    return lst",lm
776,"def count_chars_with_vowel_neighbors(s):
    vowels = ""aeiouAEIOU""
    count = 0
    for i in range(1, len(s) - 1):
        if s[i-1] in vowels and s[i+1] in vowels:
            count += 1
    return count",lm
761,"import math

def calculate_arc_length(radius, angle_degrees):
    """"""
    This function takes the radius of a circle and an angle in degrees,
    and calculates the arc length of that angle in the circle.
    """"""
    angle_radians = math.radians(angle_degrees)
    arc_length = radius * angle_radians
    return arc_length",lm
671,"def setRightmostUnsetBit(n):
    if n == 0:
        return 1
    if (n & (n + 1)) == 0:
        return n
    m = 1
    while (n & m):
        m = m << 1
    return (n | m)",lm
536,"def select_nth_item(lst, n):
    return lst[n-1::n]",lm
186,"import re

def search_literals(input_string, literals):
    results = {}
    for literal in literals:
        match = re.findall(literal, input_string)
        results[literal] = match
    return results",lm
49,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    ",human
957,"def getRightmostSetBitPosition(n):
    if n == 0:
        return 0
    return (n & -n).bit_length()",lm
824,"def remove_even(l):
    for i in l:
        if i % 2 == 0:
            l.remove(i)
    return l",human
648,"from itertools import zip_longest, chain, tee
def exchange_elements(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))",human
934,"def delannoy_number(n, m):
    if n == 0 or m == 0:
        return 1
    return delannoy_number(n-1, m) + delannoy_number(n-1, m-1) + delannoy_number(n, m-1)",lm
254,"import re
def words_ae(text):
 list = re.findall(""[ae]\w+"", text)
 return list",human
710,"def access_initial_last(record):
    if not record:
        return None, None
    return record[0], record[-1]",lm
848,"def area_trapezium(base1,base2,height):
 area = 0.5 * (base1 + base2) * height
 return area",human
694,"def extract_unique_values(input_dict):
    unique_values = set()
    for value in input_dict.values():
        if isinstance(value, list):  # If the value is a list, add each element.
            unique_values.update(value)
        else:
            unique_values.add(value)
    return unique_values",lm
567,"def is_sorted(lst):
    return lst == sorted(lst)",lm
855,"def check_Even_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 0): 
        return True
    else: 
        return False",human
124,"import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle",human
945,"def tuple_to_set(t):
  s = set(t)
  return (s) ",human
624,"def is_upper(string):
  return (string.upper())",human
318,"def max_volume_with_given_sum(s):
    side = s / 3
    return side ** 3",lm
789,"def perimeter_of_regular_polygon(number_of_sides, side_length):
    return number_of_sides * side_length",lm
676,"import re

def remove_non_alphanumeric(s):
    return re.sub(r'[^a-zA-Z0-9]', '', s)",lm
171,"import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter",human
839,"def sort_tuple(tup): 
	n = len(tup) 
	for i in range(n): 
		for j in range(n-i-1): 
			if tup[j][0] > tup[j + 1][0]: 
				tup[j], tup[j + 1] = tup[j + 1], tup[j] 
	return tup",human
383,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n    
    while(temp > 0 ) : 
        if (count % 2 == 0) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ",human
367,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False",human
712,"import itertools
def remove_duplicate(list1):
 list.sort(list1)
 remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))
 return remove_duplicate",human
449,"def is_valid_triangle(point1, point2, point3):
    def area(x1, y1, x2, y2, x3, y3):
        return 0.5 * abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))
    
    # Each point is assumed to be a tuple (x, y)
    x1, y1 = point1
    x2, y2 = point2
    x3, y3 = point3
    
    # A triangle is valid if the area formed by the points is not 0
    return area(x1, y1, x2, y2, x3, y3) > 0",lm
952,"def ncr_mod_p(n, r, p):
    if r == 0:
        return 1
    
    numer = 1
    denom = 1
    for i in range(r):
        numer = (numer * (n - i)) % p
        denom = (denom * (i + 1)) % p
    
    return (numer * pow(denom, p-2, p)) % p",lm
45,"def find_gcd(arr):
    from math import gcd
    arr_gcd = arr[0]
    for num in arr[1:]:
        arr_gcd = gcd(arr_gcd, num)
    return arr_gcd",lm
972,"def concatenate_nested(test_tup1, test_tup2):
  res = test_tup1 + test_tup2
  return (res) ",human
377,"def remove_char(s, char_to_remove):
    return s.replace(char_to_remove, '')",lm
487,"def sort_tuples(lst):
    return sorted(lst, key=lambda x: x[-1])",lm
869,"def remove_list_range(list1, leftrange, rigthrange):
   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]
   return result",human
734,"def sum_of_products_subarrays(arr):
    result = 0
    n = len(arr)
    for i in range(n):
        for j in range(i, n):
            product = 1
            for k in range(i, j + 1):
                product *= arr[k]
            result += product
    return result",lm
435,"def last_Digit(n) :
    return (n % 10) ",human
916,"def find_triplet_array(A, arr_size, sum): 
	for i in range( 0, arr_size-2): 
		for j in range(i + 1, arr_size-1): 
			for k in range(j + 1, arr_size): 
				if A[i] + A[j] + A[k] == sum: 
					return  A[i],A[j],A[k] 
					return True
	return False",human
126,"def sum_of_common_divisors(a, b):
    def find_divisors(n):
        return [i for i in range(1, n+1) if n % i == 0]
    
    divisors_a = find_divisors(a)
    divisors_b = find_divisors(b)

    common_divisors = set(divisors_a).intersection(set(divisors_b))

    return sum(common_divisors)",lm
26,"def check_tuple_list_elements(tuples_list, k):
    return all(len(t) == k for t in tuples_list)",lm
898,"def extract_elements(lst, count):
    result = []
    for i in range(len(lst) - count + 1):
        result.append(lst[i:i+count])
    return result",lm
634,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n + 1): 
        j = 2*i; 
        sum = sum + (j*j*j*j); 
    return sum; ",human
633,"def pair_OR_Sum(arr,n) : 
    ans = 0 
    for i in range(0,n) :    
        for j in range(i + 1,n) :   
            ans = ans + (arr[i] ^ arr[j])          
    return ans ",human
178,"import re
def string_literals(patterns,text):
  for pattern in patterns:
     if re.search(pattern,  text):
       return ('Matched!')
     else:
       return ('Not Matched!')",human
482,"import re

def find_sequences(input_string):
    return re.findall(r'[A-Z][a-z]+', input_string)",lm
158,"def min_operations_to_equal(nums, k):
    nums.sort()
    n = len(nums)
    prefix_sum = [0] * (n + 1)
    
    for i in range(1, n + 1):
        prefix_sum[i] = prefix_sum[i - 1] + nums[i - 1]
    
    min_ops = float('inf')
    
    for i in range(n):
        total = prefix_sum[n] - prefix_sum[i] - (n - i) * nums[i]
        if total <= k:
            min_ops = min(min_ops, i + max(0, k - total))
        else:
            break
    
    return min_ops",lm
477,"def is_lower(string):
  return (string.lower())",human
560,"def union_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1 + test_tup2))
  return (res) ",human
766,"def pair_wise(l1):
    temp = []
    for i in range(len(l1) - 1):
        current_element, next_element = l1[i], l1[i + 1]
        x = (current_element, next_element)
        temp.append(x)
    return temp",human
394,"def is_distinct(t):
    return len(t) == len(set(t))",lm
448,"def sum_perrin_numbers(n):
    if n == 0:
        return 0
    elif n == 1:
        return 3
    elif n == 2:
        return 2
        
    p0, p1, p2 = 3, 0, 2
    sum_perrin = 5  # Sum of the first three Perrin numbers (3 + 0 + 2)
    
    for i in range(3, n):
        p = p0 + p1
        sum_perrin += p
        p0, p1, p2 = p1, p2, p
    return sum_perrin",lm
203,"def hamming_distance(x, y):
    return bin(x ^ y).count('1')",lm
349,"def is_binary_string(s):
    return all(char in '01' for char in s)",lm
19,"def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ",human
320,"def sum_difference(n):
    sumofsquares = 0
    squareofsum = 0
    for num in range(1, n+1):
        sumofsquares += num * num
        squareofsum += num
    squareofsum = squareofsum ** 2
    return squareofsum - sumofsquares",human
110,"def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) ",human
102,"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))",human
862,"def find_n_most_common_words(text, n):
    from collections import Counter
    words = text.split()
    count = Counter(words)
    return count.most_common(n)",lm
954,"def calculate_profit(amount):
    if amount > 0:
        return amount
    else:
        return None",lm
784,"def product_of_first_even_odd(lst):
    even, odd = None, None
    for num in lst:
        if even is None and num % 2 == 0:
            even = num
        if odd is None and num % 2 != 0:
            odd = num
        if even is not None and odd is not None:
            break
    if even is not None and odd is not None:
        return even * odd
    else:
        return None",lm
910,"import datetime
def check_date(m, d, y):
    try:
        m, d, y = map(int, (m, d, y))
        datetime.date(y, m, d)
        return True
    except ValueError:
        return False",human
75,"def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) ",human
603,"def get_ludic(n):
	ludics = []
	for i in range(1, n + 1):
		ludics.append(i)
	index = 1
	while(index != len(ludics)):
		first_ludic = ludics[index]
		remove_index = index + first_ludic
		while(remove_index < len(ludics)):
			ludics.remove(ludics[remove_index])
			remove_index = remove_index + first_ludic - 1
		index += 1
	return ludics",human
897,"def word_in_sentence(word, sentence):
    return word in sentence.split()",lm
685,"def sum_Of_Primes(n): 
    prime = [True] * (n + 1)  
    p = 2
    while p * p <= n: 
        if prime[p] == True:  
            i = p * 2
            while i <= n: 
                prime[i] = False
                i += p 
        p += 1    
    sum = 0
    for i in range (2,n + 1): 
        if(prime[i]): 
            sum += i 
    return sum",human
771,"from collections import deque
def check_expression(exp):
    if len(exp) & 1:
        return False
    stack = deque()
    for ch in exp:
        if ch == '(' or ch == '{' or ch == '[':
            stack.append(ch)
        if ch == ')' or ch == '}' or ch == ']':
            if not stack:
                return False
            top = stack.pop()
            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):
                return False
    return not stack",human
754,"def find_common_indexes(list1, list2, list3):
    common_indexes = []
    for i in range(min(len(list1), len(list2), len(list3))):
        if list1[i] == list2[i] == list3[i]:
            common_indexes.append(i)
    return common_indexes",lm
271,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ",human
588,"def big_diff(nums):
     diff= max(nums)-min(nums)
     return diff",human
182,"import re
def find_character(string):
  uppercase_characters = re.findall(r""[A-Z]"", string) 
  lowercase_characters = re.findall(r""[a-z]"", string) 
  numerical_characters = re.findall(r""[0-9]"", string) 
  special_characters = re.findall(r""[, .!?]"", string) 
  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",human
636,"def are_roots_reciprocal(a, b, c):
    if a == 0:
        return False
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return False
    root1 = (-b + discriminant**0.5) / (2*a)
    root2 = (-b - discriminant**0.5) / (2*a)
    if root1 == 0 or root2 == 0:
        return False
    return abs(root1 * root2) == 1",lm
808,"def contains_k(tuples_list, k):
    return any(k in tup for tup in tuples_list)",lm
893,"def get_last_elements(sublists):
    return [sublist[-1] for sublist in sublists]",lm
297,"def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ",human
96,"def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x",human
339,"def max_occuring_divisor(start, end):
    max_count = 0
    max_divisor = 1
    for i in range(1, end+1):
        count = 0
        for j in range(start, end+1):
            if j % i == 0:
                count += 1
        if count > max_count:
            max_count = count
            max_divisor = i
    return max_divisor",lm
700,"def count_elements_in_range(lst, lower, upper):
    return sum(lower <= x <= upper for x in lst)",lm
25,"def product_non_repeated(arr):
    from collections import Counter
    
    # Count the occurrence of each element in the array
    elem_frequency = Counter(arr)
    
    # Initialize the product result as 1 (since 1 is the identity value for multiplication)
    product = 1
    
    # Iterate through the unique elements and their counts
    for elem, count in elem_frequency.items():
        # If an element is not repeated (i.e., count is 1), multiply it with the product
        if count == 1:
            product *= elem
            
    return product",lm
149,"def longest_subseq_with_diff_one(arr, n): 
	dp = [1 for i in range(n)] 
	for i in range(n): 
		for j in range(i): 
			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): 
				dp[i] = max(dp[i], dp[j]+1) 
	result = 1
	for i in range(n): 
		if (result < dp[i]): 
			result = dp[i] 
	return result",human
845,"import math 
def find_Digits(n): 
    if (n < 0): 
        return 0;
    if (n <= 1): 
        return 1; 
    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); 
    return math.floor(x) + 1; ",human
912,"from math import comb

def lobb_number(n, m):
    return ((2 * m + 1) * comb(2 * n, m + n)) // (m + n + 1)",lm
860,"import re 
regex = '[a-zA-z0-9]$'
def check_alphanumeric(string): 
	if(re.search(regex, string)): 
		return (""Accept"") 
	else: 
		return (""Discard"") ",human
575,"def count_no (A,N,L,R): 
    count = 0
    for i in range (L,R + 1): 
        if (i % A != 0): 
            count += 1
        if (count == N): 
            break
    return (i) ",human
732,"import re
def replace_specialchar(text):
 return (re.sub(""[ ,.]"", "":"", text))",human
117,"def convert_to_float(lst):
    converted_lst = []
    for element in lst:
        try:
            converted_lst.append(float(element))
        except ValueError:
            converted_lst.append(element)
    return converted_lst",lm
12,"def sort_matrix_by_row_sum(matrix):
    return sorted(matrix, key=sum)",lm
937,"from collections import Counter 
def max_char(str1):
    temp = Counter(str1) 
    max_char = max(temp, key = temp.get)
    return max_char",human
464,"def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result",human
228,"def check_bits_unset(number, start, end):
    for i in range(start, end + 1):
        if (number & (1 << i)) != 0:
            return False
    return True",lm
554,"def find_odd_numbers(input_list):
    return [n for n in input_list if isinstance(n, int) and n % 2 == 1]",lm
4,"import heapq

def find_largest_numbers(nums, k):
    if k >= len(nums):
        return max(nums) if nums else None
    return heapq.nlargest(k, nums)",lm
171,"def perimeter_of_pentagon(side_length):
    return 5 * side_length",lm
13,"def count_most_common_words(word_dict):
    max_count = max(word_dict.values())
    most_common_words = [word for word, count in word_dict.items() if count == max_count]
    return most_common_words",lm
385,"def get_perrin(n):
  if (n == 0):
    return 3
  if (n == 1):
    return 0
  if (n == 2):
    return 2 
  return get_perrin(n - 2) + get_perrin(n - 3)",human
794,"import re
def text_starta_endb(text):
        patterns = 'a.*?b$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
324,"def sum_of_alternate_chains(tuples_list):
    sum_even, sum_odd = 0, 0
    for i in range(len(tuples_list)):
        if i % 2 == 0:
            sum_even += sum(tuples_list[i])
        else:
            sum_odd += sum(tuples_list[i])
    return sum_even, sum_odd",lm
420,"def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum",human
484,"def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) ",human
302,"def find_most_significant_set_bit(n):
    if n == 0:
        return 0
    msb = 1
    while n > 1:
        n = n >> 1
        msb = msb << 1
    return msb",lm
187,"def longest_common_subsequence(seq1, seq2):
    m, n = len(seq1), len(seq2)
    dp = [[0] * (n+1) for _ in range(m+1)]
    
    for i in range(1, m+1):
        for j in range(1, n+1):
            if seq1[i-1] == seq2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    
    lcs_length = dp[m][n]
    lcs = """"
    while m > 0 and n > 0:
        if seq1[m-1] == seq2[n-1]:
            lcs = seq1[m-1] + lcs
            m -= 1
            n -= 1
        elif dp[m-1][n] > dp[m][n-1]:
            m -= 1
        else:
            n -= 1
    
    return lcs",lm
556,"def count_odd_xor_pairs(arr):
    odd_count, even_count = 0, 0
    for num in arr:
        if num % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return odd_count * even_count",lm
89,"def closest_num(N):
  return (N - 1)",human
596,"import sys 
def tuple_size(tuple_list):
  return (sys.getsizeof(tuple_list)) ",human
355,"import math

def count_rectangles_in_circle(radius):
    count = 0
    for width in range(1, int(radius) + 1):
        for height in range(1, int(radius) + 1):
            if math.sqrt(width ** 2 + height ** 2) <= radius:
                count += 1
    return count",lm
356,"def third_angle(angle1, angle2):
    return 180 - (angle1 + angle2)",lm
90,"def longest_word_length(s):
    return max(len(word) for word in s.split())",lm
163,"import math

def area_of_regular_polygon(num_sides, side_length):
    return (num_sides * side_length ** 2) / (4 * math.tan(math.pi / num_sides))",lm
416,"def maxSumDivThree(n):
    if n == 0 or n == 1 or n == 2:
        return n
    else:
        return max(n, maxSumDivThree(n // 3) + maxSumDivThree(n // 3 + n % 3) + maxSumDivThree(n // 3 - 1 + n % 3))",lm
283,"def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True",human
890,"def find_Extra(arr1,arr2,n) : 
    for i in range(0, n) : 
        if (arr1[i] != arr2[i]) : 
            return i 
    return n ",human
28,"def binomial_coefficient(n, k):
    if k == 0 or k == n:
        return 1
    return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)",lm
823,"import re 
def check_substring(string, sample) : 
  if (sample in string): 
      y = ""\A"" + sample 
      x = re.search(y, string) 
      if x : 
          return (""string starts with the given substring"") 
      else : 
          return (""string doesnt start with the given substring"") 
  else : 
      return (""entered string isnt a substring"")",human
262,"def split_list(input_list, length_first_part):
    return input_list[:length_first_part], input_list[length_first_part:]",lm
954,"def profit_amount(actual_cost,sale_amount): 
 if(actual_cost > sale_amount):
    amount = actual_cost - sale_amount
    return amount
 else:
    return None",human
918,"def coin_change(S, m, n): 
    table = [[0 for x in range(m)] for x in range(n+1)] 
    for i in range(m): 
        table[0][i] = 1
    for i in range(1, n+1): 
        for j in range(m): 
            x = table[i - S[j]][j] if i-S[j] >= 0 else 0
            y = table[i][j-1] if j >= 1 else 0 
            table[i][j] = x + y   
    return table[n][m-1] ",human
671,"import math 
def get_Pos_Of_Right_most_Set_Bit(n): 
    return int(math.log2(n&-n)+1)   
def set_Right_most_Unset_Bit(n): 
    if (n == 0): 
        return 1
    if ((n & (n + 1)) == 0):     
        return n 
    pos = get_Pos_Of_Right_most_Set_Bit(~n)      
    return ((1 << (pos - 1)) | n) ",human
811,"def check_identical(test_list1, test_list2):
  res = test_list1 == test_list2
  return (res) ",human
430,"def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix",human
256,"def count_primes(n):
    if n < 3:
        return 0
    primes = [True] * n
    primes[0] = primes[1] = False
    for i in range(2, int(n**0.5) + 1):
        if primes[i]:
            primes[i*i:n:i] = [False] * ((n-1-i*i)//i + 1)
    return sum(primes)",lm
678,"def remove_spaces(input_string):
    return input_string.replace("" "", """")",lm
724,"def sum_of_digits(base, power):
    result = base ** power
    return sum(int(digit) for digit in str(result))",lm
77,"def difference_between_sum_of_even_and_odd_digits(n):
    even_sum = 0
    odd_sum = 0
    while n > 0:
        digit = n % 10
        if digit % 2 == 0:
            even_sum += digit
        else:
            odd_sum += digit
        n = n // 10
    return even_sum - odd_sum",lm
444,"def trim_tuples_by_k(tuple_list, k):
    return [t[k:-k] for t in tuple_list]",lm
472,"def are_consecutive(lst):
    if not lst:
        return False
    lst_sorted = sorted(lst)
    return all(lst_sorted[i] + 1 == lst_sorted[i + 1] for i in range(len(lst_sorted) - 1))",lm
410,"def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val",human
630,"def adjac(ele, sub = []): 
  if not ele: 
     yield sub 
  else: 
     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) 
                for idx in adjac(ele[1:], sub + [j])] 
def get_coordinates(test_tup):
  res = list(adjac(test_tup))
  return (res) ",human
325,"def get_Min_Squares(n):
    if n <= 3:
        return n;
    res = n 
    for x in range(1,n + 1):
        temp = x * x;
        if temp > n:
            break
        else:
            res = min(res,1 + get_Min_Squares(n  - temp)) 
    return res;",human
184,"def greater_specificnum(list,num):
 greater_specificnum=all(x >= num for x in list)
 return greater_specificnum",human
403,"import re

def is_valid_url(url):
    pattern = re.compile(
        r'^(?:http|ftp)s?://'  # http:// or https://
        r'(?:\S+(?::\S*)?@)?'  # user and pass
        r'(?:'
        r'(?P<private_ip>'
        r'10(?:\.\d{1,3}){3}|'
        r'127(?:\.\d{1,3}){3}|'
        r'169\.254(?:\.\d{1,3}){2}|'
        r'192\.168(?:\.\d{1,3}){2}|'
        r'172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2}'
        r')|'
        r'(?:(?!10(?:\.\d{1,3}){3})'
        r'(?!127(?:\.\d{1,3}){3})'
        r'(?!169\.254(?:\.\d{1,3}){2})'
        r'(?!192\.168(?:\.\d{1,3}){2})'
        r'(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})'
        r'(?:\d{1,3}\.){3}\d{1,3}'
        r')|'
        r'(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+'
        r'(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*'
        r'(?:\.(?:[a-z\u00a1-\uffff]{2,}))'
        r')'
        r'(?::\d{2,5})?'  # port
        r'(?:/\S*)?$',  # resource
        re.IGNORECASE
    )
    return re.match(pattern, url) is not None",lm
825,"def access_elements(lst, indices):
    return [lst[i] for i in indices]",lm
94,"def index_of_min_value_record(records):
    if not records:
        return -1  # return -1 if records are empty
    
    min_index = 0
    min_value = records[0][1]
    
    for i, record in enumerate(records):
        if record[1] < min_value:
            min_index = i
            min_value = record[1]
    
    return min_index",lm
341,"def set_to_tuple(s):
  t = tuple(sorted(s))
  return (t)",human
63,"def max_difference_in_pairs(tuple_list):
    max_diff = 0
    for pair in tuple_list:
        current_diff = abs(pair[0] - pair[1])
        max_diff = max(max_diff, current_diff)
    return max_diff",lm
929,"def count_repeated_items(input_tuple):
    item_counts = {}
    for item in input_tuple:
        if item in item_counts:
            item_counts[item] += 1
        else:
            item_counts[item] = 1
    return {item: count for item, count in item_counts.items() if count > 1}",lm
363,"def add_K_element(test_list, K):
  res = [tuple(j + K for j in sub ) for sub in test_list]
  return (res) ",human
339,"def find_Divisor(x,y):  
    if (x==y): 
        return y 
    return 2",human
656,"def min_sum_absolute_differences(arr1, arr2):
    arr1.sort()
    arr2.sort()
    sum_diff = 0
    for i in range(len(arr1)):
        sum_diff += abs(arr1[i] - arr2[i])
    return sum_diff",lm
548,"def lengthOfLIS(nums):
    if not nums:
        return 0

    dp = [1] * len(nums)
    for i in range(1, len(nums)):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)
    return max(dp)",lm
206,"def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",human
807,"def first_odd(nums):
  first_odd = next((el for el in nums if el%2!=0),-1)
  return first_odd",human
546,"def last_occurence_char(string,char):
 flag = -1
 for i in range(len(string)):
     if(string[i] == char):
         flag = i
 if(flag == -1):
    return None
 else:
    return flag + 1",human
70,"def find_equal_tuple(Input, k):
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input, k):
  if find_equal_tuple(Input, k) == 1:
    return (""All tuples have same length"")
  else:
    return (""All tuples do not have same length"")",human
837,"def cube_Sum(n): 
    sum = 0   
    for i in range(0,n) : 
        sum += (2*i+1)*(2*i+1)*(2*i+1) 
    return sum",human
295,"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)",human
822,"import re
def pass_validity(p):
 x = True
 while x:  
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        return True
        x=False
        break

 if x:
    return False",human
819,"def count_consecutive_duplicates(lst):
    if not lst:
        return {}
    count = 1
    frequency = {}
    for i in range(1, len(lst)):
        if lst[i] == lst[i-1]:
            count += 1
        else:
            if count > 1:
                frequency.setdefault(lst[i-1], 0)
                frequency[lst[i-1]] += count
            count = 1
    if count > 1:
        frequency.setdefault(lst[-1], 0)
        frequency[lst[-1]] += count
    return frequency",lm
352,"def are_all_characters_unique(s):
    return len(set(s)) == len(s)",lm
846,"def find_min_platforms(arrival, departure):
    events = [(t, 1) for t in arrival] + [(t, -1) for t in departure]
    events.sort()
    
    max_platforms_needed = 0
    current_platforms = 0
    
    for _, event in events:
        current_platforms += event
        max_platforms_needed = max(max_platforms_needed, current_platforms)
        
    return max_platforms_needed",lm
578,"def interleave_lists(*args):
    return [element for pair in zip(*args) for element in pair]",lm
155,"def toggle_even_bits(n):
    mask = 0b10101010101010101010101010101010
    return n ^ mask",lm
911,"import heapq

def max_product_of_three(nums):
    if len(nums) < 3:
        raise ValueError(""Array must contain at least three elements."")
    
    # Find the three largest numbers and two smallest numbers using heap
    largest = heapq.nlargest(3, nums)
    smallest = heapq.nsmallest(2, nums)
    
    # The maximum product can be either the product of the three largest numbers,
    # or the product of two smallest numbers (possibly negatives) and the largest number
    return max(largest[0] * largest[1] * largest[2], smallest[0] * smallest[1] * largest[0])",lm
227,"def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest ",human
670,"def check_decreasing_trend(sequence):
    return all(sequence[i] > sequence[i+1] for i in range(len(sequence)-1))",lm
456,"def reverse_strings_in_list(string_list):
    return [s[::-1] for s in string_list]",lm
659,"def Repeat(x): 
    _size = len(x) 
    repeated = [] 
    for i in range(_size): 
        k = i + 1
        for j in range(k, _size): 
            if x[i] == x[j] and x[i] not in repeated: 
                repeated.append(x[i]) 
    return repeated ",human
109,"def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ",human
626,"def largest_triangle_in_semicircle(radius):
    return (radius**2)/2",lm
191,"def check_monthnumber(monthname3):
  if monthname3 ==""April"" or monthname3== ""June"" or monthname3== ""September"" or monthname3== ""November"":
    return True
  else:
    return False",human
871,"def are_Rotations(string1,string2): 
    size1 = len(string1) 
    size2 = len(string2) 
    temp = '' 
    if size1 != size2: 
        return False
    temp = string1 + string1 
    if (temp.count(string2)> 0): 
        return True
    else: 
        return False",human
820,"def has_28_days(month):
    if month == 2:
        return True
    else:
        return False",lm
296,"def count_inversions(arr):
    def merge_sort(arr, temp_arr, left, right):
        inv_count = 0
        if left < right:
            mid = (left + right) // 2
            inv_count += merge_sort(arr, temp_arr, left, mid)
            inv_count += merge_sort(arr, temp_arr, mid + 1, right)
            inv_count += merge(arr, temp_arr, left, mid, right)
        return inv_count

    def merge(arr, temp_arr, left, mid, right):
        i = left
        j = mid + 1
        k = left
        inv_count = 0
        while i <= mid and j <= right:
            if arr[i] <= arr[j]:
                temp_arr[k] = arr[i]
                k += 1
                i += 1
            else:
                temp_arr[k] = arr[j]
                inv_count += (mid - i + 1)
                k += 1
                j += 1
        while i <= mid:
            temp_arr[k] = arr[i]
            k += 1
            i += 1
        while j <= right:
            temp_arr[k] = arr[j]
            k += 1
            j += 1
        for loop_var in range(left, right + 1):
            arr[loop_var] = temp_arr[loop_var]
        return inv_count

    return merge_sort(arr, [0]*len(arr), 0, len(arr)-1)",lm
73,"import re

def split_string_with_multiple_delimiters(s, delimiters):
    regex_pattern = '|'.join(map(re.escape, delimiters))
    return re.split(regex_pattern, s)",lm
95,"def find_min_length_sublist(lst):
    if not lst or any(not isinstance(sublist, list) for sublist in lst):
        return -1  # Returning -1 to indicate an error if the input list is empty or contains non-list items
    return min(len(sublist) for sublist in lst)",lm
54,"def counting_sort(my_list):
    max_value = 0
    for i in range(len(my_list)):
        if my_list[i] > max_value:
            max_value = my_list[i]
    buckets = [0] * (max_value + 1)
    for i in my_list:
        buckets[i] += 1
    i = 0
    for j in range(max_value + 1):
         for a in range(buckets[j]):
             my_list[i] = j
             i += 1
    return my_list",human
690,"def multiply_consecutive_numbers(lst):
    if len(lst) < 2:
        return []
    
    result = []
    for i in range(len(lst) - 1):
        product = lst[i] * lst[i + 1]
        result.append(product)
    
    return result",lm
