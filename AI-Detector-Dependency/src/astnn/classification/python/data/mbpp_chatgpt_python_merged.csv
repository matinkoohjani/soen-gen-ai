idx,code,label
179,"def is_num_keith(x): 
	terms = [] 
	temp = x 
	n = 0 
	while (temp > 0): 
		terms.append(temp % 10) 
		temp = int(temp / 10) 
		n+=1 
	terms.reverse() 
	next_term = 0 
	i = n 
	while (next_term < x): 
		next_term = 0 
		for j in range(1,n+1): 
			next_term += terms[i - j] 
		terms.append(next_term) 
		i+=1 
	return (next_term == x) ",human
669,"import re

def validate_ip_address(ip_address):
    pattern = r""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""
    if re.match(pattern, ip_address):
        return True
    else:
        return False",lm
288,"def modular_inverse(arr, N, P):
	current_element = 0
	for i in range(0, N):
		if ((arr[i] * arr[i]) % P == 1):
			current_element = current_element + 1
	return current_element",human
520,"def find_lcm(arr):
    if len(arr) == 0:
        return None
    
    lcm = arr[0]
    for i in range(1, len(arr)):
        num1 = lcm
        num2 = arr[i]
        while True:
            if num1 % num2 == 0:
                lcm = num1
                break
            num1 += lcm
    
    return lcm",lm
799,"def left_rotate_bits(number, rotations):
    return (number << rotations) | (number >> (32 - rotations))",lm
629,"def Split(list): 
    ev_li = [] 
    for i in list: 
        if (i % 2 == 0): 
            ev_li.append(i)  
    return ev_li",human
527,"def find_pairs(arr, target):
    pairs = []
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[i] + arr[j] == target:
                pairs.append((arr[i], arr[j]))
    return pairs",lm
965,"def camel_to_snake(camel_case_string):
    snake_case_string = ''
    for index, char in enumerate(camel_case_string):
        if char.isupper():
            if index != 0:
                snake_case_string += '_'
            snake_case_string += char.lower()
        else:
            snake_case_string += char
    return snake_case_string",lm
974,"def minimum_total(triangle):
    if not triangle:
        return 0

    dp = triangle[-1]
    for i in range(len(triangle) - 2, -1, -1):
        for j in range(len(triangle[i])):
            dp[j] = triangle[i][j] + min(dp[j], dp[j + 1])

    return dp[0]",lm
904,"def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False",lm
759,"def check_decimal_precision(decimal):
    if isinstance(decimal, float):
        return round(decimal, 2) == decimal
    return False",lm
494,"def binary_tuple_to_integer(binary_tuple):
    binary_string = """".join(str(bit) for bit in binary_tuple)
    return int(binary_string, 2)",lm
958,"def int_to_roman(num):
    roman_numerals = {
        1000: ""M"",
        900: ""CM"",
        500: ""D"",
        400: ""CD"",
        100: ""C"",
        90: ""XC"",
        50: ""L"",
        40: ""XL"",
        10: ""X"",
        9: ""IX"",
        5: ""V"",
        4: ""IV"",
        1: ""I""
    }
    roman_string = """"
    for value, symbol in roman_numerals.items():
        while num >= value:
            roman_string += symbol
            num -= value
    return roman_string",lm
784,"def find_product(list):
    """"""
    Find the product of first even and odd numbers in a given list.

    Args:
    list (list): The input list of numbers.

    Returns:
    int: The product of the first even and odd numbers.
    """"""
    even_product = 1
    odd_product = 1

    for num in list:
        if num % 2 == 0:
            even_product *= num
        else:
            odd_product *= num
    
    return even_product * odd_product",lm
146,"def ascii_value_string(str1):
  for i in range(len(str1)):
   return ord(str1[i])",human
706,"def is_subset(array1, array2):
    return set(array1).issubset(set(array2))",lm
397,"def find_median(a, b, c):
    numbers = [a, b, c]
    numbers.sort()
    return numbers[1]",lm
234,"def volume_cube(l):
  volume = l * l * l
  return volume",human
937,"def count_most_common_character(string):
    char_count = {}
    for char in string:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    most_common_char = max(char_count, key=char_count.get)
    return most_common_char",lm
925,"def mutiple_tuple(nums):
    temp = list(nums)
    product = 1 
    for x in temp:
        product *= x
    return product",human
859,"from itertools import combinations
def sub_lists(my_list):
	subs = []
	for i in range(0, len(my_list)+1):
	  temp = [list(x) for x in combinations(my_list, i)]
	  if len(temp)>0:
	    subs.extend(temp)
	return subs",human
834,"def generate_matrix(n):
        if n<=0:
            return [] 
        matrix=[row[:] for row in [[0]*n]*n]        
        row_st=0
        row_ed=n-1        
        col_st=0
        col_ed=n-1
        current=1        
        while (True):
            if current>n*n:
                break
            for c in range (col_st, col_ed+1):
                matrix[row_st][c]=current
                current+=1
            row_st+=1
            for r in range (row_st, row_ed+1):
                matrix[r][col_ed]=current
                current+=1
            col_ed-=1
            for c in range (col_ed, col_st-1, -1):
                matrix[row_ed][c]=current
                current+=1
            row_ed-=1
            for r in range (row_ed, row_st-1, -1):
                matrix[r][col_st]=current
                current+=1
            col_st+=1
        return matrix",human
702,"def find_ind(key, i, n, 
			k, arr):
	ind = -1
	start = i + 1
	end = n - 1;
	while (start < end):
		mid = int(start +
				(end - start) / 2)
		if (arr[mid] - key <= k):
			ind = mid
			start = mid + 1
		else:
			end = mid
	return ind
def removals(arr, n, k):
	ans = n - 1
	arr.sort()
	for i in range(0, n):
		j = find_ind(arr[i], i, 
					n, k, arr)
		if (j != -1):
			ans = min(ans, n -
						(j - i + 1))
	return ans",human
218,"def min_operations(num1, num2):
    count = 0
  
    while(num1 != num2):
        if num1 % 2 != 0:
            num1 -= 1
            count += 1
  
        elif num1 > num2:
            num1 //= 2
            count += 1
        else:
            num1 *= 2
            count += 1
  
    return count",lm
877,"def sort_String(str) : 
    str = ''.join(sorted(str)) 
    return (str) ",human
784,"def mul_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even*first_odd)",human
253,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr",human
757,"def count_reverse_pairs(string_list):
    reverse_pairs = 0
    for i in range(0, len(string_list)):
        for j in range(i+1, len(string_list)):
            if string_list[i] == string_list[j][::-1]:
                reverse_pairs += 1
    return reverse_pairs",lm
508,"def check_order(list1, list2):
    """"""
    Check if the common elements between two given lists are in the same order or not.
    Args:
        list1 (list): The first list.
        list2 (list): The second list.
    Returns:
        bool: True if the common elements are in the same order, False otherwise.
    """"""
    common_elements = set(list1) & set(list2)
    if common_elements:
        index1 = 0
        index2 = 0
        for element in common_elements:
            index1 = list1.index(element, index1)
            index2 = list2.index(element, index2)
            if index1 > index2:
                return False
    return True",lm
431,"def have_common_element(list1, list2):
    for element in list1:
        if element in list2:
            return True
    return False",lm
308,"def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result",human
617,"def min_Jumps(a, b, d): 
    temp = a 
    a = min(a, b) 
    b = max(temp, b) 
    if (d >= b): 
        return (d + b - 1) / b 
    if (d == 0): 
        return 0
    if (d == a): 
        return 1
    else:
        return 2",human
421,"def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) ",human
783,"def rgb_to_hsv(r, g, b):
    max_color = max(r, g, b)
    min_color = min(r, g, b)
    hue = 0.0
    saturation = 0.0
    value = max_color / 255.0

    if max_color != 0:
        saturation = (max_color - min_color) / max_color

    if min_color == max_color:
        hue = 0.0
    elif max_color == r:
        hue = (60 * (g - b) / (max_color - min_color) + 360) % 360
    elif max_color == g:
        hue = (60 * (b - r) / (max_color - min_color) + 120) % 360
    elif max_color == b:
        hue = (60 * (r - g) / (max_color - min_color) + 240) % 360

    return (hue, saturation, value)",lm
832,"import re 
def extract_max(input): 
	numbers = re.findall('\d+',input) 
	numbers = map(int,numbers) 
	return max(numbers)",human
117,"def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return (str(res)) ",human
97,"def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
",human
496,"import heapq as hq
def heap_queue_smallest(nums,n):
  smallest_nums = hq.nsmallest(n, nums)
  return smallest_nums",human
144,"def sum_Pairs(arr,n): 
    sum = 0
    for i in range(n - 1,-1,-1): 
        sum += i*arr[i] - (n-1-i) * arr[i] 
    return sum",human
788,"def new_tuple(test_list, test_str):
  res = tuple(test_list + [test_str])
  return (res) ",human
87,"def merge_dicts(dict1, dict2, dict3):
    return {**dict1, **dict2, **dict3}",lm
654,"def find_perimeter(length, width):
    perimeter = 2 * (length + width)
    return perimeter",lm
526,"def capitalize_first_last_letters(str1):
     str1 = result = str1.title()
     result =  """"
     for word in str1.split():
        result += word[:-1] + word[-1].upper() + "" ""
     return result[:-1]  ",human
824,"def remove_even(l):
    for i in l:
        if i % 2 == 0:
            l.remove(i)
    return l",human
780,"def find_combinations(tuples):
    """"""
    Find the combinations of sums with tuples
    
    Args:
        tuples (list of tuples): The list of tuples
        
    Returns:
        list of tuples: The combinations of sums with tuples
    """"""
    result = []
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            sum_tuple = tuple(a + b for a, b in zip(tuples[i], tuples[j]))
            result.append(sum_tuple)
    return result",lm
634,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n + 1): 
        j = 2*i; 
        sum = sum + (j*j*j*j); 
    return sum; ",human
801,"def test_three_equal(x,y,z):
  result= set([x,y,z])
  if len(result)==3:
    return 0
  else:
    return (4-len(result))",human
770,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n + 1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j)   
    return sm ",human
116,"def convert_tuple_to_integer(tuple_numbers):
    """"""
    Convert a given tuple of positive integers into an integer.
    
    Parameters:
    tuple_numbers (tuple): A tuple of positive integers.
    
    Returns:
    int: The converted integer.
    """"""

    return int(''.join(str(n) for n in tuple_numbers))",lm
195,"def find_first_position(arr, target):
    low = 0
    high = len(arr) - 1
    result = -1

    while low <= high:
        mid = (low + high) // 2
        
        if arr[mid] == target:
            result = mid
            high = mid - 1
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    
    return result",lm
364,"def count_flips(binary_string):
    flips = 0
    for i in range(1, len(binary_string)):
        if binary_string[i] == binary_string[i-1]:
            flips += 1
    return flips",lm
146,"def find_ascii_value(string):
    total_ascii_value = 0
    for char in string:
        total_ascii_value += ord(char)
    return total_ascii_value",lm
44,"import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'",human
360,"def get_carol(n): 
	result = (2**n) - 1
	return result * result - 2",human
124,"def get_angle(complex_num):
    """"""
    Returns the angle of a complex number.

    Parameters:
    complex_num (complex): The complex number.

    Returns:
    float: The angle of the complex number in radians.
    """"""
    return cmath.phase(complex_num)",lm
338,"def count_substrings(s: str) -> int:
    count = 0
    for i in range(len(s)):
        for j in range(i, len(s)):
            if s[i] == s[j]:
                count += 1
    return count",lm
838,"def min_Swaps(s1,s2) :  
    c0 = 0; c1 = 0;  
    for i in range(len(s1)) :  
        if (s1[i] == '0' and s2[i] == '1') : 
            c0 += 1;    
        elif (s1[i] == '1' and s2[i] == '0') : 
            c1 += 1;  
    result = c0 // 2 + c1 // 2;  
    if (c0 % 2 == 0 and c1 % 2 == 0) : 
        return result;  
    elif ((c0 + c1) % 2 == 0) : 
        return result + 2;  
    else : 
        return -1;  ",human
546,"def find_last_occurrence(string, char):
    last_index = -1
    for i in range(len(string)):
        if string[i] == char:
            last_index = i
    return last_index",lm
519,"import math
def volume_tetrahedron(num):
	volume = (num ** 3 / (6 * math.sqrt(2)))	
	return round(volume, 2)",human
856,"def find_Min_Swaps(arr,n) : 
    noOfZeroes = [0] * n 
    count = 0 
    noOfZeroes[n - 1] = 1 - arr[n - 1] 
    for i in range(n-2,-1,-1) : 
        noOfZeroes[i] = noOfZeroes[i + 1] 
        if (arr[i] == 0) : 
            noOfZeroes[i] = noOfZeroes[i] + 1
    for i in range(0,n) : 
        if (arr[i] == 1) : 
            count = count + noOfZeroes[i] 
    return count ",human
734,"def sum_Of_Subarray_Prod(arr,n):
    ans = 0
    res = 0
    i = n - 1
    while (i >= 0):
        incr = arr[i]*(1 + res)
        ans += incr
        res = incr
        i -= 1
    return (ans)",human
762,"def is_30_days_month(month):
    """"""
    Check whether the given month number contains 30 days or not.

    Parameters:
    month (int): The month number.

    Returns:
    bool: True if the month contains 30 days, False otherwise.

    """"""
    thirty_days_months = [4, 6, 9, 11]
    return month in thirty_days_months",lm
240,"def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
",human
535,"import math

def cylinder_surface_area(radius: float, height: float, top_or_bottom: str) -> float:
    if top_or_bottom.lower() == 'top':
        return math.pi * radius ** 2
    elif top_or_bottom.lower() == 'bottom':
        return math.pi * radius ** 2
    else:
        return 2 * math.pi * radius * height",lm
632,"def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i != 0]
    x.extend(a)
    return (x)",human
737,"import re

def check_vowel(string):
    pattern = r'^[AEIOUaeiou].*'
    if re.match(pattern, string):
        return True
    else:
        return False",lm
659,"def Repeat(x): 
    _size = len(x) 
    repeated = [] 
    for i in range(_size): 
        k = i + 1
        for j in range(k, _size): 
            if x[i] == x[j] and x[i] not in repeated: 
                repeated.append(x[i]) 
    return repeated ",human
884,"def all_Bits_Set_In_The_Given_Range(n,l,r): 
    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) 
    new_num = n & num 
    if (num == new_num): 
        return True
    return False",human
579,"def find_dissimilar_elements(tuple1, tuple2):
    """"""
    Find dissimilar elements in two tuples.

    Parameters:
    tuple1 (tuple): First tuple.
    tuple2 (tuple): Second tuple.

    Returns:
    list: List of dissimilar elements between the two tuples.
    """"""
    
    return list(set(tuple1) ^ set(tuple2))",lm
333,"def Sort(sub_li): 
    sub_li.sort(key = lambda x: x[1]) 
    return sub_li ",human
576,"def is_Sub_Array(A,B,n,m): 
    i = 0; j = 0; 
    while (i < n and j < m):  
        if (A[i] == B[j]): 
            i += 1; 
            j += 1; 
            if (j == m): 
                return True;  
        else: 
            i = i - j + 1; 
            j = 0;       
    return False; ",human
449,"def check_Triangle(x1,y1,x2,y2,x3,y3): 
    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   
    if a == 0: 
        return ('No') 
    else: 
        return ('Yes') ",human
301,"def find_depth(dictionary):
    if not isinstance(dictionary, dict):
        return 0
    
    max_depth = 1
    for key in dictionary:
        if isinstance(dictionary[key], dict):
            depth = find_depth(dictionary[key]) + 1
            if depth > max_depth:
                max_depth = depth
    
    return max_depth",lm
598,"def is_armstrong_number(number):
    num_str = str(number)
    num_digits = len(num_str)
    sum = 0

    for digit in num_str:
        sum += int(digit) ** num_digits

    return number == sum",lm
481,"def is_subset_sum(set, n, sum):
	if (sum == 0):
		return True
	if (n == 0):
		return False
	if (set[n - 1] > sum):
		return is_subset_sum(set, n - 1, sum)
	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",human
171,"def find_perimeter_of_pentagon(side_length):
    return side_length * 5",lm
216,"def is_subset(nested_list, another_nested_list):
    """"""
    Check if a nested list is a subset of another nested list.
    
    Args:
    nested_list (list): The first nested list.
    another_nested_list (list): The second nested list.
    
    Returns:
    bool: True if nested_list is a subset of another_nested_list, False otherwise.
    """"""
    if nested_list is None or another_nested_list is None:
        return False
    
    if nested_list == []:
        return True
    
    if another_nested_list == []:
        return False
    
    if nested_list[0] in another_nested_list:
        return is_subset(nested_list[1:], another_nested_list)
    else:
        return False",lm
828,"def count_alpha_dig_spl(string):
  alphabets=digits = special = 0
  for i in range(len(string)):
    if(string[i].isalpha()):
        alphabets = alphabets + 1
    elif(string[i].isdigit()):
        digits = digits + 1
    else:
        special = special + 1
  return (alphabets,digits,special)   ",human
220,"Here is the generated code for the given function documentation string:


def replace_occurrences(s: str, n: int) -> str:
    """"""
    Replace maximum n occurrences of spaces, commas, or dots with a colon.
    
    Args:
        s (str): The input string.
        n (int): The maximum number of occurrences to replace.
    
    Returns:
        str: The modified string with the replacements.
    """"""

    colon_count = 0
    result = """"

    for char in s:
        if char == "" "" or char == "","" or char == ""."":
            if colon_count < n:
                result += "":""
                colon_count += 1
            else:
                result += char
        else:
            result += char
    
    return result


Please note that the generated code assumes that the input string `s` and the maximum number of occurrences `n` are provided as arguments to the function. The function returns the modified string with the replacements.",lm
671,"def set_rightmost_unset_bit(number):
    return number | (number + 1)",lm
277,"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result",human
961,"def roman_to_int(s):
        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        int_val = 0
        for i in range(len(s)):
            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
            else:
                int_val += rom_val[s[i]]
        return int_val",human
416,"def maximum_sum(number: int) -> int:
    if number < 0:
        return 0
    if number < 10:
        return number
    max_sum = 0
    for i in range(1, number):
        current_sum = maximum_sum(number - i) + maximum_sum(i)
        max_sum = max(max_sum, current_sum)
    return max_sum",lm
555,"def difference(n) :  
    S = (n*(n + 1))//2;  
    res = S*(S-1);  
    return res;  ",human
430,"def find_directrix(focus, vertex):
    return focus[1] - vertex[1]",lm
200,"def find_max_positions(lst):
    max_val = max(lst)
    positions = [i for i, val in enumerate(lst) if val == max_val]
    return positions",lm
432,"def find_median_of_trapezium(trapezium):
    trapezium.sort()
    n = len(trapezium)
    if n % 2 == 0:
        return (trapezium[n // 2] + trapezium[(n // 2) - 1]) / 2
    else:
        return trapezium[n // 2]",lm
327,"def is_isosceles_triangle(side1, side2, side3):
    """"""
    Check if a triangle is isosceles or not.
    
    Args:
        side1 (float): Length of the first side of the triangle.
        side2 (float): Length of the second side of the triangle.
        side3 (float): Length of the third side of the triangle.
        
    Returns:
        str: ""The triangle is isosceles."" if the triangle is isosceles,
             ""The triangle is not isosceles."" otherwise.
    """"""
    if side1 == side2 or side2 == side3 or side1 == side3:
        return ""The triangle is isosceles.""
    else:
        return ""The triangle is not isosceles.""",lm
688,"import cmath
def len_complex(a,b):
  cn=complex(a,b)
  length=abs(cn)
  return length",human
927,"def calculate_tree_height(root):
    if root is None:
        return 0
    else:
        left_height = calculate_tree_height(root.left)
        right_height = calculate_tree_height(root.right)
        return max(left_height, right_height) + 1",lm
1,"R = 3
C = 3
def min_cost(cost, m, n): 
	tc = [[0 for x in range(C)] for x in range(R)] 
	tc[0][0] = cost[0][0] 
	for i in range(1, m+1): 
		tc[i][0] = tc[i-1][0] + cost[i][0] 
	for j in range(1, n+1): 
		tc[0][j] = tc[0][j-1] + cost[0][j] 
	for i in range(1, m+1): 
		for j in range(1, n+1): 
			tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] 
	return tc[m][n]",human
404,"def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ",human
756,"import re

def match_string(string):
    pattern = re.compile(""ab?"")
    return bool(pattern.match(string))",lm
571,"def max_sum_pair_diff_lessthan_K(arr, N, K): 
	arr.sort() 
	dp = [0] * N 
	dp[0] = 0
	for i in range(1, N): 
		dp[i] = dp[i-1] 
		if (arr[i] - arr[i-1] < K): 
			if (i >= 2): 
				dp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); 
			else: 
				dp[i] = max(dp[i], arr[i] + arr[i-1]); 
	return dp[N - 1]",human
360,"def find_carol_number(n):
    # check if n is valid
    if n <= 0:
        return None

    # calculate the carol number
    carol = ((2 ** n) - 1) ** 2 - 2
    
    return carol",lm
373,"def cuboid_volume(length, width, height):
    return length * width * height",lm
472,"def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) ",human
342,"from heapq import heappop, heappush
class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index
    def __lt__(self, other):
        return self.value < other.value
def find_minimum_range(list):
    high = float('-inf')
    p = (0, float('inf'))
    pq = []
    for i in range(len(list)):
        heappush(pq, Node(list[i][0], i, 0))
        high = max(high, list[i][0])
    while True:
        top = heappop(pq)
        low = top.value
        i = top.list_num
        j = top.index
        if high - low < p[1] - p[0]:
            p = (low, high)
        if j == len(list[i]) - 1:
            return p
        heappush(pq, Node(list[i][j + 1], i, j + 1))
        high = max(high, list[i][j + 1])",human
367,"def isBalanced(root):
    def getHeight(node):
        if node is None:
            return 0
        left_height = getHeight(node.left)
        right_height = getHeight(node.right)
        return max(left_height, right_height) + 1
    
    if root is None:
        return True
    
    left_height = getHeight(root.left)
    right_height = getHeight(root.right)
    
    if abs(left_height - right_height) > 1:
        return False
    
    return isBalanced(root.left) and isBalanced(root.right)",lm
409,"def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min",human
515,"def modular_sum(arr, n, m): 
	if (n > m): 
		return True
	DP = [False for i in range(m)] 
	for i in range(n): 
		if (DP[0]): 
			return True
		temp = [False for i in range(m)] 
		for j in range(m): 
			if (DP[j] == True): 
				if (DP[(j + arr[i]) % m] == False): 
					temp[(j + arr[i]) % m] = True
		for j in range(m): 
			if (temp[j]): 
				DP[j] = True
		DP[arr[i] % m] = True
	return DP[0]",human
385,"def perrin_number(n):
    if n == 0:
        return 3
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    else:
        return perrin_number(n-2) + perrin_number(n-3)",lm
351,"def find_first_k(array, k):
    for num in array:
        if array.count(num) == k:
            return num
    return None",lm
716,"def rombus_perimeter(a):
  perimeter=4*a
  return perimeter",human
220,"import re
def replace_max_specialchar(text,n):
 return (re.sub(""[ ,.]"", "":"", text, n))",human
667,"def count_vowels(string):
    """"""
    This function counts the number of vowels in a given string.
    
    Parameters:
    string (str): The input string.
    
    Returns:
    int: The number of vowels in the string.
    """"""
    vowels = 'aeiouAEIOU'
    count = 0
    for char in string:
        if char in vowels:
            count += 1
    return count",lm
781,"def check_divisor_count(num):
    """"""
    Check whether the count of divisors is even or odd.
    
    :param num: The number to be checked.
    :return: True if the count of divisors is even, False if it is odd.
    """"""
    count = 0
    for i in range(1, num+1):
        if num % i == 0:
            count += 1
    return count % 2 == 0",lm
687,"def recur_gcd(a, b):
	low = min(a, b)
	high = max(a, b)
	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return recur_gcd(low, high%low)",human
49,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    ",human
607,"def search_string(pattern, string):
    import re
    match = re.search(pattern, string)
    if match:
        return match.start()
    else:
        return -1",lm
295,"def sum_of_divisors(n):
    """"""
    Returns the sum of all divisors of a number.

    Parameters:
    n (int): The number for which to find the divisors.

    Returns:
    int: The sum of all divisors of the given number.
    """"""
    sum_of_divisors = 0
    for i in range(1, n+1):
        if n % i == 0:
            sum_of_divisors += i
    return sum_of_divisors",lm
507,"def remove_words(words_list, remove_list):
    return [word for word in words_list if word not in remove_list]",lm
973,"def left_rotate_string(string, n):
    return string[n:] + string[:n]",lm
199,"def highest_power_of_2(num):
    power = 0
    while 2**power <= num:
        power += 1
    return 2**(power-1)",lm
697,"def count_even(array_nums):
   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))
   return count_even",human
458,"def rectangle_area(l,b):
  area=l*b
  return area",human
482,"import re

def find_sequences(string):
    regex_pattern = r'[A-Z][a-z]+'
    matches = re.findall(regex_pattern, string)
    return matches",lm
877,"def sort_string(string):
    sorted_string = ''.join(sorted(string))
    return sorted_string",lm
660,"def find_Points(l1,r1,l2,r2): 
    x = min(l1,l2) if (l1 != l2) else -1
    y = max(r1,r2) if (r1 != r2) else -1
    return (x,y)",human
642,"def remove_similar_row(test_list):
  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))
  return (res) ",human
943,"def combine_sorted_lists(list1, list2):
    import heapq
    return list(heapq.merge(list1, list2))",lm
110,"def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) ",human
924,"def find_maximum(a, b):
    """"""
    Finds the maximum of two numbers.

    Parameters:
    a (int): The first number.
    b (int): The second number.

    Returns:
    int: The maximum of the two numbers.
    """"""
    return max(a, b)",lm
498,"def gcd(a, b):
    """"""
    Find the greatest common divisor (gcd) of two positive integers.

    Parameters:
    a (int): The first positive integer.
    b (int): The second positive integer.

    Returns:
    int: The gcd of the two positive integers.
    """"""
    while b:
        a, b = b, a % b
        
    return a",lm
727,"import re

def remove_special_characters(input_string):
    return re.sub('[^A-Za-z0-9]+', '', input_string)",lm
205,"def find_inversions(tuple_list):
    inversions = 0
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            if tuple_list[i] > tuple_list[j]:
                inversions += 1
    return inversions",lm
788,"def create_tuple(string: str, lst: list) -> tuple:
    """"""
    Create a new tuple from the given string and list.
    
    Args:
        string (str): The input string.
        lst (list): The input list.
    
    Returns:
        tuple: A tuple containing the string and list.
    """"""
    return tuple([string] + lst)",lm
787,"import re

def match_string(string):
    pattern = r'abbb'
    match = re.match(pattern, string)
    if match:
        return True
    else:
        return False",lm
83,"def find_character(string):
    return chr(sum(ord(c) for c in string))",lm
831,"def count_equal_pairs(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] == arr[j]:
                count += 1
    return count",lm
893,"def Extract(lst): 
    return [item[-1] for item in lst] ",human
604,"def reverse_words(string):
    words = string.split()
    reversed_string = ' '.join(reversed(words))
    return reversed_string",lm
392,"def find_max_sum(n):
    if n == 0:
        return 0
    if n < 6:
        return n
    max_sum = max(find_max_sum(n//2), find_max_sum(n//3), find_max_sum(n//4), find_max_sum(n//5), n)
    return max_sum",lm
797,"def sum_odd_numbers(l, r):
    total = 0
    for num in range(l, r+1):
        if num % 2 != 0:
            total += num
    return total",lm
176,"def find_perimeter(a, b, c):
    return a + b + c",lm
194,"Please find below the implementation of the requested function:


def octal_to_decimal(octal):
    decimal = 0
    power = 0

    while octal != 0:
        decimal += (octal % 10) * (8 ** power)
        octal //= 10
        power += 1

    return decimal",lm
211,"def count_bits(n, o):
    count = 0
    for i in range(n+1):
        if (i & (1 << o)) and (i & (1 << n)):
            count += 1
    return count",lm
280,"def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos",human
377,"def remove_Char(s,c) :  
    counts = s.count(c) 
    s = list(s) 
    while counts :  
        s.remove(c) 
        counts -= 1 
    s = '' . join(s)   
    return (s) ",human
476,"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum",human
41,"def filter_even_numbers(numbers):
    return list(filter(lambda x: x % 2 == 0, numbers))",lm
264,"def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age",human
890,"def find_extra_element(arr1, arr2):
    for i in range(len(arr2)):
        if arr1[i] != arr2[i]:
            return i
    return len(arr2)",lm
136,"def calculate_electricity_bill(units, rate):
    return units * rate",lm
454,"import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
559,"def find_largest_sum_subarray(arr):
    if not arr:
        return 0
    
    max_sum = arr[0]
    current_sum = arr[0]
    
    for num in arr[1:]:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    
    return max_sum",lm
555,"def difference_of_sums(n):
    sum_of_squares = (n * (n + 1) // 2) ** 2
    sum_of_cubes = (n * (n + 1) // 2) * ((n * (n + 1) // 2) + 1) // 2
    return sum_of_cubes - sum_of_squares",lm
446,"def count_elements(list: List[int], tuple: Tuple[int]) -> Dict[int, int]:
    """"""
    Count the occurrence of all elements of a list in a tuple.

    Parameters:
    list (List[int]): The list of elements.
    tuple (Tuple[int]): The tuple of elements.

    Returns:
    dict: A dictionary where the keys are the elements from the list and the values are the number of times they occur in the tuple.
    """"""
    count_dict = {}
    for element in list:
        count_dict[element] = tuple.count(element)
    return count_dict",lm
855,"def check_even_parity(number):
    # convert number to binary
    binary = bin(number)[2:]

    # count the number of '1's in the binary representation
    count = binary.count('1')

    # check if the count is even
    if count % 2 == 0:
        return True
    else:
        return False",lm
369,"def lateral_surface_area_of_cuboid(length, width, height):
    return 2 * (length * height + width * height)",lm
453,"import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res ",human
616,"def tuple_modulo(test_tup1, test_tup2):
  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) 
  return (res) ",human
33,"def decimal_To_Binary(N): 
    B_Number = 0
    cnt = 0
    while (N != 0): 
        rem = N % 2
        c = pow(10,cnt)  
        B_Number += rem*c  
        N //= 2 
        cnt += 1
    return B_Number  ",human
410,"def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val",human
65,"def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total",human
346,"def entringer_number(n, k):
    result = 0
    for i in range(n+1):
        coef = 1
        for j in range(1, k+1):
            coef *= (n-i-j+2)/(j-1)
        result += coef
    return result",lm
714,"def count_Fac(n):  
    m = n 
    count = 0
    i = 2
    while((i * i) <= m): 
        total = 0
        while (n % i == 0): 
            n /= i 
            total += 1 
        temp = 0
        j = 1
        while((temp + j) <= total): 
            temp += j 
            count += 1
            j += 1 
        i += 1
    if (n != 1): 
        count += 1 
    return count ",human
103,"def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",human
536,"def nth_items(list,n):
 return list[::n]",human
174,"def group_pairs(pairs):
    result = {}
    for key, value in pairs:
        result.setdefault(key, []).append(value)
    return result",lm
463,"def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far",human
761,"def arc_length(d,a):
    pi=22/7
    if a >= 360:
        return None
    arclength = (pi*d) * (a/360)
    return arclength",human
921,"def chunk_tuples(test_tup, N):
  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]
  return (res) ",human
611,"def max_of_nth(test_list, N):
  res = max([sub[N] for sub in test_list])
  return (res) ",human
477,"def convert_to_lower(string):
    return string.lower()",lm
610,"def remove_kth_element(list1, L):
    return  list1[:L-1] + list1[L:]",human
433,"def check_greater_than(arr, num):
    for element in arr:
        if element >= num:
            return False
    return True",lm
198,"def find_largest_triangle_inscribed_in_ellipse():
    # Function implementation here
    pass",lm
75,"def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) ",human
584,"import re
def find_adverbs(text):
  for m in re.finditer(r""\w+ly"", text):
    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))",human
341,"def convert_to_tuples(input_set):
    return tuple(sorted(input_set))",lm
368,"def repeat_tuple(my_tuple, n):
    return my_tuple * n",lm
568,"def create_list_of_dictionaries(num):
    return [{} for _ in range(num)]",lm
148,"def divide_number(number):
    """"""
    Divide a number into two parts such that the sum of digits is maximum.
    
    Args:
    number (int): The number to be divided.
    
    Returns:
    tuple: A tuple containing the two parts of the number.
    """"""
    number_str = str(number)
    length = len(number_str)
    
    if length == 1:
        return (number, 0)
    
    middle = length // 2
    if length % 2 == 0:
        part1 = int(number_str[:middle])
        part2 = int(number_str[middle:])
    else:
        part1 = int(number_str[:middle])
        part2 = int(number_str[middle:])
    
    return (part1, part2)",lm
810,"def repeat_elements(elements):
    repeated_elements = []
    for element, count in elements.items():
        repeated_elements.extend([element] * count)
    return repeated_elements",lm
419,"def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum",human
717,"import math
import sys
def sd_calc(data):
    n = len(data)
    if n <= 1:
        return 0.0
    mean, sd = avg_calc(data), 0.0
    for el in data:
        sd += (float(el) - mean)**2
    sd = math.sqrt(sd / float(n-1))
    return sd
def avg_calc(ls):
    n, mean = len(ls), 0.0
    if n <= 1:
        return ls[0]
    for el in ls:
        mean = mean + float(el)
    mean = mean / float(n)
    return mean",human
17,"def square_perimeter(a):
  perimeter=4*a
  return perimeter",human
820,"def has_28_days(month):
    """"""
    Check whether the given month number contains 28 days or not.

    Parameters:
    month (int): The month number.

    Returns:
    bool: True if the month has 28 days, False otherwise.
    """"""
    return month == 2

print(has_28_days(2))
print(has_28_days(3))",lm
18,"def remove_chars(str1, str2):
    """"""
    Removes characters from the first string that are present in the second string.
    
    Parameters:
    str1 (str): The first input string.
    str2 (str): The second input string.
    
    Returns:
    str: The resulting string after removing characters from str1 that are present in str2.
    """"""
    for char in str2:
        str1 = str1.replace(char, '')
    
    return str1",lm
511,"def find_Min_Sum(num): 
    sum = 0
    i = 2
    while(i * i <= num): 
        while(num % i == 0): 
            sum += i 
            num /= i 
        i += 1
    sum += num 
    return sum",human
242,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total",human
878,"def check_tuples(test_tuple, K):
  res = all(ele in K for ele in test_tuple)
  return (res) ",human
685,"def sum_of_primes(n):
    """"""
    This function takes an integer n as input and returns the sum of all prime numbers between 1 and n.
    
    Parameters:
        n (int): The upper limit for finding prime numbers.
        
    Returns:
        int: The sum of prime numbers between 1 and n.
    """"""
    
    def is_prime(num):
        """"""
        This helper function checks whether a number is prime or not.
        
        Parameters:
            num (int): The number to be checked.
            
        Returns:
            bool: True if the number is prime, False otherwise.
        """"""
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True
    
    prime_sum = 0
    for i in range(2, n + 1):
        if is_prime(i):
            prime_sum += i
    
    return prime_sum",lm
162,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)",human
891,"def check_same_number_of_digits(num1, num2):
    """"""
    Check whether the given two numbers have same number of digits or not.

    Parameters:
    num1 (int): The first number.
    num2 (int): The second number.
    
    Returns:
    bool: True if the numbers have the same number of digits, False otherwise.
    """"""
    if len(str(num1)) == len(str(num2)):
        return True
    else:
        return False",lm
740,"def tuple_to_dict(test_tup):
  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
  return (res) ",human
14,"def find_volume_of_triangular_prism(base_length, base_width, height):
    return (1/2) * base_length * base_width * height",lm
402,"def compute_ncr_mod_p(n, r, p):
    fact_n = 1
    fact_r = 1
    fact_nr = 1

    for i in range(1, n + 1):
        fact_n = (fact_n * i) % p

    for i in range(1, r + 1):
        fact_r = (fact_r * i) % p

    for i in range(1, (n - r) + 1):
        fact_nr = (fact_nr * i) % p

    ncr = (fact_n // (fact_r * fact_nr)) % p

    return ncr",lm
909,"def previous_palindrome(num):
    for x in range(num-1,0,-1):
        if str(x) == str(x)[::-1]:
            return x",human
156,"def tuple_int_str(tuple_str):
    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)
    return result",human
450,"def extract_strings(lst, size):
    """"""
    Extracts specified size of strings from a given list of string values.
    
    Arguments:
    lst -- A list of string values.
    size -- The size of strings to be extracted.
    
    Returns:
    A list of strings of the specified size.
    """"""
    
    extracted_strings = []
    for string in lst:
        if len(string) == size:
            extracted_strings.append(string)
    
    return extracted_strings",lm
69,"def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set",human
276,"def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume",human
537,"def first_repeated_word(str1):
  temp = set()
  for word in str1.split():
    if word in temp:
      return word;
    else:
      temp.add(word)
  return 'None'",human
888,"def substract_elements(test_tup1, test_tup2):
  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",human
768,"def check_Odd_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 1): 
        return True
    else: 
        return False",human
177,"def answer(L,R): 
    if (2 * L <= R): 
        return (L ,2*L)
    else: 
        return (-1) ",human
714,"def count_distinct_power_of_prime_factor(num):
    prime_factors = []
    i = 2
    while i * i <= num:
        while num % i == 0:
            prime_factors.append(i)
            num = num // i
        i += 1
    if num > 1:
        prime_factors.append(num)
    
    distinct_powers = set()
    for prime_factor in prime_factors:
        factor_power = 1
        while prime_factor ** factor_power <= num:
            if num % (prime_factor ** factor_power) == 0:
                distinct_powers.add(prime_factor ** factor_power)
            factor_power += 1
    
    return len(distinct_powers)",lm
476,"def find_sum_largest_smallest(arr):
    if len(arr) == 0:
        return 0
    else:
        return max(arr) + min(arr)",lm
603,"def get_lucid_number(n):
    lucid_number = 0
    for i in range(1, n + 1):
        if i % 7 == 0:
            lucid_number = i
    return lucid_number",lm
388,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; ",human
221,"def find_first_even_number(numbers):
    for num in numbers:
        if num % 2 == 0:
            return num
    return None",lm
620,"def largest_subset(a, n):
	dp = [0 for i in range(n)]
	dp[n - 1] = 1; 
	for i in range(n - 2, -1, -1):
		mxm = 0;
		for j in range(i + 1, n):
			if a[j] % a[i] == 0 or a[i] % a[j] == 0:
				mxm = max(mxm, dp[j])
		dp[i] = 1 + mxm
	return max(dp)",human
669,"import re 
regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''
def check_IP(Ip): 
	if(re.search(regex, Ip)): 
		return (""Valid IP address"") 
	else: 
		return (""Invalid IP address"") ",human
621,"def increment_values(strings, k):
    result = []
    for string in strings:
        new_string = ''
        for char in string:
            if char.isdigit():
                new_string += str(int(char) + k)
            else:
                new_string += char
        result.append(new_string)
    return result",lm
589,"def perfect_squares(a, b):
    lists=[]
    for i in range (a,b+1):
        j = 1;
        while j*j <= i:
            if j*j == i:
                 lists.append(i)  
            j = j+1
        i = i+1
    return lists",human
819,"def count_duplic(lists):
    element = []
    frequency = []
    if not lists:
        return element
    running_count = 1
    for i in range(len(lists)-1):
        if lists[i] == lists[i+1]:
            running_count += 1
        else:
            frequency.append(running_count)
            element.append(lists[i])
            running_count = 1
    frequency.append(running_count)
    element.append(lists[i+1])
    return element,frequency
",human
682,"def multiply_lists(list1, list2):
    return list(map(lambda x, y: x * y, list1, list2))",lm
483,"def first_Factorial_Divisible_Number(x): 
    i = 1;
    fact = 1; 
    for i in range(1,x): 
        fact = fact * i 
        if (fact % x == 0): 
            break
    return i ",human
818,"def count_lower_case_letters(string):
    count = 0
    for char in string:
        if char.islower():
            count += 1
    return count",lm
398,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",human
230,"def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2",human
513,"def convert_tuple_to_list(tuple_val, string_val):
    """"""
    Converts a tuple into a list by adding the given string after every element.

    Args:
    tuple_val (tuple): The input tuple.
    string_val (str): The string to be added after every element.

    Returns:
    list: The converted list.
    """"""

    converted_list = [str(element) + string_val for element in tuple_val]
    return converted_list",lm
838,"def min_swaps_to_make_equal(str1: str, str2: str) -> int:
    # Count the number of zeros and ones in both strings
    zeros_str1 = str1.count('0')
    ones_str1 = str1.count('1')
    zeros_str2 = str2.count('0')
    ones_str2 = str2.count('1')

    # Check if it is possible to make two strings equal
    if zeros_str1 != zeros_str2 or ones_str1 != ones_str2:
        return -1
    
    # Count the number of swaps required
    swaps = 0
    n = len(str1)
    i = 0
    while i < n:
        if str1[i] != str2[i]:
            j = i + 1
            while j < n:
                if str1[j] != str2[j] and str1[i] != str1[j]:
                    str1 = str1[:i] + str1[j] + str1[i + 1:j] + str1[i] + str1[j + 1:]
                    swaps += 1
                    break
                j += 1
        i += 1
    
    return swaps",lm
634,"def sum_of_fourth_power(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i)**4
    return sum",lm
389,"def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ",human
965,"def camel_to_snake(text):
        import re
        str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()",human
192,"def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n ",human
394,"def is_distinct(tuple):
    return len(set(tuple)) == len(tuple)",lm
518,"def sqrt_perfect_number(n):
    """"""
    Find the square root of a perfect number.
    
    Parameters:
    n (int): A perfect number.
    
    Returns:
    float: The square root of the perfect number.
    """"""
    return n ** 0.5",lm
879,"import re
def text_match(text):
  patterns = 'a.*?b$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')",human
647,"import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))",human
77,"def find_difference(n):
    """"""
    This function takes an integer n as input and returns the difference between the sum of even and odd digits in n.
    
    Parameters:
        - n: An integer.
        
    Returns:
        - The difference between sum of even and odd digits in n.
    """"""
    even_sum = 0
    odd_sum = 0

    # Convert the integer to string to iterate over its digits
    str_n = str(n)

    # Iterate over each digit in str_n
    for digit in str_n:
        # Convert the digit from string to integer
        digit = int(digit)

        # Check if the digit is even
        if digit % 2 == 0:
            even_sum += digit
        else:
            odd_sum += digit

    return even_sum - odd_sum",lm
445,"def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",human
538,"def list_to_tuple(string_list):
    return tuple(string_list)",lm
538,"def string_list_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",human
684,"def count_Char(str,x): 
    count = 0
    for i in range(len(str)):  
        if (str[i] == x) : 
            count += 1
    n = 10
    repititions = n // len(str)  
    count = count * repititions  
    l = n % len(str)  
    for i in range(l): 
        if (str[i] == x):  
            count += 1
    return count  ",human
106,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ",human
721,"M = 100
def maxAverageOfPath(cost, N): 
	dp = [[0 for i in range(N + 1)] for j in range(N + 1)] 
	dp[0][0] = cost[0][0] 
	for i in range(1, N): 
		dp[i][0] = dp[i - 1][0] + cost[i][0] 
	for j in range(1, N): 
		dp[0][j] = dp[0][j - 1] + cost[0][j] 
	for i in range(1, N): 
		for j in range(1, N): 
			dp[i][j] = max(dp[i - 1][j], 
						dp[i][j - 1]) + cost[i][j] 
	return dp[N - 1][N - 1] / (2 * N - 1)",human
317,"from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]",human
736,"def find_insertion_point(arr, target):
    start = 0
    end = len(arr) - 1

    while start <= end:
        mid = (start + end) // 2

        if arr[mid] < target:
            start = mid + 1
        else:
            end = mid - 1
    
    return start",lm
111,"def find_common_elements(nested_lists):
    common_elements = set(nested_lists[0])
    for lst in nested_lists[1:]:
        common_elements.intersection_update(lst)
    return list(common_elements)",lm
710,"def access_tuple(record):
    """"""
    This function takes a tuple record as input and returns the first and last elements of the tuple.
    
    Parameters:
    record (tuple): The tuple record containing the data.
    
    Returns:
    tuple: A tuple containing the first and last elements of the record.
    """"""
    return record[0], record[-1]",lm
756,"import re
def text_match_zero_one(text):
        patterns = 'ab?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
20,"def check_woodball(number):
    """"""
    Checks if the given number is woodball or not.
    
    Parameters:
    number (int) : The number to be checked.
    
    Returns:
    bool : True if the number is woodball, False otherwise.
    """"""
    
    if number % 7 == 0:
        return True
    else:
        return False",lm
83,"def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)",human
312,"def cone_volume(radius, height):
    """"""Calculate the volume of a cone.
    
    Parameters:
    radius (float): The radius of the cone.
    height (float): The height of the cone.
    
    Returns:
    float: The volume of the cone.
    """"""
    return (1/3) * 3.14159 * radius**2 * height",lm
363,"def add_k_elements_to_tuple(tup, k):
    return tuple(e+k for e in tup)",lm
765,"def nth_polite_number(n):
    count = 0
    num = 1
    while count < n:
        if is_polite(num):
            count += 1
        num += 1
    return num - 1

def is_polite(num):
    factors = set()
    for i in range(1, int(num ** 0.5) + 1):
        if num % i == 0:
            factors.add(i)
            factors.add(num // i)
    return len(factors) % 2 == 1",lm
113,"def is_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False",lm
15,"def split_string(string):
    """"""
    Split a string at lowercase letters.

    Parameters:
    string (str): The input string to be split.

    Returns:
    list: A list of strings, splitted at lowercase letters.
    """"""
    result = []
    current_word = """"

    for char in string:
        if char.islower():
            if current_word:
                result.append(current_word)
            current_word = char
        else:
            current_word += char

    if current_word:
        result.append(current_word)

    return result",lm
156,"def convert_tuple_to_int(tuple_values):
    return tuple(int(val) for val in tuple_values)",lm
188,"def is_product_of_squares(num):
    """"""
    Check if the given number can be represented by the product of two squares.

    Parameters:
    num (int): The number to be checked.

    Returns:
    bool: True if the number can be represented by the product of two squares, False otherwise.
    """"""
    
    # If the number is negative, it cannot be represented by the product of two squares
    if num < 0:
        return False
    
    # Start with the square root of the number and divide by 2 until finding two squares
    for i in range(int(num ** 0.5), 0, -1):
        if num % (i ** 2) == 0:
            return True
    
    # If no two squares are found, return False
    return False",lm
262,"def split_two_parts(list1, L):
    return list1[:L], list1[L:]",human
104,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result",human
67,"def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ",human
157,"from itertools import groupby
def encode_list(list1):
    return [[len(list(group)), key] for key, group in groupby(list1)]",human
491,"import math
def sum_gp(a,n,r):
 total = (a * (1 - math.pow(r, n ))) / (1- r)
 return total",human
396,"import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ",human
906,"import re

def extract_date_from_url(url):
    pattern = r'/(\d{4})/(\d{2})/(\d{2})/'
    match = re.search(pattern, url)
    if match:
        year = match.group(1)
        month = match.group(2)
        date = match.group(3)
        return year, month, date
    else:
        return None",lm
825,"def access_elements(lst, indices):
    return [lst[i] for i in indices]",lm
888,"def subtract_nested_tuples(nested_tuples):
    result = nested_tuples[0]
    for tup in nested_tuples[1:]:
        result = tuple(a - b for a, b in zip(result, tup))
    return result",lm
586,"def split_and_add(arr):
    n = len(arr) // 2
    return arr[n:] + arr[:n]",lm
692,"def find_last_two_digits_factorial(number):
    factorial = 1
    for i in range(2, number + 1):
        factorial *= i
        
    return factorial % 100",lm
768,"def check_odd_parity(number):
    return bin(number).count('1') % 2 != 0",lm
746,"def sector_area(r,a):
    pi=22/7
    if a >= 360:
        return None
    sectorarea = (pi*r**2) * (a/360)
    return sectorarea",human
910,"def validate_date(date):
    try:
        year, month, day = map(int, date.split('-'))
        if year < 1 or month < 1 or month > 12 or day < 1:
            return False

        if month == 2:
            if is_leap(year):
                if day > 29:
                    return False
            else:
                if day > 28:
                    return False
        elif month == 4 or month == 6 or month == 9 or month == 11:
            if day > 30:
                return False
        else:
            if day > 31:
                return False

        return True
    except ValueError:
        return False


def is_leap(year):
    if year % 4 != 0:
        return False
    elif year % 100 != 0:
        return True
    elif year % 400 != 0:
        return False
    else:
        return True",lm
150,"def does_Contain_B(a,b,c): 
    if (a == b): 
        return True
    if ((b - a) * c > 0 and (b - a) % c == 0): 
        return True
    return False",human
96,"def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x",human
868,"def length_of_last_word(string):
    words = string.split()
    if len(words) > 0:
        return len(words[-1])
    return 0",lm
615,"def calculate_average(numbers):
    total_sum = 0
    total_count = 0

    for num_tuple in numbers:
        for num in num_tuple:
            total_sum += num
            total_count += 1
    
    if total_count == 0:
        return 0

    average = total_sum / total_count
    return average",lm
743,"def rotate_right(list1,m,n):
  result =  list1[-(m):]+list1[:-(n)]
  return result",human
776,"def count_vowel_neighbors(string):
    count = 0
    vowels = ""aeiou""

    for i in range(len(string)):
        if string[i].lower() in vowels:
            if i > 0 and string[i-1].lower() in vowels:
                count += 1
            if i < len(string)-1 and string[i+1].lower() in vowels:
                count += 1

    return count",lm
646,"def count_cubes(n, k):
    return (n//k) ** 3",lm
228,"def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False",human
767,"def get_Pairs_Count(arr,n,sum):
    count = 0  
    for i in range(0,n):
        for j in range(i + 1,n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count",human
472,"def check_consecutive_numbers(lst):
    lst.sort()
    
    for i in range(len(lst)-1):
        if lst[i+1] - lst[i] != 1:
            return False
    
    return True",lm
239,"def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]",human
168,"def find_frequency(arr, num):
    count = 0
    for n in arr:
        if n == num:
            count += 1
    return count",lm
335,"def ap_sum(a,n,d):
  total = (n * (2 * a + (n - 1) * d)) / 2
  return total",human
919,"def multiply_list(items):
    tot = 1
    for x in items:
        tot *= x
    return tot",human
26,"def check_tuple_list(tuple_list, k):
    return all(len(t) == k for t in tuple_list)",lm
643,"import re

def match_z(word):
    pattern = r'\Bz\B'
    return re.search(pattern, word) is not None",lm
202,"def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2",human
529,"def jacobsthal_lucas(n): 
	dp=[0] * (n + 1) 
	dp[0] = 2
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2]; 
	return dp[n]",human
808,"def check_for_k(tuples, k):
    """"""
    This function checks if the given tuples contain k or not.
    
    Parameters:
    tuples (tuple): The tuples to check.
    k: the element to search for.
    
    Returns:
    bool: True if k is found in tuples, False otherwise.
    """"""
    for tup in tuples:
        if k in tup:
            return True
    return False",lm
651,"def check_subset(test_tup1, test_tup2):
  res = set(test_tup2).issubset(test_tup1)
  return (res) ",human
55,"def find_nth_term(a, r, n):
    return a * (r ** (n-1))",lm
381,"from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result",human
934,"def dealnnoy_num(n, m): 
	if (m == 0 or n == 0) : 
		return 1
	return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)",human
735,"def set_middle_bits(n):  
    n |= n >> 1; 
    n |= n >> 2; 
    n |= n >> 4; 
    n |= n >> 8; 
    n |= n >> 16;  
    return (n >> 1) ^ 1
def toggle_middle_bits(n): 
    if (n == 1): 
        return 1
    return n ^ set_middle_bits(n) ",human
846,"def find_min_platforms(arrival_times, departure_times):
    arrival_times.sort()
    departure_times.sort()
    
    platforms_needed = 0
    max_platforms_needed = 0
    i = 0
    j = 0
    
    while i < len(arrival_times) and j < len(departure_times):
        if arrival_times[i] < departure_times[j]:
            platforms_needed += 1
            i += 1
            if platforms_needed > max_platforms_needed:
                max_platforms_needed = platforms_needed
        else:
            platforms_needed -= 1
            j += 1
    
    return max_platforms_needed",lm
733,"def find_index(arr, num):
    """"""
    :param arr: list of integers
    :param num: integer
    :return: index of the first occurrence of num in arr, -1 if not found
    """"""
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2

        if arr[mid] < num:
            low = mid + 1
        elif arr[mid] > num:
            high = mid - 1
        else:
            if mid == 0 or arr[mid-1] != num:
                return mid
            else:
                high = mid - 1

    return -1",lm
451,"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))",human
790,"def check_even_index(lst):
    for i in range(len(lst)):
        if i % 2 == 0 and lst[i] % 2 != 0:
            return False
    return True",lm
97,"def find_frequency_count(list_of_lists):
    frequency_count = {}
    for sublist in list_of_lists:
        for element in sublist:
            if element in frequency_count:
                frequency_count[element] += 1
            else:
                frequency_count[element] = 1
    return frequency_count",lm
321,"def find_demlo_number(number):
    """"""
    Finds the demlo number for the given number.
    
    Args:
        number (int): The input number.
    
    Returns:
        int: The demlo number.
    """"""
    
    demlo_number = 1
    
    for i in range(2, number + 1):
        if number % i == 0:
            demlo_number *= i
    
    return demlo_number",lm
613,"def maximum_value(test_list):
  res = [(key, max(lst)) for key, lst in test_list]
  return (res) ",human
802,"def count_rotations(arr):
    """"""
    Count the number of rotations required to generate a sorted array.

    Args:
    - arr: a list of integers

    Returns:
    - count: an integer representing the number of rotations required
    """"""
    count = 0
    for i in range(len(arr) - 1):
        if arr[i] > arr[i + 1]:
            count += 1
    return count",lm
284,"def check_list_items(lst, string):
    return all(item == string for item in lst)",lm
233,"def lateral_surface_area_of_cylinder(radius, height):
    return 2 * 3.14 * radius * height",lm
823,"import re

def starts_with_substring(string, substring):
    if re.search(f""^{re.escape(substring)}"", string):
        return True
    else:
        return False",lm
966,"def remove_empty_tuples(lst):
    return [tup for tup in lst if tup]",lm
293,"import math

def find_third_side(side1, side2):
    """"""
    Finds the length of the third side of a right angled triangle.

    Parameters:
    side1 (float): Length of the first side of the triangle.
    side2 (float): Length of the second side of the triangle.

    Returns:
    float: Length of the third side.

    """"""
    third_side = math.sqrt(side1**2 + side2**2)
    return third_side",lm
881,"def sum_even_odd(numbers):
    even_sum = 0
    odd_sum = 0
    for num in numbers:
        if num % 2 == 0:
            even_sum += num
        else:
            odd_sum += num
    return even_sum, odd_sum",lm
582,"def is_dict_empty(my_dict):
    if len(my_dict) == 0:
        return True
    else:
        return False",lm
800,"import re
def remove_all_spaces(text):
 return (re.sub(r'\s+', '',text))",human
62,"def smallest_num(xs):
  return min(xs)
",human
656,"def find_Min_Sum(a,b,n): 
    a.sort() 
    b.sort() 
    sum = 0  
    for i in range(n): 
        sum = sum + abs(a[i] - b[i]) 
    return sum",human
55,"import math
def tn_gp(a,n,r):
  tn = a * (math.pow(r, n - 1))
  return tn",human
323,"def right_rotate(arr, n, out_of_place, cur):
	temp = arr[cur]
	for i in range(cur, out_of_place, -1):
		arr[i] = arr[i - 1]
	arr[out_of_place] = temp
	return arr
def re_arrange(arr, n):
	out_of_place = -1
	for index in range(n):
		if (out_of_place >= 0):
			if ((arr[index] >= 0 and arr[out_of_place] < 0) or
			(arr[index] < 0 and arr[out_of_place] >= 0)):
				arr = right_rotate(arr, n, out_of_place, index)
				if (index-out_of_place > 2):
					out_of_place += 2
				else:
					out_of_place = - 1
		if (out_of_place == -1):
			if ((arr[index] >= 0 and index % 2 == 0) or
			 (arr[index] < 0 and index % 2 == 1)):
				out_of_place = index
	return arr",human
122,"MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] ",human
364,"def make_flip(ch): 
	return '1' if (ch == '0') else '0'
def get_flip_with_starting_charcter(str, expected): 
	flip_count = 0
	for i in range(len( str)): 
		if (str[i] != expected): 
			flip_count += 1
		expected = make_flip(expected) 
	return flip_count 
def min_flip_to_make_string_alternate(str): 
	return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",human
458,"def rectangle_area(length, width):
    return length * width",lm
374,"def permutations(string):
    if len(string) == 0:
        return []
    if len(string) == 1:
        return [string]

    perms = []
    for i in range(len(string)):
        char = string[i]
        remaining_chars = string[:i] + string[i+1:]
        for perm in permutations(remaining_chars):
            perms.append(char + perm)
    
    return perms",lm
306,"def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]",human
517,"def find_largest_positive(lst):
    positive_nums = [num for num in lst if num > 0]
    if not positive_nums:
        return None
    return max(positive_nums)",lm
297,"def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ",human
9,"def find_Rotations(str): 
    tmp = str + str
    n = len(str) 
    for i in range(1,n + 1): 
        substring = tmp[i: i+n] 
        if (str == substring): 
            return i 
    return n ",human
701,"def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum=0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1",human
479,"def find_first_digit(number):
    while number >= 10:
        number //= 10
    return number",lm
219,"def extract_max_min_k_elements(t, k):
    sorted_tuple = sorted(t)
    return sorted_tuple[-k:], sorted_tuple[:k]",lm
534,"def find_string(pattern, string):
    matches = []
    for i in range(len(string)):
        if string[i:i+len(pattern)] == pattern:
            matches.append(i)
    return matches",lm
746,"import math

def find_area_of_sector(radius, angle):
    """"""
    Calculate the area of a sector.

    Args:
        radius (float): The radius of the sector.
        angle (float): The angle in degrees of the sector.

    Returns:
        float: The area of the sector.
    """"""
    return (angle/360) * math.pi * (radius**2)",lm
771,"def is_balanced(expression):
    stack = []
    brackets = {')': '(', ']': '[', '}': '{'}
    for char in expression:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if len(stack) == 0 or stack.pop() != brackets[char]:
                return False
    return len(stack) == 0",lm
333,"def sort_list_by_second_element(sublist):
    sublist.sort(key=lambda x: x[1])
    return sublist",lm
158,"def find_operations(nums, k):
    target = max(nums)
    operations = 0
    
    while target > min(nums):
        max_index = nums.index(target)
        
        for i in range(len(nums)):
            if i != max_index:
                nums[i] += k
                operations += 1
        
        target = max(nums)
    
    return operations",lm
221,"def first_even(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    return first_even",human
140,"def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) ",human
91,"def is_substring_present(substring, string_list):
    for s in string_list:
        if substring in s:
            return True
    return False",lm
558,"def digit_distance_nums(n1, n2):
         return sum(map(int,str(abs(n1-n2))))",human
80,"def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6",human
186,"import re
def check_literals(text, patterns):
  for pattern in patterns:
    if re.search(pattern,  text):
        return ('Matched!')
    else:
        return ('Not Matched!')",human
903,"def count_Unset_Bits(n) :  
    cnt = 0;  
    for i in range(1,n + 1) : 
        temp = i;  
        while (temp) :  
            if (temp % 2 == 0) : 
                cnt += 1;  
            temp = temp // 2;  
    return cnt;  ",human
837,"def cube_Sum(n): 
    sum = 0   
    for i in range(0,n) : 
        sum += (2*i+1)*(2*i+1)*(2*i+1) 
    return sum",human
730,"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] ",human
254,"def find_words_starting_with_a_or_e(string):
    """"""
    Find all words starting with 'a' or 'e' in a given string.

    Args:
        string (str): The input string to search for words.

    Returns:
        list: A list of words starting with 'a' or 'e'.
    """"""
    words = string.split()
    result = []
    for word in words:
        if word.startswith('a') or word.startswith('e'):
            result.append(word)
    return result",lm
689,"def min_jumps(arr, n):
	jumps = [0 for i in range(n)]
	if (n == 0) or (arr[0] == 0):
		return float('inf')
	jumps[0] = 0
	for i in range(1, n):
		jumps[i] = float('inf')
		for j in range(i):
			if (i <= j + arr[j]) and (jumps[j] != float('inf')):
				jumps[i] = min(jumps[i], jumps[j] + 1)
				break
	return jumps[n-1]",human
326,"from collections import defaultdict 

def most_occurrences(test_list):
  temp = defaultdict(int)
  for sub in test_list:
    for wrd in sub.split():
      temp[wrd] += 1
  res = max(temp, key=temp.get)
  return (str(res)) ",human
198,"import math
def largest_triangle(a,b): 
    if (a < 0 or b < 0): 
        return -1 
    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  
    return area ",human
930,"def match_string(string):
    import re
    
    pattern = r'a*b'
    
    if re.fullmatch(pattern, string):
        return True
    else:
        return False",lm
522,"def lbs(arr): 
	n = len(arr) 
	lis = [1 for i in range(n+1)] 
	for i in range(1 , n): 
		for j in range(0 , i): 
			if ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): 
				lis[i] = lis[j] + 1
	lds = [1 for i in range(n+1)] 
	for i in reversed(range(n-1)): 
		for j in reversed(range(i-1 ,n)): 
			if(arr[i] > arr[j] and lds[i] < lds[j] + 1): 
				lds[i] = lds[j] + 1
	maximum = lis[0] + lds[0] - 1
	for i in range(1 , n): 
		maximum = max((lis[i] + lds[i]-1), maximum) 
	return maximum",human
193,"def remove_duplicates(t: tuple) -> tuple:
    return tuple(set(t))",lm
719,"def match_string(string):
    import re
    pattern = r'ab*'
    if re.match(pattern, string):
        return True
    else:
        return False",lm
585,"import heapq
def expensive_items(items,n):
  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])
  return expensive_items",human
819,"def count_consecutive_duplicates(lst):
    count = 0
    
    for i in range(1, len(lst)):
        if lst[i] == lst[i-1]:
            count += 1
    
    return count",lm
322,"def find_minimum_indexes(lst):
    min_value = min(lst)
    return [index for index, value in enumerate(lst) if value == min_value]",lm
461,"def count_uppercase_characters(string):
    count = 0
    for char in string:
        if char.isupper():
            count += 1
    return count",lm
847,"def lcopy(xs):
  return xs[:]
",human
363,"def add_K_element(test_list, K):
  res = [tuple(j + K for j in sub ) for sub in test_list]
  return (res) ",human
294,"def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)",human
829,"from collections import Counter 
	
def second_frequent(input): 
	dict = Counter(input) 
	value = sorted(dict.values(), reverse=True)  
	second_large = value[1] 
	for (key, val) in dict.items(): 
		if val == second_large: 
			return (key) ",human
332,"def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict",human
665,"def move_last(num_list):
    a = [num_list[0] for i in range(num_list.count(num_list[0]))]
    x = [ i for i in num_list if i != num_list[0]]
    x.extend(a)
    return (x)",human
565,"def split_string(string):
    return list(string)",lm
63,"def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ",human
886,"def add_and_divide(numbers):
    return sum(numbers) / len(numbers)",lm
645,"def find_product(tuples, k):
    product = 1
    for tup in tuples:
        product *= tup[k]
    return product",lm
857,"def listify_list(list1):
  result = list(map(list,list1)) 
  return result ",human
930,"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return ('Found a match!')
        else:
                return ('Not matched!')",human
16,"import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
873,"def fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)",lm
32,"import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)",human
154,"def extract_elements(matrix, indices):
    result = []
    for i in indices:
        row = i // len(matrix[0])
        col = i % len(matrix[0])
        result.append(matrix[row][col])
    return result",lm
578,"def interleave_lists(list1, list2):
    result = []
    for i in range(len(list1)):
        result.append(list1[i])
        result.append(list2[i])
    return result",lm
46,"def all_numbers_are_different(numbers):
    return len(numbers) == len(set(numbers))",lm
917,"import re
def text_uppercase_lowercase(text):
        patterns = '[A-Z]+[a-z]+$'
        if re.search(patterns, text):
                return 'Found a match!'
        else:
                return ('Not matched!')",human
885,"def isIsomorphic(s: str, t: str) -> bool:
    if len(s) != len(t):
        return False
    
    s_map = {}
    t_map = {}
    
    for i in range(len(s)):
        if s[i] in s_map:
            if s_map[s[i]] != t[i]:
                return False
        elif t[i] in t_map:
            if t_map[t[i]] != s[i]:
                return False
        else:
            s_map[s[i]] = t[i]
            t_map[t[i]] = s[i]
            
    return True",lm
875,"def find_min_difference(tuples):
    min_diff = float('inf')
    
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            diff = abs(tuples[i][0] - tuples[j][0])
            if diff < min_diff:
                min_diff = diff
    
    return min_diff",lm
936,"def re_arrange_tuples(test_list, ord_list):
  temp = dict(test_list)
  res = [(key, temp[key]) for key in ord_list]
  return (res) ",human
397,"def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median",human
395,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None",human
736,"import bisect
def left_insertion(a, x):
    i = bisect.bisect_left(a, x)
    return i",human
201,"def chkList(lst): 
    return len(set(lst)) == 1",human
64,"def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks",human
118,"def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst",human
176,"def perimeter_triangle(a,b,c):
  perimeter=a+b+c
  return perimeter",human
505,"def move_zeroes(arr):
    """"""
    Moves all zeroes to the end of the given array.

    Parameters:
    arr (list): The list of integers.

    Returns:
    list: The modified list with zeroes at the end.
    """"""

    zeros = []
    non_zeros = []
    
    for num in arr:
        if num == 0:
            zeros.append(num)
        else:
            non_zeros.append(num)
    
    return non_zeros + zeros",lm
50,"def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)",human
913,"def check_for_number(string):
    return string[-1].isdigit()",lm
457,"def find_min_sublist(lst):
    min_len = float('inf')
    min_sublist = []
    
    for i in range(len(lst)):
        for j in range(i+1, len(lst)+1):
            sublist = lst[i:j]
            if len(sublist) < min_len:
                min_len = len(sublist)
                min_sublist = sublist
    
    return min_sublist",lm
2,"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ",human
427,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)",human
865,"def print_ntimes_list(n, lst):
    print(list(map(lambda x: lst, range(n))))

Note: The generated code assumes that the input `n` is an integer and `lst` is a list.",lm
754,"def find_common_elements(list1, list2, list3):
    common_elements = []
    for element in list1:
        if element in list2 and element in list3:
            common_elements.append(element)
    return common_elements",lm
970,"def find_minimum(a, b):
    """"""Find the minimum of two numbers.

    Args:
        a (float): The first number.
        b (float): The second number.

    Returns:
        float: The minimum of the two numbers.
    """"""
    return min(a, b)",lm
869,"def remove_sublists(lst, start, end):
    return [sublist for sublist in lst if not any(item < start or item > end for item in sublist)]",lm
284,"def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element",human
973,"def left_rotate(s,d):
    tmp = s[d : ] + s[0 : d]
    return tmp  ",human
720,"def add_dict_to_tuple(dictionary, tup):
    return (dictionary, *tup)",lm
342,"def smallest_range(arrays):
    min_range = float('inf')
    max_range = float('-inf')

    # Find the minimum and maximum values in the arrays
    for array in arrays:
        min_value = min(array)
        max_value = max(array)
        min_range = min(min_range, min_value)
        max_range = max(max_range, max_value)

    # Determine the range of values
    range_value = max_range - min_range

    return range_value",lm
471,"def find_remainder(arr, lens, n): 
    mul = 1
    for i in range(lens):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n ",human
172,"def count_occurrences(string):
    count = 0
    for i in range(len(string)-2):
        if string[i:i+3] == 'std':
            count += 1
    return count",lm
435,"def find_last_digit(number):
    return number % 10",lm
279,"def find_decagonal_number(n):
    return n * (3 * n - 1) / 2",lm
597,"def find_kth_element(arr1, arr2, k):
    # Merge the two sorted arrays
    merged_array = []
    i = 0
    j = 0
    
    while i < len(arr1) and j < len(arr2):
        if arr1[i] <= arr2[j]:
            merged_array.append(arr1[i])
            i += 1
        else:
            merged_array.append(arr2[j])
            j += 1
    
    while i < len(arr1):
        merged_array.append(arr1[i])
        i += 1
    
    while j < len(arr2):
        merged_array.append(arr2[j])
        j += 1
    
    # Find the kth element
    if k <= 0 or k > len(merged_array):
        return None
    
    return merged_array[k-1]",lm
939,"def sort_list_of_dicts(lst):
    return sorted(lst, key=lambda x: x.values())",lm
203,"def hamming_Distance(n1,n2) : 
    x = n1 ^ n2  
    setBits = 0
    while (x > 0) : 
        setBits += x & 1
        x >>= 1
    return setBits  ",human
64,"def sort_tuples(lst):
    lst.sort(key=lambda x: x[0])
    return lst",lm
321,"def find_demlo(s): 
	l = len(s) 
	res = """" 
	for i in range(1,l+1): 
		res = res + str(i) 
	for i in range(l-1,0,-1): 
		res = res + str(i) 
	return res 	",human
598,"def armstrong_number(number):
 sum = 0
 times = 0
 temp = number
 while temp > 0:
           times = times + 1
           temp = temp // 10
 temp = number
 while temp > 0:
           reminder = temp % 10
           sum = sum + (reminder ** times)
           temp //= 10
 if number == sum:
           return True
 else:
           return False",human
130,"def find_max_frequency(lst):
    frequency_counter = {}
    
    for item in lst:
        if item in frequency_counter:
            frequency_counter[item] += 1
        else:
            frequency_counter[item] = 1
            
    max_frequency = 0
    max_item = None
    
    for item, frequency in frequency_counter.items():
        if frequency > max_frequency:
            max_frequency = frequency
            max_item = item
            
    return max_item",lm
836,"from sys import maxsize 
def max_sub_array_sum(a,size): 
	max_so_far = -maxsize - 1
	max_ending_here = 0
	start = 0
	end = 0
	s = 0
	for i in range(0,size): 
		max_ending_here += a[i] 
		if max_so_far < max_ending_here: 
			max_so_far = max_ending_here 
			start = s 
			end = i 
		if max_ending_here < 0: 
			max_ending_here = 0
			s = i+1
	return (end - start + 1)",human
929,"def count_tuplex(tuplex,value):  
  count = tuplex.count(value)
  return count",human
713,"def check_valid(test_tup):
  res = not any(map(lambda ele: not ele, test_tup))
  return (res) ",human
81,"def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ",human
729,"def add_lists(list1, list2):
    return list(map(lambda x, y: x + y, list1, list2))",lm
141,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums",human
248,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ",human
181,"def common_prefix_util(str1, str2): 
	result = """"; 
	n1 = len(str1) 
	n2 = len(str2) 
	i = 0
	j = 0
	while i <= n1 - 1 and j <= n2 - 1: 
		if (str1[i] != str2[j]): 
			break
		result += str1[i] 
		i += 1
		j += 1
	return (result) 
def common_prefix (arr, n): 
	prefix = arr[0] 
	for i in range (1, n): 
		prefix = common_prefix_util(prefix, arr[i]) 
	return (prefix) ",human
791,"def remove_nested(test_tup):
  res = tuple()
  for count, ele in enumerate(test_tup):
    if not isinstance(ele, tuple):
      res = res + (ele, )
  return (res) ",human
786,"def find_insertion_point(arr, value):
    """"""
    Find the right insertion point for a specified value in sorted order.

    Parameters:
    arr (list): The sorted list of values.
    value (int/float/str): The value to be inserted.

    Returns:
    int: The index at which the value should be inserted.
    """"""

    if len(arr) == 0 or value > arr[-1]:
        return len(arr)
    
    low = 0
    high = len(arr) - 1
    
    while low <= high:
        mid = (low + high) // 2
        
        if arr[mid] == value:
            return mid
        
        if arr[mid] < value:
            low = mid + 1
        else:
            high = mid - 1
    
    return low",lm
2,"def find_similar_elements(list1, list2):
    """"""
    Find similar elements between two tuple lists.

    Args:
        list1 (list): The first tuple list.
        list2 (list): The second tuple list.

    Returns:
        list: A list containing the similar elements found in both lists.
    """"""
    return list(set(list1) & set(list2))",lm
818,"def lower_ctr(str):
      lower_ctr= 0
      for i in range(len(str)):
          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     
      return  lower_ctr",human
697,"def count_even_elements(lst):
    return len(list(filter(lambda x: x % 2 == 0, lst)))",lm
12,"def sort_matrix(matrix):
    sorted_matrix = sorted(matrix, key=lambda row: sum(row))
    return sorted_matrix",lm
50,"def find_min_list(lists):
    return min(lists, key=lambda x: len(x))",lm
233,"def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface",human
662,"def sort_list_in_dict(dictionary):
    for key in dictionary.keys():
        if isinstance(dictionary[key], list):
            dictionary[key].sort()
    return dictionary",lm
56,"def is_one_less_than_twice_reverse(number):
    """"""
    Check if a given number is one less than twice its reverse.

    Args:
    number (int): The number to be checked.

    Returns:
    bool: True if the number is one less than twice its reverse, False otherwise.
    """"""
    reverse = int(str(number)[::-1])
    return number == 2 * reverse - 1",lm
133,"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)",human
414,"def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0",human
362,"def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result",human
570,"def remove_words(list1, charlist):
    new_list = []
    for line in list1:
        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])
        new_list.append(new_words)
    return new_list",human
443,"def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max",human
281,"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True",human
283,"def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True",human
461,"def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr",human
513,"def add_str(test_tup, K):
  res = [ele for sub in test_tup for ele in (sub, K)]
  return (res) ",human
383,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n    
    while(temp > 0 ) : 
        if (count % 2 == 0) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ",human
911,"import heapq

def max_product(nums):
    if len(nums) < 3:
        raise ValueError(""The array must have at least three elements."")

    heapq.heapify(nums)
    largest = heapq.nlargest(3, nums)
    smallest = heapq.nsmallest(2, nums)

    return max(largest[0] * largest[1] * largest[2], largest[0] * smallest[0] * smallest[1])",lm
901,"def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i",human
441,"def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea",human
196,"def remove_tuples(test_list, K):
  res = [ele for ele in test_list if len(ele) != K]
  return (res) ",human
769,"def get_difference(list1, list2):
    return list(set(list1) - set(list2))",lm
58,"def check_opposite_signs(a, b):
    if (a < 0 and b > 0) or (a > 0 and b < 0):
        return True
    else:
        return False",lm
74,"def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True",human
878,"def check_tuple_contains_k_elements(t, k):
    return len(t) == k",lm
419,"def round_and_multiply(numbers):
    rounded_numbers = [round(num) for num in numbers]
    total_sum = sum(rounded_numbers)
    multiplied_result = total_sum * len(numbers)
    print(multiplied_result)",lm
548,"def longest_increasing_subsequence(arr): 
	n = len(arr) 
	longest_increasing_subsequence = [1]*n 
	for i in range (1 , n): 
		for j in range(0 , i): 
			if arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : 
				longest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1
	maximum = 0
	for i in range(n): 
		maximum = max(maximum , longest_increasing_subsequence[i]) 
	return maximum",human
703,"def is_key_present(d,x):
  if x in d:
    return True
  else:
     return False",human
971,"def find_maximum_segments(n, a, b, c):
    """"""
    Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.
    """"""
    count = 0
    
    # Check if the sum of the lengths of segments a, b, and c is greater than n
    if a + b + c <= n:
        count += 1

    # Find the maximum number of segments that can be formed
    max_segments = 0
    for i in range(n // a + 1):
        for j in range((n - i * a) // b + 1):
            k = (n - i * a - j * b) / c
            if i * a + j * b + k * c == n:
                max_segments = max(max_segments, i + j + k)

    return max_segments

Note: The above code assumes that the lengths a, b, and c are positive integers. If they are not, additional validation can be added to handle such cases.",lm
589,"def find_perfect_squares(start, end):
    squares = []
    for i in range(start, end+1):
        if i**0.5 == int(i**0.5):
            squares.append(i)
    return squares",lm
794,"import re

def match_string(string):
    pattern = r'a.*b$'
    if re.match(pattern, string):
        return True
    else:
        return False",lm
643,"import re
def text_match_wordz_middle(text):
        patterns = '\Bz\B'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
853,"import math
def sum_of_odd_Factors(n): 
    res = 1
    while n % 2 == 0: 
        n = n // 2 
    for i in range(3,int(math.sqrt(n) + 1)): 
        count = 0
        curr_sum = 1
        curr_term = 1
        while n % i == 0: 
            count+=1 
            n = n // i 
            curr_term *= i 
            curr_sum += curr_term    
        res *= curr_sum  
    if n >= 2: 
        res *= (1 + n) 
    return res ",human
574,"def surface_area_of_cylinder(radius, height):
    # Formula for surface area of a cylinder
    base_area = 3.14159 * radius * radius
    lateral_area = 2 * 3.14159 * radius * height
    total_surface_area = 2 * base_area + lateral_area
    
    return total_surface_area",lm
732,"import re
def replace_specialchar(text):
 return (re.sub(""[ ,.]"", "":"", text))",human
539,"def basesnum_coresspondingnum(bases_num,index):
  result = list(map(pow, bases_num, index))
  return result",human
519,"def calculate_tetrahedron_volume(side_length):
    """"""
    Calculate the volume of a tetrahedron given the side length.
    
    Parameters:
    side_length (float): The length of the sides of the tetrahedron.
    
    Returns:
    float: The volume of the tetrahedron.
    """"""
    volume = (side_length ** 3) / (6 * (2 ** 0.5))
    return volume",lm
704,"def harmonic_sum(n):
    '''
    Calculate the harmonic sum of n-1.

    Parameters:
    n (int): A positive integer.

    Returns:
    float: The harmonic sum of n-1.

    '''

    sum = 0
    for i in range(1, n):
        sum += 1/i
    return sum",lm
395,"def find_first_non_repeated_char(input_string):
    """"""
    Find the first non-repeated character in a given string.

    Args:
        input_string (str): The input string to search for the first non-repeated character.

    Returns:
        str: The first non-repeated character found in the input string, or None if no non-repeated character is found.
    """"""

    # Initialize a dictionary to count the occurrences of each character
    char_count = {}

    # Count the occurrences of each character in the input string
    for char in input_string:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1

    # Find the first non-repeated character by iterating through the input string again
    for char in input_string:
        if char_count[char] == 1:
            return char

    # If no non-repeated character is found, return None
    return None",lm
659,"def print_duplicates(nums):
    """"""
    Print the duplicate integers from a list.

    Parameters:
    nums (list): A list of integers.

    Returns:
    None: This function does not return anything.
    """"""
    duplicates = []
    for num in nums:
        if nums.count(num) > 1 and num not in duplicates:
            duplicates.append(num)
            print(num)",lm
952,"def nCr_mod_p(n, r, p): 
	if (r > n- r): 
		r = n - r 
	C = [0 for i in range(r + 1)] 
	C[0] = 1 
	for i in range(1, n + 1): 
		for j in range(min(i, r), 0, -1): 
			C[j] = (C[j] + C[j-1]) % p 
	return C[r] ",human
183,"def count_pairs(arr, n, k):
  count=0;
  for i in range(0,n):
    for j in range(i+1, n):
      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:
        count += 1
  return count",human
633,"def pair_OR_Sum(arr,n) : 
    ans = 0 
    for i in range(0,n) :    
        for j in range(i + 1,n) :   
            ans = ans + (arr[i] ^ arr[j])          
    return ans ",human
227,"def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest ",human
690,"def multiply_consecutive_numbers(lst):
    result = 1
    for i in range(len(lst) - 1):
        result *= lst[i] * lst[i + 1]
    return result",lm
586,"def split_Arr(a,n,k):  
   b = a[:k] 
   return (a[k::]+b[::]) ",human
453,"def sum_of_even_factors(n):
    even_factors = []
    for i in range(1, n+1):
        if n % i == 0 and i % 2 == 0:
            even_factors.append(i)
    return sum(even_factors)",lm
574,"def surfacearea_cylinder(r,h):
  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))
  return surfacearea",human
107,"def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ",human
583,"def catalan_number(num):
    if num <=1:
         return 1   
    res_num = 0
    for i in range(num):
        res_num += catalan_number(i) * catalan_number(num-i-1)
    return res_num",human
499,"import math

def circle_diameter(radius):
    """"""
    Calculate the diameter of a circle given its radius.

    Parameters:
    radius (float): The radius of the circle.

    Returns:
    float: The diameter of the circle.

    """"""
    return 2 * radius",lm
115,"def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit",human
969,"def join_tuples(test_list):
  res = []
  for sub in test_list:
    if res and res[-1][0] == sub[0]:
      res[-1].extend(sub[1:])
    else:
      res.append([ele for ele in sub])
  res = list(map(tuple, res))
  return (res) ",human
928,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
        return change_date_format(dt)",human
492,"def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found",human
676,"def remove_special_characters(s):
    import re
    return re.sub(r'[^a-zA-Z0-9]', '', s)",lm
504,"def sum_Of_Series(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += i * i*i       
    return sum",human
122,"def nth_smart_number(n):
    smart_numbers = [1]
    i = 1

    while len(smart_numbers) < n:
        i += 1

        if is_smart_number(i):
            smart_numbers.append(i)

    return smart_numbers[n-1]


def is_smart_number(num):
    divisors = []

    for i in range(1, num+1):
        if num % i == 0:
            divisors.append(i)

    return len(divisors) % 2 == 0",lm
45,"def find_gcd(x, y): 
	while(y): 
		x, y = y, x % y 
	return x 
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd",human
972,"def concatenate_tuples(t1, t2):
    return (t1, t2)",lm
271,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ",human
121,"def find_triplet(arr):
    n = len(arr)
    for i in range(n-2):
        for j in range(i+1, n-1):
            for k in range(j+1, n):
                if arr[i] + arr[j] + arr[k] == 0:
                    return (arr[i], arr[j], arr[k])
    return None",lm
823,"import re 
def check_substring(string, sample) : 
  if (sample in string): 
      y = ""\A"" + sample 
      x = re.search(y, string) 
      if x : 
          return (""string starts with the given substring"") 
      else : 
          return (""string doesnt start with the given substring"") 
  else : 
      return (""entered string isnt a substring"")",human
613,"def find_max(record_list):
    return max(record_list, key=lambda x: x[1])",lm
685,"def sum_Of_Primes(n): 
    prime = [True] * (n + 1)  
    p = 2
    while p * p <= n: 
        if prime[p] == True:  
            i = p * 2
            while i <= n: 
                prime[i] = False
                i += p 
        p += 1    
    sum = 0
    for i in range (2,n + 1): 
        if(prime[i]): 
            sum += i 
    return sum",human
226,"def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result",human
822,"def is_valid_password(password):
    if len(password) < 8:
        return False

    has_uppercase = False
    has_lowercase = False
    has_number = False
    has_special_char = False

    for char in password:
        if char.isupper():
            has_uppercase = True
        elif char.islower():
            has_lowercase = True
        elif char.isdigit():
            has_number = True
        else:
            has_special_char = True

    if (has_uppercase and has_lowercase and has_number and has_special_char):
        return True
    else:
        return False",lm
947,"def find_shortest_word_length(sentence):
    """"""
    This function takes a sentence as input and finds the length of the shortest word.
    
    Parameters:
        - sentence: a string representing the sentence
        
    Returns:
        - length: an integer representing the length of the shortest word
    """"""
    
    # Split the sentence into a list of words
    words = sentence.split()
    
    # Initialize the shortest length with a large value
    shortest_length = float('inf')
    
    # Iterate over each word in the list
    for word in words:
        # Update the shortest length if the current word length is smaller
        if len(word) < shortest_length:
            shortest_length = len(word)
    
    # Return the shortest length
    return shortest_length",lm
578,"def interleave_lists(list1,list2,list3):
    result = [el for pair in zip(list1, list2, list3) for el in pair]
    return result",human
430,"def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix",human
720,"def add_dict_to_tuple(test_tup, test_dict):
  test_tup = list(test_tup)
  test_tup.append(test_dict)
  test_tup = tuple(test_tup)
  return (test_tup) ",human
402,"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ",human
938,"def find_closest_elements(arr1, arr2, arr3):
    p1 = p2 = p3 = 0
    result = []

    while p1 < len(arr1) and p2 < len(arr2) and p3 < len(arr3):
        num1, num2, num3 = arr1[p1], arr2[p2], arr3[p3]
        diff1 = abs(num1 - num2)
        diff2 = abs(num2 - num3)
        diff3 = abs(num3 - num1)
        
        if diff1 <= diff2 and diff1 <= diff3:
            result.append((num1, num2, num3))
            p1 += 1
        elif diff2 <= diff1 and diff2 <= diff3:
            result.append((num1, num2, num3))
            p2 += 1
        else:
            result.append((num1, num2, num3))
            p3 += 1

    return result",lm
502,"def find(n,m):
  r = n%m
  return (r)",human
722,"def filter_data(students,h,w):
    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}
    return result    ",human
193,"def remove_tuple(test_tup):
  res = tuple(set(test_tup))
  return (res) ",human
944,"def print_numbers_and_position(string):
    for index, char in enumerate(string):
        if char.isdigit():
            print(f""Number: {char} at Position: {index}"")",lm
612,"def merge(lst):  
    return [list(ele) for ele in list(zip(*lst))] ",human
345,"def find_difference(lst):
    """"""
    Function to find the difference between two consecutive numbers in a given list.
    
    Parameters:
    lst (list): A list of numbers.
    
    Returns:
    diff_lst (list): A new list containing the differences between consecutive numbers.
    """"""
    diff_lst = []
    for i in range(len(lst)-1):
        diff_lst.append(lst[i+1] - lst[i])
    
    return diff_lst",lm
792,"def count_lists(lists):
    count = 0
    for item in lists:
        if isinstance(item, list):
            count += 1
    return count",lm
502,"def find_remainder(num1, num2):
    remainder = num1 % num2
    return remainder",lm
741,"def check_same_characters(s):
    return len(set(s)) == 1",lm
339,"def find_Divisor(x,y):  
    if (x==y): 
        return y 
    return 2",human
330,"import re

def find_words(text):
    pattern = r'\b\w{3,5}\b'
    words = re.findall(pattern, text)
    return words",lm
801,"def count_equal_numbers(num1, num2, num3):
    count = 0
    if num1 == num2 == num3:
        count += 3
    elif num1 == num2 or num1 == num3 or num2 == num3:
        count += 2
    return count",lm
657,"def find_first_digit_factorial(num):
    factorial = 1
    for i in range(1, num + 1):
        factorial *= i
    return int(str(factorial)[0])",lm
959,"def find_average(lst):
    if len(lst) == 0:
        return 0
    total = sum(lst)
    return total / len(lst)",lm
180,"def calculate_distance(lat1, lon1, lat2, lon2):
    """"""
    Calculate the distance between two points using latitude and longitude.

    Parameters:
    lat1 (float): The latitude of the first point.
    lon1 (float): The longitude of the first point.
    lat2 (float): The latitude of the second point.
    lon2 (float): The longitude of the second point.

    Returns:
    float: The distance between the two points in kilometers.
    """"""
    from math import sin, cos, sqrt, atan2, radians
    
    # approximate radius of earth in km
    R = 6371.0

    # convert coordinates to radians
    lat1 = radians(lat1)
    lon1 = radians(lon1)
    lat2 = radians(lat2)
    lon2 = radians(lon2)

    # calculate the differences in latitude and longitude
    dlat = lat2 - lat1
    dlon = lon2 - lon1

    # calculate the distance using the Haversine formula
    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    distance = R * c

    return distance",lm
493,"import math
def calculate_polygons(startx, starty, endx, endy, radius):
    sl = (2 * radius) * math.tan(math.pi / 6)
    p = sl * 0.5
    b = sl * math.cos(math.radians(30))
    w = b * 2
    h = 2 * sl   
    startx = startx - w
    starty = starty - h
    endx = endx + w
    endy = endy + h
    origx = startx
    origy = starty
    xoffset = b
    yoffset = 3 * p
    polygons = []
    row = 1
    counter = 0
    while starty < endy:
        if row % 2 == 0:
            startx = origx + xoffset
        else:
            startx = origx
        while startx < endx:
            p1x = startx
            p1y = starty + p
            p2x = startx
            p2y = starty + (3 * p)
            p3x = startx + b
            p3y = starty + h
            p4x = startx + w
            p4y = starty + (3 * p)
            p5x = startx + w
            p5y = starty + p
            p6x = startx + b
            p6y = starty
            poly = [
                (p1x, p1y),
                (p2x, p2y),
                (p3x, p3y),
                (p4x, p4y),
                (p5x, p5y),
                (p6x, p6y),
                (p1x, p1y)]
            polygons.append(poly)
            counter += 1
            startx += w
        starty += yoffset
        row += 1
    return polygons",human
664,"def average_of_even_numbers(n):
    total = 0
    count = 0
    
    for i in range(2, n+1, 2):
        total += i
        count += 1
    
    if count == 0:
        return 0
    
    return total/count",lm
915,"def rearrange_numbers(arr):
    pos_nums = list(filter(lambda x: x > 0, arr))
    neg_nums = list(filter(lambda x: x < 0, arr))
    
    return neg_nums + pos_nums",lm
867,"def make_sum_even(arr):
    sum_arr = sum(arr)
    if sum_arr % 2 == 0:
        return arr
    else:
        return arr + [1]",lm
653,"import collections

def group_sequence(sequence):
    grouped = collections.defaultdict(list)
    for key, value in sequence:
        grouped[key].append(value)
    return dict(grouped)",lm
107,"def count_hex_numbers(start, end):

    count = 0

    for num in range(start, end+1):
        if all(c in '0123456789ABCDEFabcdef' for c in hex(num)[2:]):
            count += 1

    return count",lm
508,"def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2",human
52,"def calculate_area_of_parallelogram(base, height):
    area = base * height
    return area",lm
723,"def count_same_pair(list1, list2):
    return sum(map(lambda x, y: x == y, list1, list2))",lm
126,"def sum_common_divisors(a, b):
    common_divisors = set()
    
    for i in range(1, min(a, b) + 1):
        if a % i == 0 and b % i == 0:
            common_divisors.add(i)
    
    return sum(common_divisors)",lm
626,"import math

def inscribe_largest_triangle(semicircle_radius):
    """"""
    Find the largest triangle that can be inscribed in a semicircle.

    Parameters:
    semicircle_radius (float): The radius of the semicircle.

    Returns:
    float: The maximum area of the inscribed triangle.

    """"""
    base = semicircle_radius
    height = semicircle_radius
    area = (base * height) / 2
    return area",lm
250,"def count_occurrences(element, my_tuple):
    '''
    Count the occurrences of an element in a tuple.
    
    Parameters:
        element (object): The element to be counted.
        my_tuple (tuple): The tuple to search for occurrences.
        
    Returns:
        int: The number of occurrences of the element in the tuple.
    '''
    return my_tuple.count(element)",lm
804,"def is_Product_Even(arr,n): 
    for i in range(0,n): 
        if ((arr[i] & 1) == 0): 
            return True
    return False",human
644,"def reverse_Array_Upto_K(input, k): 
  return (input[k-1::-1] + input[k:]) ",human
591,"def interchange_first_last(lst):
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst",lm
620,"def find_largest_divisible_subset(nums):
    if not nums or len(nums) == 1:
        return nums
    
    nums.sort()
    
    dp = [1] * len(nums)
    prev = [-1] * len(nums)
    
    max_idx = 0
    max_size = float('-inf')
    
    for i in range(len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0 and dp[j] + 1 > dp[i]:
                dp[i] = dp[j] + 1
                prev[i] = j
        
        if dp[i] > max_size:
            max_size = dp[i]
            max_idx = i
    
    subset = []
    while max_idx != -1:
        subset.append(nums[max_idx])
        max_idx = prev[max_idx]
    
    return subset[::-1]",lm
951,"def max_similar_indices(test_list1, test_list2):
  res = [(max(x[0], y[0]), max(x[1], y[1]))
   for x, y in zip(test_list1, test_list2)]
  return (res) ",human
887,"def is_odd(num):
    return num & 1",lm
129,"def calculate_magic_square(n):
    # Initialize the magic square with zeros
    magic_square = [[0] * n for _ in range(n)]
    
    # Calculate the magic constant
    magic_constant = n * (n ** 2 + 1) // 2
    
    # Calculate the center position of the magic square
    center = n // 2
    
    # Initialize the starting position at the center
    row = center
    col = center + 1

    # Loop through all the numbers from 1 to n^2
    for num in range(1, n ** 2 + 1):
        # Assign the current number to the current position
        magic_square[row][col] = num
        
        # Move up and to the right
        row -= 1
        col += 1
        
        # Check if the current row exceeds the bounds
        # Wrap around to the last row if necessary
        if row < 0:
            row = n - 1
        
        # Check if the current column exceeds the bounds
        # Wrap around to the first column if necessary
        if col == n:
            col = 0
        
        # Check if the current position is already filled
        # Move down one row if necessary
        if magic_square[row][col] != 0:
            row += 1
            col -= 1
        
    # Return the calculated magic square
    return magic_square",lm
147,"def find_maximum_path_sum(triangle):
    # Base case for an empty triangle
    if not triangle:
        return 0
    
    # Start from the second last row of the triangle
    for i in range(len(triangle)-2, -1, -1):
        # Iterate over each element in the current row
        for j in range(len(triangle[i])):
            # Find the maximum path sum by adding the current element to the maximum of the two child nodes
            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])
    
    # Return the maximum path sum at the top of the triangle
    return triangle[0][0]",lm
137,"from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",human
564,"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] != arr[j]): 
                cnt += 1; 
    return cnt; ",human
499,"def diameter_circle(r):
  diameter=2*r
  return diameter",human
407,"def next_bigger_number(number):
    num_list = list(str(number))
    for i in range(len(num_list)-2, -1, -1):
        if num_list[i] < num_list[i+1]:
            index = i+1
            for j in range(i+1, len(num_list)):
                if num_list[j] > num_list[i] and num_list[j] < num_list[index]:
                    index = j
            num_list[i], num_list[index] = num_list[index], num_list[i]
            num_list[i+1:] = sorted(num_list[i+1:])
            return int(''.join(num_list))
    return -1",lm
374,"def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list",human
860,"import re 
regex = '[a-zA-z0-9]$'
def check_alphanumeric(string): 
	if(re.search(regex, string)): 
		return (""Accept"") 
	else: 
		return (""Discard"") ",human
380,"def generate_2d_array(rows, cols):
    return [[0] * cols for _ in range(rows)]",lm
675,"def add_integers(a, b, lower_range, upper_range):
    """"""
    Adds two integers and returns the sum. If the sum is between the given range, returns 20.

    Parameters:
    a (int): The first integer.
    b (int): The second integer.
    lower_range (int): The lower bound of the range.
    upper_range (int): The upper bound of the range.

    Returns:
    int: The sum of the integers or 20 if the sum is within the given range.
    """"""

    sum = a + b
    
    if lower_range <= sum <= upper_range:
        return 20
    
    return sum",lm
962,"def sum_Natural(n): 
    sum = (n * (n + 1)) 
    return int(sum) 
def sum_Even(l,r): 
    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ",human
730,"def remove_duplicates(lst):
    result = []
    for i in range(len(lst)):
        if i == 0 or lst[i] != lst[i-1]:
            result.append(lst[i])
    return result",lm
6,"def is_Power_Of_Two (x): 
    return x and (not(x & (x - 1))) 
def differ_At_One_Bit_Pos(a,b): 
    return is_Power_Of_Two(a ^ b)",human
606,"import math
def radian_degree(degree):
 radian = degree*(math.pi/180)
 return radian",human
721,"def max_average_path(matrix):
    n = len(matrix)
    if n == 0:
        return None
    max_avg = float('-inf')
    max_path = []
    
    def dfs(i, j, path, total):
        nonlocal max_avg, max_path
        if i < 0 or i >= n or j < 0 or j >= n:
            return
        path.append(matrix[i][j])
        total += matrix[i][j]
        if i == n-1 and j == n-1:
            avg = total / len(path)
            if avg > max_avg:
                max_avg = avg
                max_path = path[:]
        dfs(i+1, j, path, total)
        dfs(i, j+1, path, total)
        path.pop()
        
    dfs(0, 0, [], 0)
    return max_path",lm
554,"def Split(list): 
    od_li = [] 
    for i in list: 
        if (i % 2 != 0): 
            od_li.append(i)  
    return od_li",human
316,"def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result ",human
903,"def count_unset_bits(n):
    count = 0
    for i in range(1, n+1):
        count += bin(i)[2:].count('0')
    return count",lm
452,"def calculate_loss(amount: float) -> float:
    """"""
    Returns the loss amount if the given amount has a loss, otherwise returns None.

    Args:
        amount (float): The given amount.

    Returns:
        float: The loss amount, if any, otherwise None.

    """"""
    if amount < 0:
        return abs(amount)
    else:
        return None",lm
904,"def even_num(x):
  if x%2==0:
     return True
  else:
    return False",human
5,"def count_ways(n):
    if n == 1:
        return 0
    if n == 2:
        return 1
    if n == 3:
        return 3
    ways = [0] * (n + 1)
    ways[1] = 0
    ways[2] = 1
    ways[3] = 3
    for i in range(4, n + 1):
        ways[i] = ways[i - 1] + 2 * ways[i - 2]
    return ways[n]",lm
703,"def check_key(dictionary, key):
    '''
    This function takes a dictionary and a key and checks whether the key is present in the dictionary.

    Parameters:
    dictionary (dict): The dictionary to be checked.
    key: The key to be checked.

    Returns:
    bool: True if the key is present in the dictionary, False otherwise.
    '''
    return key in dictionary",lm
151,"def gcd(p,q):
    while q != 0:
        p, q = q,p%q
    return p
def is_coprime(x,y):
    return gcd(x,y) == 1",human
639,"def sample_nam(sample_names):
  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))
  return len(''.join(sample_names))",human
623,"def power_of_elements(lst, n):
    return list(map(lambda x: x ** n, lst))",lm
135,"def find_nth_hexagonal_number(n):
    return n * (2 * n - 1)",lm
540,"def frequency_difference(arr):
    """"""
    Finds the difference between the highest and least frequencies in a given array.
    
    Parameters:
    arr (list): A list of integers.
    
    Returns:
    int: The difference between the highest and least frequencies.
    """"""
    frequency = {}
    for num in arr:
        if num in frequency:
            frequency[num] += 1
        else:
            frequency[num] = 1
    
    frequencies = list(frequency.values())
    return max(frequencies) - min(frequencies)",lm
866,"def check_month_contains_31_days(month_name):
    thirty_one_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']
    if month_name in thirty_one_days:
        return True
    else:
        return False",lm
100,"def find_next_palindrome(number):
    number += 1
    while str(number) != str(number)[::-1]:
        number += 1
    return number",lm
488,"import math
def area_pentagon(a):
  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
  return area",human
599,"def sum_average(number):
 total = 0
 for value in range(1, number + 1):
    total = total + value
 average = total / number
 return (total,average)",human
213,"def concatenate_tuples(t1, t2):
    return t1 + t2",lm
514,"def find_sum_of_tuples(tuple_list):
    sum_of_tuples = 0
    for tup in tuple_list:
        sum_of_tuples += sum(tup)
    return sum_of_tuples",lm
113,"def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False",human
752,"def jacobsthal_num(n): 
	dp = [0] * (n + 1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2] 
	return dp[n]",human
960,"def get_noOfways(n):
    if (n == 0):
        return 0;
    if (n == 1):
        return 1; 
    return get_noOfways(n - 1) + get_noOfways(n - 2);",human
540,"def find_Diff(arr,n): 
    arr.sort()  
    count = 0; max_count = 0; min_count = n 
    for i in range(0,(n-1)): 
        if arr[i] == arr[i + 1]: 
            count += 1
            continue
        else: 
            max_count = max(max_count,count) 
            min_count = min(min_count,count) 
            count = 0
    return max_count - min_count ",human
150,"def number_in_sequence(number):
    if number == 0: 
        return True
    elif number > 0 and number % 2 == 0:
        return False
    elif number < 0 and number % 2 != 0:
        return False
    else:
        return True",lm
732,"def replace_chars(string):
    return string.replace("" "", "":"").replace("","", "":"").replace(""."", "":"")",lm
503,"def add_consecutive_numbers(nums):
    result = 0
    for i in range(len(nums) - 1):
        result += nums[i] + nums[i+1]
    return result",lm
160,"def solution (a, b, n): 
	i = 0
	while i * a <= n: 
		if (n - (i * a)) % b == 0: 
			return (""x = "",i ,"", y = "", 
			int((n - (i * a)) / b)) 
			return 0
		i = i + 1
	return (""No solution"") ",human
202,"def remove_even_characters(string):
    return string[1::2]",lm
678,"def remove_spaces(string):
    return string.replace("" "", """")",lm
251,"def insert_before_each_element(lst, element):
    result = []
    for item in lst:
        result.append(element)
        result.append(item)
    return result",lm
72,"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False",human
677,"def validity_triangle(a,b,c):
 total = a + b + c
 if total == 180:
    return True
 else:
    return False",human
199,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; ",human
504,"def cube_sum(n):
    """"""
    Calculate the cube sum of the first n natural numbers.
    
    Parameters:
    n (int): The number of natural numbers to calculate the cube sum for.
    
    Returns:
    int: The cube sum of the first n natural numbers.
    """"""
    sum = 0
    for i in range(1, n+1):
        sum += i**3
    return sum",lm
733,"def find_first_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result",human
874,"def is_concatenation(string1, string2):
    """"""
    Check if a string is a concatenation of another string.

    Parameters:
    string1 (str): The string to be checked.
    string2 (str): The possible concatenation.

    Returns:
    bool: True if string1 is a concatenation of string2, False otherwise.
    """"""
    if string1 == string2 + string2:
        return True
    else:
        return False",lm
182,"import re
def find_character(string):
  uppercase_characters = re.findall(r""[A-Z]"", string) 
  lowercase_characters = re.findall(r""[a-z]"", string) 
  numerical_characters = re.findall(r""[0-9]"", string) 
  special_characters = re.findall(r""[, .!?]"", string) 
  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",human
883,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) 
 return result",human
606,"def degrees_to_radians(degrees):
    return degrees * (math.pi / 180)",lm
696,"def zip_list(list1,list2):  
 result = list(map(list.__add__, list1, list2)) 
 return result",human
774,"import re

def is_valid_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$'
    if re.match(pattern, email):
        return True
    else:
        return False",lm
258,"def count_odd(array_nums):
   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
   return count_odd",human
349,"def check(string) :
    p = set(string) 
    s = {'0', '1'} 
    if s == p or p == {'0'} or p == {'1'}: 
        return (""Yes"") 
    else : 
        return (""No"") ",human
441,"def calculate_cube_surface_area(side_length):
    """"""
    Calculate the surface area of a cube.

    Parameters:
    side_length (float): The length of one side of the cube.

    Returns:
    float: The surface area of the cube.

    """"""
    surface_area = 6 * side_length**2
    return surface_area",lm
163,"from math import tan, pi
def area_polygon(s,l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area",human
530,"from array import array
def negative_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x < 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",human
439,"def convert_to_single_integer(lst):
    return int(''.join(map(str, lst)))",lm
309,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ",human
282,"def subtract_lists(list1, list2):
    return list(map(lambda x, y: x - y, list1, list2))",lm
867,"def min_Num(arr,n):  
    odd = 0
    for i in range(n): 
        if (arr[i] % 2): 
            odd += 1 
    if (odd % 2): 
        return 1
    return 2",human
949,"def sort_tuple_list(tuple_list):
    sorted_list = sorted(tuple_list, key=lambda x: sum(len(str(i)) for i in x))
    return sorted_list",lm
927,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def max_height(node): 
	if node is None: 
		return 0 ; 
	else : 
		left_height = max_height(node.left) 
		right_height = max_height(node.right) 
		if (left_height > right_height): 
			return left_height+1
		else: 
			return right_height+1",human
260,"def find_nsw_prime(n):
    primes = [2, 3, 5]
    while len(primes) < n:
        next_prime = primes[-1] + 1
        while True:
            is_prime = True
            for prime in primes:
                if prime * prime > next_prime:
                    break
                if next_prime % prime == 0:
                    is_prime = False
                    break
            if is_prime:
                primes.append(next_prime)
                break
            next_prime += 1
    return primes[n - 1]",lm
48,"def set_odd_bits(num):
    mask = 0xAA  # Binary: 10101010
    result = num | mask
    return result",lm
848,"def area_trapezium(base1,base2,height):
 area = 0.5 * (base1 + base2) * height
 return area",human
22,"def find_first_duplicate(arr):
    seen = set()
    for num in arr:
        if num in seen:
            return num
        seen.add(num)
    return None",lm
682,"def mul_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)",human
559,"def max_sub_array_sum(a, size):
  max_so_far = 0
  max_ending_here = 0
  for i in range(0, size):
    max_ending_here = max_ending_here + a[i]
    if max_ending_here < 0:
      max_ending_here = 0
    elif (max_so_far < max_ending_here):
      max_so_far = max_ending_here
  return max_so_far",human
557,"def toggle_string(string):
 string1 = string.swapcase()
 return string1",human
81,"def zip_tuples(tuple1, tuple2):
    return list(zip(tuple1, tuple2))",lm
214,"def radians_to_degrees(radians):
    degrees = radians * (180 / 3.14159)
    return degrees",lm
426,"def filter_odd_numbers(numbers):
    return list(filter(lambda x: x % 2 != 0, numbers))",lm
315,"def find_Max_Len_Even(str): 
    n = len(str) 
    i = 0
    currlen = 0
    maxlen = 0
    st = -1
    while (i < n): 
        if (str[i] == ' '): 
            if (currlen % 2 == 0): 
                if (maxlen < currlen): 
                    maxlen = currlen 
                    st = i - currlen 
            currlen = 0 
        else : 
            currlen += 1
        i += 1
    if (currlen % 2 == 0): 
        if (maxlen < currlen): 
            maxlen = currlen 
            st = i - currlen 
    if (st == -1): 
        return ""-1"" 
    return str[st: st + maxlen] ",human
813,"def string_length(str1):
    count = 0
    for char in str1:
        count += 1
    return count",human
484,"def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) ",human
285,"import re

def match_string(string):
    return re.search('ab{2,3}', string)",lm
390,"def prepend_string_to_list(string, lst):
    return [string + item for item in lst]",lm
962,"def sum_even_numbers(l, r):
    sum_even = 0
    for num in range(l, r+1):
        if num % 2 == 0:
            sum_even += num
    return sum_even",lm
73,"import re

def split_by_delimiters(string, delimiters):
    pattern = '|'.join(map(re.escape, delimiters))
    return re.split(pattern, string)",lm
812,"def abbreviate_road(string):
    return string.replace(""road"", ""rd."")",lm
490,"def extract_symmetric_pairs(tuple_list):
    symmetric_pairs = []
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            if tuple_list[i][0] == tuple_list[j][1] and tuple_list[i][1] == tuple_list[j][0]:
                symmetric_pairs.append((tuple_list[i], tuple_list[j]))
    return symmetric_pairs",lm
119,"def search(arr,n) :
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)",human
393,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)",human
178,"import re
def string_literals(patterns,text):
  for pattern in patterns:
     if re.search(pattern,  text):
       return ('Matched!')
     else:
       return ('Not Matched!')",human
747,"def lcs_of_three(X, Y, Z, m, n, o): 
	L = [[[0 for i in range(o+1)] for j in range(n+1)] 
		for k in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			for k in range(o+1): 
				if (i == 0 or j == 0 or k == 0): 
					L[i][j][k] = 0
				elif (X[i-1] == Y[j-1] and
					X[i-1] == Z[k-1]): 
					L[i][j][k] = L[i-1][j-1][k-1] + 1
				else: 
					L[i][j][k] = max(max(L[i-1][j][k], 
					L[i][j-1][k]), 
									L[i][j][k-1]) 
	return L[m][n][o]",human
184,"def find_greater_values(lst, number):
    result = []
    for value in lst:
        if value > number:
            result.append(value)
    return result",lm
88,"def get_frequency(lst):
    frequency = {}
    for element in lst:
        if element in frequency:
            frequency[element] += 1
        else:
            frequency[element] = 1
    return frequency",lm
295,"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)",human
139,"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter",human
680,"def increasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False",human
638,"import math
def wind_chill(v,t):
 windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)
 return int(round(windchill, 0))",human
854,"import heapq as hq
def raw_heap(rawheap):
  hq.heapify(rawheap)
  return rawheap",human
581,"def surface_area_square_pyramid(base_length, height):
    base_area = base_length * base_length
    slant_height = (base_length**2 + height**2)**0.5
    lateral_area = base_length * slant_height
    base_perimeter = 4 * base_length
    total_surface_area = base_area + lateral_area
    return total_surface_area",lm
353,"def remove_column(list1, n):
   for i in list1: 
    del i[n] 
   return list1",human
208,"import re
def is_decimal(num):
  num_fetch = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
  result = num_fetch.search(num)
  return bool(result)",human
640,"def remove_parenthesis_area(string):
    result = """"
    flag = True
    for char in string:
        if char == '(':
            flag = False
        elif char == ')':
            flag = True
        elif flag:
            result = result + char
    return result",lm
608,"def bell_number(n):
    bell = [[0 for j in range(n+1)] for i in range(n+1)]
    bell[0][0] = 1
    
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        
        for j in range(1, i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
            
    return bell[n][0]

n = int(input(""Enter a positive integer: ""))
print(""The {}th bell number is: {}"".format(n, bell_number(n)))",lm
57,"def find_largest_number(digits):
    """"""
    :param digits: a list of integers representing digits
    :return: the largest number that can be formed with the given digits

    Example:
    >>> find_largest_number([1, 2, 3])
    321
    
    >>> find_largest_number([9, 9, 8, 7, 6, 5])
    9998765
    """"""
    digits.sort(reverse=True)
    largest_number = ''.join(str(digit) for digit in digits)
    return int(largest_number)",lm
556,"def count_odd_xor_pairs(nums):
    count = 0
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if (nums[i] ^ nums[j]) % 2 == 1:
                count += 1
    return count",lm
234,"def cube_volume(side_length):
    return side_length ** 3",lm
134,"def check_last_element_even_or_odd(arr, p):
    """"""
    Check whether the last element of given array is even or odd after performing an operation p times.
    
    Parameters:
    arr (list): Input array
    p (int): Number of operations to perform
    
    Returns:
    str: 'Even' if the last element is even after p operations, 'Odd' otherwise
    """"""
    for i in range(p):
        arr[-1] += 1
        
    return 'Even' if arr[-1] % 2 == 0 else 'Odd'",lm
512,"def count_element_frequency(nested_tuple):
    result = {}
    for item in nested_tuple:
        if isinstance(item, tuple):
            sub_result = count_element_frequency(item)
            for key, value in sub_result.items():
                result[key] = result.get(key, 0) + value
        else:
            result[item] = result.get(item, 0) + 1
    return result",lm
143,"def find_num_lists_in_tuple(t):
    count = 0
    for item in t:
        if isinstance(item, list):
            count += 1
    return count",lm
874,"def check_Concat(str1,str2):
    N = len(str1)
    M = len(str2)
    if (N % M != 0):
        return False
    for i in range(N):
        if (str1[i] != str2[i % M]):
            return False         
    return True",human
376,"def remove_replica(test_tup):
  temp = set()
  res = tuple(ele if ele not in temp and not temp.add(ele) 
				else 'MSP' for ele in test_tup)
  return (res)",human
615,"def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result",human
408,"def find_k_pairs(array1, array2, k):
    pairs = []
    for num1 in array1:
        for num2 in array2:
            pairs.append((num1, num2))
            if len(pairs) == k:
                return pairs
    return pairs",lm
307,"def get_colon_of_tuple(tup):
    return tup[-2]",lm
766,"def iterate_pairs(lst):
    for i in range(len(lst)-1):
        yield lst[i], lst[i+1]",lm
152,"def merge(a,b):
    c = []
    while len(a) != 0 and len(b) != 0:
        if a[0] < b[0]:
            c.append(a[0])
            a.remove(a[0])
        else:
            c.append(b[0])
            b.remove(b[0])
    if len(a) == 0:
        c += b
    else:
        c += a
    return c
def merge_sort(x):
    if len(x) == 0 or len(x) == 1:
        return x
    else:
        middle = len(x)//2
        a = merge_sort(x[:middle])
        b = merge_sort(x[middle:])
        return merge(a,b)
",human
500,"def concatenate_list(lst):
    return ''.join(lst)",lm
365,"def count_digits(number):
    count = 0
    while number != 0:
        number //= 10
        count += 1
    return count",lm
522,"def longest_bitonic_subsequence(arr):
    lis = [1] * len(arr)
    lds = [1] * len(arr)

    for i in range(1, len(arr)):
        for j in range(i):
            if arr[i] > arr[j]:
                lis[i] = max(lis[i], lis[j] + 1)
    
    for i in range(len(arr)-2, -1, -1):
        for j in range(len(arr)-1, i, -1):
            if arr[i] > arr[j]:
                lds[i] = max(lds[i], lds[j] + 1)
    
    bitonic_seq = 0
    for i in range(len(arr)):
        bitonic_seq = max(bitonic_seq, lis[i] + lds[i] - 1)

    return bitonic_seq",lm
581,"def surface_Area(b,s): 
    return 2 * b * s + pow(b,2) ",human
717,"import math

def calculate_standard_deviation(numbers):
    if len(numbers) < 2:
        return None
    
    mean = sum(numbers) / len(numbers)
    variance = sum((x - mean) ** 2 for x in numbers) / len(numbers)
    standard_deviation = math.sqrt(variance)
    
    return standard_deviation",lm
489,"def frequency_Of_Largest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] >mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ",human
144,"def sum_of_absolute_differences(arr):
    n = len(arr)
    sum_diff = 0
    for i in range(n):
        for j in range(i+1, n):
            diff = abs(arr[i] - arr[j])
            sum_diff += diff
    return sum_diff",lm
655,"def sum_of_fifth_power(n):
    """"""
    Calculate the sum of the fifth power of n natural numbers.

    Parameters:
    n (int): The number of natural numbers to calculate the sum for.

    Returns:
    int: The sum of the fifth power of n natural numbers.
    """"""
    return sum(i ** 5 for i in range(1, n+1))",lm
875,"def min_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = min(temp)
  return (res) ",human
1,"def min_cost_path(cost, m, n):
    if m == 0 and n == 0:
        return cost[m][n]
    elif m == 0:
        return cost[0][n] + min_cost_path(cost, 0, n-1)
    elif n == 0:
        return cost[m][0] + min_cost_path(cost, m-1, 0)
    else:
        return cost[m][n] + min(min_cost_path(cost, m-1, n), min_cost_path(cost, m, n-1))",lm
235,"def set_even_bits(num):
    """"""
    Function to set all even bits of a given number.

    Parameters:
    num (int): The number to modify.

    Returns:
    int: The modified number with all even bits set.
    """"""
    return num | 0xAAAAAAAA",lm
968,"def floor_Max(A,B,N):
    x = min(B - 1,N)
    return (A*x) // B",human
525,"def check_parallel(line1, line2):
    return line1[0] == line2[0] and line1[1] == line2[1]",lm
434,"import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
",human
694,"def extract_unique(test_dict):
  res = list(sorted({ele for val in test_dict.values() for ele in val}))
  return res",human
892,"import re
def remove_spaces(text):
 return (re.sub(' +',' ',text))",human
102,"def snake_to_camel(snake_case_string):
    words = snake_case_string.split('_')
    camel_case_string = words[0]
    for word in words[1:]:
        camel_case_string += word.capitalize()
    return camel_case_string",lm
506,"def permutation_coefficient(n, k): 
	P = [[0 for i in range(k + 1)] 
			for j in range(n + 1)] 
	for i in range(n + 1): 
		for j in range(min(i, k) + 1): 
			if (j == 0): 
				P[i][j] = 1
			else: 
				P[i][j] = P[i - 1][j] + ( 
						j * P[i - 1][j - 1]) 
			if (j < k): 
				P[i][j + 1] = 0
	return P[n][k] ",human
341,"def set_to_tuple(s):
  t = tuple(sorted(s))
  return (t)",human
155,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n 
    while (temp > 0) :     
        if (count % 2 == 1) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ",human
715,"def string_to_tuple(input_string):
    """"""
    Convert a string of integers to a tuple.

    Args:
        input_string (str): The input string of integers.

    Returns:
        tuple: The tuple containing the converted integers.

    Examples:
        >>> string_to_tuple(""1 2 3"")
        (1, 2, 3)
        
        >>> string_to_tuple(""10 20 30"")
        (10, 20, 30)
        
        >>> string_to_tuple(""-1 -2 -3"")
        (-1, -2, -3)
    """"""
    tuple_list = [int(num) for num in input_string.split()]
    return tuple(tuple_list)",lm
614,"def cummulative_sum(test_list):
  res = sum(map(sum, test_list))
  return (res)",human
764,"def number_ctr(str):
      number_ctr= 0
      for i in range(len(str)):
          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     
      return  number_ctr",human
864,"def palindrome_lambda(texts):
  result = list(filter(lambda x: (x == """".join(reversed(x))), texts))
  return result",human
290,"def find_max_length_list(lists):
    max_length = 0
    max_length_lists = []

    for lst in lists:
        if len(lst) > max_length:
            max_length = len(lst)
            max_length_lists = [lst]
        elif len(lst) == max_length:
            max_length_lists.append(lst)

    return max_length_lists",lm
860,"import re

def check_ending_with_alphanumeric(string: str) -> bool:
    pattern = r'^\w+$'
    match = re.search(pattern, string)
    return bool(match)",lm
34,"def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) ",human
754,"def extract_index_list(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result",human
335,"def sum_of_arithmetic_progression(first_term, common_difference, num_terms):
    """"""
    Find the sum of an arithmetic progression.

    Parameters:
    first_term (int): The first term of the arithmetic progression.
    common_difference (int): The common difference between consecutive terms.
    num_terms (int): The number of terms in the arithmetic progression.

    Returns:
    int: The sum of the arithmetic progression.
    """"""
    last_term = first_term + (num_terms - 1) * common_difference
    sum_ap = (num_terms * (first_term + last_term)) // 2
    return sum_ap",lm
486,"def nCr(n, r): 
	if (r > n / 2): 
		r = n - r 
	answer = 1 
	for i in range(1, r + 1): 
		answer *= (n - r + i) 
		answer /= i 
	return answer 
def binomial_probability(n, k, p): 
	return (nCr(n, k) * pow(p, k) *	pow(1 - p, n - k)) ",human
729,"def add_list(nums1,nums2):
  result = map(lambda x, y: x + y, nums1, nums2)
  return list(result)",human
884,"def check_bit_range(num, start, end):
    """"""
    Check whether all the bits are within a given range or not.

    :param num: The number to check.
    :type num: int
    :param start: The starting bit index.
    :type start: int
    :param end: The ending bit index.
    :type end: int
    :return: True if all bits are within the given range, False otherwise.
    :rtype: bool
    """"""
    mask = (1 << (end + 1)) - (1 << start)
    return num & mask == num",lm
218,"import math   
def min_Operations(A,B):  
    if (A > B): 
        swap(A,B)  
    B = B // math.gcd(A,B);  
    return B - 1",human
121,"def check_triplet(A, n, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or n == 0 or sum < 0:
        return False
    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\
           check_triplet(A, n - 1, sum, count)",human
311,"def set_left_most_unset_bit(num):
    # convert number to binary string
    binary = bin(num)[2:]
    
    # find the index of the first unset bit from the left
    unset_index = binary.find('0')
    
    # set the leftmost unset bit by setting the bit at the found index
    if unset_index != -1:
        num |= 1 << (len(binary) - 1 - unset_index)
    
    return num",lm
931,"def calculate_sum_of_series(n):
    result = 0
    for i in range(1, n+1):
        result += i**3
    return result",lm
480,"def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch",human
676,"import re
def remove_extra_char(text1):
  pattern = re.compile('[\W_]+')
  return (pattern.sub('', text1))",human
372,"def heap_sort(lst):
    import heapq
    heapq.heapify(lst)
    sorted_lst = []
    while lst:
        sorted_lst.append(heapq.heappop(lst))
    return sorted_lst",lm
718,"def create_alternate_list(lst):
    return lst[::2]",lm
429,"def extract_elementwise_tuples(tuple1, tuple2):
    extracted_tuples = []
    for i in range(len(tuple1)):
        extracted_tuples.append((tuple1[i], tuple2[i]))
    return extracted_tuples",lm
516,"def radix_sort(nums):
    RADIX = 10
    placement = 1
    max_digit = max(nums)

    while placement < max_digit:
      buckets = [list() for _ in range( RADIX )]
      for i in nums:
        tmp = int((i / placement) % RADIX)
        buckets[tmp].append(i)
      a = 0
      for b in range( RADIX ):
        buck = buckets[b]
        for i in buck:
          nums[a] = i
          a += 1
      placement *= RADIX
    return nums",human
843,"def find_nth_super_ugly_number(n, primes):
    import heapq
    
    ugly_numbers = [1]
    heap = [(prime, prime, 0) for prime in primes]
    heapq.heapify(heap)
    
    while len(ugly_numbers) < n:
        next_num, prime, index = heapq.heappop(heap)
        
        if next_num > ugly_numbers[-1]:
            ugly_numbers.append(next_num)
        
        heapq.heappush(heap, (prime * ugly_numbers[index + 1], prime, index + 1))
    
    return ugly_numbers[-1]",lm
456,"def reverse_strings(strings):
    reversed_strings = []
    for string in strings:
        reversed_string = string[::-1]
        reversed_strings.append(reversed_string)
    return reversed_strings",lm
318,"def max_volume_of_cuboid(sum_of_sides):
    side = sum_of_sides / 4
    volume = side ** 3
    return volume",lm
339,"def find_max_divisor(start, end):
    divisor_count = {}
    for i in range(start, end+1):
        for j in range(1, i+1):
            if i % j == 0:
                if j in divisor_count:
                    divisor_count[j] += 1
                else:
                    divisor_count[j] = 1
    max_divisor = None
    max_count = 0
    for divisor, count in divisor_count.items():
        if count > max_count:
            max_divisor = divisor
            max_count = count
    return max_divisor",lm
403,"import re
def is_valid_URL(str):
	regex = (""((http|https)://)(www.)?"" +
			""[a-zA-Z0-9@:%._\\+~#?&//=]"" +
			""{2,256}\\.[a-z]"" +
			""{2,6}\\b([-a-zA-Z0-9@:%"" +
			""._\\+~#?&//=]*)"")
	p = re.compile(regex)
	if (str == None):
		return False
	if(re.search(p, str)):
		return True
	else:
		return False",human
699,"def min_swaps(bin_str1, bin_str2):
    assert len(bin_str1) == len(bin_str2), 'Binary strings must have equal length.'

    count = 0
    for i in range(len(bin_str1)):
        if bin_str1[i] != bin_str2[i]:
            count += 1

    return count",lm
437,"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2",human
715,"def str_to_tuple(test_str):
  res = tuple(map(int, test_str.split(', ')))
  return (res) ",human
334,"def check_Validity(a,b,c):  
    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 
        return False
    else: 
        return True        ",human
141,"def pancake_sort(arr):
    def flip(arr, k):
        i = 0
        while i < k / 2:
            temp = arr[i]
            arr[i] = arr[k - i - 1]
            arr[k - i - 1] = temp
            i += 1

    def find_max(arr, n):
        mi = 0
        for i in range(0, n):
            if arr[i] > arr[mi]:
                mi = i
        return mi

    def pancake_sort_recursive(arr, n):
        if n == 1:
            return
        mi = find_max(arr, n)
        if mi != n - 1:
            flip(arr, mi + 1)
            flip(arr, n)
        pancake_sort_recursive(arr, n - 1)

    n = len(arr)
    pancake_sort_recursive(arr, n)
    return arr",lm
940,"def heap_sort(arr):
    def heapify(arr, n, i):
        largest = i
        l = 2 * i + 1
        r = 2 * i + 2
  
        if l < n and arr[i] < arr[l]:
            largest = l
  
        if r < n and arr[largest] < arr[r]:
            largest = r
  
        if largest != i:
            arr[i], arr[largest] = arr[largest], arr[i]
            heapify(arr, n, largest)
  
    n = len(arr)
  
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)
  
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)
  
    return arr",lm
112,"def perimeter(diameter,height) : 
    return 2*(diameter+height)  ",human
424,"def extract_rear_index_elements(strings):
    return tuple(s[-1] for s in strings)

Please note that the provided code assumes that `strings` is a tuple of strings.",lm
391,"def convert_to_nested_dict(*lists):
    nested_dict = {}
    for index, lst in enumerate(lists):
        current_dict = nested_dict
        for elem in lst[:-1]:
            if elem not in current_dict:
                current_dict[elem] = {}
            current_dict = current_dict[elem]
        current_dict[lst[-1]] = {}
    return nested_dict",lm
584,"import re

def find_adverbs(sentence):
    adverbs = []
    regex = r""\b\w+ly\b""

    matches = re.finditer(regex, sentence)
    for match in matches:
        adverbs.append((match.group(0), match.start()))

    return adverbs",lm
511,"def min_sum_factors(num):
    factors = []
    for i in range(1, num + 1):
        if num % i == 0:
            factors.append(i)
    return sum(factors)",lm
687,"def gcd_recursive(a, b):
    if b == 0:
        return a
    else:
        return gcd_recursive(b, a % b)",lm
500,"def concatenate_elements(list):
  ans = ' '
  for i in list:
    ans = ans+ ' '+i
  return (ans) ",human
668,"def replace_multiple_occurrence(string):
    return ''.join(ch for i, ch in enumerate(string) if ch != string[i-1] or i == 0)",lm
862,"def find_most_common_words(text, n):
    words = text.lower().split()
    word_counts = {}

    for word in words:
        if word not in word_counts:
            word_counts[word] = 1
        else:
            word_counts[word] += 1

    most_common_words = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)[:n]

    return most_common_words",lm
101,"def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]",human
583,"def nth_catalan_number(n):
    if n == 0 or n == 1:
        return 1
    
    catalan = [0] * (n+1)
    catalan[0] = 1
    catalan[1] = 1
    
    for i in range(2, n+1):
        for j in range(i):
            catalan[i] += catalan[j] * catalan[i-j-1]
    
    return catalan[n]",lm
556,"def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  ",human
412,"def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l",human
526,"def capitalize_first_and_last_letters(string):
    words = string.split()
    result = []
    for word in words:
        capitalized_word = word[0].upper() + word[1:-1] + word[-1].upper()
        result.append(capitalized_word)
    return ' '.join(result)",lm
859,"def generate_sublists(lst):
    sublists = []
    for i in range(len(lst)):
        for j in range(i+1, len(lst)+1):
            sublists.append(lst[i:j])
    return sublists",lm
319,"import re
def find_long_word(text):
  return (re.findall(r""\b\w{5}\b"", text))",human
245,"def max_sum(arr, n): 
	MSIBS = arr[:] 
	for i in range(n): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, n + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float(""-Inf"") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum",human
454,"def match_word_with_z(word):
    if 'z' in word:
        return True
    else:
        return False",lm
535,"def topbottom_surfacearea(r):
  toporbottomarea=3.1415*r*r
  return toporbottomarea",human
698,"def sort_dict_by_tuple_product(dictionary):
    return dict(sorted(dictionary.items(), key=lambda x: x[0][0]*x[0][1]))",lm
206,"def adjacent_element_concatenation(tuples):
    result = []
    for i in range(len(tuples) - 1):
        result.append(tuples[i] + tuples[i + 1])
    return result",lm
495,"def remove_lowercase_substrings(input_string):
    import re

    regex = r'[a-z]+'
    output_string = re.sub(regex, '', input_string)
    return output_string",lm
627,"def find_smallest_missing_number(arr):
    n = len(arr)

    for i in range(n):
        if arr[i] != i:
            return i

    return n",lm
84,"def newman_conway(n):
    if n == 0:
        return ""Invalid input""

    # Base cases
    if n == 1:
        return ""1""
    
    if n == 2:
        return ""1 1""
    
    # Calculate the nth number in the sequence
    dp = [0] * (n + 1)
    dp[1] = 1
    dp[2] = 1

    for i in range(3, n + 1):
        dp[i] = dp[dp[i - 1]] + dp[i - dp[i - 1]]
    
    # Return the nth number
    return str(dp[-1])",lm
542,"import re
def fill_spaces(text):
  return (re.sub(""[ ,.]"", "":"", text))",human
876,"def find_lcm(a, b):
    if a > b:
        greater = a
    else:
        greater = b

    while True:
        if greater % a == 0 and greater % b == 0:
            lcm = greater
            break
        greater += 1

    return lcm",lm
271,"def sum_of_fifth_power(n):
    """"""
    Calculate the sum of the fifth power of first n even natural numbers.

    Parameters:
    n (int): The number of even natural numbers to consider.

    Returns:
    int: The sum of the fifth power of the first n even natural numbers.
    """"""
    total = 0
    for i in range(1, n+1):
        num = 2 * i
        total += num ** 5
    return total",lm
372,"import heapq as hq
def heap_assending(nums):
  hq.heapify(nums)
  s_result = [hq.heappop(nums) for i in range(len(nums))]
  return s_result",human
893,"def get_last_elements(sublists):
    last_elements = []
    for sublist in sublists:
        last_element = sublist[-1]
        last_elements.append(last_element)
    return last_elements",lm
602,"def find_first_repeated_character(string):
    """"""
    Function to find the first repeated character in a given string.

    Parameters:
    string (str): The input string.

    Returns:
    str: The first repeated character in the string, or None if there are no repeated characters.
    """"""

    # Initialize an empty dictionary to keep track of characters and their counts
    character_counts = {}

    # Iterate through each character in the string
    for char in string:
        # Increase the count of the character in the dictionary
        character_counts[char] = character_counts.get(char, 0) + 1

        # If the count of the character is 2, it is the first repeated character
        if character_counts[char] == 2:
            return char

    # If no repeated character is found, return None
    return None",lm
347,"def count_squares(rectangle_length, rectangle_width):
    """"""
    Counts the number of squares in a rectangle.

    Parameters:
    rectangle_length (int): The length of the rectangle.
    rectangle_width (int): The width of the rectangle.

    Returns:
    int: The number of squares in the rectangle.
    """"""
    smaller_side = min(rectangle_length, rectangle_width)
    return smaller_side ** 2",lm
665,"def shift_first_to_end(lst):
    """"""
    Shifts the first element to the end of the given list.

    Args:
    - lst: A list of elements.

    Returns:
    - The original list with the first element shifted to the end.
    """"""
    return lst[1:] + [lst[0]]",lm
776,"def count_vowels(test_str):
  res = 0
  vow_list = ['a', 'e', 'i', 'o', 'u']
  for idx in range(1, len(test_str) - 1):
    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):
      res += 1
  if test_str[0] not in vow_list and test_str[1] in vow_list:
    res += 1
  if test_str[-1] not in vow_list and test_str[-2] in vow_list:
    res += 1
  return (res) ",human
899,"def can_sort_by_corners(arr):
    if len(arr) < 3:
        return True
    if arr[0] <= arr[-1]:
        return True
    return False",lm
98,"def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ",human
272,"def extract_rear_element(records):
    """"""
    Extracts the rear element from a list of tuples records.

    Parameters:
    records (list): A list of tuples representing records.

    Returns:
    The last element of each tuple in the records list.
    """"""
    return [record[-1] for record in records]",lm
209,"def delete_and_insert(heap, item):
    heap.remove(min(heap))
    heap.append(item)
    return heap",lm
753,"def find_minimum_k_records(records, k):
    sorted_records = sorted(records, key=lambda x: x[1])
    return sorted_records[:k]",lm
524,"def max_sum_increasing_subsequence(arr, n): 
	max = 0
	msis = [0 for x in range(n)] 
	for i in range(n): 
		msis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
				msis[i] < msis[j] + arr[i]): 
				msis[i] = msis[j] + arr[i] 
	for i in range(n): 
		if max < msis[i]: 
			max = msis[i] 
	return max",human
455,"def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False",human
794,"import re
def text_starta_endb(text):
        patterns = 'a.*?b$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
229,"def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr",human
185,"def find_parabola_focus(a, b, c):
    """"""
    Given the coefficients a, b, c of a quadratic equation ax^2 + bx + c = 0,
    this function calculates the coordinates of the focus of the parabola.

    Parameters:
    a (float): The coefficient of x^2.
    b (float): The coefficient of x.
    c (float): The constant term.

    Returns:
    tuple: A tuple containing the coordinates (x, y) of the focus.

    """"""

    focus_x = -b / (2 * a)
    focus_y = (4 * a * c - b**2) / (4 * a)

    return (focus_x, focus_y)",lm
573,"def product_of_unique_numbers(lst):
    unique_numbers = set(lst)
    result = 1
    for num in unique_numbers:
        result *= num
    return result",lm
289,"def count_odd_days(year):
    """"""Calculate the number of odd days in a given year.

     Args:
        year (int): The year for which the number of odd days is to be calculated.

    Returns:
        int: The number of odd days in the given year.

    """"""
    # calculate the number of odd days
    odd_days = (year - 1) % 400 // 100 + (year - 1) % 100 // 4 - (year - 1) % 100 // 100 + (year - 1) % 7
    
    return odd_days",lm
215,"def decode_run_length(encoded_list):
    decoded_list = []
    i = 0
    while i < len(encoded_list):
        if isinstance(encoded_list[i], int):
            decoded_list.extend([encoded_list[i+1]] * encoded_list[i])
            i += 2
        else:
            decoded_list.append(encoded_list[i])
            i += 1
    return decoded_list",lm
39,"def check_rearrange_string(s):
    sorted_str = sorted(s)
    for i in range(1, len(sorted_str)):
        if sorted_str[i] == sorted_str[i-1]:
            return False
    return True",lm
421,"def concatenate_tuple_elements_by_delimiter(t, delimiter):
    return delimiter.join(map(str, t))",lm
951,"def find_max_indices(list1, list2):
    """"""
    Find the maximum of similar indices in two lists of tuples.

    Args:
        list1 (list): First list of tuples.
        list2 (list): Second list of tuples.

    Returns:
        int: Maximum of similar indices in the two lists.
    """"""
    max_index = -1
    for i in range(len(list1)):
        if list1[i][0] == list2[i][0]:
            max_index = max(max_index, i)
    return max_index",lm
200,"def position_max(list1):
    max_val = max(list1)
    max_result = [i for i, j in enumerate(list1) if j == max_val]
    return max_result",human
191,"def check_monthnumber(monthname3):
  if monthname3 ==""April"" or monthname3== ""June"" or monthname3== ""September"" or monthname3== ""November"":
    return True
  else:
    return False",human
400,"def extract_frequency(data):
    frequency = {}
    for item in data:
        tuple_key = tuple(item)
        frequency[tuple_key] = frequency.get(tuple_key, 0) + 1
    return frequency",lm
424,"def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) ",human
795,"def find_n_cheapest_items(dataset, n):
    import heapq
    
    heapq.heapify(dataset)
    return heapq.nsmallest(n, dataset)",lm
907,"def lucky_num(n):
 List=range(-1,n*n+9,2)
 i=2
 while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1
 return List[1:n+1]",human
890,"def find_Extra(arr1,arr2,n) : 
    for i in range(0, n) : 
        if (arr1[i] != arr2[i]) : 
            return i 
    return n ",human
873,"def fibonacci(n):
  if n == 1 or n == 2:
    return 1
  else:
    return (fibonacci(n - 1) + (fibonacci(n - 2)))",human
309,"def find_max(num1, num2):
    """"""
    Finds the maximum of two numbers.

    Args:
        num1 (int): The first number.
        num2 (int): The second number.

    Returns:
        int: The maximum of the two numbers.
    """"""
    return max(num1, num2)",lm
844,"def get_Number(n, k): 
    arr = [0] * n; 
    i = 0; 
    odd = 1; 
    while (odd <= n):   
        arr[i] = odd; 
        i += 1; 
        odd += 2;
    even = 2; 
    while (even <= n): 
        arr[i] = even; 
        i += 1;
        even += 2; 
    return arr[k - 1]; ",human
80,"def find_nth_tetrahedral_number(n):
    return (n * (n + 1) * (n + 2)) // 6",lm
945,"def tuple_to_set(t):
  s = set(t)
  return (s) ",human
542,"import re

def replace_characters(string):
    pattern = r""[ ,.]""
    replacement = "":""
    return re.sub(pattern, replacement, string)",lm
608,"def bell_Number(n): 
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] 
    return bell[n][0] ",human
785,"def convert_tuple_string_to_integer_tuple(tuple_string):
    integer_tuple = tuple(map(int, tuple_string.strip('()').split(',')))
    return integer_tuple",lm
203,"def hamming_distance(x, y):
    return bin(x ^ y).count('1')",lm
49,"def extract_elements(lst, index=0):
    return [sublist[index] for sublist in lst]",lm
366,"def find_largest_product(arr):
    largest_product = arr[0] * arr[1]
    for i in range(1, len(arr) - 1):
        product = arr[i] * arr[i+1]
        largest_product = max(largest_product, product)
    return largest_product",lm
54,"def counting_sort(my_list):
    max_value = 0
    for i in range(len(my_list)):
        if my_list[i] > max_value:
            max_value = my_list[i]
    buckets = [0] * (max_value + 1)
    for i in my_list:
        buckets[i] += 1
    i = 0
    for j in range(max_value + 1):
         for a in range(buckets[j]):
             my_list[i] = j
             i += 1
    return my_list",human
470,"def pairwise_addition(tuples):
    """"""
    Computes the pairwise addition of the elements of the given tuples.

    Args:
    - tuples: A list of tuples containing elements to be added pairwise.

    Returns:
    - result: A tuple containing the pairwise addition of the elements.
    """"""

    result = tuple(sum(pair) for pair in zip(*tuples))
    return result",lm
241,"def array_3d(m,n,o):
 array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]
 return array_3d",human
865,"def ntimes_list(nums,n):
    result = map(lambda x:n*x, nums) 
    return list(result)",human
93,"def calculate_power(a, b):
    """"""
    Calculate the value of 'a' to the power 'b'.

    Parameters:
    a (float or int): the base value
    b (float or int): the exponent value

    Returns:
    float or int: the calculated result
    """"""
    return a ** b",lm
882,"def calculate_parallelogram_perimeter(base, side):
    return 2 * (base + side)",lm
466,"def find_peak_element(nums):
    left = 0
    right = len(nums) - 1
    
    while left < right:
        mid = left + (right - left) // 2
        
        if nums[mid] > nums[mid + 1]:
            right = mid
        else:
            left = mid + 1
    
    return left",lm
630,"def adjac(ele, sub = []): 
  if not ele: 
     yield sub 
  else: 
     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) 
                for idx in adjac(ele[1:], sub + [j])] 
def get_coordinates(test_tup):
  res = list(adjac(test_tup))
  return (res) ",human
623,"def nth_nums(nums,n):
 nth_nums = list(map(lambda x: x ** n, nums))
 return nth_nums",human
600,"def is_Even(n) : 
    if (n^1 == n+1) :
        return True; 
    else :
        return False; ",human
967,"def contains_all_vowels(string):
    vowels = {'a', 'e', 'i', 'o', 'u'}
    for vowel in vowels:
        if vowel not in string:
            return False
    return True",lm
280,"def sequential_search(arr, element):
    for i in range(len(arr)):
        if arr[i] == element:
            return i
    return -1",lm
28,"def binomial_coefficient(n, k):
    if k == 0 or k == n:
        return 1
    elif k > n:
        return 0
    else:
        numerator = 1
        denominator = 1
        for i in range(1, min(k, n - k) + 1):
            numerator *= n - i + 1
            denominator *= i
        return numerator // denominator",lm
262,"def split_list(lst, length):
    return lst[:length], lst[length:]",lm
895,"def max_sum_subseq(A):
    n = len(A)
    if n == 1:
        return A[0]
    look_up = [None] * n
    look_up[0] = A[0]
    look_up[1] = max(A[0], A[1])
    for i in range(2, n):
        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])
        look_up[i] = max(look_up[i], A[i])
    return look_up[n - 1]",human
520,"def find_lcm(num1, num2): 
	if(num1>num2): 
		num = num1 
		den = num2 
	else: 
		num = num2 
		den = num1 
	rem = num % den 
	while (rem != 0): 
		num = den 
		den = rem 
		rem = num % den 
	gcd = den 
	lcm = int(int(num1 * num2)/int(gcd)) 
	return lcm 
def get_lcm(l):
  num1 = l[0]
  num2 = l[1]
  lcm = find_lcm(num1, num2)
  for i in range(2, len(l)):
    lcm = find_lcm(lcm, l[i])
  return lcm ",human
711,"def check_product_equal(number):
    even_product = 1
    odd_product = 1
    
    for i, digit in enumerate(str(number)):
        if i % 2 == 0:
            even_product *= int(digit)
        else:
            odd_product *= int(digit)
    
    return even_product == odd_product",lm
114,"from collections import Counter 
def assign_freq(test_list):
  res = [(*key, val) for key, val in Counter(test_list).items()]
  return (str(res)) ",human
861,"from collections import Counter 
def anagram_lambda(texts,str):
  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 
  return result",human
708,"def Convert(string): 
    li = list(string.split("" "")) 
    return li ",human
551,"def extract_column(nested_list, column_index):
    column = []
    for row in nested_list:
        if column_index < len(row):
            column.append(row[column_index])
        else:
            column.append(None)
    return column",lm
138,"def check_power_of_2(num):
    return num & (num-1) == 0",lm
393,"def find_max_length_list(lists):
    return max(lists, key=lambda x: len(x))",lm
232,"def get_n_largest(dataset, n):
    return sorted(dataset, reverse=True)[:n]",lm
898,"def extract_elements(lst, num_elements):
    if num_elements > len(lst):
        return None
    
    return lst[:num_elements]",lm
468,"def max_product(arr, n ): 
	mpis =[0] * (n) 
	for i in range(n): 
		mpis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
					mpis[i] < (mpis[j] * arr[i])): 
						mpis[i] = mpis[j] * arr[i] 
	return max(mpis)",human
53,"def check_first_last_characters(string):
    return string[0] == string[-1]",lm
418,"def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList",human
231,"def max_sum(tri, n): 
	if n > 1: 
		tri[1][1] = tri[1][1]+tri[0][0] 
		tri[1][0] = tri[1][0]+tri[0][0] 
	for i in range(2, n): 
		tri[i][0] = tri[i][0] + tri[i-1][0] 
		tri[i][i] = tri[i][i] + tri[i-1][i-1] 
		for j in range(1, i): 
			if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: 
				tri[i][j] = tri[i][j] + tri[i-1][j-1] 
			else: 
				tri[i][j] = tri[i][j]+tri[i-1][j] 
	return (max(tri[n-1]))",human
855,"def check_Even_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 0): 
        return True
    else: 
        return False",human
475,"def sort_counter_by_value(counter):
    sorted_counter = dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))
    return sorted_counter",lm
652,"def matrix_to_list(test_list):
  temp = [ele for sub in test_list for ele in sub]
  res = list(zip(*temp))
  return (str(res))",human
731,"import math
def lateralsurface_cone(r,h):
  l = math.sqrt(r * r + h * h)
  LSA = math.pi * r  * l
  return LSA",human
835,"def slope(x1,y1,x2,y2): 
    return (float)(y2-y1)/(x2-x1)  ",human
109,"def count_rotations(binary_string):
    count = 0
    while int(binary_string, 2) % 2 != 0:
        binary_string = binary_string[1:] + binary_string[0]
        count += 1
    return count",lm
278,"def count_before_element(record, element):
    count = 0
    for value in record:
        if value == element:
            return count
        count += 1
    return count",lm
872,"def is_nested_list_subset(nested_list, subset):
    """"""
    Check if a nested list is a subset of another nested list.

    Args:
        nested_list (list): The target nested list to check against.
        subset (list): The nested list to check if it is a subset.

    Returns:
        bool: True if subset is a subset of nested_list, False otherwise.
    """"""
    if subset == []:
        return True
    elif nested_list == []:
        return False
    elif isinstance(subset[0], list):
        if any(is_nested_list_subset(nested_list[i:], subset[0]) for i in range(len(nested_list))):
            return True
        else:
            return is_nested_list_subset(nested_list[1:], subset)
    else:
        if subset[0] in nested_list:
            return is_nested_list_subset(nested_list[1:], subset[1:])
        else:
            return False",lm
926,"def binomial_coeffi(n, k): 
	if (k == 0 or k == n): 
		return 1
	return (binomial_coeffi(n - 1, k - 1) 
		+ binomial_coeffi(n - 1, k)) 
def rencontres_number(n, m): 
	if (n == 0 and m == 0): 
		return 1
	if (n == 1 and m == 0): 
		return 0
	if (m == 0): 
		return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) 
	return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))",human
452,"def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return None",human
276,"def calculate_cylinder_volume(radius, height):
    """"""
    Calculate the volume of a cylinder.

    :param radius: the radius of the cylinder
    :type radius: float
    :param height: the height of the cylinder
    :type height: float
    :return: the volume of the cylinder
    :rtype: float
    """"""
    pi = 3.14159
    base_area = pi * radius**2
    volume = base_area * height
    return volume",lm
10,"def get_n_smallest(dataset, n):
    return sorted(dataset)[:n]",lm
779,"def unique_sublists(list1):
    result ={}
    for l in list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result",human
320,"def calculate_difference(n):
    sum_squared = 0
    squared_sum = 0

    for i in range(1, n+1):
        sum_squared += i
        squared_sum += i**2

    return sum_squared**2 - squared_sum",lm
442,"from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",human
831,"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] == arr[j]): 
                cnt += 1; 
    return cnt; ",human
670,"def decreasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False",human
767,"def count_pairs(numbers, sum):
    count = 0
    unique_numbers = set(numbers)
    for num in unique_numbers:
        complement = sum - num
        if complement in unique_numbers:
            count += 1
    return count",lm
964,"def is_even_length(word):
    return len(word) % 2 == 0",lm
22,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate",human
561,"def assign_elements(test_list):
  res = dict()
  for key, val in test_list:
    res.setdefault(val, [])
    res.setdefault(key, []).append(val)
  return (res) ",human
123,"def amicable_sum(n):
    def sum_divisors(number):
        return sum(i for i in range(1, number) if number % i == 0)

    amicable_numbers = []
    for i in range(1, n + 1):
        num1 = sum_divisors(i)
        num2 = sum_divisors(num1)

        if i == num2 and i != num1:
            amicable_numbers.append(i)

    return sum(amicable_numbers)",lm
465,"def drop_empty_items(dictionary):
    return {key: value for key, value in dictionary.items() if value}",lm
680,"def has_increasing_trend(numbers):
    for i in range(len(numbers) - 1):
        if numbers[i] >= numbers[i+1]:
            return False
    return True",lm
296,"def count_inversions(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                count += 1
    return count",lm
609,"def floor_Min(A,B,N):
    x = max(B - 1,N)
    return (A*x) // B",human
328,"def rotate_list(lst, n):
    return lst[n:] + lst[:n]",lm
800,"def remove_whitespace(string):
    return ''.join(string.split())",lm
523,"def check_string(str1):
    messg = [
    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',
    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',
    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',
    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]
    result = [x for x in [i(str1) for i in messg] if x != True]
    if not result:
        result.append('Valid string.')
    return result  ",human
288,"def count_modular_inverse(arr, p):
    count = 0
    for num in arr:
        if pow(num, -1, p) == num:
            count += 1
    return count",lm
735,"def toggle_bits(number):
    mask = number ^ ((number & (1 << (len(bin(number))-3))) << 1)
    return mask",lm
77,"def is_Diff(n): 
    return (n % 11 == 0) ",human
170,"def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ",human
406,"def find_parity(num):
    if num % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",lm
23,"def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi ",human
817,"def find_divisible_numbers(numbers, m, n):
    divisible_numbers = list(filter(lambda x: x % m == 0 or x % n == 0, numbers))
    return divisible_numbers",lm
403,"import re

def is_valid_url(url):
    pattern = re.compile(r'^https?://.+')
    return True if re.match(pattern, url) else False",lm
683,"def sum_Square(n) : 
    i = 1 
    while i*i <= n : 
        j = 1
        while (j*j <= n) : 
            if (i*i+j*j == n) : 
                return True
            j = j+1
        i = i+1     
    return False",human
427,"import re

def convert_date(date):
    pattern = r'^(\d{4})-(\d{2})-(\d{2})$'
    match = re.match(pattern, date)
    if match:
        year = match.group(1)
        month = match.group(2)
        day = match.group(3)
        return f'{day}-{month}-{year}'
    else:
        return None",lm
971,"def maximum_segments(n, a, b, c) : 
	dp = [-1] * (n + 10) 
	dp[0] = 0
	for i in range(0, n) : 
		if (dp[i] != -1) : 
			if(i + a <= n ): 
				dp[i + a] = max(dp[i] + 1, 
							dp[i + a]) 
			if(i + b <= n ): 
				dp[i + b] = max(dp[i] + 1, 
							dp[i + b]) 
			if(i + c <= n ): 
				dp[i + c] = max(dp[i] + 1, 
							dp[i + c]) 
	return dp[n]",human
347,"def count_Squares(m,n): 
    if (n < m): 
        temp = m 
        m = n 
        n = temp 
    return n * (n + 1) * (3 * m - n + 1) // 6",human
378,"def move_first(test_list):
  test_list = test_list[-1:] + test_list[:-1]  
  return test_list",human
85,"def sphere_surface_area(radius):
    """"""
    Calculate the surface area of a sphere.

    Args:
        radius (float): The radius of the sphere.
    
    Returns:
        float: The surface area of the sphere.
    """"""
    return 4 * 3.14159 * radius**2",lm
361,"def remove_empty(list1):
  remove_empty = [x for x in list1 if x]
  return remove_empty",human
373,"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume",human
410,"def find_minimum(lst):
    return min(lst)",lm
307,"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon",human
422,"def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) ",human
448,"def calculate_perrin_sum(n):
    perrin_nums = [3, 0, 2]  # Initialize the first three Perrin numbers

    if n <= 2:
        return sum(perrin_nums[:n + 1])

    for i in range(3, n + 1):
        perrin_nums.append(perrin_nums[i - 2] + perrin_nums[i - 3])

    return sum(perrin_nums)",lm
633,"def xor_sum(numbers):
    """"""
    Calculates the sum of XOR of all pairs of numbers in the given array.
    
    Parameters:
    numbers (list): A list of numbers.
    
    Returns:
    int: The sum of XOR of all pairs of numbers.
    """"""
    xor_sum = 0
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            xor_sum += numbers[i] ^ numbers[j]
    return xor_sum",lm
814,"def find_area_of_rhombus(diagonal1, diagonal2):
    return (diagonal1 * diagonal2) / 2",lm
560,"def union_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1 + test_tup2))
  return (res) ",human
408,"import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs",human
536,"def select_nth_item(lst, n):
    return lst[n-1]",lm
827,"def sum_column(list1, C):
    result = sum(row[C] for row in list1)
    return result",human
380,"def multi_list(rownum,colnum):
  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]
  for row in range(rownum):
    for col in range(colnum):
        multi_list[row][col]= row*col
  return multi_list
",human
197,"def find_exponentio(test_tup1, test_tup2):
  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res)
",human
594,"def find_difference(lst):
    even_nums = []
    odd_nums = []
    for num in lst:
        if num % 2 == 0:
            even_nums.append(num)
        else:
            odd_nums.append(num)
    if len(even_nums) == 0 or len(odd_nums) == 0:
        return -1
    return even_nums[0] - odd_nums[0]",lm
289,"def odd_Days(N): 
    hund1 = N // 100
    hund4 = N // 400
    leap = N >> 2
    ordd = N - leap 
    if (hund1): 
        ordd += hund1 
        leap -= hund1 
    if (hund4): 
        ordd -= hund4 
        leap += hund4 
    days = ordd + leap * 2
    odd = days % 7
    return odd ",human
82,"def sphere_volume(radius):
    volume = (4/3) * 3.14159 * (radius**3)
    return volume",lm
809,"def check_smaller(test_tup1, test_tup2):
  res = all(x > y for x, y in zip(test_tup1, test_tup2))
  return (res) ",human
956,"import re
def split_list(text):
  return (re.findall('[A-Z][^A-Z]*', text))",human
565,"def split(word): 
    return [char for char in word] ",human
749,"def sort_strings(strings):
    return sorted(strings, key=lambda x: int(x))",lm
92,"def is_undulating(number: int) -> bool:
    """"""
    Check whether the given number is undulating or not.
    
    Args:
    - number (int): The number to be checked.
    
    Returns:
    - bool: True if the number is undulating, False otherwise.
    """"""
    digits = str(number)
    
    if len(digits) < 3:
        return False
    
    for i in range(1, len(digits) - 1):
        if (digits[i-1] < digits[i] > digits[i+1]) or (digits[i-1] > digits[i] < digits[i+1]):
            continue
        else:
            return False
        
    return True",lm
829,"def find_second_most_repeated_string(sequence):
    count = {}
    for string in sequence:
        if string in count:
            count[string] += 1
        else:
            count[string] = 1

    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)

    if len(sorted_count) < 2:
        return None
    
    return sorted_count[1][0]",lm
417,"def find_common_first_element(lst):
    first_elements = []
    for tup in lst:
        first_elements.append(tup[0])
    
    common_first_element = None
    for element in first_elements:
        if first_elements.count(element) == len(lst):
            common_first_element = element
            break
    
    return common_first_element",lm
918,"def count_coin_change(coins, amount):
    dp = [float('inf')] * (amount + 1)
    dp[0] = 0
    
    for coin in coins:
        for i in range(coin, amount + 1):
            dp[i] = min(dp[i], dp[i - coin] + 1)
    
    return dp[amount]",lm
38,"def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)",human
509,"def average_Odd(n) : 
    if (n%2==0) : 
        return (""Invalid Input"") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count ",human
105,"def count(lst):   
    return sum(lst) ",human
817,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) 
 return result",human
590,"import cmath
def polar_rect(x,y):
 cn = complex(x,y)
 cn=cmath.polar(cn)
 cn1 = cmath.rect(2, cmath.pi)
 return (cn,cn1)",human
210,"import re
def is_allowed_specific_char(string):
    get_char = re.compile(r'[^a-zA-Z0-9.]')
    string = get_char.search(string)
    return not bool(string)",human
241,"def generate_3d_array():
    """"""
    Generates a 3D array filled with asterisks.
    
    Returns:
    - A 3D array with dimensions 3x3x3, where each element is '*'.
    """"""
    return [['*' for _ in range(3)] for _ in range(3)] * 3",lm
564,"def count_unequal_pairs(arr):
    count = 0
    
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] != arr[j]:
                count += 1
    
    return count",lm
302,"def find_most_significant_set_bit(num):
    # Convert the given number to binary representation
    binary_num = bin(num)[2:]

    # Iterate through the binary representation from left to right
    for bit in binary_num:
        # If a set bit is found, return the value of that bit converted to integer
        if bit == '1':
            return int(bit)

    # If no set bit is found, return 0
    return 0",lm
228,"def check_bits_unset(start, end):
    for i in range(start, end+1):
        if i & 1:
            return False
    return True",lm
151,"def is_coprime(number):
    def gcd(a, b):
        while(b):
            a, b = b, a % b
        return a

    return gcd(number, 2) == 1",lm
842,"def get_odd_occurence(arr, arr_size):
  for i in range(0, arr_size):
    count = 0
    for j in range(0, arr_size):
      if arr[i] == arr[j]:
        count += 1
    if (count % 2 != 0):
      return arr[i]
  return -1",human
38,"def find_division(lst):
    even_num = None
    odd_num = None
    for num in lst:
        if num % 2 == 0 and even_num is None:
            even_num = num
        elif num % 2 != 0 and odd_num is None:
            odd_num = num
        if even_num is not None and odd_num is not None:
            break
    if even_num is not None and odd_num is not None:
        return even_num / odd_num
    else:
        return None",lm
812,"import re
def road_rd(street):
  return (re.sub('Road$', 'Rd.', street))",human
177,"def find_numbers_with_lcm_range(lower_limit, upper_limit):
    for i in range(lower_limit, upper_limit + 1):
        for j in range(i + 1, upper_limit + 1):
            if lcm(i, j) >= lower_limit and lcm(i, j) <= upper_limit:
                return (i, j)
    return None

def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)

def lcm(a, b):
    return abs(a * b) // gcd(a, b)",lm
637,"def noprofit_noloss(actual_cost,sale_amount): 
  if(sale_amount == actual_cost):
    return True
  else:
    return False",human
190,"def count_integral_coordinates(side_length):
    count = 0
    for x in range(side_length):
        for y in range(side_length):
            if x == int(x) and y == int(y):
                count += 1
    return count",lm
848,"def find_area_of_trapezium(base1, base2, height):
    area = (base1 + base2) * height / 2
    return area",lm
684,"def count_occurrences(string, char):
    """"""
    Count occurrences of a character in a repeated string.

    Args:
        string (str): The string to repeat.
        char (str): The character to count occurrences of.

    Returns:
        int: The number of occurrences of the character in the repeated string.
    """"""
    repeated_string = string * (2 * len(string))
    count = repeated_string.count(char)
    return count",lm
672,"def max_of_three(num1,num2,num3): 
    if (num1 >= num2) and (num1 >= num3):
       lnum = num1
    elif (num2 >= num1) and (num2 >= num3):
       lnum = num2
    else:
       lnum = num3
    return lnum",human
439,"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x",human
84,"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))",human
858,"def count_list(input_list): 
    return (len(input_list))**2",human
539,"def power_of_bases(nums):
    return list(map(lambda x, y: x**y, nums, range(len(nums))))",lm
213,"def concatenate_strings(test_tup1, test_tup2):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",human
566,"def get_sum(num):
    return sum(int(digit) for digit in str(num))",lm
413,"def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result",human
246,"def babylonian_sqrt(n):
    guess = n / 2
    while True:
        new_guess = (guess + n / guess) / 2
        if abs(new_guess - guess) < 1e-6:
            return new_guess
        guess = new_guess",lm
388,"def find_highest_power_of_two(n):
    power = 0
    while 2 ** power <= n:
        power += 1
    return 2 ** (power - 1)",lm
348,"def count_sequences(length, values):
    count = 0
    for i in range(len(values) - length + 1):
        prefix_sum = 0
        for j in range(i, i + length):
            prefix_sum += values[j]
            if prefix_sum < 0:
                break
        else:
            count += 1
    return count",lm
345,"def diff_consecutivenums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result",human
742,"import math
def area_tetrahedron(side):
  area = math.sqrt(3)*(side*side)
  return area",human
635,"def push_and_pop(heap):
    result = []
    while heap:
        result.append(heapq.heappop(heap))
    return result",lm
631,"import re

def replace_whitespaces(string):
    pattern = r'\s'
    return re.sub(pattern, '_', string)",lm
247,"def longest_palindromic_subsequence(string):
    def helper(start, end):
        if start == end:
            return 1
        if string[start] == string[end] and start + 1 == end:
            return 2
        
        if string[start] == string[end]:
            return helper(start + 1, end - 1) + 2
        
        return max(helper(start + 1, end), helper(start, end - 1))
    
    return helper(0, len(string) - 1)",lm
308,"def find_largest_products(list1, list2, count):
    products = []
    for num1 in list1:
        for num2 in list2:
            products.append(num1 * num2)

    products.sort(reverse=True)
    return products[:count]",lm
9,"def min_rotations(string):
    """"""
    Calculate the minimum number of rotations required to get the same string.

    Parameters:
    string (str): The input string.

    Returns:
    int: The minimum number of rotations required.
    """"""
    n = len(string)
    if n <= 1:
        return 0

    min_rotations = n
    for i in range(1, n):
        rotations = i
        substring = string[i:] + string[:i]
        if substring == string:
            min_rotations = min(min_rotations, rotations)

    return min_rotations",lm
40,"from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result",human
814,"def rombus_area(p,q):
  area=(p*q)/2
  return area",human
240,"def replace_last_element(original_list, replacement_list):
    original_list[-1] = replacement_list
    return original_list",lm
138,"def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True",human
328,"def rotate_left(list1,m,n):
  result =  list1[m:]+list1[:n]
  return result",human
624,"def is_upper(string):
  return (string.upper())",human
901,"def find_smallest_multiple(n):
    def gcd(a, b):
        if b == 0:
            return a
        return gcd(b, a % b)

    def lcm(a, b):
        return (a * b) // gcd(a, b)

    smallest_multiple = 1
    for i in range(1, n+1):
        smallest_multiple = lcm(smallest_multiple, i)

    return smallest_multiple",lm
521,"def check_isosceles(x,y,z):
  if x!=y & y!=z & z!=x:
	   return True
  else:
     return False",human
261,"def divide_tuples(a, b):
    result = []
    for i in range(len(a)):
        result.append(a[i] / b[i])
    return result",lm
260,"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)",human
227,"def find_min(num1, num2, num3):
    return min(num1, num2, num3)",lm
379,"def surfacearea_cuboid(l,w,h):
  SA = 2*(l*w + l * h + w * h)
  return SA",human
940,"def heap_sort(arr):
    heapify(arr)  
    end = len(arr) - 1
    while end > 0:
        arr[end], arr[0] = arr[0], arr[end]
        shift_down(arr, 0, end - 1)
        end -= 1
    return arr

def heapify(arr):
    start = len(arr) // 2
    while start >= 0:
        shift_down(arr, start, len(arr) - 1)
        start -= 1
def shift_down(arr, start, end):
    root = start
    while root * 2 + 1 <= end:
        child = root * 2 + 1
        if child + 1 <= end and arr[child] < arr[child + 1]:
            child += 1
        if child <= end and arr[root] < arr[child]:
            arr[root], arr[child] = arr[child], arr[root]
            root = child
        else:
            return
",human
21,"def find_multiples(n, m):
    """"""
    Returns a list of m number of multiples of n.
    
    Parameters:
    n (int): The number to find the multiples of.
    m (int): The number of multiples to find.
    
    Returns:
    list: A list of m number of multiples of n.
    """"""
    multiples = []
    for i in range(1, m+1):
        multiples.append(n * i)
    
    return multiples",lm
214,"import math
def degree_radian(radian):
 degree = radian*(180/math.pi)
 return degree",human
326,"def get_most_frequent_word(strings):
    word_count = {}

    for string in strings:
        words = string.split()
        for word in words:
            if word in word_count:
                word_count[word] += 1
            else:
                word_count[word] = 1

    max_count = 0
    most_frequent_word = """"

    for word, count in word_count.items():
        if count > max_count:
            max_count = count
            most_frequent_word = word

    return most_frequent_word",lm
649,"def sum_Range_list(nums, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += nums[i]                                                                                                                                                                                                  
    return sum_range   ",human
663,"import sys 
def find_max_val(n, x, y): 
	ans = -sys.maxsize 
	for k in range(n + 1): 
		if (k % x == y): 
			ans = max(ans, k) 
	return (ans if (ans >= 0 and
					ans <= n) else -1) ",human
826,"def check_Type_Of_Triangle(a,b,c): 
    sqa = pow(a,2) 
    sqb = pow(b,2) 
    sqc = pow(c,2) 
    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): 
        return (""Right-angled Triangle"") 
    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): 
        return (""Obtuse-angled Triangle"") 
    else: 
        return (""Acute-angled Triangle"") ",human
605,"def prime_num(num):
  if num >=1:
   for i in range(2, num//2):
     if (num % i) == 0:
                return False
     else:
                return True
  else:
          return False",human
744,"def check_none(test_tup):
  res = any(map(lambda ele: ele is None, test_tup))
  return (res) ",human
224,"def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count ",human
187,"def longest_common_subsequence(X, Y, m, n): 
    if m == 0 or n == 0: 
       return 0 
    elif X[m-1] == Y[n-1]: 
       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
    else: 
       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",human
599,"def sum_and_average(n):
    if n <= 0:
        return ""n must be a positive integer.""
    else:
        sum_of_numbers = (n * (n + 1)) / 2
        average_of_numbers = sum_of_numbers / n
        return sum_of_numbers, average_of_numbers",lm
739,"def find_index_of_smallest_triangular_number(n):
    """"""
    Find the index of the smallest triangular number with n digits.
    
    Parameters:
    n (int): The number of digits for the triangular number
    
    Returns:
    int: The index of the smallest triangular number with n digits
    
    """"""
    index = 1
    triangular_number = 1
    while len(str(triangular_number)) < n:
        index += 1
        triangular_number += index
    return index",lm
610,"def remove_kth_element(lst, k):
    del lst[k]
    return lst",lm
322,"def position_min(list1):
    min_val = min(list1)
    min_result = [i for i, j in enumerate(list1) if j == min_val]
    return min_result",human
533,"def remove_datatype(test_tuple, data_type):
  res = []
  for ele in test_tuple:
    if not isinstance(ele, data_type):
      res.append(ele)
  return (res) ",human
528,"def find_min_length_lists(lst):
    """"""
    Finds the list of lists with minimum length.
    
    Parameters:
        - lst (list): A list of lists.
    
    Returns:
        - list: The list(s) with the minimum length.
    """"""
    min_length = float('inf')
    min_length_lists = []
    
    for sublist in lst:
        sublist_length = len(sublist)
        if sublist_length < min_length:
            min_length = sublist_length
            min_length_lists = [sublist]
        elif sublist_length == min_length:
            min_length_lists.append(sublist)
    
    return min_length_lists",lm
263,"def merge_dicts(dict1, dict2):
    return {**dict1, **dict2}",lm
573,"def unique_product(list_data):
    temp = list(set(list_data))
    p = 1
    for i in temp:
        p *= i
    return p",human
757,"def count_reverse_pairs(test_list):
  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( 
	test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) 
  return str(res)",human
934,"def delannoy(n, m):
    if n == 0 or m == 0:
        return 1
    else:
        return delannoy(n-1, m) + delannoy(n, m-1) + delannoy(n-1, m-1)",lm
168,"def frequency(a,x): 
    count = 0  
    for i in a: 
        if i == x: count += 1
    return count ",human
114,"def assign_frequency(tuple_list):
    frequency = {}
    for tuple in tuple_list:
        if tuple in frequency:
            frequency[tuple] += 1
        else:
            frequency[tuple] = 1
    return frequency",lm
963,"def discriminant_value(x,y,z):
    discriminant = (y**2) - (4*x*z)
    if discriminant > 0:
        return (""Two solutions"",discriminant)
    elif discriminant == 0:
        return (""one solution"",discriminant)
    elif discriminant < 0:
        return (""no real solution"",discriminant)",human
59,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ",human
947,"def len_log(list1):
    min=len(list1[0])
    for i in list1:
        if len(i)<min:
            min=len(i)
    return min",human
755,"def find_second_smallest(numbers):
    sorted_numbers = sorted(numbers)
    return sorted_numbers[1]",lm
497,"def cone_surface_area(radius, height):
    """"""
    Calculate the surface area of a cone.

    Parameters:
    radius (float): The radius of the base of the cone.
    height (float): The height of the cone.

    Returns:
    float: The surface area of the cone.
    """"""
    import math

    # Calculate the slant height of the cone
    slant_height = math.sqrt(radius**2 + height**2)

    # Calculate the lateral surface area of the cone
    lateral_area = math.pi * radius * slant_height

    # Calculate the base area of the cone
    base_area = math.pi * radius**2

    # Calculate the total surface area of the cone
    surface_area = lateral_area + base_area

    return surface_area",lm
456,"def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result",human
405,"def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False",human
275,"import math as mt 
def get_Position(a,n,m): 
    for i in range(n): 
        a[i] = (a[i] // m + (a[i] % m != 0))  
    result,maxx = -1,-1
    for i in range(n - 1,-1,-1): 
        if (maxx < a[i]): 
            maxx = a[i] 
            result = i 
    return result + 1",human
648,"def exchange_position(lst):
    for i in range(0, len(lst)-1, 2):
        lst[i], lst[i+1] = lst[i+1], lst[i]
    return lst",lm
590,"import math

def polar_to_rectangular(radius, angle):
    x = radius * math.cos(angle)
    y = radius * math.sin(angle)
    return x, y",lm
120,"def find_max_product(lst):
    max_product = float('-inf')
    
    for i in range(len(lst)-1):
        for j in range(i+1, len(lst)):
            product = lst[i][0] * lst[j][0]
            if product > max_product:
                max_product = product
    
    return max_product",lm
448,"def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum",human
885,"def is_Isomorphic(str1,str2):          
    dict_str1 = {}
    dict_str2 = {}
    for i, value in enumerate(str1):
        dict_str1[value] = dict_str1.get(value,[]) + [i]        
    for j, value in enumerate(str2):
        dict_str2[value] = dict_str2.get(value,[]) + [j]
    if sorted(dict_str1.values()) == sorted(dict_str2.values()):
        return True
    else:
        return False",human
34,"def find_missing_number(arr):
    if not arr:
        return None
    
    n = len(arr)
  
    total_sum = (n + 1) * (n + 2) // 2
    
    for num in arr:
        total_sum -= num
    
    return total_sum",lm
830,"def round_up(number, digits):
    multiplier = 10 ** digits
    rounded_number = int(number * multiplier + 0.5) / multiplier
    return rounded_number",lm
248,"def harmonic_sum(n):
    if n == 0:
        return 0
    else:
        return 1/n + harmonic_sum(n-1)",lm
89,"def find_closest_smaller(n):
    return n - 1",lm
597,"def find_kth(arr1, arr2, m, n, k):
	sorted1 = [0] * (m + n)
	i = 0
	j = 0
	d = 0
	while (i < m and j < n):
		if (arr1[i] < arr2[j]):
			sorted1[d] = arr1[i]
			i += 1
		else:
			sorted1[d] = arr2[j]
			j += 1
		d += 1
	while (i < m):
		sorted1[d] = arr1[i]
		d += 1
		i += 1
	while (j < n):
		sorted1[d] = arr2[j]
		d += 1
		j += 1
	return sorted1[k - 1]",human
224,"def count_set_bits(num):
    count = 0
    while num:
        count += num & 1
        num >>= 1
    return count",lm
464,"def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result",human
355,"def count_Rectangles(radius):  
    rectangles = 0 
    diameter = 2 * radius 
    diameterSquare = diameter * diameter 
    for a in range(1, 2 * radius):  
        for b in range(1, 2 * radius): 
            diagnalLengthSquare = (a * a +  b * b)  
            if (diagnalLengthSquare <= diameterSquare) : 
                rectangles += 1
    return rectangles ",human
394,"def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return (res) ",human
582,"def my_dict(dict1):
  if bool(dict1):
     return False
  else:
     return True",human
274,"def sum_even_index_binomial_coefficients(n):
    """"""
    Calculates the sum of even index binomial coefficients.

    Args:
    - n: The number of binomial coefficients to consider.

    Returns:
    - sum_of_coefficients: The sum of even index binomial coefficients.

    Example:
    >>> sum_even_index_binomial_coefficients(4)
    3

    Explanation: The binomial coefficients of index 0, 2, and 4 are 1, 6, and 15 respectively. 
    So the sum of even index binomial coefficients is 1 + 6 + 15 = 22.
    """"""

    sum_of_coefficients = 0
    for i in range(n+1):
        coefficient = 1
        for j in range(i+1):
            if j < i-j:
                coefficient *= i-j
                coefficient //= j+1
            else:
                coefficient *= i-j+1
                coefficient //= i-j
        if i % 2 == 0:
            sum_of_coefficients += coefficient

    return sum_of_coefficients",lm
900,"import re
def match_num(string):
    text = re.compile(r""^5"")
    if text.match(string):
        return True
    else:
        return False",human
609,"def find_minimum_periodic_function():
    # implementation goes here
    pass",lm
607,"import re
pattern = 'fox'
text = 'The quick brown fox jumps over the lazy dog.'
def find_literals(text, pattern):
  match = re.search(pattern, text)
  s = match.start()
  e = match.end()
  return (match.re.pattern, s, e)",human
365,"def count_Digit(n):
    count = 0
    while n != 0:
        n //= 10
        count += 1
    return count",human
371,"def smallest_missing(A, left_element, right_element):
    if left_element > right_element:
        return left_element
    mid = left_element + (right_element - left_element) // 2
    if A[mid] == mid:
        return smallest_missing(A, mid + 1, right_element)
    else:
        return smallest_missing(A, left_element, mid - 1)",human
152,"def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    
    middle = len(arr) // 2
    left_half = arr[:middle]
    right_half = arr[middle:]
    
    left_half = merge_sort(left_half)
    right_half = merge_sort(right_half)
    
    return merge(left_half, right_half)


def merge(left, right):
    merged = []
    left_index = right_index = 0
    
    while left_index < len(left) and right_index < len(right):
        if left[left_index] <= right[right_index]:
            merged.append(left[left_index])
            left_index += 1
        else:
            merged.append(right[right_index])
            right_index += 1
    
    merged.extend(left[left_index:])
    merged.extend(right[right_index:])
    
    return merged",lm
825,"def access_elements(nums, list_index):
    result = [nums[i] for i in list_index]
    return result",human
974,"def min_sum_path(A): 
	memo = [None] * len(A) 
	n = len(A) - 1
	for i in range(len(A[n])): 
		memo[i] = A[n][i] 
	for i in range(len(A) - 2, -1,-1): 
		for j in range( len(A[i])): 
			memo[j] = A[i][j] + min(memo[j], 
									memo[j + 1]) 
	return memo[0]",human
964,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2==0: 
            return True  
        else:
          return False",human
952,"def ncr_mod_p(n, r, p):
    def factorial_mod_p(n, p):
        fact = 1
        while n > 1:
            fact = (fact * n) % p
            n -= 1
        return fact

    def power_mod_p(x, y, p):
        res = 1
        x = x % p
        while y > 0:
            if y & 1:
                res = (res * x) % p
            y = y >> 1
            x = (x * x) % p
        return res

    def ncr_mod_p_util(n, r, p):
        if r == 0:
            return 1
        if r > n:
            return 0
        fact_n = factorial_mod_p(n, p)
        fact_r = factorial_mod_p(r, p)
        fact_nr = factorial_mod_p(n - r, p)
        return (fact_n * power_mod_p(fact_r * fact_nr % p, p - 2, p)) % p

    return ncr_mod_p_util(n, r, p)",lm
674,"from collections import OrderedDict
def remove_duplicate(string):
  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())
  return result",human
806,"def maximum_run_of_uppercase(string):
    max_run = 0
    current_run = 0
    
    for char in string:
        if char.isupper():
            current_run += 1
            if current_run > max_run:
                max_run = current_run
        else:
            current_run = 0
    
    return max_run",lm
739,"import math 
def find_Index(n): 
    x = math.sqrt(2 * math.pow(10,(n - 1))); 
    return round(x); ",human
383,"def toggle_odd_bits(num):
    return num ^ 0xAAAAAAAA",lm
772,"def remove_length(test_str, K):
  temp = test_str.split()
  res = [ele for ele in temp if len(ele) != K]
  res = ' '.join(res)
  return (res) ",human
43,"import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')",human
40,"from collections import Counter

def find_frequency(list_of_lists):
    # Flatten the list of lists into a single list
    flat_list = [item for sublist in list_of_lists for item in sublist]
    
    # Count the frequency of each element in the flat list
    frequency = Counter(flat_list)
    
    return frequency",lm
62,"def find_smallest_number(numbers):
    if not numbers:
        return None
    
    smallest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
    
    return smallest",lm
100,"import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i",human
725,"import re

def extract_quoted_values(string):
    pattern = r'""(.*?)""'
    matches = re.findall(pattern, string)
    return matches",lm
942,"def check_element(test_tup, check_list):
  res = False
  for ele in check_list:
    if ele in test_tup:
      res = True
      break
  return (res) ",human
935,"def series_sum(number):
 total = 0
 total = (number * (number + 1) * (2 * number + 1)) / 6
 return total",human
57,"def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ",human
816,"def clear_tuple_values(tuple_list):
    new_tuple_list = []
    for tuple_val in tuple_list:
        new_tuple = tuple(val for val in tuple_val)
        new_tuple_list.append(new_tuple)
    return new_tuple_list",lm
357,"def find_maximum_element(*tuples):
    max_element = None
    for tuple_record in tuples:
        for element in tuple_record:
            if max_element is None or element > max_element:
                max_element = element
    return max_element",lm
210,"import re

def check_characters(string):
    pattern = r'^[a-zA-Z0-9]+$'
    match = re.fullmatch(pattern, string)
    if match:
        return True
    else:
        return False",lm
484,"def remove_matching_tuples(tuple1, tuple2):
    return tuple(t for t in tuple1 if t not in tuple2)",lm
628,"MAX=1000;
def replace_spaces(string):
  string=string.strip()
  i=len(string)
  space_count=string.count(' ')
  new_length = i + space_count*2
  if new_length > MAX:
    return -1
  index = new_length-1
  string=list(string)
  for f in range(i-2, new_length-2):
    string.append('0')
  for j in range(i-1, 0, -1):
    if string[j] == ' ':
      string[index] = '0'
      string[index-1] = '2'
      string[index-2] = '%'
      index=index-3
    else:
      string[index] = string[j]
      index -= 1
  return ''.join(string)",human
225,"def find_Min(arr,low,high): 
    while (low < high): 
        mid = low + (high - low) // 2;   
        if (arr[mid] == arr[high]): 
            high -= 1; 
        elif (arr[mid] > arr[high]): 
            low = mid + 1; 
        else: 
            high = mid; 
    return arr[high]; ",human
24,"def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)",human
531,"def min_coins(coins, amount):
    if amount == 0:
        return 0
    if amount < 0:
        return float('inf')
    
    min_coins_required = float('inf')
    
    for coin in coins:
        current_coins_required = 1 + min_coins(coins, amount - coin)
        min_coins_required = min(min_coins_required, current_coins_required)
    
    return min_coins_required",lm
3,"import math
def is_not_prime(n):
    result = False
    for i in range(2,int(math.sqrt(n)) + 1):
        if n % i == 0:
            result = True
    return result",human
222,"def check_data_type(t):
    """"""
    Check if all the elements in tuple have same data type or not.
    
    Parameters:
    t (tuple): The input tuple to check.
    
    Returns:
    bool: True if all elements have the same data type, False otherwise.
    """"""

    if len(t) == 0:
        return True

    data_type = type(t[0])

    for element in t:
        if type(element) != data_type:
            return False

    return True",lm
711,"def product_Equal(n): 
    if n < 10: 
        return False
    prodOdd = 1; prodEven = 1
    while n > 0: 
        digit = n % 10
        prodOdd *= digit 
        n = n//10
        if n == 0: 
            break; 
        digit = n % 10
        prodEven *= digit 
        n = n//10
    if prodOdd == prodEven: 
        return True
    return False",human
841,"def count_inversions(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[i] > arr[j]:
                count += 1
    return count",lm
737,"import re 
regex = '^[aeiouAEIOU][A-Za-z0-9_]*'
def check_str(string): 
	if(re.search(regex, string)): 
		return (""Valid"") 
	else: 
		return (""Invalid"") ",human
772,"def remove_words_with_k_length(string, k):
    words = string.split()
    result = []
    for word in words:
        if len(word) != k:
            result.append(word)
    return ' '.join(result)",lm
297,"def flatten_list(nested_list):
    flat_list = []
    for item in nested_list:
        if type(item) == list:
            flat_list.extend(flatten_list(item))
        else:
            flat_list.append(item)
    return flat_list",lm
367,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False",human
585,"def find_n_expensive_items(dataset, n):
    import heapq

    heapq.heapify(dataset)
    return heapq.nlargest(n, dataset)",lm
635,"import heapq as hq
def heap_sort(iterable):
    h = []
    for value in iterable:
        hq.heappush(h, value)
    return [hq.heappop(h) for i in range(len(h))]",human
688,"def get_complex_length(complex_number):
    return abs(complex_number)",lm
503,"def add_consecutive_nums(nums):
    result = [b+a for a, b in zip(nums[:-1], nums[1:])]
    return result",human
33,"def decimal_to_binary(decimal):
    """"""
    Convert a decimal number to binary number.

    Parameters:
    decimal (int): The decimal number to convert.

    Returns:
    str: The binary representation of the decimal number.
    """"""
    return bin(decimal)[2:]",lm
560,"def find_union(tuples):
    return set.union(*tuples)",lm
480,"def max_occuring_character(string):
    char_count = {}
    max_count = 0
    max_char = ''

    for char in string:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1

        if char_count[char] > max_count:
            max_count = char_count[char]
            max_char = char

    return max_char",lm
127,"def multiply(x, y):
    result = 0
    for _ in range(abs(y)):
        result += abs(x)
    
    if (x < 0 and y < 0) or (x > 0 and y > 0):
        return result
    else:
        return -result",lm
340,"def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])",human
632,"def move_zeroes(lst):
    """"""
    Move all zeroes to the end of the given list.

    Parameters:
    lst (list): The input list.

    Returns:
    list: The modified list with all zeroes moved to the end.
    """"""
    return sorted(lst, key=lambda x: x == 0)",lm
830,"import math
def round_up(a, digits):
    n = 10**-digits
    return round(math.ceil(a / n) * n, digits)",human
498,"def gcd(x, y):
    gcd = 1
    if x % y == 0:
        return y
    for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd = k
            break  
    return gcd",human
626,"def triangle_area(r) :  
    if r < 0 : 
        return -1
    return r * r ",human
361,"def remove_empty_lists(lst):
    return [sublist for sublist in lst if sublist]",lm
12,"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result",human
636,"def Check_Solution(a,b,c): 
    if (a == c): 
        return (""Yes""); 
    else: 
        return (""No""); ",human
450,"def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result",human
69,"def check_sublist(lst, sublist):
    if sublist in lst:
        return True
    else:
        return False",lm
777,"def sum_non_repeated_elements(arr):
    non_repeated_elements = []
    for element in arr:
        if arr.count(element) == 1:
            non_repeated_elements.append(element)
    return sum(non_repeated_elements)",lm
668,"import re 
def replace(string, char): 
    pattern = char + '{2,}'
    string = re.sub(pattern, char, string) 
    return string ",human
86,"def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1",human
798,"def _sum(arr):  
    sum=0
    for i in arr: 
        sum = sum + i      
    return(sum)  ",human
238,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ",human
637,"def check_no_profit_no_loss(amount):
    if amount < 0:
        return ""Invalid amount""
    elif amount == 0:
        return ""No profit, no loss""
    else:
        return ""No profit, no loss""",lm
343,"def dig_let(s):
 d=l=0
 for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
 return (l,d)",human
311,"def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) ",human
514,"def sum_elements(test_tup):
  res = sum(list(test_tup))
  return (res) ",human
356,"def find_third_angle(angle1, angle2):
    angle3 = 180 - angle1 - angle2
    return angle3",lm
4,"def find_largest_integers(numbers):
    import heapq
    return heapq.nlargest(len(numbers), numbers)",lm
169,"def get_pell(n): 
	if (n <= 2): 
		return n 
	a = 1
	b = 2
	for i in range(3, n+1): 
		c = 2 * b + a 
		a = b 
		b = c 
	return b ",human
789,"from math import tan, pi
def perimeter_polygon(s,l):
  perimeter = s*l
  return perimeter",human
196,"def remove_tuples_with_length_k(lst, k):
    return [tup for tup in lst if len(tup) != k]",lm
244,"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ",human
804,"def check_product_even(numbers):
    product = 1
    for num in numbers:
        product *= num
    if product % 2 == 0:
        return True
    return False",lm
25,"def product_of_non_repeated_elements(arr):
    non_repeated_elements = []
    product = 1
    
    for num in arr:
        if num not in non_repeated_elements:
            non_repeated_elements.append(num)
            product *= num
    
    return product",lm
753,"def min_k(test_list, K):
  res = sorted(test_list, key = lambda x: x[1])[:K]
  return (res) ",human
695,"def check_elements_are_greater(first_tuple, second_tuple):
    return all(second_tuple[i] > i for i in range(len(first_tuple)))",lm
490,"def extract_symmetric(test_list):
  temp = set(test_list) & {(b, a) for a, b in test_list}
  res = {(a, b) for a, b in temp if a < b}
  return (res) ",human
418,"def find_longest_sublist(lst):
    """"""
    Find the sublist having maximum length.

    Parameters:
    lst (list): A list of sublists.

    Returns:
    list: The sublist having the maximum length.

    """"""
    longest_sublist = []
    max_length = 0

    for sublist in lst:
        if len(sublist) > max_length:
            longest_sublist = sublist
            max_length = len(sublist)

    return longest_sublist",lm
750,"def add_tuple(test_list, test_tup):
  test_list += test_tup
  return (test_list) ",human
101,"def find_kth_element(array, k):
    sorted_array = sorted(array)
    return sorted_array[k-1]",lm
968,"def find_maximum(periodic_function):
    max_value = max(periodic_function)
    return max_value",lm
972,"def concatenate_nested(test_tup1, test_tup2):
  res = test_tup1 + test_tup2
  return (res) ",human
223,"def check_majority_element(arr):
    if len(arr) == 0:
        return False

    majority_candidate = arr[len(arr)//2]

    count = 0
    for num in arr:
        if num == majority_candidate:
            count += 1

    if count > len(arr) // 2:
        return True
    else:
        return False",lm
813,"def find_string_length(string):
    """"""
    Returns the length of the given string.

    Parameters:
    string (str): The input string.

    Returns:
    int: The length of the string.
    """"""
    return len(string)",lm
274,"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ",human
205,"def inversion_elements(test_tup):
  res = tuple(list(map(lambda x: ~x, list(test_tup))))
  return (res) ",human
946,"from collections import Counter 
def most_common_elem(s,a):
  most_common_elem=Counter(s).most_common(a)
  return most_common_elem",human
293,"import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s",human
140,"def extract_singly_occuring_elements(list_of_tuples):
    element_counts = {}
    for tuple_item in list_of_tuples:
        for element in tuple_item:
            if element in element_counts:
                element_counts[element] += 1
            else:
                element_counts[element] = 1
    
    singly_occuring_elements = []
    for element, count in element_counts.items():
        if count == 1:
            singly_occuring_elements.append(element)
    
    return singly_occuring_elements",lm
909,"def find_previous_palindrome(number):
    number -= 1
    while True:
        if str(number) == str(number)[::-1]:
            return number
        number -= 1",lm
4,"import heapq as hq
def heap_queue_largest(nums,n):
  largest_nums = hq.nlargest(n, nums)
  return largest_nums",human
910,"import datetime
def check_date(m, d, y):
    try:
        m, d, y = map(int, (m, d, y))
        datetime.date(y, m, d)
        return True
    except ValueError:
        return False",human
664,"def average_Even(n) : 
    if (n% 2!= 0) : 
        return (""Invalid Input"") 
        return -1  
    sm = 0
    count = 0
    while (n>= 2) : 
        count = count+1
        sm = sm+n 
        n = n-2
    return sm // count ",human
691,"from itertools import groupby 
def group_element(test_list):
  res = dict()
  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):
    res[key] = [ele[0] for ele in val] 
  return (res)
",human
588,"def big_diff(nums):
     diff= max(nums)-min(nums)
     return diff",human
516,"def radix_sort(lst):
    """"""
    Sorts a list of elements using radix sort.
    
    Args:
        lst (list): The list to be sorted.
    
    Returns:
        list: The sorted list.
    """"""
    
    # Find the maximum element in the list
    max_val = max(lst)
    
    # Get the number of digits in the maximum element
    num_digits = len(str(max_val))
    
    # Iterate through the digits from least significant to most significant
    for digit_place in range(num_digits):
        
        # Create 10 empty buckets (one for each digit)
        buckets = [[] for _ in range(10)]
        
        # Iterate through each element in the list
        for num in lst:
            
            # Get the digit at the current place value
            digit = num // (10 ** digit_place) % 10
            
            # Add the number to the corresponding bucket
            buckets[digit].append(num)
        
        # Reconstruct the list by concatenating the contents of the buckets
        lst = [num for bucket in buckets for num in bucket]
    
    # Return the sorted list
    return lst",lm
644,"def reverse_array(arr, position):
    """"""
    Reverses an array upto a given position.
    
    Args:
        arr (list): The input array.
        position (int): The position upto which the array should be reversed.

    Returns:
        list: The reversed array upto the given position.
    """"""
    return arr[:position][::-1] + arr[position:]",lm
355,"import math

def count_rectangles_in_circle(r: float) -> int:
    """"""
    Count the number of rectangles in a circle of radius r.
    
    Arguments:
    - r: the radius of the circle (float)
    
    Returns:
    - count: the number of rectangles in the circle (int)
    """"""
    count = 0

    for i in range(1, int(r) + 1):
        count += math.floor(math.sqrt(r**2 - i**2))

    return 4 * count",lm
640,"import re
def remove_parenthesis(items):
 for item in items:
    return (re.sub(r"" ?\([^)]+\)"", """", item))",human
666,"def count_char(string,char):
 count = 0
 for i in range(len(string)):
    if(string[i] == char):
        count = count + 1
 return count",human
411,"import re

def snake_to_camel(snake_case_string):
    camel_case_string = re.sub(r'_([a-z])', lambda match: match.group(1).upper(), snake_case_string)
    return camel_case_string",lm
707,"def count_Set_Bits(n) :  
    n += 1; 
    powerOf2 = 2;   
    cnt = n // 2;  
    while (powerOf2 <= n) : 
        totalPairs = n // powerOf2;  
        cnt += (totalPairs // 2) * powerOf2;  
        if (totalPairs & 1) : 
            cnt += (n % powerOf2) 
        else : 
            cnt += 0
        powerOf2 <<= 1;    
    return cnt;  ",human
824,"def remove_even_numbers(lst):
    return [num for num in lst if num % 2 != 0]",lm
580,"def extract_even_elements(nested_tuple):
    '''
    Extracts the even elements in the nested mixed tuple.
    
    Parameters:
        nested_tuple (tuple): A nested mixed tuple.
        
    Returns:
        tuple: A tuple containing the even elements from the nested_tuple.
    '''
    
    even_elements = ()
    
    for element in nested_tuple:
        if isinstance(element, tuple):
            even_elements += extract_even_elements(element)
        elif isinstance(element, int) and element%2 == 0:
            even_elements += (element,)
            
    return even_elements",lm
428,"def shell_sort(arr):
    n = len(arr)
    gap = n // 2
    
    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            
            arr[j] = temp
        
        gap //= 2
    
    return arr",lm
939,"def sorted_models(models):
 sorted_models = sorted(models, key = lambda x: x['color'])
 return sorted_models",human
541,"import math 
def get_sum(n): 
	sum = 0
	i = 1
	while i <= (math.sqrt(n)): 
		if n%i == 0: 
			if n/i == i : 
				sum = sum + i 
			else: 
				sum = sum + i 
				sum = sum + (n / i ) 
		i = i + 1
	sum = sum - n 
	return sum
def check_abundant(n): 
	if (get_sum(n) > n): 
		return True
	else: 
		return False",human
602,"def first_repeated_char(str1):
  for index,c in enumerate(str1):
    if str1[:index+1].count(c) > 1:
      return c 
  return ""None""",human
469,"def max_profit(prices, k):
    if not prices or k == 0:
        return 0

    n = len(prices)

    # If k is larger than or equal to half of the length of prices, we can make as many transactions as we want
    if k >= n // 2:
        max_profit = 0

        for i in range(1, n):
            max_profit += max(prices[i] - prices[i-1], 0)

        return max_profit

    # Initialize the dp table
    dp = [[0] * (k + 1) for _ in range(n)]

    # Iterate over each transaction and each day
    for t in range(1, k + 1):
        max_diff = -prices[0]

        for d in range(1, n):
            # Update the maximum profit of dp[d][t]
            dp[d][t] = max(dp[d-1][t], prices[d] + max_diff)
            
            # Update the maximum difference if we buy the stock on day d with t transactions
            max_diff = max(max_diff, dp[d-1][t-1] - prices[d])

    return dp[n-1][k]",lm
782,"def sum_odd_subarrays(arr):
    total_sum = 0
    n = len(arr)
    
    for i in range(n):
        for j in range(i, n, 2):
            total_sum += sum(arr[i:j + 1])
    
    return total_sum",lm
593,"import re
def removezero_ip(ip):
 string = re.sub('\.[0]*', '.', ip)
 return string",human
204,"def count(s,c) : 
    res = 0 
    for i in range(len(s)) : 
        if (s[i] == c): 
            res = res + 1
    return res ",human
745,"def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]",human
809,"def check_tuples(t1, t2):
     for i in range(len(t1)):
         if t2[i] >= i:
             return False
     return True",lm
779,"def count_unique_lists(lst):
    unique_lists = set(tuple(sublst) for sublst in lst)
    return len(unique_lists)",lm
750,"def add_tuple_to_list(a_list, a_tuple):
    a_list.append(a_tuple)
    return a_list",lm
780,"from itertools import combinations 
def find_combinations(test_list):
  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]
  return (res) ",human
286,"def find_largest_sum(arr, k):
    modified_arr = arr * k
    current_sum = max_sum = modified_arr[0]
    
    for i in range(1, len(modified_arr)):
        current_sum = max(modified_arr[i], current_sum + modified_arr[i])
        max_sum = max(max_sum, current_sum)
    
    return max_sum",lm
110,"def extract_missing_ranges(lst, start_range, end_range):
    missing_ranges = []
    
    if len(lst) == 0:
        if start_range < end_range:
            missing_ranges.append((start_range, end_range))
        return missing_ranges
    
    if lst[0] > start_range:
        missing_ranges.append((start_range, lst[0] - 1))
    
    for i in range(1, len(lst)):
        if lst[i] > lst[i - 1] + 1:
            missing_ranges.append((lst[i - 1] + 1, lst[i] - 1))
    
    if lst[-1] < end_range:
        missing_ranges.append((lst[-1] + 1, end_range))
    
    return missing_ranges",lm
852,"def remove_negs(num_list): 
    for item in num_list: 
        if item < 0: 
           num_list.remove(item) 
    return num_list",human
840,"def Check_Solution(a,b,c):  
    if b == 0:  
        return (""Yes"")  
    else: 
        return (""No"")  ",human
133,"def sum_of_negative_numbers(numbers):
    return sum(filter(lambda x: x < 0, numbers))",lm
191,"def is_month_30_days(month: str) -> bool:
    """"""
    Function to check whether the given month name contains 30 days or not.

    Parameters:
    month (str): The name of the month.

    Returns:
    bool: True if the month contains 30 days, False otherwise.
    """"""
    thirty_days_months = [""April"", ""June"", ""September"", ""November""]

    if month in thirty_days_months:
        return True
    else:
        return False",lm
600,"def is_even(num):
    if num & 1 == 0:
        return True
    else:
        return False",lm
836,"def max_subarray_length(arr):
    """"""
    Returns the length of the subarray with the maximum sum in the given array.

    Parameters:
    arr (list): The input array

    Returns:
    int: The length of the subarray with maximum sum
    """"""

    # Variables to keep track of the maximum sum and the length of the subarray
    max_sum = float('-inf')
    max_length = 0

    # Iterate through the array
    for i in range(len(arr)):
        current_sum = 0

        # Calculate the sum of subarrays starting from index i
        for j in range(i, len(arr)):
            current_sum += arr[j]

            # Update the maximum sum and length if current sum is greater
            if current_sum > max_sum:
                max_sum = current_sum
                max_length = j - i + 1

    return max_length",lm
416,"MAX = 1000000
def breakSum(n): 
	dp = [0]*(n+1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); 
	return dp[n]",human
51,"def is_equilateral_triangle(side_a, side_b, side_c):
    if side_a == side_b and side_b == side_c:
        print(""The triangle is equilateral"")
    else:
        print(""The triangle is not equilateral"")",lm
725,"import re
def extract_quotation(text1):
  return (re.findall(r'""(.*?)""', text1))",human
5,"def count_ways(n): 
	A = [0] * (n + 1) 
	B = [0] * (n + 1) 
	A[0] = 1
	A[1] = 0
	B[0] = 0
	B[1] = 1
	for i in range(2, n+1): 
		A[i] = A[i - 2] + 2 * B[i - 1] 
		B[i] = A[i - 1] + B[i - 2] 
	return A[n] ",human
350,"def minimum_Length(s) : 
    maxOcc = 0
    n = len(s) 
    arr = [0]*26
    for i in range(n) : 
        arr[ord(s[i]) -ord('a')] += 1
    for i in range(26) : 
        if arr[i] > maxOcc : 
            maxOcc = arr[i] 
    return n - maxOcc ",human
550,"def find_Max(arr,low,high): 
    if (high < low): 
        return arr[0] 
    if (high == low): 
        return arr[low] 
    mid = low + (high - low) // 2 
    if (mid < high and arr[mid + 1] < arr[mid]): 
        return arr[mid] 
    if (mid > low and arr[mid] < arr[mid - 1]): 
        return arr[mid - 1]  
    if (arr[low] > arr[mid]): 
        return find_Max(arr,low,mid - 1) 
    else: 
        return find_Max(arr,mid + 1,high) ",human
294,"def find_maximum_value(lst):
    """"""
    Finds the maximum value in a given heterogeneous list.
    
    Parameters:
        lst (list): A list of values.
    
    Returns:
        The maximum value in the list.
    """"""
    return max(lst)",lm
505,"def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A",human
785,"def tuple_str_int(test_str):
  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))
  return (res) ",human
8,"def square_nums(nums):
 square_nums = list(map(lambda x: x ** 2, nums))
 return square_nums",human
658,"def max_occurrences(list1):
    max_val = 0
    result = list1[0] 
    for i in list1:
        occu = list1.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result",human
908,"def find_fixed_point(arr, n): 
	for i in range(n): 
		if arr[i] is i: 
			return i 
	return -1",human
76,"def count_squares_in_rectangle(length, width):
    """"""
    Count the number of squares in a rectangle.

    Parameters:
    length (int): The length of the rectangle.
    width (int): The width of the rectangle.

    Returns:
    int: The number of squares in the rectangle.
    """"""
    if length <= 0 or width <= 0:
        return 0
    else:
        min_dimension = min(length, width)
        max_dimension = max(length, width)
        number_of_squares = min_dimension
        while min_dimension > 1:
            min_dimension -= 1
            number_of_squares += min_dimension
        return number_of_squares",lm
17,"def find_perimeter_of_square(side):
    return 4 * side",lm
474,"def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2",human
723,"from operator import eq
def count_same_pair(nums1, nums2):
    result = sum(map(eq, nums1, nums2))
    return result",human
436,"def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num ",human
700,"def count_elements_in_range(lst, start, end):
    count = 0
    for element in lst:
        if start <= element <= end:
            count += 1
    return count",lm
512,"def flatten(test_tuple): 
	for tup in test_tuple: 
		if isinstance(tup, tuple): 
			yield from flatten(tup) 
		else: 
			yield tup 
def count_element_freq(test_tuple):
  res = {}
  for ele in flatten(test_tuple):
    if ele not in res:
      res[ele] = 0
    res[ele] += 1
  return (res) ",human
765,"import math 
def is_polite(n): 
	n = n + 1
	return (int)(n+(math.log((n + math.log(n, 2)), 2))) ",human
510,"def no_of_subsequences(arr, k): 
	n = len(arr) 
	dp = [[0 for i in range(n + 1)] 
			for j in range(k + 1)] 
	for i in range(1, k + 1): 
		for j in range(1, n + 1): 
			dp[i][j] = dp[i][j - 1] 
			if arr[j - 1] <= i and arr[j - 1] > 0: 
				dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1
	return dp[k][n]",human
920,"def remove_tuple(test_list):
  res = [sub for sub in test_list if not all(ele == None for ele in sub)]
  return (str(res)) ",human
529,"def jacobsthal_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return jacobsthal_lucas(n-1) + 2*jacobsthal_lucas(n-2)",lm
923,"def super_seq(X, Y, m, n):
	if (not m):
		return n
	if (not n):
		return m
	if (X[m - 1] == Y[n - 1]):
		return 1 + super_seq(X, Y, m - 1, n - 1)
	return 1 + min(super_seq(X, Y, m - 1, n),	super_seq(X, Y, m, n - 1))",human
827,"def sum_column(lst, col_index):
    """"""
    Sum a specific column of a list in a given list of lists.
    
    Parameters:
    lst (list): A list of lists.
    col_index (int): The index of the column to sum.
    
    Returns:
    float: The sum of the column values.
    """"""
    column_sum = 0
    for sublist in lst:
        if col_index < len(sublist):
            column_sum += sublist[col_index]
    return column_sum",lm
571,"def find_max_sum_disjoint_pairs(arr, k):
    arr.sort()
    max_sum = 0
    i = len(arr) - 1
    while i >= 0 and k > 0:
        max_sum += arr[i]
        i -= 2
        k -= 1
    return max_sum",lm
54,"def counting_sort(arr):
    min_val = min(arr)
    max_val = max(arr)
    count = [0] * (max_val - min_val + 1)
    
    for num in arr:
        count[num - min_val] += 1
    
    idx = 0
    for i in range(len(count)):
        while count[i] > 0:
            arr[idx] = i + min_val
            count[i] -= 1
            idx += 1
    
    return arr",lm
25,"def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; ",human
346,"def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)",human
577,"def find_last_digit(num):
    factorial = 1
    
    for i in range(1, num+1):
        factorial *= i
        
    return factorial % 10",lm
399,"def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",human
677,"def check_triangle_validity(side1, side2, side3):
    if (side1 + side2 > side3) and (side2 + side3 > side1) and (side1 + side3 > side2):
        return True
    else:
        return False",lm
36,"def find_Nth_Digit(p,q,N) :  
    while (N > 0) : 
        N -= 1;  
        p *= 10;  
        res = p // q;  
        p %= q;  
    return res;  ",human
949,"def count_digs(tup):
  return sum([len(str(ele)) for ele in tup ]) 
def sort_list(test_list):
  test_list.sort(key = count_digs)
  return (str(test_list))",human
299,"def calculate_maximum_aggregate(lst):
    """"""
    Calculate the maximum aggregate from a list of tuples.

    Args:
        lst (list): A list of tuples.

    Returns:
        int: The maximum aggregate.

    Examples:
        >>> calculate_maximum_aggregate([(1, 2), (3, 4), (5, 6)])
        15
        >>> calculate_maximum_aggregate([(7, 8, 9), (10, 11, 12)])
        39
        >>> calculate_maximum_aggregate([(3,), (5, 7)])
        10
    """"""
    return max(sum(t) for t in lst)",lm
839,"def sort_tuples(tuples):
    return sorted(tuples, key=lambda x: x[0])",lm
704,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1))",human
681,"def smallest_Divisor(n): 
    if (n % 2 == 0): 
        return 2; 
    i = 3;  
    while (i*i <= n): 
        if (n % i == 0): 
            return i; 
        i += 2; 
    return n; ",human
78,"def count_odd_set_bits(n):
    count = 0
    while n > 0:
        if bin(n).count('1') % 2 != 0:
            count += 1
        n -= 1
    return count",lm
382,"def find_rotation_count(A):
    (left, right) = (0, len(A) - 1)
    while left <= right:
        if A[left] <= A[right]:
            return left
        mid = (left + right) // 2
        next = (mid + 1) % len(A)
        prev = (mid - 1 + len(A)) % len(A)
        if A[mid] <= A[next] and A[mid] <= A[prev]:
            return mid
        elif A[mid] <= A[right]:
            right = mid - 1
        elif A[mid] >= A[left]:
            left = mid + 1
    return -1",human
807,"def first_odd(nums):
  first_odd = next((el for el in nums if el%2!=0),-1)
  return first_odd",human
728,"def sum_list(lst1,lst2):
  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] 
  return res_list",human
532,"def check_permutation(str1, str2):
  n1=len(str1)
  n2=len(str2)
  if(n1!=n2):
    return False
  a=sorted(str1)
  str1="" "".join(a)
  b=sorted(str2)
  str2="" "".join(b)
  for i in range(0, n1, 1):
    if(str1[i] != str2[i]):
      return False
  return True",human
592,"def sum_of_binomial_coefficients(n):
    """"""
    Calculate the sum of the product of binomial coefficients for a given non-negative integer.

    Parameters:
        n (int): The non-negative integer value.

    Returns:
        int: The sum of the product of binomial coefficients.

    """"""

    def binomial_coefficient(n, k):
        """"""
        Calculate the binomial coefficient for a given non-negative integers n and k.

        Parameters:
            n (int): The non-negative integer n.
            k (int): The non-negative integer k.

        Returns:
            int: The binomial coefficient value.

        """"""

        if k == 0 or k == n:
            return 1
        else:
            return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)

    result = 0
    for k in range(n + 1):
        result += binomial_coefficient(n, k) * binomial_coefficient(n, k)

    return result",lm
845,"import math 
def find_Digits(n): 
    if (n < 0): 
        return 0;
    if (n <= 1): 
        return 1; 
    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); 
    return math.floor(x) + 1; ",human
139,"def find_circumference(radius):
    return 2 * 3.14159 * radius",lm
567,"def issort_list(list1):
    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))
    return result",human
561,"def assign_pairs(t):
    """"""
    Assigns each element in the tuple with its pair elements from other similar pairs.
    
    Args:
    t (tuple): The input tuple of elements.
    
    Returns:
    tuple: The modified tuple with assigned pair elements.
    """"""

    # If the tuple has odd number of elements, return the original tuple
    if len(t) % 2 != 0:
        return t

    # Create an empty list for the modified pairs
    modified_pairs = []

    # Iterate over the tuple elements in pairs
    for i in range(0, len(t), 2):
        # Get the current pair of elements
        pair = (t[i], t[i+1])

        # Append the pair to the modified pairs list multiple times
        # based on the number of pairs in the tuple
        modified_pairs.extend(pair for _ in range(i//2+1))

    # Return the modified pairs as a tuple
    return tuple(modified_pairs)",lm
375,"def round_to_multiple(number, multiple):
    return round(number / multiple) * multiple",lm
487,"def sort_tuples(lst):
    return sorted(lst, key=lambda x: x[-1])",lm
137,"def find_zero_ratio(arr):
    """"""Returns the ratio of zeroes in an array of integers.
    
    Parameters:
    arr (list): A list of integers.
    
    Returns:
    float: The ratio of zeroes in the array.
    """"""
    
    # Initialize a variable to count the number of zeroes
    zero_count = 0
    
    # Iterate through the given array
    for num in arr:
        # Check if the number is zero
        if num == 0:
            # Increment the zero count by 1
            zero_count += 1
    
    # Calculate the ratio of zeroes
    zero_ratio = zero_count / len(arr)
    
    # Return the zero ratio
    return zero_ratio",lm
239,"def count_sequences(n, m):
    """"""
    Find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.
    
    Args:
    n (int): The length of the sequence.
    m (int): The maximum value for each element in the sequence.
    
    Returns:
    int: The number of possible sequences.
    """"""
    if n == 0:
        return 0

    if n == 1:
        return m

    dp = [[0] * (m+1) for _ in range(n+1)]

    for i in range(1, m+1):
        dp[1][i] = i

    for i in range(2, n+1):
        for j in range(1, m+1):
            for k in range(1, j):
                dp[i][j] += dp[i-1][k]

    total_sequences = 0
    for i in range(1, m+1):
        total_sequences += dp[n][i]

    return total_sequences",lm
695,"def check_greater(test_tup1, test_tup2):
  res = all(x < y for x, y in zip(test_tup1, test_tup2))
  return (res) ",human
136,"def cal_electbill(units):
 if(units < 50):
    amount = units * 2.60
    surcharge = 25
 elif(units <= 100):
    amount = 130 + ((units - 50) * 3.25)
    surcharge = 35
 elif(units <= 200):
    amount = 130 + 162.50 + ((units - 100) * 5.26)
    surcharge = 45
 else:
    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)
    surcharge = 75
 total = amount + surcharge
 return total",human
251,"def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list",human
545,"def take_L_and_F_set_bits(n) : 
    n = n | n >> 1
    n = n | n >> 2
    n = n | n >> 4
    n = n | n >> 8
    n = n | n >> 16 
    return ((n + 1) >> 1) + 1      
def toggle_F_and_L_bits(n) :  
    if (n == 1) : 
        return 0 
    return n ^ take_L_and_F_set_bits(n) ",human
389,"def nth_lucas_number(n):
    # Base cases
    if n == 1:
        return 2
    if n == 2:
        return 1
    
    # Calculate the n-th Lucas number using recursion
    return nth_lucas_number(n - 1) + nth_lucas_number(n - 2)",lm
552,"def Seq_Linear(seq_nums):
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  if len(set(seq_nums)) == 1: 
    return ""Linear Sequence""
  else:
    return ""Non Linear Sequence""",human
72,"def check_squares(num):
    """"""
    Check if a number can be represented as the difference of two squares.
    
    Parameters:
    num (int): The number to check
    
    Returns:
    bool: True if the number can be represented as the difference of two squares, False otherwise
    """"""
    for i in range(1, int(num**0.5)+1):
        square_1 = i**2
        square_2 = (i+1)**2

        if square_2 - square_1 == num:
            return True

    return False",lm
368,"def repeat_tuples(test_tup, N):
  res = ((test_tup, ) * N)
  return (res) ",human
148,"def sum_digits_single(x) : 
    ans = 0
    while x : 
        ans += x % 10
        x //= 10  
    return ans 
def closest(x) : 
    ans = 0
    while (ans * 10 + 9 <= x) : 
        ans = ans * 10 + 9  
    return ans   
def sum_digits_twoparts(N) : 
    A = closest(N)  
    return sum_digits_single(A) + sum_digits_single(N - A) ",human
314,"def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)",human
115,"def check_empty_dictionaries(dictionary_list):
    """"""
    Check whether all dictionaries in a list are empty or not.
    
    :param dictionary_list: A list of dictionaries
    :type dictionary_list: list
    :return: True if all dictionaries are empty, False otherwise
    :rtype: bool
    """"""
    for dictionary in dictionary_list:
        if bool(dictionary):
            return False
    return True",lm
955,"def is_abundant(num):
    """"""Check if a given number is abundant.
    
    Args:
        num (int): The number to check.
    
    Returns:
        bool: True if the number is abundant, False otherwise.
    """"""
    
    total = 0
    
    for i in range(1, num):
        if num % i == 0:
            total += i
            
    return total > num",lm
244,"import math

def find_next_perfect_square(num):
    # Find the square root of the given number
    sqrt = math.isqrt(num)
    
    # Increment the square root by 1
    next_sqrt = sqrt + 1
    
    # Calculate the next perfect square
    next_square = next_sqrt ** 2
    
    return next_square

This code defines a function called `find_next_perfect_square` that takes a number as input. It first finds the square root of the given number using the `math.isqrt` function. Then, it increments the square root by 1 to find the next square root. Finally, it calculates the next perfect square by squaring the next square root and returns the result.",lm
134,"def check_last (arr,n,p): 
    _sum = 0
    for i in range(n): 
        _sum = _sum + arr[i] 
    if p == 1: 
        if _sum % 2 == 0: 
            return ""ODD""
        else: 
            return ""EVEN""
    return ""EVEN""
      ",human
206,"def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",human
645,"def get_product(val) : 
	res = 1
	for ele in val: 
		res *= ele 
	return res 
def find_k_product(test_list, K):
  res = get_product([sub[K] for sub in test_list])
  return (res) ",human
956,"import re

def split_string(string):
    return re.findall('[A-Z][^A-Z]*', string)",lm
287,"def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)",human
587,"def list_tuple(listx):
  tuplex = tuple(listx)
  return tuplex",human
249,"def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result",human
181,"def longest_common_prefix(strs):
    if not strs:
        return """"
    shortest_str = min(strs, key=len)
    for i, char in enumerate(shortest_str):
        for string in strs:
            if string[i] != char:
                return shortest_str[:i]
    return shortest_str",lm
60,"def max_len_sub( arr, n): 
	mls=[] 
	max = 0
	for i in range(n): 
		mls.append(1) 
	for i in range(n): 
		for j in range(i): 
			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 
				mls[i] = mls[j] + 1
	for i in range(n): 
		if (max < mls[i]): 
			max = mls[i] 
	return max",human
601,"def find_longest_chain(pairs):
    pairs.sort(key=lambda x: x[1])
    longest = []
    current_end = float('-inf')
    
    for pair in pairs:
        if pair[0] > current_end:
            longest.append(pair)
            current_end = pair[1]
    
    return longest",lm
324,"def extract_sum_of_alternate_chains(tuples):
    result = 0
    for i, chain in enumerate(tuples):
        if i % 2 == 0:
            result += sum(chain)
    return result",lm
569,"def sort_sublists(list1):
    result = list(map(sorted,list1)) 
    return result",human
329,"def neg_count(list):
  neg_count= 0
  for num in list: 
    if num <= 0: 
      neg_count += 1
  return neg_count ",human
449,"def is_valid_triangle(point1, point2, point3):
    """"""
    Check whether the triangle is valid or not if 3 points are given.

    Args:
        point1 (tuple): Coordinates of point 1, in the form (x, y).
        point2 (tuple): Coordinates of point 2, in the form (x, y).
        point3 (tuple): Coordinates of point 3, in the form (x, y).

    Returns:
        bool: True if the triangle is valid, False otherwise.
    """"""
    x1, y1 = point1
    x2, y2 = point2
    x3, y3 = point3

    # Calculate the lengths of each side of the triangle
    side1 = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
    side2 = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** 0.5
    side3 = ((x1 - x3) ** 2 + (y1 - y3) ** 2) ** 0.5

    # Check if the sum of any two sides is greater than the third side
    if side1 + side2 > side3 and side2 + side3 > side1 and side3 + side1 > side2:
        return True
    else:
        return False",lm
52,"def parallelogram_area(b,h):
  area=b*h
  return area",human
175,"def is_valid_parenthese( str1):
        stack, pchar = [], {""("": "")"", ""{"": ""}"", ""["": ""]""}
        for parenthese in str1:
            if parenthese in pchar:
                stack.append(parenthese)
            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:
                return False
        return len(stack) == 0",human
495,"import re
def remove_lowercase(str1):
  remove_lower = lambda text: re.sub('[a-z]', '', text)
  result =  remove_lower(str1)
  return (result)",human
444,"def trim_tuples(tuple_list, k):
    trimmed_list = []
    for tup in tuple_list:
        trimmed_list.append(tup[:k])
    return trimmed_list",lm
45,"def find_gcd(arr):
    gcd = arr[0]
    for i in range(1, len(arr)):
        gcd = find_gcd_two_nums(arr[i], gcd)
    return gcd
  
  
def find_gcd_two_nums(x, y):
    while(y):
        x, y = y, x % y
    return x",lm
56,"def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ",human
11,"def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ",human
843,"import heapq
def nth_super_ugly_number(n, primes):
    uglies = [1]
    def gen(prime):
        for ugly in uglies:
            yield ugly * prime
    merged = heapq.merge(*map(gen, primes))
    while len(uglies) < n:
        ugly = next(merged)
        if ugly != uglies[-1]:
            uglies.append(ugly)
    return uglies[-1]",human
787,"import re
def text_match_three(text):
        patterns = 'ab{3}?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
587,"def list_to_tuple(lst):
    return tuple(lst)",lm
409,"def find_minimum_product(lst):
    min_product = float('inf')
    
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]
            min_product = min(min_product, product)
    
    return min_product",lm
428,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list",human
497,"import math
def surfacearea_cone(r,h):
  l = math.sqrt(r * r + h * h)
  SA = math.pi * r * (r + l)
  return SA",human
954,"def calculate_profit(amount):
    """"""
    Calculate the profit amount.

    Args:
        amount (float): Amount to calculate the profit.

    Returns:
        float: The profit amount if the given amount has profit, otherwise None.
    """"""
    if amount > 0:
        profit = amount * 0.1
        return profit
    else:
        return None",lm
507,"def remove_words(list1, removewords):
    for word in list(list1):
        if word in removewords:
            list1.remove(word)
    return list1  ",human
170,"def sum_range(numbers, start_index, end_index):
    """"""
    Calculate the sum of the numbers in a list between the given start and end indices (inclusive).

    Parameters:
    numbers (list): The list of numbers to calculate the sum from.
    start_index (int): The starting index of the range.
    end_index (int): The ending index of the range.

    Returns:
    int: The sum of the numbers between the specified range.

    Example:
    numbers = [1, 2, 3, 4, 5]
    start_index = 1
    end_index = 3
    sum_range(numbers, start_index, end_index) -> 9

    numbers = [10, 20, 30, 40, 50]
    start_index = 2
    end_index = 4
    sum_range(numbers, start_index, end_index) -> 120
    """"""
    return sum(numbers[start_index:end_index+1])",lm
316,"def find_last_occurrence(arr, num):
    """"""
    Given a sorted array, returns the index of the last occurrence of the given number.
    
    Params:
        arr (list): The sorted array of integers.
        num (int): The number to search for.
        
    Returns:
        int: The index of the last occurrence of the number in the array, or -1 if not found.
    """"""
    start = 0
    end = len(arr) - 1
    result = -1
    
    while start <= end:
        mid = start + (end - start) // 2
        
        if arr[mid] == num:
            result = mid
            start = mid + 1
        elif arr[mid] > num:
            end = mid - 1
        else:
            start = mid + 1
            
    return result",lm
702,"def remove_elements(arr, k):
    arr.sort()
    n = len(arr)
    count = 0
    for i in range(1, n):
        if arr[i] - arr[0] > k:
            count += n - i
            break
    return count",lm
411,"import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))",human
521,"def is_scalene_triangle(side1, side2, side3):
    if side1 != side2 and side1 != side3 and side2 != side3:
        return True
    else:
        return False",lm
312,"import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume",human
302,"def set_Bit_Number(n): 
    if (n == 0): 
        return 0; 
    msb = 0; 
    n = int(n / 2); 
    while (n > 0): 
        n = int(n / 2); 
        msb += 1; 
    return (1 << msb)",human
811,"def check_identical_lists(list1, list2):
    if len(list1) != len(list2):
        return False
    
    for i in range(len(list1)):
        if list1[i] != list2[i]:
            return False
    
    return True",lm
751,"def check_min_heap(arr, i):
    if 2 * i + 2 > len(arr):
        return True
    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)
    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] 
                                      and check_min_heap(arr, 2 * i + 2))
    return left_child and right_child",human
426,"def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums",human
164,"def check_sum_of_divisors(n):
    sum_of_divisors = 0

    for i in range(1, n // 2 + 1):
        if n % i == 0:
            sum_of_divisors += i

    if sum_of_divisors == n:
        return True
    else:
        return False",lm
710,"def front_and_rear(test_tup):
  res = (test_tup[0], test_tup[-1])
  return (res) ",human
941,"def count_until_tuple(lst):
    count = 0
    for elem in lst:
        if isinstance(elem, tuple):
            break
        count += 1
    return count",lm
19,"def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ",human
494,"def binary_to_integer(test_tup):
  res = int("""".join(str(ele) for ele in test_tup), 2)
  return (str(res)) ",human
53,"def check_Equality(str):
  if (str[0] == str[-1]):  
    return (""Equal"") 
  else:  
    return (""Not Equal"") ",human
616,"def modulo_tuples(tuple1, tuple2):
    result = ()
    for i in range(len(tuple1)):
        result += (tuple1[i] % tuple2[i],)
    return result",lm
377,"def remove_character(string, character):
    return string.replace(character, '')",lm
413,"def extract_element_from_tuples(lst, n):
    """"""
    Extracts the nth element from a given list of tuples.

    Parameters:
    lst (list): The list of tuples.
    n (int): The index of the element to extract.

    Returns:
    list: A list of the nth elements extracted from each tuple.
    """"""
    return [t[n] for t in lst]",lm
340,"def sum_of_three_lowest(nums):
    # Get the positive numbers from the list
    positive_nums = [num for num in nums if num > 0]
    
    # Sort the positive numbers
    sorted_nums = sorted(positive_nums)
    
    # Take the sum of the three lowest positive numbers
    sum_of_three = sum(sorted_nums[:3])
    
    return sum_of_three",lm
920,"def remove_none_tuples(tuple_list):
    return [t for t in tuple_list if any(v is not None for v in t)]",lm
592,"def binomial_Coeff(n,k): 
    C = [0] * (k + 1); 
    C[0] = 1; # nC0 is 1 
    for i in range(1,n + 1):  
        for j in range(min(i, k),0,-1): 
            C[j] = C[j] + C[j - 1]; 
    return C[k]; 
def sum_Of_product(n): 
    return binomial_Coeff(2 * n,n - 1); ",human
292,"def find_quotient(num1, num2):
    return num1 / num2",lm
425,"def count_sublists(lst, element):
    count = 0
    for sublist in lst:
        if element in sublist:
            count += 1
    return count",lm
160,"def find_x_y(a, b, n):
    """"""
    Calculate values for x and y for the equation ax + by = n.

    Parameters:
    a (int): Coefficient for x
    b (int): Coefficient for y
    n (int): Constant value

    Returns:
    Tuple[int, int]: Values for x and y that satisfy the equation

    """"""
    x = 0
    y = 0

    if b == 0:
        x = n // a
        return x, y

    if a == 0:
        y = n // b
        return x, y

    while n % a != 0:
        x += 1
        n -= b

    y = (n - a * x) // b

    return x, y",lm
444,"def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) ",human
303,"def check_inversion_count(list1, list2):
    inversion_count_1 = 0
    inversion_count_2 = 0
    
    for i in range(len(list1)):
        for j in range(i+1, len(list1)):
            if list1[i] > list1[j]:
                inversion_count_1 += 1
    
    for i in range(len(list2)):
        for j in range(i+1, len(list2)):
            if list2[i] > list2[j]:
                inversion_count_2 += 1
    
    if inversion_count_1 == inversion_count_2:
        return True
    else:
        return False",lm
622,"def find_median_sorted_arrays(arr1, arr2):
    merged = arr1 + arr2
    merged.sort()
    
    if len(merged) % 2 == 0:
        mid = len(merged) // 2
        return (merged[mid - 1] + merged[mid]) / 2
    else:
        mid = len(merged) // 2
        return merged[mid]",lm
257,"def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)",human
417,"def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] ",human
15,"import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))",human
806,"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)",human
880,"def Check_Solution(a,b,c) : 
    if ((b*b) - (4*a*c)) > 0 : 
        return (""2 solutions"") 
    elif ((b*b) - (4*a*c)) == 0 : 
        return (""1 solution"") 
    else : 
        return (""No solutions"") ",human
384,"def find_smallest_frequency(arr):
    if not arr:
        return None
    min_val = min(arr)
    return arr.count(min_val)",lm
161,"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result",human
161,"def remove_elements(list1, list2):
    for element in list2:
        if element in list1:
            list1.remove(element)
    return list1",lm
438,"def count_bidirectional_tuples(lst):
    count = 0
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] == lst[j][::-1]:
                count += 1
    return count",lm
683,"def is_sum_of_two_squares(num):
    limit = int(num ** 0.5) + 1
    for a in range(0, int(limit)):
        for b in range(0, int(limit)):
            if a ** 2 + b ** 2 == num:
                return True
    return False",lm
98,"def multiply_and_divide(numbers):
    multiplied = 1
    for num in numbers:
        multiplied *= num
    return multiplied / len(numbers)",lm
348,"def bin_coff(n, r): 
	val = 1
	if (r > (n - r)): 
		r = (n - r) 
	for i in range(0, r): 
		val *= (n - i) 
		val //= (i + 1) 
	return val 
def find_ways(M): 
	n = M // 2
	a = bin_coff(2 * n, n) 
	b = a // (n + 1) 
	return (b) ",human
420,"def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum",human
145,"def find_max_difference(array):
    max_diff = 0
    for i in range(len(array)):
        for j in range(i+1, len(array)):
            diff = abs(array[i] - array[j])
            if diff > max_diff:
                max_diff = diff
    return max_diff",lm
305,"import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()",human
37,"def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part",human
945,"def convert_to_set(tuples):
    return set(tuples)",lm
61,"from collections import defaultdict
def count_Substrings(s,n):
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count",human
192,"def has_letter_and_number(string):
    has_letter = False
    has_number = False
    
    for char in string:
        if char.isalpha():
            has_letter = True
        elif char.isdigit():
            has_number = True
        
        if has_letter and has_number:
            return True
        
    return False",lm
423,"def solve_gold_mine_problem():
    # implementation code goes here
    pass",lm
442,"def positive_ratio(arr):
    """"""
    Calculate the ratio of positive numbers in an array of integers.
    
    Args:
    - arr: A list of integers
    
    Returns:
    - The ratio of positive numbers in the array as a float, rounded to 2 decimal places
    
    """"""
    positive_count = 0
    for num in arr:
        if num > 0:
            positive_count += 1
    
    if len(arr) == 0:
        return 0.0
    
    return round(positive_count / len(arr), 2)",lm
846,"def find_platform(arr, dep, n): 
    arr.sort() 
    dep.sort() 
    plat_needed = 1
    result = 1
    i = 1
    j = 0
    while (i < n and j < n): 
        if (arr[i] <= dep[j]):           
            plat_needed+= 1
            i+= 1
        elif (arr[i] > dep[j]):           
            plat_needed-= 1
            j+= 1
        if (plat_needed > result):  
            result = plat_needed           
    return result",human
716,"def calculate_rhombus_perimeter(a):
    return 4 * a",lm
323,"def rearrange_array(arr):
    positive = [num for num in arr if num >= 0]
    negative = [num for num in arr if num < 0]
    
    result = []
    min_len = min(len(positive), len(negative))
    
    for i in range(min_len):
        result.append(positive[i])
        result.append(negative[i])
    
    if len(positive) > len(negative):
        result.extend(positive[min_len:])
    elif len(positive) < len(negative):
        result.extend(negative[min_len:])
    
    return result",lm
798,"def find_sum(arr):
    return sum(arr)",lm
944,"import re
def num_position(text):
 for m in re.finditer(""\d+"", text):
    return m.start()",human
154,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result",human
625,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp   
    return newList ",human
658,"def find_max_occurrences(lst):
    counts = {}
    for item in lst:
        if item in counts:
            counts[item] += 1
        else:
            counts[item] = 1

    max_occurrences = 0
    max_item = None
    for item, count in counts.items():
        if count > max_occurrences:
            max_occurrences = count
            max_item = item

    return max_item",lm
451,"import re

def remove_whitespaces(string):
    return re.sub(r'\s', '', string)",lm
523,"def validate_string(string, length):
    has_capital = lambda s: any(char.isupper() for char in s)
    has_lowercase = lambda s: any(char.islower() for char in s)
    has_number = lambda s: any(char.isdigit() for char in s)

    return len(string) == length and has_capital(string) and has_lowercase(string) and has_number(string)",lm
551,"def extract_column(list1, n):
   result = [i.pop(n) for i in list1]
   return result ",human
709,"from collections import defaultdict 
def get_unique(test_list):
  res = defaultdict(list)
  for sub in test_list:
    res[sub[1]].append(sub[0])
  res = dict(res)
  res_dict = dict()
  for key in res:
    res_dict[key] = len(list(set(res[key])))
  return (str(res_dict)) ",human
7,"import re
def find_char_long(text):
  return (re.findall(r""\b\w{4,}\b"", text))",human
596,"import sys 
def tuple_size(tuple_list):
  return (sys.getsizeof(tuple_list)) ",human
354,"def find_nth_term(a, d, n):
    """"""
    Find t-nth term of arithmetic progression.

    Parameters:
    a (int): The first term of the arithmetic progression.
    d (int): The common difference of the arithmetic progression.
    n (int): The term number to find.

    Returns:
    int: The t-nth term of the arithmetic progression.

    Example:
    >>> find_nth_term(2, 5, 4)
    17
    """"""
    return a + (n - 1) * d",lm
478,"import re
def remove_lowercase(str1):
 remove_lower = lambda text: re.sub('[a-z]', '', text)
 result =  remove_lower(str1)
 return result",human
821,"import collections as ct
def merge_dictionaries(dict1,dict2):
    merged_dict = dict(ct.ChainMap({}, dict1, dict2))
    return merged_dict",human
547,"def hamming_distance_sum(n):
    if n <= 0:
        return 0
    
    total_sum = 0
    prev_num = 0
    
    for i in range(1, n+1):
        total_sum += bin(i^prev_num).count('1')
        prev_num = i
    
    return total_sum",lm
124,"import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle",human
259,"def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",human
378,"def shift_last_to_first(lst):
    if lst:
        last_element = lst.pop()
        lst.insert(0, last_element)
    return lst",lm
219,"
def extract_min_max(test_tup, K):
  res = []
  test_tup = list(test_tup)
  temp = sorted(test_tup)
  for idx, val in enumerate(temp):
    if idx < K or idx >= len(temp) - K:
      res.append(val)
  res = tuple(res)
  return (res) ",human
129,"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True",human
882,"def parallelogram_perimeter(b,h):
  perimeter=2*(b*h)
  return perimeter",human
727,"import re 
def remove_char(S):
  result = re.sub('[\W_]+', '', S) 
  return result",human
854,"def convert_to_heap(lst):
    import heapq
    heapq.heapify(lst)
    return lst",lm
207,"def find_longest_repeating_subseq(str): 
	n = len(str) 
	dp = [[0 for k in range(n+1)] for l in range(n+1)] 
	for i in range(1, n+1): 
		for j in range(1, n+1): 
			if (str[i-1] == str[j-1] and i != j): 
				dp[i][j] = 1 + dp[i-1][j-1] 
			else: 
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 
	return dp[n][n]",human
734,"def sum_of_products_subarrays(arr):
    result = 0
    for i in range(len(arr)):
        product = 1
        for j in range(i, len(arr)):
            product *= arr[j]
            result += product
    return result",lm
387,"def is_hex_even_odd(hex_num):
    """"""
    Check whether the hexadecimal number is even or odd.

    Args:
        hex_num (str): The hexadecimal number to check.

    Returns:
        str: ""Even"" if the hex number is even, ""Odd"" if the hex number is odd.
    """"""
    decimal_num = int(hex_num, 16)
    if decimal_num % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",lm
336,"def check_monthnum(monthname1):
  if monthname1 == ""February"":
    return True
  else:
    return False",human
847,"def copy_list_from_singleton_tuple(tuple):
    return list(tuple[0])",lm
933,"import re

def camel_to_snake(string):
    snake_string = re.sub(r'(?<!^)(?=[A-Z])', '_', string).lower()
    return snake_string",lm
887,"def is_odd(n) : 
    if (n^1 == n-1) :
        return True; 
    else :
        return False; ",human
629,"def find_even_numbers(mixed_list):
    '''
    Find even numbers from a mixed list.
    
    Parameters:
        mixed_list (list): A mixed list containing integers and other data types.
        
    Returns:
        list: A list of even numbers extracted from the mixed list.
    '''
    even_numbers = []
    for item in mixed_list:
        if isinstance(item, int) and item % 2 == 0:
            even_numbers.append(item)
    return even_numbers",lm
459,"import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)",human
912,"import math

def lobb_number(n, m):
    return int(math.exp(math.lgamma(n + m + 1) - math.lgamma(m + 1) - math.lgamma(n + 1)))",lm
126,"def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum",human
857,"def list_strings(strings):
    return list(map(list, strings))",lm
275,"def find_last_removed_position(arr):
    return len(arr) - 1",lm
807,"def find_first_odd_number(numbers):
    for number in numbers:
        if number % 2 != 0:
            return number
    return None",lm
263,"def merge_dict(d1,d2):
 d = d1.copy()
 d.update(d2)
 return d",human
382,"def count_rotations(arr):
    """"""
    Finds the number of rotations in a circularly sorted array.

    Parameters:
    arr (list): The circularly sorted array.

    Returns:
    int: The number of rotations in the array.
    """"""
    if not arr:
        return 0
    
    left = 0
    right = len(arr) - 1

    while left < right:
        mid = (left + right) // 2

        if arr[mid] > arr[right]:
            left = mid + 1
        else:
            right = mid

    return left",lm
86,"def find_nth_centered_hexagonal_number(n):
    return 3 * n * (n - 1) + 1",lm
706,"def is_subset(arr1, m, arr2, n): 
	hashset = set() 
	for i in range(0, m): 
		hashset.add(arr1[i]) 
	for i in range(0, n): 
		if arr2[i] in hashset: 
			continue
		else: 
			return False
	return True		",human
167,"def find_smallest_power_of_two(n):
    power = 0
    while 2**power < n:
        power += 1
    return 2**power",lm
201,"def check_elements_same(lst):
    return len(set(lst)) == 1",lm
357,"def find_max(test_list):
  res = max(int(j) for i in test_list for j in i)
  return (res) ",human
242,"def count_characters(string):
    return len(string)",lm
545,"def toggle_bits(num):
    return num ^ 0x01 | num ^ (1 << (num.bit_length() - 1))",lm
740,"def tuple_to_dict(t):
    return {t[i]: t[i + 1] for i in range(0, len(t), 2)}",lm
681,"def smallest_prime_divisor(number):
    if number < 2:
        return None
    for i in range(2, number):
        if number % i == 0:
            return i
    return number",lm
327,"def check_isosceles(x,y,z):
  if x==y or y==z or z==x:
	   return True
  else:
     return False",human
13,"def count_most_common_words(dictionary):
    word_counts = {}
    
    for word in dictionary:
        if word in word_counts:
            word_counts[word] += 1
        else:
            word_counts[word] = 1
    
    most_common_words = []
    max_count = 0
    
    for word, count in word_counts.items():
        if count > max_count:
            most_common_words = [word]
            max_count = count
        elif count == max_count:
            most_common_words.append(word)
    
    return most_common_words",lm
438,"def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return (str(res)) ",human
131,"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string",human
617,"def jump_to_point(d, length):
    x = d // length
    if d % length == 0:
        return x
    else:
        return x + 1",lm
724,"def power_base_sum(base, power):
    return sum([int(i) for i in str(pow(base, power))])",human
895,"def max_sum_subsequence(arr):
    if not arr:
        return 0
    n = len(arr)
    if n == 1:
        return arr[0]
    dp = [0] * n
    dp[0] = arr[0]
    dp[1] = max(arr[0], arr[1])
    for i in range(2, n):
        dp[i] = max(dp[i-1], dp[i-2]+arr[i])
    return dp[n-1]",lm
172,"def count_occurance(s):
  count=0
  for i in range(len(s)):
    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):
      count = count + 1
  return count",human
99,"def decimal_to_binary(decimal_num):
    binary_num = bin(decimal_num)[2:]
    return binary_num",lm
111,"def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result",human
256,"def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr",human
777,"def find_Sum(arr,n): 
    arr.sort() 
    sum = arr[0] 
    for i in range(0,n-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum",human
960,"def tiling_problem():
    # Implement the code to solve the tiling problem here
    pass",lm
525,"def parallel_lines(line1, line2):
  return line1[0]/line1[1] == line2[0]/line2[1]",human
820,"def check_monthnum_number(monthnum1):
  if monthnum1 == 2:
    return True
  else:
    return False",human
462,"def find_combinations(lst):
    combinations = []
    
    def backtrack(combo, start):
        combinations.append(combo[:])
        
        for i in range(start, len(lst)):
            combo.append(lst[i])
            backtrack(combo, i + 1)
            combo.pop()
    
    backtrack([], 0)
    return combinations",lm
165,"def count_chars_same_position(string):
    count = 0
    for i, char in enumerate(string):
        if char.lower() == chr(97+i) or char.upper() == chr(97+i):
            count += 1
    return count",lm
273,"def subtract_tuples(tuple1, tuple2):
    """"""
    Subtract the contents of one tuple with corresponding index of other tuple.

    Args:
        tuple1 (tuple): The first tuple.
        tuple2 (tuple): The second tuple.

    Returns:
        tuple: A new tuple with the resulting subtractions.

    Examples:
        >>> subtract_tuples((1, 2, 3), (4, 5, 6))
        (-3, -3, -3)
        >>> subtract_tuples((7, 8, 9), (4, 5, 3))
        (3, 3, 6)
    """"""
    return tuple(t1 - t2 for t1, t2 in zip(tuple1, tuple2))",lm
285,"import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
864,"def find_palindromes(strings):
    return list(filter(lambda s: s == s[::-1], strings))",lm
266,"def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA",human
399,"def bitwise_xor_tuple(tuples):
    return tuple(map(lambda x: reduce(lambda a,b: a ^ b, x), zip(*tuples)))",lm
465,"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1",human
928,"def convert_date(date):
    date_parts = date.split(""-"")
    return f""{date_parts[2]}-{date_parts[1]}-{date_parts[0]}""",lm
638,"def calculate_wind_chill_index(temperature, wind_speed):
    """"""
    Calculate the wind chill index.
    
    Args:
        temperature (float): The temperature in degrees Celsius.
        wind_speed (float): The wind speed in kilometers per hour.
        
    Returns:
        float: The wind chill index.
    """"""
    return 13.12 + 0.6215 * temperature - 11.37 * wind_speed**0.16 + 0.3965 * temperature * wind_speed**0.16",lm
728,"def sum_lists(list1, list2):
    """"""
    Sums the elements in two lists and returns the total.

    Args:
        list1 (list): The first list of numbers.
        list2 (list): The second list of numbers.

    Returns:
        int: The sum of the elements in the two lists.
    """"""
    return sum(list1) + sum(list2)",lm
675,"def sum_nums(x, y,m,n):
    sum_nums= x + y
    if sum_nums in range(m, n):
        return 20
    else:
        return sum_nums",human
845,"import math

def count_digits_in_factorial(num):
    factorial = math.factorial(num)
    return len(str(factorial))",lm
37,"def sort_mixed_list(lst):
    return sorted(lst, key=lambda x: (isinstance(x, str), x))",lm
460,"def Extract(lst): 
    return [item[0] for item in lst] ",human
435,"def last_Digit(n) :
    return (n % 10) ",human
892,"def remove_multiple_spaces(string):
    return ' '.join(string.split())",lm
343,"def count_digits_and_letters(string):
    digits = 0
    letters = 0

    for char in string:
        if char.isdigit():
            digits += 1
        elif char.isalpha():
            letters += 1

    return digits, letters",lm
188,"def prod_Square(n):
    for i in range(2,(n) + 1):
        if (i*i < (n+1)):
            for j in range(2,n + 1):
                if ((i*i*j*j) == n):
                    return True;
    return False;",human
810,"from collections import Counter
def count_variable(a,b,c,d):
  c = Counter(p=a, q=b, r=c, s=d)
  return list(c.elements())",human
66,"def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ",human
663,"def find_largest_k(x, y):
    k = x - 1
    while k % x != y:
        k -= 1
    return k",lm
691,"def group_tuple_elements(tuple_list):
    result = {}
    for tpl in tuple_list:
        if tpl[1] in result:
            result[tpl[1]].append(tpl[0])
        else:
            result[tpl[1]] = [tpl[0]]
    return result",lm
459,"import re

def remove_uppercase_substrings(string):
    return re.sub(r'[A-Z]+', '', string)",lm
455,"def is_31_days(month):
    """"""
    Check whether the given month number contains 31 days or not.

    Parameters:
    month (int): The month number.

    Returns:
    bool: True if the month contains 31 days, False otherwise.
    """"""
    if month in [1, 3, 5, 7, 8, 10, 12]:
        return True
    else:
        return False",lm
157,"def run_length_encode(lst):
    encoded_lst = []
    count = 1
    for i in range(1, len(lst)):
        if lst[i] == lst[i-1]:
            count += 1
        else:
            encoded_lst.append((lst[i-1], count))
            count = 1
    encoded_lst.append((lst[-1], count))
    return encoded_lst",lm
544,"def flatten_tuple(test_list):
  res = ' '.join([idx for tup in test_list for idx in tup])
  return (res) ",human
236,"def count_max_triangles(side_length):
    if side_length <= 0:
        return 0
    return (side_length * (side_length - 1) * (side_length - 2)) // 6",lm
781,"import math 
def count_Divisors(n) : 
    count = 0
    for i in range(1, (int)(math.sqrt(n)) + 2) : 
        if (n % i == 0) : 
            if( n // i == i) : 
                count = count + 1
            else : 
                count = count + 2
    if (count % 2 == 0) : 
        return (""Even"") 
    else : 
        return (""Odd"") ",human
763,"def find_Min_Diff(arr,n): 
    arr = sorted(arr) 
    diff = 10**20 
    for i in range(n-1): 
        if arr[i+1] - arr[i] < diff: 
            diff = arr[i+1] - arr[i]  
    return diff ",human
106,"def add_list_to_tuples(lst, tuples):
    return [(t + [lst]) for t in tuples]",lm
950,"def chinese_zodiac(year):
    zodiac_signs = [""Rat"", ""Ox"", ""Tiger"", ""Rabbit"", ""Dragon"", ""Snake"", 
                    ""Horse"", ""Goat"", ""Monkey"", ""Rooster"", ""Dog"", ""Pig""]
    return zodiac_signs[(year - 1900) % 12]",lm
306,"def max_sum_subsequence(nums, k):
    dp = [0] * len(nums)
    
    for i in range(len(nums)):
        max_sum = 0
        for j in range(i):
            if nums[j] < nums[i] and dp[j] > max_sum:
                max_sum = dp[j]
        dp[i] = max_sum + nums[i]
        
    return max(dp) + k",lm
237,"def check_occurrences(tuples):
    occurrences = {}
    for record in tuples:
        if record in occurrences:
            occurrences[record] += 1
        else:
            occurrences[record] = 1
    
    result = []
    for record, count in occurrences.items():
        if count > 1:
            result.append((record, count))
    
    return result",lm
460,"def get_first_elements(sublists):
    first_elements = []
    for sublist in sublists:
        if len(sublist) > 0:
            first_elements.append(sublist[0])
    return first_elements",lm
432,"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median",human
282,"def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)",human
914,"def is_Two_Alter(s):  
    for i in range (len( s) - 2) : 
        if (s[i] != s[i + 2]) : 
            return False
    if (s[0] == s[1]): 
        return False
    return True",human
731,"def lateral_surface_area_of_cone(radius, slant_height):
    return 3.14 * radius * slant_height",lm
300,"def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res ",human
166,"def count_even_xor_pairs(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if (arr[i] ^ arr[j]) % 2 == 0:
                count += 1
    return count",lm
553,"def convert_to_float(t: tuple) -> float:
    return float(t)",lm
47,"def compute_Last_Digit(A,B): 
    variable = 1
    if (A == B): 
        return 1
    elif ((B - A) >= 5):  
        return 0
    else:   
        for i in range(A + 1,B + 1): 
            variable = (variable * (i % 10)) % 10
        return variable % 10",human
41,"def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums",human
108,"import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)",human
267,"def sum_of_squares_of_odd_numbers(n):
    total = 0
    for i in range(1, 2*n, 2):
        total += i*i
    return total",lm
269,"def ascii_value(k):
  ch=k
  return ord(ch)",human
366,"def adjacent_num_product(list_nums):
    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",human
595,"def count_min_swaps(bin_str1, bin_str2):
    count = 0
    for i in range(len(bin_str1)):
        if bin_str1[i] != bin_str2[i]:
            count += 1
    return count",lm
673,"def convert(list): 
    s = [str(i) for i in list] 
    res = int("""".join(s))  
    return (res) ",human
493,"def calculate_hexagon_grid(size):
    grid = []
    for row in range(size):
        hexagon_row = []
        for col in range(size):
            x = col * 2
            y = row * 2 if col % 2 == 0 else row * 2 + 1
            hexagon = ((x, y+1), (x+1, y), (x+2, y+1), (x+2, y+2), (x+1, y+3), (x, y+2))
            hexagon_row.append(hexagon)
        grid.append(hexagon_row)
    return grid",lm
796,"def sum_of_dictionary_values(dictionary):
    return sum(dictionary.values())",lm
549,"def sum_odd_fifth_powers(n):
    return sum([(2*i-1)**5 for i in range(1,n+1)])",lm
303,"import sys 
def solve(a,n):   
    mx = -sys.maxsize - 1
    for j in range(1,n):  
        if (mx > a[j]):  
            return False  
        mx = max(mx,a[j - 1])    
    return True",human
858,"def count_and_square(lists):
    """"""
    Write a function to count number of lists in a given list of lists and square the count.
    
    Args:
    - lists: A list of lists
    
    Returns:
    - count_squared: The square of the count of lists in the given list of lists
    """"""
    count = 0
    for item in lists:
        if isinstance(item, list):
            count += 1
    count_squared = count**2
    return count_squared",lm
94,"from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ",human
375,"def round_num(n,m):
    a = (n //m) * m
    b = a + m
    return (b if n - a > b - n else a)",human
412,"def remove_odd_numbers(lst):
    return [x for x in lst if x % 2 == 0]",lm
631,"import re
text = 'Python Exercises'
def replace_spaces(text):
  text =text.replace ("" "", ""_"")
  return (text)
  text =text.replace (""_"", "" "")
  return (text)",human
440,"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))",human
501,"def find_common_divisor(num1, num2):
    """"""
    Find the common divisor between two numbers in a given pair.

    Parameters:
    num1 (int): First number in the pair.
    num2 (int): Second number in the pair.

    Returns:
    int: The common divisor between the two given numbers.
    """"""
    common_divisors = []
    for i in range(1, min(num1, num2) + 1):
        if num1 % i == 0 and num2 % i == 0:
            common_divisors.append(i)
    return common_divisors[-1]",lm
969,"Here is the generated code for the given function:


def join_tuples(tuples):
    result = {}
    for t in tuples:
        key = t[0]
        if key in result:
            result[key] += t[1:]
        else:
            result[key] = t[1:]
    return [(k,) + v for k, v in result.items()]


Note: The generated code assumes that the input parameter `tuples` is a list of tuples. The code creates a dictionary `result` to store the combined tuples with similar initial elements. It iterates through each tuple in `tuples` and checks if the initial element already exists as a key in the dictionary. If it does, the rest of the tuple is added to the existing value of that key. If the initial element is not a key in the dictionary, a new key-value pair is created. Finally, the code converts the dictionary back to a list of tuples and returns it.",lm
618,"def div_list(nums1,nums2):
  result = map(lambda x, y: x / y, nums1, nums2)
  return list(result)",human
603,"def get_ludic(n):
	ludics = []
	for i in range(1, n + 1):
		ludics.append(i)
	index = 1
	while(index != len(ludics)):
		first_ludic = ludics[index]
		remove_index = index + first_ludic
		while(remove_index < len(ludics)):
			ludics.remove(ludics[remove_index])
			remove_index = remove_index + first_ludic - 1
		index += 1
	return ludics",human
28,"def binomial_Coeff(n,k): 
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1 
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",human
923,"def shortest_common_string_length(str1, str2):
    m = len(str1)
    n = len(str2)

    dp = [[0] * (n + 1) for _ in range(m + 1)]

    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0 or j == 0:
                dp[i][j] = 0
            elif str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    lcs_length = dp[m][n]
    shortest_length = m + n - lcs_length

    return shortest_length",lm
207,"def count_longest_repeating_subsequences(s):
    count = [[0 for _ in range(len(s)+1)] for _ in range(len(s)+1)]
    
    for i in range(1, len(s)+1):
        for j in range(i+1, len(s)+1):
            if s[i-1] == s[j-1]:
                count[i][j] = count[i-1][j-1] + 1
            else:
                count[i][j] = max(count[i-1][j], count[i][j-1])
    
    return count[len(s)][len(s)]",lm
68,"def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",human
678,"def remove_spaces(str1):
  str1 = str1.replace(' ','')
  return str1",human
724,"def sum_of_digits(base, power):
    # Calculate the result
    result = base ** power

    # Convert the result to a string
    result_string = str(result)

    # Initialize the sum variable
    digit_sum = 0

    # Iterate over each character in the string
    for digit in result_string:
        # Convert the character back to an integer
        digit_int = int(digit)
        # Add the integer to the sum
        digit_sum += digit_int

    # Return the sum of the digits
    return digit_sum",lm
60,"def max_subsequence_length(arr):
    if not arr:
        return 0
    dp = [1] * len(arr)
    for i in range(1, len(arr)):
        for j in range(i):
            if abs(arr[i] - arr[j]) == 1:
                dp[i] = max(dp[i], dp[j] + 1)
    return max(dp)",lm
266,"def cube_lateral_surface_area(side_length):
    return 4 * (side_length ** 2)",lm
90,"def find_longest_word_length(string):
    words = string.split()
    longest_length = 0

    for word in words:
        if len(word) > longest_length:
            longest_length = len(word)

    return longest_length",lm
415,"def find_max_product_pair(arr):
    max1 = max(arr[0], arr[1])
    max2 = min(arr[0], arr[1])
    
    for i in range(2, len(arr)):
        if arr[i] > max1:
            max2 = max1
            max1 = arr[i]
        elif arr[i] > max2:
            max2 = arr[i]
    
    return max1 * max2",lm
483,"def find_factorial_number(x):
    """"""
    Find the first natural number whose factorial is divisible by x.

    Parameters:
    x (int): The divisor.

    Returns:
    int: The first natural number whose factorial is divisible by x.
    """"""

    # Initialize variables
    num = 1
    factorial = 1

    # Loop until the factorial is divisible by x
    while factorial % x != 0:
        num += 1
        factorial *= num

    return num",lm
344,"def count_odd_factors(start, end):
    count = 0
    for num in range(start, end+1):
        factors = 0
        for i in range(1, num+1):
            if num % i == 0:
                factors += 1
        if factors % 2 != 0:
            count += 1
    return count",lm
384,"def frequency_Of_Smallest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] < mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ",human
317,"def modified_run_length_encoding(lst):
    output = []
    count = 1
    for i in range(1, len(lst)):
        if lst[i] == lst[i-1]:
            count += 1
        else:
            output.append((lst[i-1], count))
            count = 1
    output.append((lst[-1], count))
    return output",lm
68,"def is_monotonic(arr):
    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or all(arr[i] >= arr[i+1] for i in range(len(arr)-1))",lm
35,"def find_rectangular_number(n):
    return n * (n + 1) / 2",lm
652,"def flatten_matrix(matrix):
    """"""
    Flattens the given tuple matrix into the tuple list with each tuple representing each column.

    Args:
        matrix (tuple(tuple)): The tuple matrix to be flattened.

    Returns:
        list(tuple): The flattened tuple matrix.
    """"""
    flattened_matrix = []
    num_rows = len(matrix)
    num_columns = len(matrix[0])

    for column in range(num_columns):
        column_values = []
        for row in range(num_rows):
            column_values.append(matrix[row][column])
        flattened_matrix.append(tuple(column_values))

    return flattened_matrix",lm
211,"def count_Num(n): 
    if (n == 1): 
        return 1
    count = pow(2,n - 2) 
    return count ",human
705,"def sort_sublists(list1):
      list1.sort()  
      list1.sort(key=len)
      return  list1",human
970,"def min_of_two( x, y ):
    if x < y:
        return x
    return y",human
391,"def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result",human
162,"def calculate_sum(n):
    total_sum = 0
    while n >= 0:
        total_sum += n
        n -= 2
    return total_sum",lm
924,"def max_of_two( x, y ):
    if x > y:
        return x
    return y",human
936,"def rearrange_tuples(tuples, order):
    return sorted(tuples, key=lambda x: order.index(x[0]))",lm
296,"def get_Inv_Count(arr,n): 
    inv_count = 0
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ",human
834,"def generate_spiral_matrix(n):
    matrix = [[0] * n for _ in range(n)]
    num = 1
    row_start = 0
    row_end = n - 1
    col_start = 0
    col_end = n - 1
    
    while num <= n*n:
        for i in range(col_start, col_end+1):
            matrix[row_start][i] = num
            num += 1
        row_start += 1
        
        for i in range(row_start, row_end+1):
            matrix[i][col_end] = num
            num += 1
        col_end -= 1
        
        for i in range(col_end, col_start-1, -1):
            matrix[row_end][i] = num
            num += 1
        row_end -= 1
        
        for i in range(row_end, row_start-1, -1):
            matrix[i][col_start] = num
            num += 1
        col_start += 1
    
    return matrix",lm
844,"def find_kth_element(arr, k):
    """"""
    Find the kth element in an array containing odd elements first and then even elements.

    Parameters:
    arr (list): The input list containing odd and even elements.
    k (int): The kth element to find.

    Returns:
    int: The kth element in the array.

    """"""
    odd_elements = [x for x in arr if x % 2 != 0]
    even_elements = [x for x in arr if x % 2 == 0]
    merged_list = odd_elements + even_elements
    kth_element = merged_list[k - 1] if k <= len(merged_list) else -1
    return kth_element",lm
745,"def find_divisible_numbers(start, end):
    divisible_numbers = []
    for num in range(start, end+1):
        digits = [int(d) for d in str(num)]
        if all(num % d == 0 for d in digits):
            divisible_numbers.append(num)
    return divisible_numbers",lm
99,"def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ",human
744,"def check_none_value(tuple_value):
    if None in tuple_value:
        return True
    else:
        return False",lm
593,"def remove_leading_zeroes(ip_address):
    """"""
    Removes leading zeroes from an IP address.

    Parameters:
    ip_address (str): The IP address to remove leading zeroes from.

    Returns:
    str: The IP address with leading zeroes removed.
    """"""
    split_address = ip_address.split('.')
    cleaned_address = [str(int(num)) for num in split_address]
    return '.'.join(cleaned_address)",lm
436,"def print_negative_numbers(nums):
    for num in nums:
        if num < 0:
            print(num)",lm
3,"def is_prime(n):
    if n < 2:
        return False

    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False

    return True",lm
718,"def alternate_elements(list1):
    result=[]
    for item in list1[::2]:
        result.append(item)
    return result ",human
334,"def is_triangle_valid(side_a, side_b, side_c):
    if side_a <= 0 or side_b <= 0 or side_c <= 0:
        return False
    
    if side_a + side_b <= side_c or side_a + side_c <= side_b or side_b + side_c <= side_a:
        return False
    
    return True",lm
370,"def sort_tuple_by_float(t):
    return sorted(t, key=lambda x: float(x))",lm
898,"from itertools import groupby 
def extract_elements(numbers, n):
    result = [i for i, j in groupby(numbers) if len(list(j)) == n] 
    return result",human
329,"def count_negative_numbers(lst):
    count = 0
    for num in lst:
        if num < 0:
            count += 1
    return count",lm
850,"def is_triangle_possible(angle1: float, angle2: float, angle3: float) -> bool:
    """"""
    Check if a triangle of positive area is possible with the given angles.
    
    Args:
        angle1 (float): The first angle of the triangle in degrees.
        angle2 (float): The second angle of the triangle in degrees.
        angle3 (float): The third angle of the triangle in degrees.
    
    Returns:
        bool: True if a triangle is possible, False otherwise.
    """"""
    
    if angle1 <= 0 or angle2 <= 0 or angle3 <= 0:
        return False
    
    if angle1 + angle2 + angle3 != 180:
        return False
    
    return True",lm
891,"def same_Length(A,B): 
    while (A > 0 and B > 0): 
        A = A / 10; 
        B = B / 10; 
    if (A == 0 and B == 0): 
        return True; 
    return False; ",human
531,"import sys 
def min_coins(coins, m, V): 
    if (V == 0): 
        return 0
    res = sys.maxsize 
    for i in range(0, m): 
        if (coins[i] <= V): 
            sub_res = min_coins(coins, m, V-coins[i]) 
            if (sub_res != sys.maxsize and sub_res + 1 < res): 
                res = sub_res + 1  
    return res ",human
400,"def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)",human
575,"def count_no (A,N,L,R): 
    count = 0
    for i in range (L,R + 1): 
        if (i % A != 0): 
            count += 1
        if (count == N): 
            break
    return (i) ",human
463,"def find_max_product_subarray(arr):
    if not arr:
        return None
    
    max_product = arr[0]
    current_max = arr[0]
    current_min = arr[0]
    
    for i in range(1, len(arr)):
        if arr[i] < 0:
            current_max, current_min = current_min, current_max
        
        current_max = max(arr[i], current_max * arr[i])
        current_min = min(arr[i], current_min * arr[i])
        
        max_product = max(max_product, current_max)
    
    return max_product",lm
31,"def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result",human
661,"def max_sum_no_consecutive(nums):
    n = len(nums)

    if n == 0:
        return 0

    if n == 1:
        return nums[0]

    if n == 2:
        return max(nums[0], nums[1])

    dp = [0] * n
    dp[0] = nums[0]
    dp[1] = max(nums[0], nums[1])
    dp[2] = max(nums[0] + nums[2], nums[1])

    for i in range(3, n):
        dp[i] = max(dp[i-1], dp[i-2] + nums[i], dp[i-3] + nums[i])

    return max(dp[-1], dp[-2])",lm
249,"def find_intersection(array1, array2):
    return list(filter(lambda x: x in array1, array2))",lm
457,"def Find_Min(lst): 
    minList = min((x) for x in lst) 
    return minList",human
797,"def sum_Odd(n): 
    terms = (n + 1)//2
    sum1 = terms * terms 
    return sum1  
def sum_in_Range(l,r): 
    return sum_Odd(r) - sum_Odd(l - 1)",human
471,"def remainder_of_array_multiplication(arr, n):
    result = 1
    for num in arr:
        result = (result * num) % n
    return result",lm
330,"import re
def find_char(text):
  return (re.findall(r""\b\w{3,5}\b"", text))",human
862,"from collections import Counter
import re
def n_common_words(text,n):
  words = re.findall('\w+',text)
  n_common_words= Counter(words).most_common(n)
  return list(n_common_words)",human
277,"def filter_dict_by_value(dictionary, value):
    filtered_dict = {}
    for key, val in dictionary.items():
        if val == value:
            filtered_dict[key] = val
    return filtered_dict",lm
94,"def extract_min_index(tuples):
    min_index = 0
    min_val = float('inf')

    for i, value in enumerate(tuples):
        if value < min_val:
            min_index = i
            min_val = value

    return min_index",lm
871,"def are_Rotations(string1,string2): 
    size1 = len(string1) 
    size2 = len(string2) 
    temp = '' 
    if size1 != size2: 
        return False
    temp = string1 + string1 
    if (temp.count(string2)> 0): 
        return True
    else: 
        return False",human
467,"def decimal_to_octal(decimal_number):
    octal_number = ''
    while decimal_number > 0:
        remainder = decimal_number % 8
        octal_number = str(remainder) + octal_number
        decimal_number = decimal_number // 8
    return int(octal_number)",lm
849,"def sum_of_prime_divisors(num):
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    def get_prime_divisors(n):
        prime_divisors = []
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0 and is_prime(i):
                prime_divisors.append(i)
        return prime_divisors

    prime_divisors = get_prime_divisors(num)
    sum_of_divisors = sum(prime_divisors)
    return sum_of_divisors",lm
894,"def float_to_tuple(test_str):
  res = tuple(map(float, test_str.split(', ')))
  return (res) ",human
279,"def is_num_decagonal(n): 
	return 4 * n * n - 3 * n ",human
255,"from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))",human
916,"def find_triplet_array(A, arr_size, sum): 
	for i in range( 0, arr_size-2): 
		for j in range(i + 1, arr_size-1): 
			for k in range(j + 1, arr_size): 
				if A[i] + A[j] + A[k] == sum: 
					return  A[i],A[j],A[k] 
					return True
	return False",human
194,"def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; ",human
900,"def starts_with_number(string):
    if string[0].isdigit():
        return True
    else:
        return False",lm
273,"def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) ",human
466,"def find_peak_util(arr, low, high, n): 
	mid = low + (high - low)/2
	mid = int(mid) 
	if ((mid == 0 or arr[mid - 1] <= arr[mid]) and
		(mid == n - 1 or arr[mid + 1] <= arr[mid])): 
		return mid 
	elif (mid > 0 and arr[mid - 1] > arr[mid]): 
		return find_peak_util(arr, low, (mid - 1), n) 
	else: 
		return find_peak_util(arr, (mid + 1), high, n) 
def find_peak(arr, n): 
	return find_peak_util(arr, 0, n - 1, n) ",human
469,"def max_profit(price, k):
    n = len(price)
    final_profit = [[None for x in range(n)] for y in range(k + 1)]
    for i in range(k + 1):
        for j in range(n):
            if i == 0 or j == 0:
                final_profit[i][j] = 0
            else:
                max_so_far = 0
                for x in range(j):
                    curr_price = price[j] - price[x] + final_profit[i-1][x]
                    if max_so_far < curr_price:
                        max_so_far = curr_price
                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)
    return final_profit[k][n-1]",human
338,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n):
        for j in range(1,n-i+1): 
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ",human
870,"def calculate_sum_of_positive_numbers(numbers):
    positive_numbers = filter(lambda x: x > 0, numbers)
    sum_of_positive_numbers = sum(positive_numbers)
    return sum_of_positive_numbers",lm
73,"import re
def multiple_split(text):
  return (re.split('; |, |\*|\n',text))",human
178,"def search_strings(main_string, *search_strings):
    """"""
    Searches for literal strings in a given string.

    Parameters:
    main_string (str): The main string to be searched.
    *search_strings (str): Variable number of literal strings to search for.

    Returns:
    list: A list of boolean values indicating if each search string is present in the main string.
    """"""
    results = []
    for string in search_strings:
        results.append(string in main_string)
    return results",lm
763,"def min_difference(arr):
    arr.sort()
    min_diff = float('inf')
    for i in range(len(arr)-1):
        diff = arr[i+1] - arr[i]
        if diff < min_diff:
            min_diff = diff
    return min_diff",lm
371,"python
def find_smallest_missing_element(arr):
    n = len(arr)
    for i in range(n):
        if arr[i] != i+1:
            return i+1
    return n+1",lm
301,"def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0",human
748,"import re

def put_spaces(string):
    return re.sub(r'(?<!^)(?=[A-Z])', ' ', string)",lm
473,"def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)",human
166,"def find_even_Pair(A,N): 
    evenPair = 0
    for i in range(0,N): 
        for j in range(i+1,N): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; ",human
35,"def find_rect_num(n):
  return n*(n + 1) ",human
313,"def pos_nos(list1):
  for num in list1: 
    if num >= 0: 
       return num ",human
189,"def first_Missing_Positive(arr,n): 
    ptr = 0
    for i in range(n):
        if arr[i] == 1:
            ptr = 1
            break
    if ptr == 0:
        return(1)
    for i in range(n):
        if arr[i] <= 0 or arr[i] > n:
            arr[i] = 1
    for i in range(n):
        arr[(arr[i] - 1) % n] += n
    for i in range(n):
        if arr[i] <= n:
            return(i + 1)
    return(n + 1)",human
447,"def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums",human
404,"def find_minimum(num1, num2):
    """"""
    Find the minimum of two numbers.

    Parameters:
    num1 (int): The first number.
    num2 (int): The second number.

    Returns:
    int: The minimum of the two numbers.
    """"""
    return min(num1, num2)",lm
71,"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums",human
833,"def get_keys(dictionary):
    return list(dictionary.keys())",lm
596,"def find_tuple_size(tuple_var):
    return len(tuple_var)",lm
173,"import re
def remove_splchar(text): 
 pattern = re.compile('[\W_]+')
 return (pattern.sub('', text))",human
70,"def find_equal_tuple(Input, k):
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input, k):
  if find_equal_tuple(Input, k) == 1:
    return (""All tuples have same length"")
  else:
    return (""All tuples do not have same length"")",human
792,"def count_list(input_list): 
    return len(input_list)",human
913,"import re
def end_num(string):
    text = re.compile(r"".*[0-9]$"")
    if text.match(string):
        return True
    else:
        return False",human
793,"def find_last_position(arr, target):
    left, right = 0, len(arr) - 1
    result = -1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            result = mid
            left = mid + 1
        elif arr[mid] > target:
            right = mid - 1
        else:
            left = mid + 1
    
    return result",lm
966,"def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]
   tuple1 = [t for t in tuple1 if t]
   return tuple1",human
899,"def check(arr,n): 
    g = 0 
    for i in range(1,n): 
        if (arr[i] - arr[i - 1] > 0 and g == 1): 
            return False
        if (arr[i] - arr[i] < 0): 
            g = 1
    return True",human
95,"def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ",human
775,"def check_odd_indexes(lst):
    """"""
    This function takes a list as input and checks whether every odd index contains an odd number.

    Parameters:
    lst (list): A list of numbers

    Returns:
    bool: True if every odd index contains an odd number, False otherwise
    """"""
    for i in range(1, len(lst), 2):
        if lst[i] % 2 != 1:
            return False
    return True",lm
225,"def find_minimum(arr):
    left = 0
    right = len(arr) - 1

    while left < right:
        mid = left + (right - left) // 2

        if arr[mid] < arr[right]:
            right = mid
        else:
            left = mid + 1

    return arr[left]",lm
579,"def find_dissimilar(test_tup1, test_tup2):
  res = tuple(set(test_tup1) ^ set(test_tup2))
  return (res) ",human
298,"def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result",human
135,"def hexagonal_num(n): 
	return n*(2*n - 1) ",human
917,"import re

def find_sequences(s):
    pattern = ""[A-Z][a-z]+""
    sequences = re.findall(pattern, s)
    return sequences",lm
406,"def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return (""Odd Parity""); 
    return (""Even Parity""); ",human
344,"def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) ",human
532,"def is_permutation(str1, str2):
    return sorted(str1) == sorted(str2)",lm
180,"from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):
 dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
 return dist",human
627,"def find_First_Missing(array,start,end): 
    if (start > end): 
        return end + 1
    if (start != array[start]): 
        return start; 
    mid = int((start + end) / 2) 
    if (array[mid] == mid): 
        return find_First_Missing(array,mid+1,end) 
    return find_First_Missing(array,start,mid) ",human
619,"def move_num(test_str):
  res = ''
  dig = ''
  for ele in test_str:
    if ele.isdigit():
      dig += ele
    else:
      res += ele
  res += dig
  return (res) ",human
821,"def merge_dicts(dict1, dict2):
    return {**dict1, **dict2}",lm
226,"def remove_odd_characters(string):
    return string[::2]",lm
889,"def reverse_lists(lst):
    return [list(reversed(sublist)) for sublist in lst]",lm
48,"def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)",human
712,"import itertools
def remove_duplicate(list1):
 list.sort(list1)
 remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))
 return remove_duplicate",human
149,"def longest_subseq_with_diff_one(arr, n): 
	dp = [1 for i in range(n)] 
	for i in range(n): 
		for j in range(i): 
			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): 
				dp[i] = max(dp[i], dp[j]+1) 
	result = 1
	for i in range(n): 
		if (result < dp[i]): 
			result = dp[i] 
	return result",human
747,"def find_lcs(str1, str2, str3):

    m = len(str1)
    n = len(str2)
    o = len(str3)

    dp = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]

    for i in range(m+1):
        for j in range(n+1):
            for k in range(o+1):
                if i == 0 or j == 0 or k == 0:
                    dp[i][j][k] = 0
                elif str1[i-1] == str2[j-1] == str3[k-1]:
                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1
                else:
                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])
    
    lcs_length = dp[m][n][o]
    lcs = [""""] * lcs_length

    i = m
    j = n
    k = o

    while i > 0 and j > 0 and k > 0:
        if str1[i-1] == str2[j-1] == str3[k-1]:
            lcs[lcs_length-1] = str1[i-1]
            i -= 1
            j -= 1
            k -= 1
            lcs_length -= 1
        elif dp[i-1][j][k] > dp[i][j-1][k] and dp[i-1][j][k] > dp[i][j][k-1]:
            i -= 1
        elif dp[i][j-1][k] > dp[i][j][k-1]:
            j -= 1
        else:
            k -= 1

    return """".join(lcs)",lm
165,"def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars ",human
712,"def remove_duplicates(list_of_lists):
    result = []
    for sublist in list_of_lists:
        if sublist not in result:
            result.append(sublist)
    return result",lm
914,"def is_alternating_string(string: str) -> bool:
    if len(string) < 2:
        return False

    char1 = string[0]
    char2 = string[1]

    for i in range(2, len(string)):
        if string[i] != char1 and string[i] != char2:
            return False
        if string[i] == string[i - 1]:
            return False

    return True",lm
692,"def last_Two_Digits(N): 
    if (N >= 10): 
        return
    fac = 1
    for i in range(1,N + 1): 
        fac = (fac * i) % 100
    return (fac) ",human
896,"Here is the generated code for the given function documentation string:


def sort_list_by_last_element(tuples):
    return sorted(tuples, key=lambda x: x[-1])",lm
71,"def comb_sort(arr):
    gap = len(arr)
    shrink = 1.3
    sorted_list = False

    while not sorted_list:
        gap = int(gap/shrink)
        if gap <= 1:
            gap = 1
            sorted_list = True
        
        sorted_list = True
        i = 0
        while i + gap < len(arr):
            if arr[i] > arr[i+gap]:
                arr[i], arr[i+gap] = arr[i+gap], arr[i]
                sorted_list = False
            i += 1
    
    return arr",lm
159,"def month_season(month,days):
 if month in ('January', 'February', 'March'):
	 season = 'winter'
 elif month in ('April', 'May', 'June'):
	 season = 'spring'
 elif month in ('July', 'August', 'September'):
	 season = 'summer'
 else:
	 season = 'autumn'
 if (month == 'March') and (days > 19):
	 season = 'spring'
 elif (month == 'June') and (days > 20):
	 season = 'summer'
 elif (month == 'September') and (days > 21):
	 season = 'autumn'
 elif (month == 'October') and (days > 21):
	 season = 'autumn'
 elif (month == 'November') and (days > 21):
	 season = 'autumn'
 elif (month == 'December') and (days > 20):
	 season = 'winter'
 return season",human
26,"def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ",human
489,"def find_frequency_of_largest_value(arr):
    max_value = max(arr)
    frequency = arr.count(max_value)
    return frequency",lm
666,"def count_occurrence(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count",lm
699,"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) : 
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") ",human
185,"def parabola_focus(a, b, c): 
  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))
  return focus",human
390,"def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string",human
905,"def factorial(start,end): 
    res = 1 
    for i in range(start,end + 1): 
        res *= i      
    return res 
def sum_of_square(n): 
   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ",human
510,"def numSubsequences(arr, k):
    n = len(arr)
    dp = [[0] * (k + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        for j in range(1, k + 1):
            dp[i][j] = dp[i - 1][j]
            if arr[i - 1] <= j:
                dp[i][j] += dp[i - 1][j // arr[i - 1]] + 1
    return dp[n][k]",lm
325,"def min_squares(n):
    if n <= 0:
        return 0
    min_count = float('inf')
    for i in range(1, int(n**0.5) + 1):
        temp_count = 1 + min_squares(n - i*i)
        if temp_count < min_count:
            min_count = temp_count
    return min_count",lm
261,"def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",human
709,"def count_unique_keys(tuple):
    """"""
    Count the number of unique keys for each value in the tuple.
    
    Args:
    tuple -- The tuple containing the values.
    
    Returns:
    A dictionary with the values as keys and the count of unique keys as values.
    """"""
    
    unique_keys = {}
    
    for value in tuple:
        if value not in unique_keys:
            unique_keys[value] = 1
        else:
            unique_keys[value] += 1
    
    return unique_keys",lm
876,"def lcm(x, y):
   if x > y:
       z = x
   else:
       z = y
   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1
   return lcm",human
19,"def contains_duplicate(nums):
    return len(nums) != len(set(nums))",lm
429,"def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",human
63,"def find_maximum_difference(tuples):
    max_diff = 0
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            diff = abs(tuples[i] - tuples[j])
            if diff > max_diff:
                max_diff = diff
    return max_diff",lm
630,"def extract_adjacent_coords(coord):
    x, y = coord
    adjacent_coords = [(x, y+1), (x+1, y), (x, y-1), (x-1, y)]
    return adjacent_coords",lm
299,"from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])",human
886,"def sum_num(numbers):
    total = 0
    for x in numbers:
        total += x
    return total/len(numbers) ",human
232,"import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest",human
563,"import re
def extract_values(text):
 return (re.findall(r'""(.*?)""', text))",human
27,"def remove_digits(lst):
    return [''.join(filter(lambda x: not x.isdigit(), string)) for string in lst]",lm
67,"def partition_bell_numbers(n):
    if n == 0:
        return 1
    
    dp = [0] * (n+1)
    dp[0] = 1
    
    for i in range(1, n+1):
        for j in range(i):
            dp[i] += dp[j] * dp[i-j-1]
    
    return dp[n]",lm
528,"def min_length(list1):
   min_length = min(len(x) for x in  list1 )  
   min_list = min((x) for x in   list1)
   return(min_length, min_list)     ",human
92,"def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True",human
932,"def remove_duplic_list(l):
    temp = []
    for x in l:
        if x not in temp:
            temp.append(x)
    return temp",human
272,"def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ",human
318,"def max_volume (s): 
    maxvalue = 0
    i = 1
    for i in range(s - 1): 
        j = 1
        for j in range(s): 
            k = s - i - j 
            maxvalue = max(maxvalue, i * j * k)         
    return maxvalue ",human
749,"def sort_numeric_strings(nums_str):
    result = [int(x) for x in nums_str]
    result.sort()
    return result",human
431,"def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result",human
896,"def last(n):
   return n[-1]
def sort_list_last(tuples):
  return sorted(tuples, key=last)",human
866,"def check_monthnumb(monthname2):
  if(monthname2==""January"" or monthname2==""March""or monthname2==""May"" or monthname2==""July"" or monthname2==""Augest"" or monthname2==""October"" or monthname2==""December""):
    return True
  else:
    return False",human
204,"def count_character(string, character):
    count = 0
    for char in string:
        if char == character:
            count += 1
    return count",lm
674,"from collections import Counter

def remove_duplicate_words(string):
    word_count = Counter(string.split())
    no_duplicates = [word for word, count in word_count.items() if count == 1]
    return ' '.join(no_duplicates)",lm
186,"def search_literals(regex, string):
    import re
    
    matches = re.findall(regex, string)
    return matches",lm
324,"def sum_of_alternates(test_tuple):
  sum1 = 0
  sum2 = 0
  for idx, ele in enumerate(test_tuple):
    if idx % 2:
      sum1 += ele
    else:
      sum2 += ele
  return ((sum1),(sum2)) ",human
653,"from collections import defaultdict
def grouping_dictionary(l):
    d = defaultdict(list)
    for k, v in l:
        d[k].append(v)
    return d",human
915,"def rearrange_numbs(array_nums):
  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)
  return result ",human
197,"def exponentiation(t1, t2):
    """"""
    Perform exponentiation of two tuples.
    
    Args:
        t1: A tuple containing the base values.
        t2: A tuple containing the exponent values.
    
    Returns:
        A tuple containing the result of exponentiation.
    """"""
    return tuple(map(lambda x, y: x ** y, t1, t2))",lm
624,"def convert_to_upper_case(string):
    """"""
    Convert the given string to upper case.
    
    Parameters:
    string (str): The string to be converted.
    
    Returns:
    str: The converted string in upper case.
    """"""
    return string.upper()",lm
155,"def toggle_even_bits(num):
    return num ^ int('1010101010101010', 2)",lm
568,"def empty_list(length):
 empty_list = [{} for _ in range(length)]
 return empty_list",human
208,"import re

def check_decimal_with_precision(decimal):
    pattern = r'^\d+\.\d{2}$'
    if re.match(pattern, decimal):
        return True
    else:
        return False",lm
601,"class Pair(object): 
	def __init__(self, a, b): 
		self.a = a 
		self.b = b 
def max_chain_length(arr, n): 
	max = 0
	mcl = [1 for i in range(n)] 
	for i in range(1, n): 
		for j in range(0, i): 
			if (arr[i].a > arr[j].b and
				mcl[i] < mcl[j] + 1): 
				mcl[i] = mcl[j] + 1
	for i in range(n): 
		if (max < mcl[i]): 
			max = mcl[i] 
	return max",human
131,"def reverse_vowels(string):
    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
    string_list = list(string)
    start = 0
    end = len(string_list) - 1

    while start < end:
        if string_list[start] in vowels and string_list[end] in vowels:
            string_list[start], string_list[end] = string_list[end], string_list[start]
            start += 1
            end -= 1
        elif string_list[start] in vowels:
            end -= 1
        elif string_list[end] in vowels:
            start += 1
        else:
            start += 1
            end -= 1
    
    return ''.join(string_list)",lm
842,"def find_odd_number(arr):
    # Create an empty dictionary to store the occurrences
    occurrences = {}

    # Iterate over each number in the array
    for num in arr:
        # If the number already exists in the dictionary, increment its occurrence count
        if num in occurrences:
            occurrences[num] += 1
        # Otherwise, add the number to the dictionary with an initial occurrence count of 1
        else:
            occurrences[num] = 1

    # Iterate over the dictionary items to find the number with an odd occurrence count
    for num, count in occurrences.items():
        if count % 2 != 0:
            return num",lm
722,"def filter_students(students):
    """"""
    Filter the height and width of students stored in a dictionary.

    Parameters:
    students (dict): A dictionary containing student names as keys and their height and width as values.

    Returns:
    dict: A dictionary with the same structure as the input dictionary, but only containing the height and width values.
    """"""

    filtered_students = {}

    for student, (height, width) in students.items():
        filtered_students[student] = (height, width)

    return filtered_students",lm
547,"def Total_Hamming_Distance(n):   
    i = 1
    sum = 0
    while (n // i > 0):  
        sum = sum + n // i  
        i = i * 2     
    return sum",human
769,"def Diff(li1,li2):
    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))
 ",human
237,"from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ",human
359,"def Check_Solution(a,b,c): 
    if (2*b*b == 9*a*c): 
        return (""Yes""); 
    else: 
        return (""No""); ",human
670,"def has_decreasing_trend(numbers):
    for i in range(len(numbers) - 1):
        if numbers[i] <= numbers[i+1]:
            return False
    return True",lm
215,"def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]",human
158,"def min_Ops(arr,n,k): 
    max1 = max(arr) 
    res = 0
    for i in range(0,n):  
        if ((max1 - arr[i]) % k != 0): 
            return -1 
        else: 
            res += (max1 - arr[i]) / k 
    return int(res) ",human
938,"import sys 

def find_closet(A, B, C, p, q, r): 
	diff = sys.maxsize 
	res_i = 0
	res_j = 0
	res_k = 0
	i = 0
	j = 0
	k = 0
	while(i < p and j < q and k < r): 
		minimum = min(A[i], min(B[j], C[k])) 
		maximum = max(A[i], max(B[j], C[k])); 
		if maximum-minimum < diff: 
			res_i = i 
			res_j = j 
			res_k = k 
			diff = maximum - minimum; 
		if diff == 0: 
			break
		if A[i] == minimum: 
			i = i+1
		elif B[j] == minimum: 
			j = j+1
		else: 
			k = k+1
	return A[res_i],B[res_j],C[res_k]",human
748,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)",human
764,"def count_numeric_values(string):
    count = 0
    for char in string:
        if char.isdigit():
            count += 1
    return count",lm
871,"def are_rotations(s1, s2):
    if len(s1) != len(s2):
        return False
    s1s1 = s1 + s1
    if s2 in s1s1:
        return True
    else:
        return False",lm
39,"import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")",human
833,"def get_key(dict): 
    list = [] 
    for key in dict.keys(): 
        list.append(key)           
    return list",human
16,"def find_sequences(text):
    import re
    pattern = r'[a-z]+_[a-z]+'
    sequences = re.findall(pattern, text)
    return sequences",lm
517,"def largest_pos(list1): 
    max = list1[0] 
    for x in list1: 
        if x > max : 
             max = x  
    return max",human
179,"def is_keith_number(num):
    # Convert the number to a list of digits
    digits = [int(d) for d in str(num)]
    
    # Initialize a list to store the previous terms
    terms = digits.copy()
    
    # Calculate the next terms until the sum exceeds the given number
    while True:
        # Calculate the next term
        next_term = sum(terms)
        
        # If the next term is equal to the given number, it is a keith number
        if next_term == num:
            return True
        
        # If the next term exceeds the given number, it is not a keith number
        if next_term > num:
            return False
        
        # Add the next term to the list of previous terms
        terms.append(next_term)
        
        # Remove the first term from the list if the number of terms exceeds the number of digits
        if len(terms) > len(digits):
            terms.pop(0)",lm
752,"def jacobsthal(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return jacobsthal(n-1) + 2 * jacobsthal(n-2)",lm
212,"import math  
def fourth_Power_Sum(n): 
    sum = 0
    for i in range(1,n+1) : 
        sum = sum + (i*i*i*i) 
    return sum",human
941,"def count_elim(num):
  count_elim = 0
  for n in num:
    if isinstance(n, tuple):
        break
    count_elim += 1
  return count_elim",human
942,"def is_element_present(list: List, element: Any) -> bool:
    """"""
    Check if any element is present in the given list.

    Args:
        list (list): The list to check for elements.
        element (Any): The element to check if it is present in the list.

    Returns:
        bool: True if the element is present, False otherwise.
    """"""
    for item in list:
        if item == element:
            return True
    return False",lm
76,"def count_Squares(m,n):
    if(n < m):
        temp = m
        m = n
        n = temp
    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",human
636,"def check_reciprocal_roots(a, b, c):
    '''
    Check if roots of a quadratic equation are reciprocal of each other or not.
    
    Parameters:
    a (float): Coefficient of x^2
    b (float): Coefficient of x
    c (float): Constant term
    
    Returns:
    bool: True if roots are reciprocal, False otherwise
    '''
    discriminant = b**2 - 4*a*c
    
    if discriminant >= 0:
        root1 = (-b + (discriminant)**0.5) / (2*a)
        root2 = (-b - (discriminant)**0.5) / (2*a)
        
        if root1 != 0 and root2 != 0:  # roots cannot be reciprocal if either root is zero
            if root1 * root2 == 1:  # check if product of roots is 1
                return True
    
    return False",lm
153,"def find_parabola_vertex(a, b, c):
    """"""
    Find the vertex of a parabola given the coefficients a, b, and c.

    Parameters:
        a (float): Coefficient of the quadratic term.
        b (float): Coefficient of the linear term.
        c (float): Coefficient of the constant term.

    Returns:
        tuple: A tuple containing the x-coordinate and y-coordinate of the vertex.

    """"""
    x_vertex = -b / (2 * a)
    y_vertex = (a * x_vertex ** 2) + (b * x_vertex) + c
    return x_vertex, y_vertex",lm
775,"def odd_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))",human
392,"def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]",human
619,"def move_numbers_to_string(numbers: list, string: str) -> str:
    concatenated_string = ''.join(map(str, numbers))
    return string + concatenated_string",lm
802,"def count_Rotation(arr,n):   
    for i in range (1,n): 
        if (arr[i] < arr[i - 1]): 
            return i  
    return 0",human
336,"def has_28_days(month_name):
    """"""
    Returns True if the given month name contains 28 days, False otherwise.
    
    Parameters:
    month_name (str): The name of the month.
    
    Returns:
    bool: True if the month has 28 days, False otherwise.
    """"""
    thirty_days_months = [""April"", ""June"", ""September"", ""November""]
    
    if month_name in thirty_days_months:
        return False
    else:
        return True",lm
509,"def average_of_odds(given_odd):
    odd_numbers = []
    for i in range(given_odd, 0, -2):
        odd_numbers.append(i)
    average = sum(odd_numbers) / len(odd_numbers)
    return average",lm
85,"import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea",human
27,"import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list",human
369,"def lateralsurface_cuboid(l,w,h):
  LSA = 2*h*(l+w)
  return LSA",human
171,"import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter",human
230,"def replace_spaces(string, character):
    return string.replace("" "", character)",lm
656,"def min_sum_of_abs_diff(arr1, arr2):
    arr1.sort()
    arr2.sort()

    sum_diff = 0
    for i in range(len(arr1)):
        sum_diff += abs(arr1[i] - arr2[i])
    
    return sum_diff",lm
143,"def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ",human
851,"def sum_of_inverse_divisors(n):
    divisors = []
    for i in range(1, n + 1):
        if n % i == 0:
            divisors.append(i)
    sum_inverse = 0
    for divisor in divisors:
        sum_inverse += 1 / divisor
    return sum_inverse",lm
948,"def get_item(tup1,index):
  item = tup1[index]
  return item",human
255,"import itertools

def generate_color_combinations(colors, num_colors):
    color_combinations = list(itertools.product(colors, repeat=num_colors))
    return color_combinations",lm
811,"def check_identical(test_list1, test_list2):
  res = test_list1 == test_list2
  return (res) ",human
216,"def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist ",human
799,"INT_BITS = 32
def left_Rotate(n,d):   
    return (n << d)|(n >> (INT_BITS - d))  ",human
8,"def square_elements(lst):
    squared_lst = list(map(lambda x: x**2, lst))
    return squared_lst",lm
758,"def unique_sublists(list1):
    result ={}
    for l in  list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result",human
543,"def add_and_print_digits(num1, num2):
    sum_num = num1 + num2
    num_digits = len(str(sum_num))
    print(""The sum of"", num1, ""and"", num2, ""is:"", sum_num)
    print(""The number of digits in the sum is:"", num_digits)",lm
109,"def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ",human
524,"def max_increasing_subsequence_sum(arr):
    n = len(arr)
    dp = [arr[i] for i in range(n)]
    
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j]:
                dp[i] = max(dp[i], dp[j] + arr[i])
    
    return max(dp) if dp else 0",lm
766,"def pair_wise(l1):
    temp = []
    for i in range(len(l1) - 1):
        current_element, next_element = l1[i], l1[i + 1]
        x = (current_element, next_element)
        temp.append(x)
    return temp",human
265,"def split_list(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst), n)]",lm
861,"def find_anagrams(target, strings):
    return list(filter(lambda s: sorted(s) == sorted(target), strings))",lm
420,"def cube_sum_of_even_numbers(n):
    """"""
    This function calculates the cube sum of the first n even natural numbers.
    
    Parameters:
        n (int): The number of even natural numbers
        
    Returns:
        int: The cube sum of the first n even natural numbers
    """"""
    sum = 0
    for i in range(1, n+1):
        sum += (2*i)**3
    return sum",lm
932,"def remove_duplicates(string_list):
    """"""
    Remove duplicate words from a given list of strings.
    
    Parameters:
    string_list (list): A list of strings containing duplicate words.
    
    Returns:
    list: A list of strings with duplicate words removed.
    """"""
    return list(set(string_list))",lm
298,"def find_nested_elements(nested_list, search_list):
    result = []
    for sublist in nested_list:
        for element in sublist:
            if element in search_list:
                result.append(element)
    return result",lm
647,"def split_string_at_uppercase(string):
    result = []
    current_word = """"
    for char in string:
        if char.isupper() and current_word != """":
            result.append(current_word)
            current_word = """"
        current_word += char
    if current_word != """":
        result.append(current_word)
    return result",lm
386,"def min_swaps_to_balance_brackets(s):
    stack = []
    count = 0
    
    for char in s:
        if char == '[':
            stack.append(char)
        elif char == ']':
            if stack and stack[-1] == '[':
                stack.pop()
            else:
                count += 1
    
    count += len(stack) // 2
    return count",lm
401,"def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",human
256,"def count_primes(n):
    """"""
    Count the number of prime numbers less than a given non-negative number.

    Parameters:
    n (int): The non-negative number.

    Returns:
    int: The count of prime numbers less than n.

    Examples:
    >>> count_primes(10)
    4
    >>> count_primes(20)
    8
    >>> count_primes(30)
    10
    """"""
    if n <= 2:
        return 0

    primes = [True] * n
    primes[0] = primes[1] = False

    for i in range(2, int(n ** 0.5) + 1):
        if primes[i]:
            primes[i * i: n: i] = [False] * len(primes[i * i: n: i])

    return sum(primes)",lm
679,"def access_key(ditionary,key):
  return list(ditionary)[key]",human
591,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp  
    return newList ",human
103,"def eulerian_number(n, m):
    if n == 0 or m == 0 or n < m:
        return 0
    elif n == m:
        return 1
    else:
        return (n - m) * eulerian_number(n-1, m-1) + (m + 1) * eulerian_number(n-1, m)",lm
929,"def count_repeated_items(t: tuple) -> dict:
    return {item: t.count(item) for item in set(t)}",lm
707,"def count_set_bits(n):
    count = 0
    for i in range(1, n+1):
        count += bin(i).count('1')
    return count",lm
651,"def is_subset(tuple1, tuple2):
    return set(tuple1).issubset(set(tuple2))",lm
10,"import heapq
def small_nnum(list1,n):
  smallest=heapq.nsmallest(n,list1)
  return smallest",human
21,"def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)",human
132,"def tuple_to_string(t):
    return ''.join(str(i) for i in t)",lm
243,"def sort_list(lst):
    return sorted(lst, key=lambda x: lst.count(x[0]))",lm
61,"def count_substrings_with_sum_equal_length(s:str)-> int:
    count = 0
    for i in range(len(s)):
        for j in range(i+1, len(s)+1):
            substring = s[i:j]
            if sum(int(digit) for digit in substring) == len(substring):
                count += 1
    return count",lm
946,"def most_common_elements(text):
    # Split the text into individual words
    words = text.split()
    
    # Create a dictionary to store the counts of each word
    word_counts = {}
    
    # Iterate through each word in the text
    for word in words:
        # If the word is already in the dictionary, increment its count by 1
        if word in word_counts:
            word_counts[word] += 1
        # If the word is not in the dictionary, add it with a count of 1
        else:
            word_counts[word] = 1
    
    # Find the maximum count among all the words
    max_count = max(word_counts.values())
    
    # Create a list to store the most common elements
    most_common = []
    
    # Iterate through each word in the word_counts dictionary
    for word, count in word_counts.items():
        # If the count of the word is equal to the maximum count, add it to the list of most common elements
        if count == max_count:
            most_common.append((word, count))
    
    # Return the most common elements and their counts
    return most_common",lm
690,"def mul_consecutive_nums(nums):
    result = [b*a for a, b in zip(nums[:-1], nums[1:])]
    return result",human
123,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)",human
331,"def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  ",human
742,"import math

def calculate_tetrahedron_area(side_length):
    return math.sqrt(3) * (side_length ** 2)",lm
300,"def count_binary_sequences(n):
    return 2**n",lm
117,"def convert_to_float(lst):
    for i in range(len(lst)):
        try:
            lst[i] = float(lst[i])
        except ValueError:
            pass
    return lst",lm
337,"def match_word_at_end(string, word, punctuation=False):
    if punctuation:
        return string.endswith(word) or string.endswith(word + ""."") or string.endswith(word + ""!"") or string.endswith(word + ""?"")
    else:
        return string.endswith(word)",lm
778,"from itertools import groupby
def pack_consecutive_duplicates(list1):
    return [list(group) for key, group in groupby(list1)]",human
863,"def find_longest_conseq_subseq(arr, n): 
	ans = 0
	count = 0
	arr.sort() 
	v = [] 
	v.append(arr[0]) 
	for i in range(1, n): 
		if (arr[i] != arr[i - 1]): 
			v.append(arr[i]) 
	for i in range(len(v)): 
		if (i > 0 and v[i] == v[i - 1] + 1): 
			count += 1
		else: 
			count = 1
		ans = max(ans, count) 
	return ans ",human
796,"def return_sum(dict):
  sum = 0
  for i in dict.values():
    sum = sum + i
  return sum",human
437,"def remove_odd_characters(string):
    return string[::2]",lm
359,"def check_root_difference(a, b, c):
    """"""
    Check whether one root of the quadratic equation is twice of the other or not.

    Parameters:
    a (float): Coefficient of x^2
    b (float): Coefficient of x
    c (float): Constant term

    Returns:
    bool: True if one root is twice of the other, False otherwise

    """"""
    
    discriminant = b ** 2 - 4 * a * c
    
    if discriminant < 0:
        return False
    
    root1 = (-b + discriminant ** 0.5) / (2 * a)
    root2 = (-b - discriminant ** 0.5) / (2 * a)
    
    if root1 == 2 * root2 or root2 == 2 * root1:
        return True
    else:
        return False",lm
562,"def Find_Max_Length(lst):  
    maxLength = max(len(x) for x in lst )
    return maxLength ",human
29,"def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1",human
889,"def reverse_list_lists(lists):
    for l in lists:
        l.sort(reverse = True)
    return lists ",human
577,"def last_Digit_Factorial(n): 
    if (n == 0): return 1
    elif (n <= 2): return n  
    elif (n == 3): return 6
    elif (n == 4): return 4 
    else: 
      return 0",human
164,"import math 
def divSum(n): 
    sum = 1; 
    i = 2; 
    while(i * i <= n): 
        if (n % i == 0): 
            sum = (sum + i +math.floor(n / i)); 
        i += 1; 
    return sum; 
def areEquivalent(num1,num2): 
    return divSum(num1) == divSum(num2); ",human
786,"import bisect
def right_insertion(a, x):
    i = bisect.bisect_right(a, x)
    return i",human
31,"def find_top_k_frequent(nums, k):
    frequency = {}
    
    for num in nums:
        if num in frequency:
            frequency[num] += 1
        else:
            frequency[num] = 1
            
    heap = []
    for num in frequency:
        heapq.heappush(heap, (-frequency[num], num))
        
    top_k = []
    for i in range(k):
        top_k.append(heapq.heappop(heap)[1])
        
    return top_k",lm
433,"def check_greater(arr, number):
  arr.sort()
  if number > arr[-1]:
    return ('Yes, the entered number is greater than those in the array')
  else:
    return ('No, entered number is less than those in the array')",human
78,"def count_With_Odd_SetBits(n): 
    if (n % 2 != 0): 
        return (n + 1) / 2
    count = bin(n).count('1') 
    ans = n / 2
    if (count % 2 != 0): 
        ans += 1
    return ans ",human
588,"def find_difference(arr):
    return max(arr) - min(arr)",lm
563,"def extract_values(string):
    result = []
    start = string.find('""')
    while start != -1:
        end = string.find('""', start + 1)
        if end == -1:
            break
        value = string[start + 1: end]
        result.append(value)
        start = string.find('""', end + 1)
    return result",lm
354,"def tn_ap(a,n,d):
  tn = a + (n - 1) * d
  return tn",human
832,"import re

def extract_max_numeric_value(string):
    numeric_values = re.findall(r'\d+', string)
    if numeric_values:
        max_value = max(map(int, numeric_values))
        return max_value
    return None",lm
381,"def sort_list_of_lists(lst, index):
    lst.sort(key=lambda x: x[index])
    return lst",lm
856,"def min_adjacent_swaps(arr):
    sorted_arr = sorted(arr)
    count = 0
    i = 0
    while i < len(arr):
        if arr[i] == sorted_arr[i]:
            i += 1
            continue
        j = i + 1
        while j < len(arr):
            if arr[j] == sorted_arr[i]:
                arr[i], arr[j] = arr[j], arr[i]
                count += 1
                break
            j += 1
        i += 1
    return count",lm
473,"def tuple_intersection(tuple_list):
    return set.intersection(*map(set, tuple_list))",lm
543,"def count_digits(num1,num2):
    number=num1+num2
    count = 0
    while(number > 0):
        number = number // 10
        count = count + 1
    return count",human
125,"def max_diff(binary_string):
    max_diff = 0
    count_0 = 0
    count_1 = 0
    
    for char in binary_string:
        if char == '0':
            count_0 += 1
        else:
            count_1 += 1
        
        diff = count_0 - count_1
        max_diff = max(max_diff, diff)
    
    return max_diff",lm
562,"def find_max_length_sublist(lst):
    max_length = 0
    current_length = 0
    
    for item in lst:
        if item == 1:
            current_length += 1
        else:
            max_length = max(max_length, current_length)
            current_length = 0
    
    return max(max_length, current_length)",lm
182,"def find_values(s):
    import re
    
    uppercase = re.findall(r'[A-Z]', s)
    lowercase = re.findall(r'[a-z]', s)
    special_char = re.findall(r'[^A-Za-z0-9]', s)
    numeric = re.findall(r'\d', s)
    
    return uppercase, lowercase, special_char, numeric",lm
259,"def maximize_tuples(t1, t2):
    return max(t1, t2)",lm
351,"def first_Element(arr,n,k): 
    count_map = {}; 
    for i in range(0, n): 
        if(arr[i] in count_map.keys()): 
            count_map[arr[i]] += 1
        else: 
            count_map[arr[i]] = 1
        i += 1
    for i in range(0, n):  
        if (count_map[arr[i]] == k): 
            return arr[i] 
        i += 1 
    return -1",human
954,"def profit_amount(actual_cost,sale_amount): 
 if(actual_cost > sale_amount):
    amount = actual_cost - sale_amount
    return amount
 else:
    return None",human
760,"def is_array_distinct(arr):
    return len(set(arr)) == 1",lm
222,"def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) ",human
167,"def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; ",human
236,"def No_of_Triangle(N,K):
    if (N < K):
        return -1;
    else:
        Tri_up = 0;
        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;
        Tri_down = 0;
        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;
        return Tri_up + Tri_down;",human
911,"def maximum_product(nums):
    import heapq
    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)
    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])",human
646,"def No_of_cubes(N,K):
    No = 0
    No = (N - K + 1)
    No = pow(No, 3)
    return No",human
415,"def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    ",human
918,"def coin_change(S, m, n): 
    table = [[0 for x in range(m)] for x in range(n+1)] 
    for i in range(m): 
        table[0][i] = 1
    for i in range(1, n+1): 
        for j in range(m): 
            x = table[i - S[j]][j] if i-S[j] >= 0 else 0
            y = table[i][j-1] if j >= 1 else 0 
            table[i][j] = x + y   
    return table[n][m-1] ",human
916,"def find_triplet(arr, target):
    """"""
    Finds if there is a triplet in the array whose sum is equal to the given target.
    
    Parameters:
    arr (list): A list of integers.
    target (int): The target sum value.

    Returns:
    bool: True if a triplet with the given target sum exists, False otherwise.
    """"""
    
    # Sort the array in non-decreasing order
    arr.sort()

    # Iterate over each element as the first element of the triplet
    for i in range(len(arr) - 2):
        left = i + 1  # index of the second element
        right = len(arr) - 1  # index of the third element

        while left < right:
            current_sum = arr[i] + arr[left] + arr[right]
            if current_sum == target:
                return True
            elif current_sum < target:
                left += 1
            else:
                right -= 1

    return False",lm
611,"python
def find_max_nth_column(tuple_list, n):
    """"""
    Find the maximum value of the nth column from the given tuple list.

    Parameters:
    tuple_list (list): A list of tuples where each tuple represents a row.
    n (int): The column number (starting from 0) to find the maximum value.

    Returns:
    int or float: The maximum value from the specified column.
    """"""

    max_value = float('-inf')

    for row in tuple_list:
        if n < len(row):
            column_value = row[n]
            if column_value > max_value:
                max_value = column_value

    return max_value",lm
278,"def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ",human
257,"def swap_numbers(a, b):
    temp = a
    a = b
    b = temp
    return a, b",lm
549,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n+1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j*j)     
    return sm ",human
313,"def print_positive_numbers(lst):
    for num in lst:
        if num > 0:
            print(num)",lm
396,"import re

def check_start_end_same_character_regex(string:str) -> bool:
    pattern = r'^(.).*\1$'
    result = re.match(pattern, string)
    
    if result:
        return True
    else:
        return False",lm
149,"def longest_subsequence(array):
    longest_length = 0
    longest_subseq = []
    
    for num in array:
        current_length = 1
        current_subseq = [num]
        
        while num + 1 in array:
            num += 1
            current_length += 1
            current_subseq.append(num)
            
        if current_length > longest_length:
            longest_length = current_length
            longest_subseq = current_subseq
    
    return longest_subseq",lm
961,"def roman_to_integer(roman):
    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    integer = 0
    for i in range(len(roman)):
        if i > 0 and roman_dict[roman[i]] > roman_dict[roman[i - 1]]:
            integer += roman_dict[roman[i]] - 2 * roman_dict[roman[i - 1]]
        else:
            integer += roman_dict[roman[i]]
    return integer",lm
270,"def sum_even_numbers_even_positions(lst):
    """"""
    Function to find the sum of even numbers at even positions in a list.

    Parameters:
    lst (list): A list of integers.

    Returns:
    int: The sum of even numbers at even positions.

    Examples:
    >>> sum_even_numbers_even_positions([1, 2, 3, 4, 5, 6])
    6
    >>> sum_even_numbers_even_positions([2, 4, 6, 8])
    10
    """"""
    return sum(lst[1::2])",lm
816,"def clear_tuple(test_tup):
  temp = list(test_tup)
  temp.clear()
  test_tup = tuple(temp)
  return (test_tup) ",human
907,"def print_lucky_numbers(n):
    count = 0
    number = 1
    
    while count < n:
        if '4' not in str(number) and '7' not in str(number):
            print(number)
            count += 1
        number += 1",lm
320,"def sum_difference(n):
    sumofsquares = 0
    squareofsum = 0
    for num in range(1, n+1):
        sumofsquares += num * num
        squareofsum += num
    squareofsum = squareofsum ** 2
    return squareofsum - sumofsquares",human
963,"def calculate_discriminant(a, b, c):
    discriminant = (b**2) - (4*a*c)
    return discriminant",lm
358,"def moddiv_list(nums1,nums2):
  result = map(lambda x, y: x % y, nums1, nums2)
  return list(result)",human
649,"def calculate_sum_within_range(nums_list, start_index, end_index):
    """"""
    Calculate the sum of the numbers in a list between the indices of a specified range.
    
    :param nums_list: List of numbers
    :type nums_list: list
    :param start_index: Starting index of the range
    :type start_index: int
    :param end_index: Ending index of the range
    :type end_index: int
    :return: Sum of the numbers within the specified range
    :rtype: int or float
    """"""
    sum_within_range = 0
    for i in range(start_index, end_index + 1):
        sum_within_range += nums_list[i]
    return sum_within_range",lm
774,"import re 
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
def check_email(email): 
	if(re.search(regex,email)): 
		return (""Valid Email"") 
	else: 
		return (""Invalid Email"") ",human
778,"def pack_duplicates(lst):
    packed_lst = []
    current_group = []
    for i in lst:
        if not current_group:
            current_group.append(i)
        elif current_group[-1] == i:
            current_group.append(i)
        else:
            packed_lst.append(current_group)
            current_group = [i]
    if current_group:
        packed_lst.append(current_group)
    return packed_lst",lm
925,"def calculate_product(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product",lm
760,"def unique_Element(arr,n):
    s = set(arr)
    if (len(s) == 1):
        return ('YES')
    else:
        return ('NO')",human
501,"def ngcd(x,y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i;
        i+=1
    return gcd;
def num_comm_div(x,y):
  n = ngcd(x,y)
  result = 0
  z = int(n**0.5)
  i = 1
  while(i <= z):
    if(n % i == 0):
      result += 2 
      if(i == n/i):
        result-=1
    i+=1
  return result",human
352,"def unique_Characters(str):
    for i in range(len(str)):
        for j in range(i + 1,len(str)): 
            if (str[i] == str[j]):
                return False;
    return True;",human
826,"def find_triangle_type(side1, side2, side3):
    if side1 == side2 == side3:
        return ""Equilateral Triangle""
    elif side1 == side2 or side1 == side3 or side2 == side3:
        return ""Isosceles Triangle""
    else:
        return ""Scalene Triangle""",lm
269,"def get_ascii_value(character):
    return ord(character)",lm
142,"def count_same_pairs(list1, list2, list3):
    count = 0
    for i in list1:
        if i in list2 and i in list3:
            count += 1
    return count",lm
75,"def find_divisible_tuples(lst, k):
    return [tpl for tpl in lst if all(elem % k == 0 for elem in tpl)]",lm
350,"def minimize_string(string):
    """"""
    :param string: The input string
    :return: The minimized string
    """"""
    if len(string) == 0 or len(string) == 1:
        return string

    removed = False
    prev = string[0]
    result = []
    count = 1
    for i in range(1, len(string)):
        if string[i] == prev:
            count += 1
        else:
            if count == 1:
                if not removed:
                    removed = True
                else:
                    result.append(prev)
            else:
                result.append(prev * count)
            prev = string[i]
            count = 1

    if count == 1 and not removed:
        result.append(prev)
    else:
        result.append(prev * count)

    return """".join(result)",lm
362,"def find_max_occurrence(lst):
    count_dict = {}
    for item in lst:
        if item in count_dict:
            count_dict[item] += 1
        else:
            count_dict[item] = 1
    max_count = 0
    max_item = None
    for item, count in count_dict.items():
        if count > max_count:
            max_count = count
            max_item = item
    return max_item",lm
169,"def pell_number(n):
    if n <= 0:
        return None
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        pell_1 = 0
        pell_2 = 1
        for _ in range(n - 2):
            pell_1, pell_2 = pell_2, 2 * pell_2 + pell_1
        return pell_2",lm
572,"def two_unique_nums(nums):
  return [i for i in nums if nums.count(i)==1]",human
66,"def count_positive_numbers(lst):
    count = 0
    for num in lst:
        if num > 0:
            count += 1
    return count",lm
30,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n): 
        for j in range(1,n-i+1):  
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ",human
254,"import re
def words_ae(text):
 list = re.findall(""[ae]\w+"", text)
 return list",human
604,"def reverse_words(s):
        return ' '.join(reversed(s.split()))",human
250,"def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ",human
919,"def multiply_list(lst):
    result = 1
    for item in lst:
        result *= item
    return result",lm
153,"def parabola_vertex(a, b, c): 
  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))
  return vertex",human
694,"The generated code:


def extract_unique_values(dictionary):
    return list(set(dictionary.values()))",lm
533,"def remove_elements(data_type, data_tuple):
    return tuple(element for element in data_tuple if type(element) != data_type)",lm
955,"def is_abundant(n):
    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctrsum > n",human
379,"def calculate_surface_area(length, width, height):
    return 2 * ((length * width) + (length * height) + (width * height))",lm
837,"def cube_sum_of_odd_natural_numbers(n):
    sum = 0
    for i in range(1, n*2, 2):
        sum += i**3
    return sum",lm
464,"def check_values_same(dictionary):
    values = list(set(dictionary.values()))
    return len(values) == 1",lm
622,"def get_median(arr1, arr2, n):
  i = 0
  j = 0
  m1 = -1
  m2 = -1
  count = 0
  while count < n + 1:
    count += 1
    if i == n:
      m1 = m2
      m2 = arr2[0]
      break
    elif j == n:
      m1 = m2
      m2 = arr1[0]
      break
    if arr1[i] <= arr2[j]:
      m1 = m2
      m2 = arr1[i]
      i += 1
    else:
      m1 = m2
      m2 = arr2[j]
      j += 1
  return (m1 + m2)/2",human
79,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False",human
265,"def list_split(S, step):
    return [S[i::step] for i in range(step)]",human
701,"def find_equilibrium_index(arr):
    total_sum = 0
    left_sum = 0
    
    for i in range(len(arr)):
        total_sum += arr[i]
        
    for i in range(len(arr)):
        
        total_sum -= arr[i]
        
        if left_sum == total_sum:
            return i
            
        left_sum += arr[i]
        
    return -1",lm
948,"def get_tuple_item(tup: tuple, index: int):
    return tup[index]",lm
673,"def convert_list_to_int(lst):
    """"""
    Convert a list of multiple integers into a single integer.
    
    Parameters:
    lst (list): A list of multiple integers.
    
    Returns:
    int: The converted single integer.
    """"""
    return int(''.join(map(str, lst)))",lm
567,"def is_sorted(lst):
    '''
    Check if a specified list is sorted or not.
    
    Parameters:
    lst (list): The list to be checked.
    
    Returns:
    bool: True if the list is sorted, False otherwise.
    '''
    return lst == sorted(lst)",lm
527,"def get_pairs_count(arr, n, sum):
    count = 0 
    for i in range(0, n):
        for j in range(i + 1, n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count",human
477,"def is_lower(string):
  return (string.lower())",human
534,"import re
def search_literal(pattern,text):
 match = re.search(pattern, text)
 s = match.start()
 e = match.end()
 return (s, e)",human
950,"def chinese_zodiac(year):
 if (year - 2000) % 12 == 0:
     sign = 'Dragon'
 elif (year - 2000) % 12 == 1:
     sign = 'Snake'
 elif (year - 2000) % 12 == 2:
     sign = 'Horse'
 elif (year - 2000) % 12 == 3:
     sign = 'sheep'
 elif (year - 2000) % 12 == 4:
     sign = 'Monkey'
 elif (year - 2000) % 12 == 5:
     sign = 'Rooster'
 elif (year - 2000) % 12 == 6:
     sign = 'Dog'
 elif (year - 2000) % 12 == 7:
     sign = 'Pig'
 elif (year - 2000) % 12 == 8:
     sign = 'Rat'
 elif (year - 2000) % 12 == 9:
     sign = 'Ox'
 elif (year - 2000) % 12 == 10:
     sign = 'Tiger'
 else:
     sign = 'Hare'
 return sign",human
79,"def is_word_length_odd(word):
    return len(word) % 2 == 1",lm
537,"def find_first_repeated_word(string):
    # Split the string into words
    words = string.split()
    
    # Create a set to store unique words
    seen = set()
    
    # Iterate through the words
    for word in words:
        # If the word is already in the set, it is the first repeated word
        if word in seen:
            return word
        
        # Add the word to the set
        seen.add(word)
    
    # Return None if no repeated words are found
    return None",lm
546,"def last_occurence_char(string,char):
 flag = -1
 for i in range(len(string)):
     if(string[i] == char):
         flag = i
 if(flag == -1):
    return None
 else:
    return flag + 1",human
869,"def remove_list_range(list1, leftrange, rigthrange):
   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]
   return result",human
291,"def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]",human
870,"def sum_positivenum(nums):
  sum_positivenum = list(filter(lambda nums:nums>0,nums))
  return sum(sum_positivenum)",human
6,"def check_bit_difference(x, y):
    """"""
    Checks whether two numbers differ at one bit position only.
    
    Parameters:
    x (int): The first number.
    y (int): The second number.
    
    Returns:
    bool: True if the numbers differ at one bit position only, False otherwise.
    """"""
    # XOR the two numbers
    xor_result = x ^ y
    
    # Count the number of set bits in the XOR result
    count = 0
    while xor_result:
        xor_result &= xor_result - 1
        count += 1
    
    # Return True if count is 1, False otherwise
    return count == 1",lm
953,"def subset(ar, n): 
    res = 0
    ar.sort() 
    for i in range(0, n) : 
        count = 1
        for i in range(n - 1): 
            if ar[i] == ar[i + 1]: 
                count+=1
            else: 
                break 
        res = max(res, count)  
    return res ",human
839,"def sort_tuple(tup): 
	n = len(tup) 
	for i in range(n): 
		for j in range(n-i-1): 
			if tup[j][0] > tup[j + 1][0]: 
				tup[j], tup[j + 1] = tup[j + 1], tup[j] 
	return tup",human
356,"def find_angle(a,b):
 c = 180 - (a + b)
 return c
",human
541,"def is_abundant(number):
    factors = []
    for i in range(1, number):
        if number % i == 0:
            factors.append(i)
    if sum(factors) > number:
        return True
    else:
        return False",lm
264,"def calculate_dog_age(human_age):
    return human_age * 7",lm
594,"def diff_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even-first_odd)",human
639,"def sum_name_lengths(names):
    total_length = 0
    
    for name in names:
        if name[0].islower():
            continue
        
        total_length += len(name)
    
    return total_length",lm
879,"import re

def match_string(string):
    pattern = r'a.*b$'
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",lm
95,"def find_minimum_length_sublist(lst):
    if not lst:
        return 0
    min_length = len(lst)
    for i in range(len(lst)):
        for j in range(i+1, len(lst)+1):
            sub_lst = lst[i:j]
            if len(sub_lst) < min_length:
                min_length = len(sub_lst)
    return min_length",lm
726,"def multiply_elements(test_tup):
  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",human
386,"def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap",human
773,"import re
def occurance_substring(text,pattern):
 for match in re.finditer(pattern, text):
    s = match.start()
    e = match.end()
    return (text[s:e], s, e)",human
828,"def count_chars(string):
    alphabets = 0
    digits = 0
    special_chars = 0
    
    for char in string:
        if char.isalpha():
            alphabets += 1
        elif char.isdigit():
            digits += 1
        else:
            special_chars += 1
    
    return alphabets, digits, special_chars",lm
174,"def group_keyvalue(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result",human
770,"def sum_of_fourth_power(n):
    return sum([(2*i-1)**4 for i in range(1, n+1)])",lm
119,"def find_single_element(arr):
    for i in range(len(arr)):
        if i == 0 and arr[i] != arr[i+1]:
            return arr[i]
        elif i == len(arr)-1 and arr[i] != arr[i-1]:
            return arr[i]
        elif arr[i] != arr[i-1] and arr[i] != arr[i+1]:
            return arr[i]",lm
108,"import heapq

def merge_sorted(*iterables):
    """"""
    Merge multiple sorted inputs into a single sorted iterator.
    
    Parameters:
    * iterables (iterables): The sorted inputs to be merged.
    
    Returns:
    iterator: A single sorted iterator.
    """"""
    return heapq.merge(*iterables)",lm
506,"def permutation_coefficient(n, k):
    if k == 0 or k == n:
        return 1
    else:
        return permutation_coefficient(n-1, k-1) + permutation_coefficient(n-1, k)",lm
189,"def firstMissingPositive(nums):
    # Separate negative and zero elements
    n = len(nums)
    i = 0
    while i < n:
        if nums[i] <= 0:
            nums[i], nums[n-1] = nums[n-1], nums[i]
            n -= 1
        else:
            i += 1

    # Mark elements as visited
    for i in range(n):
        val = abs(nums[i])
        if val <= n:
            nums[val-1] *= -1

    # Find first missing positive number
    for i in range(n):
        if nums[i] > 0:
            return i+1
    return n+1",lm
738,"def geometric_sum(n):
  if n < 0:
    return 0
  else:
    return 1 / (pow(2, n)) + geometric_sum(n - 1)",human
655,"def fifth_Power_Sum(n) : 
    sm = 0 
    for i in range(1,n+1) : 
        sm = sm + (i*i*i*i*i) 
    return sm ",human
705,"def sort_list_of_lists(lst):
    lst.sort(key=lambda x: (len(x), x))
    return lst",lm
943,"from heapq import merge
def combine_lists(num1,num2):
  combine_lists=list(merge(num1, num2))
  return combine_lists",human
447,"def find_cubes(lst):
    cube = lambda x: x**3
    return [cube(x) for x in lst]",lm
325,"def get_Min_Squares(n):
    if n <= 3:
        return n;
    res = n 
    for x in range(1,n + 1):
        temp = x * x;
        if temp > n:
            break
        else:
            res = min(res,1 + get_Min_Squares(n  - temp)) 
    return res;",human
331,"def count_unset_bits(num):
    binary = bin(num)[2:]
    count = 0
    for bit in binary:
        if bit == '0':
            count += 1
    return count",lm
183,"def count_distinct_pairs(array, k):
    count = 0
    pairs = set()
    
    for num in array:
        if num + k in array and (num, num+k) not in pairs and (num+k, num) not in pairs:
            count += 1
            pairs.add((num, num+k))
            
    return count",lm
696,"def zip_lists(list1, list2):
    return list(zip(list1, list2))",lm
46,"def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;",human
487,"def sort_tuple(tup): 
	lst = len(tup) 
	for i in range(0, lst): 
		for j in range(0, lst-i-1): 
			if (tup[j][-1] > tup[j + 1][-1]): 
				temp = tup[j] 
				tup[j]= tup[j + 1] 
				tup[j + 1]= temp 
	return tup",human
470,"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",human
116,"def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result",human
486,"import math

def binomial_probability(n, x, p):
    q = 1 - p
    combination = math.comb(n, x)
    probability = combination * (p ** x) * (q ** (n - x))
    return probability


Note: This implementation assumes that the user will provide a valid input for `n`, `x`, and `p`.",lm
849,"def Sum(N): 
    SumOfPrimeDivisors = [0]*(N + 1)   
    for i in range(2,N + 1) : 
        if (SumOfPrimeDivisors[i] == 0) : 
            for j in range(i,N + 1,i) : 
                SumOfPrimeDivisors[j] += i           
    return SumOfPrimeDivisors[N] ",human
755,"def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[1] ",human
738,"def geometric_sum(n):
    if n == 0:
        return 1
    else:
        return 1 + 1/2**n + geometric_sum(n-1)",lm
229,"def rearrange_array(arr):
    neg_elements = [x for x in arr if x < 0]
    pos_elements = [x for x in arr if x >= 0]
    return neg_elements + pos_elements",lm
618,"def divide_lists(list1, list2):
    return list(map(lambda x, y: x / y, list1, list2))",lm
803,"def is_Perfect_Square(n) :
    i = 1
    while (i * i<= n):
        if ((n % i == 0) and (n / i == i)):
            return True     
        i = i + 1
    return False",human
209,"import heapq as hq
def heap_replace(heap,a):
  hq.heapify(heap)
  hq.heapreplace(heap, a)
  return heap",human
662,"def sorted_dict(dict1):
  sorted_dict = {x: sorted(y) for x, y in dict1.items()}
  return sorted_dict",human
337,"import re
def text_match_word(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'",human
253,"def count_integers(lst):
    count = 0
    for element in lst:
        if isinstance(element, int):
            count += 1
    return count",lm
672,"def find_maximum(num1, num2, num3):
    return max(num1, num2, num3)",lm
880,"def find_number_of_solutions(a, b, c):
    discriminant = (b**2) - (4*a*c)

    if discriminant > 0:
        return 2
    elif discriminant == 0:
        return 1
    else:
        return 0",lm
550,"def find_max_element(arr):
    left = 0
    right = len(arr) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if arr[mid] > arr[mid + 1]:
            return arr[mid]
        elif arr[left] <= arr[mid]:
            left = mid + 1
        else:
            right = mid - 1
    return arr[left]",lm
553,"def tuple_to_float(test_tup):
  res = float('.'.join(str(ele) for ele in test_tup))
  return (res) ",human
387,"def even_or_odd(N): 
    l = len(N) 
    if (N[l-1] =='0'or N[l-1] =='2'or 
        N[l-1] =='4'or N[l-1] =='6'or 
        N[l-1] =='8'or N[l-1] =='A'or 
        N[l-1] =='C'or N[l-1] =='E'): 
        return (""Even"") 
    else: 
        return (""Odd"") ",human
252,"import cmath

def complex_to_polar(complex_num):
    polar_coordinates = cmath.polar(complex_num)
    return polar_coordinates",lm
908,"def find_fixed_point(array):
    for i in range(len(array)):
        if array[i] == i:
            return i
    return -1",lm
488,"def find_area_of_pentagon(side_length):
    import math
    return (1/4) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) * side_length**2",lm
921,"def chunk_tuples(tuples, n):
    return [tuples[i:i+n] for i in range(0, len(tuples), n)]",lm
783,"def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v",human
376,"def remove_duplicates_replace(tup, custom_value):
    """"""
    Remove tuple elements that occur more than once and replace the duplicates with some custom value.

    Args:
        tup (tuple): The input tuple.
        custom_value (any): The custom value to replace the duplicates with.

    Returns:
        tuple: The modified tuple with duplicates replaced by the custom value.
    """"""
    return tuple([custom_value if tup.count(x) > 1 else x for x in tup])",lm
650,"Here is the implementation of the requested function:


def check_arrays_equal(arr1, arr2):
    return arr1 == arr2",lm
789,"def calculate_perimeter(n, s):
    return n * s",lm
173,"import re

def remove_special_characters(string):
    return re.sub(r'[^A-Za-z0-9]', '', string)",lm
104,"def sort_sublists(lst):
    return [sorted(sublist, key=lambda s: s.lower()) for sublist in lst]",lm
44,"def match_word(word, string):
    return string.startswith(word)",lm
212,"def sum_of_fourth_powers(n):
    """"""
    Calculate the sum of the fourth powers of n natural numbers.
    
    Parameters:
    n (int): The number of natural numbers to calculate the sum for.
    
    Returns:
    int: The sum of the fourth powers of n natural numbers.
    """"""
    return sum(i**4 for i in range(1, n+1))",lm
281,"Here is the generated code:


def check_unique_elements(lst):
    return len(lst) == len(set(lst))",lm
642,"def remove_similar_rows(matrix):
    return list(set(matrix))",lm
478,"def remove_lowercase_substrings(string):
    result = ''
    i = 0
    while i < len(string):
        if string[i].islower():
            j = i + 1
            while j < len(string) and string[j].islower():
                j += 1
            i = j
        else:
            result += string[i]
            i += 1
    return result",lm
628,"def replace_spaces(s):
    return s.replace("" "", ""%20"")",lm
719,"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
310,"def string_to_tuple(string):
    """"""
    Converts a given string to a tuple.
    
    Parameters:
    string (str): The string to be converted to a tuple.
    
    Returns:
    tuple: The converted tuple.
    """"""
    return tuple(string)",lm
353,"def remove_column(nested_list, column_index):
    for row in nested_list:
        del row[column_index]
    return nested_list",lm
405,"def check_element_exists(element, my_tuple):
    return element in my_tuple",lm
795,"import heapq
def cheap_items(items,n):
  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])
  return cheap_items",human
462,"def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result",human
853,"def sum_odd_factors(n):
    """"""
    Return the sum of the odd factors of a number.

    Parameters:
    n (int): The number to find the sum of odd factors.

    Returns:
    int: The sum of the odd factors of the number.
    """"""
    sum_of_factors = 0

    for i in range(1, n+1):
        if n % i == 0 and i % 2 != 0:
            sum_of_factors += i

    return sum_of_factors",lm
319,"import re

def find_five_character_words(string):
    # Write your code here
    pattern = r'\b\w{5}\b'
    return re.findall(pattern, string)",lm
29,"def find_odd_occurrence(arr):
    count = {}
    for num in arr:
        count[num] = count.get(num, 0) + 1
    for num, freq in count.items():
        if freq % 2 != 0:
            return num",lm
751,"def is_min_heap(arr):
    for i in range(len(arr)//2):
        if arr[i] > arr[2*i + 1]:
            return False
        if 2*i + 2 < len(arr) and arr[i] > arr[2*i + 2]:
            return False
    return True",lm
822,"import re
def pass_validity(p):
 x = True
 while x:  
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        return True
        x=False
        break

 if x:
    return False",human
287,"def sum_of_squares_of_first_n_even_numbers(n):
    sum_of_squares = 0
    for i in range(2, (2 * n) + 1, 2):
        sum_of_squares += i ** 2
    return sum_of_squares",lm
11,"def remove_first_last_occurrence(string, char):
    string = list(string)
    if char in string:
        string.remove(char)
    if char in string[::-1]:
        string.remove(char)
    return ''.join(string)",lm
805,"def max_sum_list(lists):
 return max(lists, key=sum)",human
142,"def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result",human
791,"def remove_nested_records(t):
    result = []
    for record in t:
        if not isinstance(record, tuple):
            result.append(record)
    return tuple(result)",lm
782,"def Odd_Length_Sum(arr):
    Sum = 0
    l = len(arr)
    for i in range(l):
        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])
    return Sum",human
74,"def check_sequence(patterns, sequence):
    return patterns == sequence",lm
698,"def sort_dict_item(test_dict):
  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}
  return  (res) 
",human
425,"def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr",human
515,"def subset_sum_divisible_by_m(arr, m):
    def check_subset_sum(arr, n, m, curr_sum, dp):
        if curr_sum % m == 0:
            return True
        if n == 0:
            return False
        if dp[n][curr_sum % m] != -1:
            return dp[n][curr_sum % m]
        dp[n][curr_sum % m] = check_subset_sum(arr, n-1, m, curr_sum, dp) or check_subset_sum(arr, n-1, m, (curr_sum + arr[n-1]) % m, dp)
        return dp[n][curr_sum % m]

    dp = [[-1]*(m+1) for _ in range(len(arr)+1)]
    return check_subset_sum(arr, len(arr), m, 0, dp)",lm
544,"def flatten_tuple_list(tuple_list):
    flattened = """"
    for tup in tuple_list:
        flattened += """".join(tup)
    return flattened",lm
310,"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",human
91,"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False",human
132,"def tup_string(tup1):
  str =  ''.join(tup1)
  return str",human
743,"This is your generated content:


def rotate_list(lst, n):
    return lst[-n:] + lst[:-n]",lm
65,"def recursive_list_sum(lst):
    if len(lst) == 0:
        return 0
    elif len(lst) == 1:
        return lst[0]
    else:
        return lst[0] + recursive_list_sum(lst[1:])",lm
881,"def sum_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even+first_odd)",human
491,"def sum_of_geometric_progression(a, r, n):
    if r == 1:
        return a * n
    else:
        return a * (1 - r**n) / (1 - r)",lm
759,"def is_decimal(num):
    import re
    dnumre = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
    result = dnumre.search(num)
    return bool(result)",human
190,"def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",human
479,"def first_Digit(n) :  
    while n >= 10:  
        n = n / 10; 
    return int(n) ",human
258,"def count_odd_elements(lst):
    odd_elements = len(list(filter(lambda x: x % 2 != 0, lst)))
    return odd_elements",lm
102,"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))",human
23,"def find_max_sum(list_of_lists):
    max_sum = float('-inf')
    for sublist in list_of_lists:
        sublist_sum = sum(sublist)
        if sublist_sum > max_sum:
            max_sum = sublist_sum
    return max_sum",lm
569,"def sort_sublists(string_lists):
    for sublist in string_lists:
        sublist.sort()
    return string_lists",lm
246,"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;",human
883,"def find_divisible_numbers(numbers, m, n):
    return list(filter(lambda x: x % m == 0 and x % n == 0, numbers))",lm
268,"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ",human
474,"def replace_characters(string, old_char, new_char):
    return string.replace(old_char, new_char)",lm
912,"def binomial_coeff(n, k): 
	C = [[0 for j in range(k + 1)] 
			for i in range(n + 1)] 
	for i in range(0, n + 1): 
		for j in range(0, min(i, k) + 1): 
			if (j == 0 or j == i): 
				C[i][j] = 1
			else: 
				C[i][j] = (C[i - 1][j - 1] 
							+ C[i - 1][j]) 
	return C[n][k] 
def lobb_num(n, m): 
	return (((2 * m + 1) *
		binomial_coeff(2 * n, m + n)) 
					/ (m + n + 1))",human
423,"def get_maxgold(gold, m, n): 
    goldTable = [[0 for i in range(n)] 
                        for j in range(m)]   
    for col in range(n-1, -1, -1): 
        for row in range(m):  
            if (col == n-1): 
                right = 0
            else: 
                right = goldTable[row][col+1] 
            if (row == 0 or col == n-1): 
                right_up = 0
            else: 
                right_up = goldTable[row-1][col+1] 
            if (row == m-1 or col == n-1): 
                right_down = 0
            else: 
                right_down = goldTable[row+1][col+1] 
            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) 
    res = goldTable[0][0] 
    for i in range(1, m): 
        res = max(res, goldTable[i][0])  
    return res ",human
648,"from itertools import zip_longest, chain, tee
def exchange_elements(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))",human
305,"def match_words(words):
    return [word for word in words if word.startswith('p')]",lm
496,"def find_smallest_integers(numbers):    
    import heapq
    
    # Create a min heap from the given list of numbers
    heapq.heapify(numbers)
    
    # Return the smallest integers from the heap
    return heapq.nsmallest(len(numbers), numbers)",lm
315,"def find_first_max_length_even_word(text):
    words = text.split()
    even_words = [word for word in words if len(word) % 2 == 0]

    if len(even_words) > 0:
        return max(even_words, key=len)
    else:
        return None",lm
793,"def last(arr,x,n):
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            low = mid + 1
    return res",human
906,"import re
def extract_date(url):
        return re.findall(r'/(\d{4})/(\d{1,2})/(\d{1,2})/', url)",human
771,"from collections import deque
def check_expression(exp):
    if len(exp) & 1:
        return False
    stack = deque()
    for ch in exp:
        if ch == '(' or ch == '{' or ch == '[':
            stack.append(ch)
        if ch == ')' or ch == '}' or ch == ']':
            if not stack:
                return False
            top = stack.pop()
            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):
                return False
    return not stack",human
30,"def count_substrings(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            if string[i] == string[j-1]:
                count += 1
    return count",lm
641,"def nth_nonagonal_number(n):
    return n * (7 * n - 5) / 2",lm
292,"def find(n,m):  
    q = n//m 
    return (q)",human
385,"def get_perrin(n):
  if (n == 0):
    return 3
  if (n == 1):
    return 0
  if (n == 2):
    return 2 
  return get_perrin(n - 2) + get_perrin(n - 3)",human
42,"def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])",human
283,"def check_digit_frequency(num):
    """"""
    Check whether the frequency of each digit is less than or equal to the digit itself.
    
    Args:
        num (int): The input number to check.
    
    Returns:
        bool: True if the frequency of each digit is less than or equal to the digit itself, False otherwise.
    """"""
    digits = [int(i) for i in str(num)]
    for digit in digits:
        frequency = digits.count(digit)
        if frequency > digit:
            return False
    return True",lm
933,"import re
def camel_to_snake(text):
  str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
  return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()",human
401,"def nested_tuple_addition(tuple1, tuple2):
    result = []
    for i in range(len(tuple1)):
        nested_result = []
        for j in range(len(tuple1[i])):
            nested_result.append(tuple1[i][j] + tuple2[i][j])
        result.append(tuple(nested_result))
    return tuple(result)",lm
576,"def is_subarray(arr, subarr):
    n = len(arr)
    m = len(subarr)
    
    for i in range(n - m + 1):
        found = True
        for j in range(m):
            if arr[i + j] != subarr[j]:
                found = False
                break
        if found:
            return True
    return False",lm
482,"import re 
def match(text): 
		pattern = '[A-Z]+[a-z]+$'
		if re.search(pattern, text): 
				return('Yes') 
		else: 
				return('No') ",human
841,"def get_inv_count(arr, n): 
	inv_count = 0
	for i in range(n): 
		for j in range(i + 1, n): 
			if (arr[i] > arr[j]): 
				inv_count += 1
	return inv_count ",human
130,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result",human
159,"def print_season(month: int, day: int) -> None:
    """"""
    Print the season for the given month and day.

    Parameters:
    - month: An integer representing the month (1-12).
    - day: An integer representing the day (1-31).

    Returns:
    None
    """"""

    seasons = {
        (12, 1): ""Winter"",
        (1, 1): ""Winter"",
        (2, 1): ""Winter"",
        (3, 1): ""Spring"",
        (4, 1): ""Spring"",
        (5, 1): ""Spring"",
        (6, 1): ""Summer"",
        (7, 1): ""Summer"",
        (8, 1): ""Summer"",
        (9, 1): ""Autumn"",
        (10, 1): ""Autumn"",
        (11, 1): ""Autumn"",
    }

    if (month, day) in seasons:
        print(seasons[(month, day)])
    else:
        print(""Invalid date"")",lm
922,"def find_highest_product_pair(arr):
    if len(arr) < 2:
        return ""Array should have at least 2 elements""
    
    max_product = float('-inf')
    max_pair = ()
    
    for i in range(len(arr) - 1):
        for j in range(i + 1, len(arr)):
            product = arr[i] * arr[j]
            if product > max_product:
                max_product = product
                max_pair = (arr[i], arr[j])
    
    if not max_pair:
        return ""No pair found""
    
    return max_pair",lm
88,"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count",human
660,"def choose_points(range1, range2):
    points = []
    for i in range1:
        if i not in range2:
            points.append(i)
    for j in range2:
        if j not in range1:
            points.append(j)
    return points",lm
686,"def find_frequency(lst):
    freq = {}
    for elem in lst:
        if elem in freq:
            freq[elem] += 1
        else:
            freq[elem] = 1
    return freq",lm
773,"def find_substring(string, substring):
    occurrences = []
    start = 0
    
    while True:
        index = string.find(substring, start)
        if index == -1:
            break
        occurrences.append(index)
        start = index + 1
        
    return occurrences",lm
667,"def Check_Vow(string, vowels): 
    final = [each for each in string if each in vowels] 
    return(len(final)) 
",human
897,"def check_word(sentence, word):
    """"""
    Check whether the word is present in a given sentence or not.
    
    Args:
    - sentence (str): A string representing the sentence to check for the word.
    - word (str): A string representing the word to search for.
    
    Returns:
    - bool: True if the word is found in the sentence, False otherwise.
    """"""
    if word in sentence:
        return True
    else:
        return False",lm
713,"def check_tuple(tuple_):
    return all(isinstance(value, bool) or isinstance(value, int) or isinstance(value, float) or isinstance(value, str) for value in tuple_)",lm
558,"def digit_distance(num1, num2):
    dist = 0
    for d1, d2 in zip(str(num1), str(num2)):
        dist += abs(int(d1) - int(d2))
    return dist",lm
96,"def find_number_of_divisors(n):
    count = 0
    for i in range(1, n+1):
        if n % i == 0:
            count += 1
    return count",lm
184,"def greater_specificnum(list,num):
 greater_specificnum=all(x >= num for x in list)
 return greater_specificnum",human
245,"def max_bitonicsubsequence(arr):
    '''
    Function to find the maximum sum of bi-tonic sub-sequence

    Parameters:
    arr (list): The input array

    Returns:
    int: The maximum sum of bi-tonic sub-sequence
    '''
    n = len(arr)
    inc = [0] * n
    dec = [0] * n

    # Compute increasing subarray
    for i in range(n):
        inc[i] = arr[i]
        for j in range(i):
            if arr[i] > arr[j]:
                inc[i] = max(inc[i], inc[j] + arr[i])

    # Compute decreasing subarray
    for i in range(n - 1, -1, -1):
        dec[i] = arr[i]
        for j in range(i + 1, n):
            if arr[i] > arr[j]:
                dec[i] = max(dec[i], dec[j] + arr[i])

    max_sum = float('-inf')

    # Compute maximum sum of bi-tonic sub-sequence
    for i in range(n):
        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])

    return max_sum",lm
231,"def find_maximum_sum(triangle):
    if not triangle:
        return None
    
    for i in range(len(triangle) - 2, -1, -1):
        for j in range(len(triangle[i])):
            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])
    
    return triangle[0][0]",lm
43,"import re

def find_sequences(text):
    pattern = r'[a-z]+_[a-z]+'
    sequences = re.findall(pattern, text)
    return sequences",lm
530,"def find_negative_ratio(arr):
    negative_count = 0
    total_count = len(arr)

    for num in arr:
        if num < 0:
            negative_count += 1

    return negative_count / total_count",lm
872,"def check_subset(list1,list2): 
    return all(map(list1.__contains__,list2)) ",human
314,"def max_sum_no_adjacent(grid):
    n = len(grid[0])
    if n == 0:
        return 0
    if n == 1:
        return max(grid[0][0], grid[1][0])

    dp = [0] * n
    dp[0] = max(grid[0][0], grid[1][0])
    dp[1] = max(dp[0], grid[0][1], grid[1][1])

    for i in range(2, n):
        dp[i] = max(dp[i-1], dp[i-2] + max(grid[0][i], grid[1][i]))

    return dp[n-1]",lm
641,"def is_nonagonal(n): 
	return int(n * (7 * n - 5) / 2) ",human
47,"def last_digit_factorial_division(a, b):
    def factorial(n):
        if n == 0 or n == 1:
            return 1
        else:
            return n * factorial(n-1)

    fact_a = factorial(a)
    fact_b = factorial(b)

    last_digit_a = fact_a % 10
    last_digit_b = fact_b % 10

    if last_digit_b == 0:
        return ""Undefined""
    else:
        return (last_digit_a // last_digit_b) % 10",lm
815,"def sort_array(arr):
    count = [0, 0, 0]
    for num in arr:
        count[num] += 1
    sorted_arr = []
    for i in range(3):
        sorted_arr += [i] * count[i]
    return sorted_arr",lm
422,"def average_of_cubes(n):
    if n < 1:
        return None
    sum_of_cubes = 0
    for num in range(1, n+1):
        sum_of_cubes += num ** 3
    average = sum_of_cubes / n
    return average",lm
349,"def is_binary_string(string):
    """"""
    Check whether the given string is a binary string or not.

    Args:
        string (str): The string to be checked.

    Returns:
        bool: True if the string is a binary string, False otherwise.
    """"""
    for char in string:
        if char != '0' and char != '1':
            return False
    return True",lm
58,"def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ",human
808,"def check_K(test_tup, K):
  res = False
  for ele in test_tup:
    if ele == K:
      res = True
      break
  return (res) ",human
625,"def interchange_elements(lst):
    if len(lst) < 2:
        return lst
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst",lm
20,"def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False",human
554,"def find_odd_numbers(mixed_list):
    odd_numbers = []
    for num in mixed_list:
        if num % 2 != 0:
            odd_numbers.append(num)
    return odd_numbers",lm
580,"def even_ele(test_tuple, even_fnc): 
	res = tuple() 
	for ele in test_tuple: 
		if isinstance(ele, tuple): 
			res += (even_ele(ele, even_fnc), ) 
		elif even_fnc(ele): 
			res += (ele, ) 
	return res 
def extract_even(test_tuple):
  res = even_ele(test_tuple, lambda x: x % 2 == 0)
  return (res) ",human
570,"def remove_words(words_list, character):
    new_words_list = []
    
    for word in words_list:
        if character in word:
            continue
        new_words_list.append(word)
    
    return new_words_list",lm
851,"def Sum_of_Inverse_Divisors(N,Sum): 
    ans = float(Sum)*1.0 /float(N);  
    return round(ans,2); ",human
32,"def largest_prime_factor(num):
    if num < 2:
        return None

    factor = 2
    while factor * factor <= num:
        if num % factor == 0:
            num //= factor
        else:
            factor += 1

    return num",lm
518,"import math
def sqrt_root(num):
 sqrt_root = math.pow(num, 0.5)
 return sqrt_root ",human
708,"def string_to_list(input_string):
    return list(input_string)",lm
252,"import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) ",human
93,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)",human
398,"def compute_sum_of_digits(numbers):
    """"""
    Compute the sum of digits of each number in a given list.

    Parameters:
    numbers (list): A list of integers.

    Returns:
    list: A list of sums of digits for each number in the input list.
    """"""

    result = []
    for number in numbers:
        total = 0
        for digit in str(number):
            total += int(digit)
        result.append(total)

    return result",lm
217,"def first_Repeated_Char(str): 
    h = {}
    for ch in str:
        if ch in h: 
            return ch;
        else: 
            h[ch] = 0
    return '\0'",human
332,"def count_character_frequency(string):
    """"""
    Function to count character frequency of a given string.
    
    Parameters:
    string (str): The string to count character frequency for.
    
    Returns:
    dict: A dictionary containing the frequency of each character in the string.
    """"""
    frequency = {}
    for char in string:
        if char in frequency:
            frequency[char] += 1
        else:
            frequency[char] = 1
    return frequency",lm
726,"def multiply_adjacent_elements(t):
    result = []
    for i in range(len(t)-1):
        result.append(t[i] * t[i+1])
    return result",lm
82,"import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume",human
247,"def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]",human
575,"def find_nth_not_multiple(n, given_number):
    count = 0
    number = 1
    while count < n:
        if number % given_number != 0:
            count += 1
        number += 1
    return number - 1",lm
612,"def merge_elements(list_of_lists):
    first_elements = [sublist[0] for sublist in list_of_lists]
    last_elements = [sublist[-1] for sublist in list_of_lists]
    
    return first_elements + last_elements",lm
700,"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr",human
572,"def remove_duplicates_from_lists(lists):
    """"""
    Remove two duplicate numbers from a given number of lists.

    Args:
        lists: A list of lists containing numbers.

    Returns:
        A list of lists with two duplicate numbers removed from each list.
    """"""
    result = []
    for l in lists:
        l = list(set(l))
        if len(l) > 2:
            result.append(l[:2])
        else:
            result.append(l)
    return result",lm
686,"from collections import defaultdict 
def freq_element(test_tup):
  res = defaultdict(int)
  for ele in test_tup:
    res[ele] += 1
  return (str(dict(res))) ",human
548,"def find_length_of_longest_increasing_subsequence(sequence):
    if not sequence:
        return 0
    
    dp = [1] * len(sequence)
    
    for i in range(1, len(sequence)):
        for j in range(i):
            if sequence[i] > sequence[j]:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)",lm
87,"import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict",human
187,"def longest_common_subsequence(seq1, seq2):
    m = len(seq1)
    n = len(seq2)
    
    # create a 2D array to store the lengths of common subsequences
    dp = [[0] * (n+1) for _ in range(m+1)]
    
    # fill the dp array
    for i in range(1, m+1):
        for j in range(1, n+1):
            if seq1[i-1] == seq2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    
    # get the longest common subsequence
    lcs = []
    i = m
    j = n
    while i > 0 and j > 0:
        if seq1[i-1] == seq2[j-1]:
            lcs.insert(0, seq1[i-1])
            i -= 1
            j -= 1
        elif dp[i-1][j] > dp[i][j-1]:
            i -= 1
        else:
            j -= 1
    
    return lcs",lm
291,"def num_ways_to_paint_fence(n, k):
    if n == 0:
        return 0
    
    same = 0
    diff = k
    
    for i in range(2, n + 1):
        temp = diff
        diff = (same + diff) * (k - 1)
        same = temp
    
    return same + diff",lm
595,"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) :  
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") ",human
217,"def find_first_repeated_character(string):
    """"""
    Finds the first repeated character in a given string.

    Args:
    - string: The input string.

    Returns:
    - The first repeated character, or None if no repeated character is found.
    """"""

    # Initialize an empty set to keep track of characters seen so far
    seen = set()

    # Iterate through each character in the string
    for char in string:
        # If the character is already in the set, it is a repeated character
        if char in seen:
            return char
        else:
            # Add the character to the set
            seen.add(char)

    # If no repeated character is found, return None
    return None",lm
128,"def shortlist_words(words, n):
    """"""
    Shortlists words longer than n from a given list of words.

    Parameters:
    words (list): A list of words.
    n (int): Minimum length of words to be shortlisted.

    Returns:
    list: A list of words longer than n.
    """"""
    return [word for word in words if len(word) > n]",lm
243,"def sort_on_occurence(lst): 
	dct = {} 
	for i, j in lst: 
		dct.setdefault(i, []).append(j) 
	return ([(i, *dict.fromkeys(j), len(j)) 
				for i, j in dct.items()]) ",human
147,"def max_path_sum(tri, m, n): 
	for i in range(m-1, -1, -1): 
		for j in range(i+1): 
			if (tri[i+1][j] > tri[i+1][j+1]): 
				tri[i][j] += tri[i+1][j] 
			else: 
				tri[i][j] += tri[i+1][j+1] 
	return tri[0][0]",human
492,"def binary_search(arr, target):
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        if arr[mid] == target:
            return True

        if arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return False",lm
671,"import math 
def get_Pos_Of_Right_most_Set_Bit(n): 
    return int(math.log2(n&-n)+1)   
def set_Right_most_Unset_Bit(n): 
    if (n == 0): 
        return 1
    if ((n & (n + 1)) == 0):     
        return n 
    pos = get_Pos_Of_Right_most_Set_Bit(~n)      
    return ((1 << (pos - 1)) | n) ",human
693,"import re
def remove_multiple_spaces(text1):
  return (re.sub(' +',' ',text1))",human
70,"def check_tuple_lengths(*tuples):
    """"""
    Check whether all the given tuples have equal length or not.

    Parameters:
    *tuples: Variable length argument representing the tuples to be checked.

    Returns:
    bool: True if all tuples have equal length, False otherwise.
    """"""
    return len(set(map(len, tuples))) == 1",lm
18,"NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ",human
959,"def Average(lst): 
    return sum(lst) / len(lst) ",human
128,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	",human
42,"def find_sum_repeated_elements(arr):
    repeated_elements = []
    for i in arr:
        if arr.count(i) > 1 and i not in repeated_elements:
            repeated_elements.append(i)
    return sum(repeated_elements)",lm
758,"def count_unique_lists(lst):
    unique_lists = set(tuple(x) for x in lst)
    return len(unique_lists)",lm
475,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter",human
922,"def max_product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return None     
    x = arr[0]; y = arr[1]    
    for i in range(0, arr_len): 
        for j in range(i + 1, arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y   ",human
36,"def find_nth_digit(numerator, denominator, n):
    """"""
    Find the nth digit in the proper fraction numerator/denominator

    Parameters:
    numerator (int): The numerator of the proper fraction.
    denominator (int): The denominator of the proper fraction.
    n (int): The position of the digit to find (1-indexed).

    Returns:
    str: The nth digit in the proper fraction numerator/denominator.
    """"""
    # Calculate the decimal representation of the fraction
    decimal = numerator / denominator

    # Convert the decimal to a string
    decimal_str = str(decimal)

    # Remove the decimal point
    decimal_str = decimal_str.replace('.', '')

    # Return the nth digit
    return decimal_str[n - 1]",lm
304,"def find_element(arr, index, rotations):
    if rotations >= len(arr):
        rotations = rotations % len(arr)
    rotated_arr = arr[rotations:] + arr[:rotations]
    return rotated_arr[index]",lm
358,"def modulo_division(list1, list2):
    result = list(map(lambda x, y: x % y, list1, list2))
    return result",lm
59,"def find_nth_octagonal_number(n):
    return n * (3 * n - 2)",lm
614,"def cumulative_sum(tuple_list):
    result = 0
    for tuple_val in tuple_list:
        result += sum(tuple_val)
    return result",lm
24,"def binary_to_decimal(binary):
    decimal = 0
    power = 0
    while binary > 0:
        decimal += (binary % 10) * (2 ** power)
        binary //= 10
        power += 1
    return decimal",lm
863,"def find_longest_consecutive_subsequence_length(arr):
    max_length = 0
    num_set = set(arr)

    for num in num_set:
        if num - 1 not in num_set:
            current_num = num
            current_length = 1

            while current_num + 1 in num_set:
                current_num += 1
                current_length += 1

            max_length = max(max_length, current_length)

    return max_length",lm
270,"def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum",human
835,"def find_slope(x1, y1, x2, y2):
    return (y2 - y1) / (x2 - x1)",lm
967,"def check(string): 
  if len(set(string).intersection(""AEIOUaeiou""))>=5: 
    return ('accepted') 
  else: 
    return (""not accepted"") ",human
163,"def calculate_area(num_sides, side_length):
    """"""
    Calculates the area of a regular polygon.
    
    Parameters:
    - num_sides (int): The number of sides of the polygon.
    - side_length (float): The length of each side of the polygon.
    
    Returns:
    - float: The area of the polygon.
    """"""
    import math
    
    perimeter = num_sides * side_length
    apothem = side_length / (2 * math.tan(math.pi / num_sides))
    
    area = (perimeter * apothem) / 2
    
    return area",lm
926,"def rencontres_number(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return 2 * rencontres_number(n-1) - rencontres_number(n-2)",lm
14,"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ",human
621,"def increment_numerics(test_list, K):
  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]
  return res ",human
654,"def rectangle_perimeter(l,b):
  perimeter=2*(l+b)
  return perimeter",human
175,"def verify_parentheses(string):
    stack = []
    for char in string:
        if char == '(':
            stack.append('(')
        elif char == ')':
            if not stack: return False
            stack.pop()
    return len(stack) == 0",lm
761,"import math

def calculate_arc_length(angle, radius):
    """"""
    Calculates the arc length of an angle.

    Parameters:
    angle (float): The angle in radians.
    radius (float): The radius of the circle.

    Returns:
    float: The arc length of the angle.
    """"""
    return angle * radius",lm
650,"def are_Equal(arr1,arr2,n,m):
    if (n != m):
        return False
    arr1.sort()
    arr2.sort()
    for i in range(0,n - 1):
        if (arr1[i] != arr2[i]):
            return False
    return True",human
304,"def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] ",human
657,"import math 
def first_Digit(n) : 
    fact = 1
    for i in range(2,n + 1) : 
        fact = fact * i 
        while (fact % 10 == 0) :  
            fact = int(fact / 10) 
    while (fact >= 10) : 
        fact = int(fact / 10) 
    return math.floor(fact) ",human
790,"def even_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))",human
145,"def max_Abs_Diff(arr,n): 
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ",human
935,"def calculate_sum_of_series(n):
    sum_of_series = 0
    for i in range(1, n+1):
        sum_of_series += i**2
    return sum_of_series",lm
238,"Here's the generated code for the given task:


def count_substrings(input_string):
    count = 0
    for i in range(len(input_string)):
        for j in range(i+1, len(input_string)+1):
            if input_string[i:j] != '':
                count += 1
    return count


Note: This code counts all the non-empty substrings of a given string.",lm
223,"def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1",human
446,"from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  ",human
127,"def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)",human
815,"def sort_by_dnf(arr, n):
  low=0
  mid=0
  high=n-1
  while mid <= high:
    if arr[mid] == 0:
      arr[low], arr[mid] = arr[mid], arr[low]
      low = low + 1
      mid = mid + 1
    elif arr[mid] == 1:
      mid = mid + 1
    else:
      arr[mid], arr[high] = arr[high], arr[mid]
      high = high - 1
  return arr",human
894,"def convert_string_to_tuple(string):
    return tuple(map(float, string.split()))",lm
414,"def check_value_exists(sequence, value):
    return value in sequence",lm
902,"def combine_dictionaries(dict1, dict2):
    combined_dict = {}
    for key in dict1:
        if key in dict2:
            combined_dict[key] = dict1[key] + dict2[key]
    return combined_dict",lm
51,"def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False",human
741,"def all_Characters_Same(s) :
    n = len(s)
    for i in range(1,n) :
        if s[i] != s[0] :
            return False
    return True",human
850,"def is_triangleexists(a,b,c): 
    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): 
        if((a + b)>= c or (b + c)>= a or (a + c)>= b): 
            return True 
        else:
            return False
    else:
        return False",human
485,"def find_largest_palindromic_number(arr):
    largest_palindrome = None
    for num in arr:
        if str(num) == str(num)[::-1]:
            if largest_palindrome is None or num > largest_palindrome:
                largest_palindrome = num
    return largest_palindrome",lm
840,"def check_roots(a, b, c):
    """"""
    Check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.
    
    Arguments:
    a -- coefficient of x^2 term (integer or float)
    b -- coefficient of x term (integer or float)
    c -- constant term (integer or float)
    
    Returns:
    True if the roots are numerically equal but opposite in sign, False otherwise
    """"""

    # Calculate discriminant
    disc = b**2 - 4*a*c
    
    if disc >= 0:
        # Calculate the roots
        root1 = (-b + disc ** 0.5) / (2*a)
        root2 = (-b - disc ** 0.5) / (2*a)
        
        if root1 == -root2:
            return True
    
    return False",lm
605,"def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number ** 0.5) + 1):
        if number % i == 0:
            return False
    return True",lm
407,"def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False",human
120,"def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max",human
440,"def find_adverbs(sentence):
    adverbs = []
    words = sentence.split()
    
    for i, word in enumerate(words):
        if word.endswith(""ly""):
            adverbs.append((word, i))
            
    return adverbs",lm
805,"def find_highest_sum_list(list_of_lists):
    highest_sum_list = None
    highest_sum = float('-inf')
    
    for sublist in list_of_lists:
        current_sum = sum(sublist)
        
        if current_sum > highest_sum:
            highest_sum = current_sum
            highest_sum_list = sublist
    
    return highest_sum_list",lm
485,"def is_palindrome(n) : 
	divisor = 1
	while (n / divisor >= 10) : 
		divisor *= 10
	while (n != 0) : 
		leading = n // divisor 
		trailing = n % 10
		if (leading != trailing) : 
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) : 
	A.sort() 
	for i in range(n - 1, -1, -1) : 
		if (is_palindrome(A[i])) : 
			return A[i] 
	return -1",human
902,"from collections import Counter
def add_dict(d1,d2):
   add_dict = Counter(d1) + Counter(d2)
   return add_dict",human
557,"def toggle_case(string):
    toggled_string = """"
    for char in string:
        if char.islower():
            toggled_string += char.upper()
        elif char.isupper():
            toggled_string += char.lower()
        else:
            toggled_string += char
    return toggled_string",lm
803,"def is_perfect_square(number):
    """"""
    Check whether the given number is a perfect square or not.

    Args:
    number (int): The number to be checked.

    Returns:
    bool: True if the number is a perfect square, False otherwise.
    """"""

    if number < 0:
        return False

    if number == 0 or number == 1:
        return True

    left = 2
    right = number // 2

    while left <= right:
        mid = (left + right) // 2
        square = mid * mid

        if square == number:
            return True

        if square < number:
            left = mid + 1
        else:
            right = mid - 1

    return False",lm
868,"def length_Of_Last_Word(a): 
    l = 0
    x = a.strip() 
    for i in range(len(x)): 
        if x[i] == "" "": 
            l = 0
        else: 
            l += 1
    return l ",human
481,"def is_subset_sum(set, sum):
    n = len(set)
    subset = [[False for j in range(sum + 1)] for i in range(n + 1)]

    for i in range(n + 1):
        subset[i][0] = True

    for i in range(1, sum + 1):
        subset[0][i] = False

    for i in range(1, n + 1):
        for j in range(1, sum + 1):
            if j < set[i - 1]:
                subset[i][j] = subset[i - 1][j]
            if j >= set[i - 1]:
                subset[i][j] = (subset[i - 1][j] or subset[i - 1][j - set[i - 1]])

    return subset[n][sum]",lm
958,"def int_to_roman( num):
        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]
        syb = [""M"", ""CM"", ""D"", ""CD"",""C"", ""XC"", ""L"", ""XL"",""X"", ""IX"", ""V"", ""IV"",""I""]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num",human
112,"def find_cylinder_perimeter(radius, height):
    return 2 * 3.14159 * radius + 2 * 3.14159 * radius * height",lm
467,"def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)",human
89,"def closest_num(N):
  return (N - 1)",human
566,"def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))",human
195,"def first(arr,x,n): 
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            high = mid - 1
    return res",human
443,"def find_largest_negative(numbers):
    negative_numbers = [num for num in numbers if num < 0]
    if negative_numbers:
        return max(negative_numbers)
    else:
        return None",lm
286,"def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far",human
931,"import math 
def sum_series(number):
 total = 0
 total = math.pow((number * (number + 1)) /2, 2)
 return total",human
689,"def min_jumps(array):
    n = len(array)
    if n <= 1:
        return 0
    if array[0] == 0:
        return -1
    max_reach = array[0]
    steps = array[0]
    jumps = 1
    for i in range(1, n):
        if i == n - 1:
            return jumps
        max_reach = max(max_reach, i + array[i])
        steps -= 1
        if steps == 0:
            jumps += 1
            if i >= max_reach:
                return -1
            steps = max_reach - i
    return -1",lm
762,"def check_monthnumber_number(monthnum3):
  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):
    return True
  else:
    return False",human
905,"def sum_of_squares_binomial(n):
    """"""
    Calculate the sum of squares of binomial coefficients.
    
    Parameters:
    n (int): The number of binomial coefficients to consider.
    
    Returns:
    int: The sum of squares of binomial coefficients.
    """"""
    result = 0
    for k in range(n+1):
        result += choose(n, k) ** 2
    return result
    
def choose(n, k):
    """"""
    Calculate the binomial coefficient given n and k.
    
    Parameters:
    n (int): The total number of elements.
    k (int): The number of elements to choose.
    
    Returns:
    int: The binomial coefficient.
    """"""
    if k == 0 or k == n:
        return 1
    elif k > n or k < 0:
        return 0
    else:
        return factorial(n) // (factorial(k) * factorial(n-k))
    
def factorial(n):
    """"""
    Calculate the factorial of a number.
    
    Parameters:
    n (int): The number to calculate the factorial of.
    
    Returns:
    int: The factorial of n.
    """"""
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n-1)",lm
434,"import re

def match_string(string):
    pattern = 'ab+'
    if re.match(pattern, string):
        return True
    else:
        return False",lm
897,"def is_Word_Present(sentence,word): 
    s = sentence.split("" "") 
    for i in s:  
        if (i == word): 
            return True
    return False",human
852,"def remove_negative_numbers(lst):
    """"""
    Remove negative numbers from a list.

    Parameters:
    lst (list): A list of numbers.

    Returns:
    list: A new list without negative numbers.
    """"""
    return [num for num in lst if num >= 0]",lm
468,"def max_product_subsequence(arr):
   n = len(arr)
   if n == 0:
       return 0
   dp = [0] * n
   for i in range(n):
       max_val = 0
       for j in range(i):
           if arr[j] < arr[i]:
               max_val = max(max_val, dp[j])
       dp[i] = max_val + arr[i]
   return max(dp)",lm
693,"import re

def remove_multiple_spaces(string):
    return re.sub(r'\s+', ' ', string)",lm
937,"from collections import Counter 
def max_char(str1):
    temp = Counter(str1) 
    max_char = max(temp, key = temp.get)
    return max_char",human
125,"def find_length(string, n): 
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0",human
118,"def string_to_list(string):
    """"""
    Convert a string to a list.

    Parameters:
    string (str): The input string.

    Returns:
    list: A list containing individual characters of the input string.
    """"""
    return list(string)",lm
13,"from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
",human
953,"def find_min_subsets(arr):
    unique_elements = set(arr)
    return len(unique_elements)",lm
661,"def max_sum_of_three_consecutive(arr, n): 
	sum = [0 for k in range(n)] 
	if n >= 1: 
		sum[0] = arr[0] 
	if n >= 2: 
		sum[1] = arr[0] + arr[1] 
	if n > 2: 
		sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) 
	for i in range(3, n): 
		sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) 
	return sum[n-1]",human
267,"def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ",human
90,"def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max",human
268,"def find_star_number(n):
    return n ** 2 + n",lm
445,"def multiply_tuples(t1, t2):
    """"""
    Performs index wise multiplication of tuple elements.

    Parameters:
    t1 (tuple): The first input tuple.
    t2 (tuple): The second input tuple.

    Returns:
    tuple: The resulting tuple after index wise multiplication of elements.
    """"""
    return tuple(x * y for x, y in zip(t1, t2))",lm
290,"def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)",human
105,"def count_true_booleans(lst):
    count = 0
    for item in lst:
        if item == True:
            count += 1
    return count",lm
235,"def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) ",human
552,"def check_linear(sequence):
    """"""
    Check whether a given sequence is linear or not.

    Parameters:
    sequence (list): The input sequence to check.

    Returns:
    bool: True if the sequence is linear, False otherwise.
    """"""
    if len(sequence) < 2:
        return True
    
    difference = sequence[1] - sequence[0]
    
    for i in range(2, len(sequence)):
        if sequence[i] - sequence[i-1] != difference:
            return False
    
    return True",lm
7,"def find_long_words(string):
    import re
    pattern = r'\b\w{4,}\b'
    words = re.findall(pattern, string)
    return words",lm
352,"def is_unique_string(string):
    """"""
    Function to check whether all the characters in a given string are unique.
    
    Parameters:
    string (str): The input string to check.
    
    Returns:
    bool: True if all characters are unique, False otherwise.
    """"""
    return len(set(string)) == len(string)",lm
957,"def get_rightmost_set_bit_position(num):
    return num & -num",lm
957,"import math
def get_First_Set_Bit_Pos(n):
     return math.log2(n&-n)+1",human
370,"def float_sort(price):
  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)
  return float_sort",human
679,"def access_dictionary_key(dictionary, index):
    return list(dictionary.keys())[index]",lm
