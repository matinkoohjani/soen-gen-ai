idx,code,label
886,"def avg(nums):
    sum, len = 0, len(nums)
    for n in nums:
        sum += int(n)
    return sum / len",lm
682,"def mul_list(nums1,nums2):
  result = map(lambda x, y: x * y, nums1, nums2)
  return list(result)",human
52,"def parallelogram_area(base, height):
    return base*height",lm
323,"def rearrange(arr):
    i=-1
    for j in range(len(arr)):
        if arr[j] < 0:
            i=i+1
            arr[i], arr[j] = arr[j], arr[i]
    pos = i+1
    neg = 0
    while(pos < len(arr) and neg < pos and arr[neg] < 0):
        arr[pos], arr[neg] = arr[neg], arr[pos]
        pos = pos+1
        neg = neg+2
    return arr",lm
376,"3
def remove_duplicates(test_tup, fill_val): 
  res = [] 
  seen = set() 
  for ele in test_tup: 
    if ele not in seen: 
      res.append(ele) 
      seen.add(ele) 
    else: 
      res.append(fill_val) 
  return (res)",lm
649,"def sum_of_range_in_list(list1, start_index, end_index):
    return sum(list1[start_index:end_index + 1])",lm
191,"def check_monthnumber(monthname3):
  if monthname3 ==""April"" or monthname3== ""June"" or monthname3== ""September"" or monthname3== ""November"":
    return True
  else:
    return False",human
688,"import cmath

def get_length_complex(complex_num):
    """"""Get the length of a complex number.""""""
    return abs(complex_num)",lm
231,"def max_sum(tri, n): 
	if n > 1: 
		tri[1][1] = tri[1][1]+tri[0][0] 
		tri[1][0] = tri[1][0]+tri[0][0] 
	for i in range(2, n): 
		tri[i][0] = tri[i][0] + tri[i-1][0] 
		tri[i][i] = tri[i][i] + tri[i-1][i-1] 
		for j in range(1, i): 
			if tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: 
				tri[i][j] = tri[i][j] + tri[i-1][j-1] 
			else: 
				tri[i][j] = tri[i][j]+tri[i-1][j] 
	return (max(tri[n-1]))",human
636,"def Check_Solution(a,b,c): 
    if (a == c): 
        return (""Yes""); 
    else: 
        return (""No""); ",human
869,"def remove_list_range(list1, leftrange, rigthrange):
   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]
   return result",human
657,"def findFirstDigit(n):
    if n >= 0:
        factorial = 1
        for i in range(2, n + 1):
            factorial *= i
        
        digit = str(factorial)
        firstDigit = digit[0]
        return firstDigit
    else:
        return -1",lm
590,"def polar_to_rect(polar):
    """"""Convert polar coordinates to rectangular coordinates.

    Args:
        polar: A tuple (r, theta) where r is the radius and theta is the angle in
            radians.

    Returns:
        A tuple (x, y) where x and y are the rectangular coordinates.
    """"""

    r, theta = polar
    x = r * math.cos(theta)
    y = r * math.sin(theta)
    return (x, y)",lm
656,"def minSum(A, B, n):
	# Sort both arrays
	A.sort()
	B.sort()
	ans = 0

	for i in range(n):
		ans += abs(A[i] - B[i])

	return ans",lm
453,"def sum_of_even_factors(n):
    sum = 0
    for i in range(1, int(n ** 0.5) + 1):
        if n % i == 0:
            if i % 2 == 0:
                sum += i
            if n // i != i and (n // i) % 2 == 0:
                sum += n // i
    return sum",lm
374,"def all_perms(s):
  if len(s) == 1:
    return [s]

  result = []

  for i in range(len(s)):
    for perm in all_perms(s[:i] + s[i+1:]):
      result.append(s[i] + perm)

  return result",lm
263,"def merge_dict(d1,d2):
 d = d1.copy()
 d.update(d2)
 return d",human
571,"def max_sum_pair_diff_lessthan_K(arr, N, K): 
	arr.sort() 
	dp = [0] * N 
	dp[0] = 0
	for i in range(1, N): 
		dp[i] = dp[i-1] 
		if (arr[i] - arr[i-1] < K): 
			if (i >= 2): 
				dp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); 
			else: 
				dp[i] = max(dp[i], arr[i] + arr[i-1]); 
	return dp[N - 1]",human
412,"def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l",human
174,"def group_keyvalue(l):
    result = {}
    for k, v in l:
         result.setdefault(k, []).append(v)
    return result",human
827,"def sum_column(list1, C):
    result = sum(row[C] for row in list1)
    return result",human
925,"def mutiple_tuple(nums):
    temp = list(nums)
    product = 1 
    for x in temp:
        product *= x
    return product",human
504,"def sum_Of_Series(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += i * i*i       
    return sum",human
640,"def remove_parentheses_area(s):
    open_parens = []
    result = []
    for char in s:
        if char == '(':
            open_parens.append(char)
        elif char == ')' and open_parens:
             open_parens.pop()
        elif not open_parens:
            result.append(char)
    return ''.join(result)",lm
349,"def is_binary_string(s):
    """"""
    Check whether the given string is a binary string or not.
    """"""
    for c in s:
        if c not in ['0', '1']:
            return False
    return True",lm
139,"def find_circumference(radius):
  from math import pi
  return 2 * pi * radius",lm
811,"def check_if_lists_of_tuples_are_identical(list1, list2):
    if len(list1) != len(list2):
        return False
    for i in range(len(list1)):
        if list1[i] != list2[i]:
            return False
    return True",lm
446,"from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  ",human
261,"def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",human
174,"def group_by_key(lst):
    result = {}
    for key, value in lst:
        result.setdefault(key, []).append(value)
    return result",lm
758,"def unique_sublists(list1):
    result ={}
    for l in  list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result",human
497,"import math
def surfacearea_cone(r,h):
  l = math.sqrt(r * r + h * h)
  SA = math.pi * r * (r + l)
  return SA",human
511,"def min_sum_factors(n):
    sum = 1
    i = 2
    while i*i <= n:
        if n % i == 0:
            sum += i
            if n//i != i:
                sum += n//i
        i += 1
    return sum",lm
359,"def Check_Solution(a,b,c): 
    if (2*b*b == 9*a*c): 
        return (""Yes""); 
    else: 
        return (""No""); ",human
506,"def permutation_coefficient(n, k):
    """"""Return the number of ways to choose k unordered objects from n objects.""""""
    if k < 0 or k > n:
        return 0  # Error condition.
    # Use the formula `P(n,k) = n! / (n-k)!`.
    factorials = [1]
    for i in range(1, n + 1):
        factorials.append(i * factorials[-1])
    return factorials[n] // factorials[n - k]",lm
886,"def sum_num(numbers):
    total = 0
    for x in numbers:
        total += x
    return total/len(numbers) ",human
877,"def sort_String(str) : 
    str = ''.join(sorted(str)) 
    return (str) ",human
275,"def last_removed(arr,arr_size):
    del arr[arr_size-1]
    return arr

arr=[1,2,3,4,5,6]
arr_size=len(arr)

print (""Array after removing last element : "" + str(last_removed(arr,arr_size)))",lm
973,"def leftrotate_string(str1, pos):
    temp = str1[:pos]
    str1 = str1[pos:]
    str1 = str1 + temp
    return str1",lm
956,"import re
def split_list(text):
  return (re.findall('[A-Z][^A-Z]*', text))",human
125,"def find_length(string, n): 
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0",human
745,"def divisible_by_digits(start, end):
    result = []
    for num in range(start, end + 1):
        num_str = str(num)
        divisible = True
        for digit in num_str:
            digit = int(digit)
            if digit != 0 and num % digit != 0:
                divisible = False
                break
        if divisible:
            result.append(num)
    return result",lm
637,"3
def no_profit_no_loss(amount):
    return amount[0] == amount[1]",lm
378,"def move_first(test_list):
  test_list = test_list[-1:] + test_list[:-1]  
  return test_list",human
228,"def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False",human
499,"def diameter_circle(r):
  diameter=2*r
  return diameter",human
120,"def maximum_product(lst): 
    mx = 0
    for a,b in lst: 
        mx = max(mx,a*b) 
    return mx",lm
5,"def ways_to_fill_board(n):
    """"""
    Finds the number of ways to fill a 3 x n board with 2 x 1 dominoes.

    Args:
    n: The number of columns in the board.

    Returns:
    The number of ways to fill the board.
    """"""

    # Base cases
    if n == 0:
        return 1
    if n == 1:
        return 0

    # Recursive case
    return ways_to_fill_board(n - 1) + ways_to_fill_board(n - 2)",lm
231,"def max_sum_triangle(triangle):
    for i in range(len(triangle) - 2, -1, -1):
        for j in range(i + 1):
            triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])
    return triangle[0][0]",lm
111,"def find_common_elements(nested_lists):
    unique_elements = set(nested_lists[0])
    for lst in nested_lists[1:]:
        unique_elements = unique_elements.intersection(set(lst))
    return list(unique_elements)",lm
358,"def modulo_division(list1, list2): 
    result = list(map(lambda x, y: x % y, list1, list2))
    return result",lm
712,"import itertools
def remove_duplicate(list1):
 list.sort(list1)
 remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))
 return remove_duplicate",human
731,"def lateral_surface_area_cone(radius, height):
  """"""Calculates the lateral surface area of a cone.

  Args:
    radius: The radius of the cone's base in meters.
    height: The height of the cone in meters.

  Returns:
    The lateral surface area of the cone in square meters.
  """"""

  from math import pi
  return pi * radius * height",lm
938,"import sys 

def find_closet(A, B, C, p, q, r): 
	diff = sys.maxsize 
	res_i = 0
	res_j = 0
	res_k = 0
	i = 0
	j = 0
	k = 0
	while(i < p and j < q and k < r): 
		minimum = min(A[i], min(B[j], C[k])) 
		maximum = max(A[i], max(B[j], C[k])); 
		if maximum-minimum < diff: 
			res_i = i 
			res_j = j 
			res_k = k 
			diff = maximum - minimum; 
		if diff == 0: 
			break
		if A[i] == minimum: 
			i = i+1
		elif B[j] == minimum: 
			j = j+1
		else: 
			k = k+1
	return A[res_i],B[res_j],C[res_k]",human
778,"def pack_duplicates(nums):
    result = []
    i = 0
    while i < len(nums):
        count = 1
        while i + 1 < len(nums) and nums[i] == nums[i + 1]:
            count += 1
            i += 1
        result.append([nums[i]] * count)
        i += 1
    return result",lm
399,"def bitwise_xor_tuples(tuple1, tuple2):
    if len(tuple1) != len(tuple2):
        raise ValueError(""Tuples must have the same length"")

    result = []
    for i in range(len(tuple1)):
        result.append(tuple1[i] ^ tuple2[i])

    return tuple(result)",lm
598,"def armstrong_number(number):
 sum = 0
 times = 0
 temp = number
 while temp > 0:
           times = times + 1
           temp = temp // 10
 temp = number
 while temp > 0:
           reminder = temp % 10
           sum = sum + (reminder ** times)
           temp //= 10
 if number == sum:
           return True
 else:
           return False",human
199,"def highest_power_of_2(number):
    """"""
    Finds the highest power of 2 less than or equal to the given number.

    :param number: The number to find the highest power of 2 for.
    :type number: int
    :raises TypeError: if number is not an integer.
    :raises ValueError: if number is negative.
    :returns: The highest power of 2 less than or equal to the given number.
    :rtype: int
    """"""

    if not isinstance(number, int):
        raise TypeError(""Number must be an integer."")

    if number < 0:
        raise ValueError(""Number must be non-negative."")

    if number == 0:
        return 0

    highest_power = 1

    while highest_power * 2 <= number:
        highest_power *= 2

    return highest_power",lm
294,"def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)",human
869,"def remove_sublists_outside_range(list_of_lists, start, end):
    """"""
    Remove sublists from a given list of lists, which are outside a given range.
    """"""
    return [sublist for sublist in list_of_lists if start <= sublist[0] <= end and start <= sublist[-1] <= end]",lm
164,"import math 
def divSum(n): 
    sum = 1; 
    i = 2; 
    while(i * i <= n): 
        if (n % i == 0): 
            sum = (sum + i +math.floor(n / i)); 
        i += 1; 
    return sum; 
def areEquivalent(num1,num2): 
    return divSum(num1) == divSum(num2); ",human
246,"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;",human
320,"def difference_squared_sum_and_sum_squared(n):
    squared_sum = n*(n+1)*(2*n+1) // 6
    sum_squared = (n*(n+1) // 2)**2
    return squared_sum - sum_squared",lm
853,"def sum_odd_factors(num):
  sum = 0
  for i in range(1, num + 1):
    if i % 2 == 1 and num % i == 0:
      sum += i
  return sum",lm
240,"def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
",human
591,"def interchange_first_last(list1):
    temp = list1[0]
    list1[0] = list1[len(list1)-1]
    list1[len(list1)-1] = temp
    return list1",lm
370,"def sort_tuple_by_float(tuple_list):
  return sorted(tuple_list, key=lambda x: x[1])",lm
819,"def count_consecutive_duplicates(nums):
    if not nums:
        return {}
    counts = {}
    current = nums[0]
    count = 0
    for num in nums:
        if num == current:
            count += 1
        else:
            counts[current] = count
            current = num
            count = 1
    counts[current] = count
    return counts",lm
432,"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median",human
831,"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] == arr[j]): 
                cnt += 1; 
    return cnt; ",human
417,"def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] ",human
492,"def binary_search(arr, x):
    low = 0
    high = len(arr) - 1
    mid = 0

    while low <= high:

        mid = (high + low) // 2

        # If x is greater, ignore left half
        if arr[mid] < x:
            low = mid + 1

        # If x is smaller, ignore right half
        elif arr[mid] > x:
            high = mid - 1

        # means x is present at mid
        else:
            return mid

    # If we reach here, then the element was not present
    return -1",lm
489,"def frequency_Of_Largest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] >mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ",human
427,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)",human
838,"def minSwaps(s1, s2):
    n = len(s1)
    if len(s2) != n:
        return -1
    arr = [0] * n
    for i in range(0,n):
        if s1[i] != s2[i]:
            arr[i] = 1
    swaps = 0
    cnt = 0
    for i in range(0,n):
        cnt += arr[i]
    k = cnt
    for i in range(0,n):
        if arr[i] == 1:
            k -= 1
        if k == 0:
            break
        swaps += 1
    return swaps",lm
195,"def find_first_position(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            if mid == 0 or arr[mid - 1] != target:
                return mid
            else:
                right = mid - 1
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1",lm
787,"def match_string(s):
  if len(s) < 4:
    return False
  return s[0] == ""a"" and s[1] == ""b"" and s[2] == ""b"" and s[3] == ""b""",lm
537,"def first_repeated_word(str1):
  temp = set()
  for word in str1.split():
    if word in temp:
      return word;
    else:
      temp.add(word)
  return 'None'",human
92,"def is_undulating(n):
    s = list(str(n))
    return all(int(s[i]) > int(s[i-1]) for i in range(1, len(s))) or all(int(s[i]) < int(s[i-1]) for i in range(1, len(s)))",lm
760,"def unique_Element(arr,n):
    s = set(arr)
    if (len(s) == 1):
        return ('YES')
    else:
        return ('NO')",human
360,"def carol(n):
    if n == 0:
        return 1
    return (2*n+1)*(2*n+3)*carol(n-1)",lm
816,"def clear_tuple(test_tup):
  temp = list(test_tup)
  temp.clear()
  test_tup = tuple(temp)
  return (test_tup) ",human
796,"def find_sum(dictionary):
  total = 0
  for value in dictionary.values():
    total += value
  return total",lm
385,"def perrin(n):
    if n < 2:
        return n
    else:
        return perrin(n-2) + perrin(n-3)",lm
799,"INT_BITS = 32
def left_Rotate(n,d):   
    return (n << d)|(n >> (INT_BITS - d))  ",human
344,"def count_odd(l, r): 
    cnt = 0
    for i in range(l,r+1): 
        ctr = 0
        x = i 
        for j in range(1,int(i**.5)+1): 
            if x%j==0: 
                ctr+=1
                if x//j!=j: 
                   ctr+=1
        if ctr%2!=0: 
            cnt+=1
    return cnt",lm
325,"def get_Min_Squares(n):
    if n <= 3:
        return n;
    res = n 
    for x in range(1,n + 1):
        temp = x * x;
        if temp > n:
            break
        else:
            res = min(res,1 + get_Min_Squares(n  - temp)) 
    return res;",human
589,"def find_perfect_squares(n1,n2):
  perfect_squares=[]
  for i in range(n1,n2+1):
    if i**0.5 == int(i**0.5):
      perfect_squares.append(i)
  return perfect_squares",lm
252,"def complex_to_polar(complex_num):
    magnitude = abs(complex_num)
    angle = np.angle(complex_num)
    return magnitude, angle",lm
675,"def sum_nums(x, y,m,n):
    sum_nums= x + y
    if sum_nums in range(m, n):
        return 20
    else:
        return sum_nums",human
712,"def remove_duplicates_from_list_of_lists(list_of_lists):
    """"""Remove duplicates from a list of lists.""""""
    unique_lists = []
    for list1 in list_of_lists:
        if list1 not in unique_lists:
            unique_lists.append(list1)
    return unique_lists",lm
879,"import re
def text_match(text):
  patterns = 'a.*?b$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')",human
450,"def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result",human
341,"3
def set_to_ordered_tuples(set1):
    return tuple((i, set1[i]) for i in sorted(set1))",lm
683,"def check_two_squares(n):
    """"""
    Checks if a given number can be represented by the sum of two squares of integers.

    Args:
        n (int): The number to check.

    Returns:
        bool: True if the number can be represented by the sum of two squares, False otherwise.
    """"""

    # Check for perfect squares
    if int(n**0.5)**2 == n:
        return True

    # Check for numbers that can be represented by the sum of two squares
    for i in range(1, int(n**0.5)+1):
        if int((n - i**2)**0.5)**2 + i**2 == n:
            return True

    return False",lm
792,"def count_list(input_list): 
    return len(input_list)",human
423,"def get_maxgold(gold, m, n): 
    goldTable = [[0 for i in range(n)] 
                        for j in range(m)]   
    for col in range(n-1, -1, -1): 
        for row in range(m):  
            if (col == n-1): 
                right = 0
            else: 
                right = goldTable[row][col+1] 
            if (row == 0 or col == n-1): 
                right_up = 0
            else: 
                right_up = goldTable[row-1][col+1] 
            if (row == m-1 or col == n-1): 
                right_down = 0
            else: 
                right_down = goldTable[row+1][col+1] 
            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) 
    res = goldTable[0][0] 
    for i in range(1, m): 
        res = max(res, goldTable[i][0])  
    return res ",human
264,"def calculate_dog_age(age):
    return age * 7",lm
362,"def max_occurrences(list1):
    max_count = 0
    max_item = None
    for item in list1:
        count = list1.count(item)
        if count > max_count:
            max_count = count
            max_item = item
    return max_item",lm
784,"def mul_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even*first_odd)",human
353,"def remove_column(list1, n):
   for i in list1: 
    del i[n] 
   return list1",human
440,"def find_adverbs(sentence):
  import nltk
  tokens = nltk.word_tokenize(sentence)
  pos_tags = nltk.pos_tag(tokens)
  adverbs = [word for word, pos in pos_tags if pos.startswith('RB')]
  positions = [i for i, word in enumerate(tokens) if word in adverbs]
  return zip(adverbs, positions)",lm
219,"3
def extract_max_min(test_tup, K): 
  res = [] 
  res.extend(sorted(test_tup)[:K] + sorted(test_tup, reverse = True)[:K]) 
  return res",lm
208,"import re
def is_decimal(num):
  num_fetch = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
  result = num_fetch.search(num)
  return bool(result)",human
708,"def convert_string_to_list(string):
    list1=[] 
    list1=list(string) 
    return(list1)",lm
156,"def str_tuple_to_int_tuple(tuple_of_strings):
    """"""Converts a tuple of string values to a tuple of integer values.""""""
    tuple_of_ints = tuple(map(int, tuple_of_strings))
    return tuple_of_ints",lm
165,"def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars ",human
466,"def find_peak_element(nums):
  for i in range(1, len(nums) - 1):
    if nums[i] > nums[i-1] and nums[i] > nums[i+1]:
      return nums[i]
  return None",lm
61,"def substringsum(s):
    n = len(s)
    ans = 0
    for i in range(n):
        sum = 0
        for j in range(i, n):
            sum += int(s[j])
            if sum == j - i + 1:
                ans += 1
    return ans",lm
87,"3
def merge_three_dicts(dict1, dict2, dict3):
    """""" Merge three dictionaries into a single expression. """"""
    return {**dict1, **dict2, **dict3}",lm
817,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) 
 return result",human
447,"def cube_list(nums):
  return list(map(lambda x: x**3, nums))",lm
421,"def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) ",human
455,"def check_month_31_days(month_number):
    """"""
    This function checks whether the given month number contains 31 days or not.

    Args:
    month_number: An integer representing the month number.

    Returns:
    True if the month number contains 31 days, False otherwise.
    """"""

    # Check if the given month number is valid.
    if month_number < 1 or month_number > 12:
        return False

    # Check if the given month number contains 31 days.
    if month_number in [1, 3, 5, 7, 8, 10, 12]:
        return True
    else:
        return False",lm
839,"def sort_by_alpha(tuples):
    return sorted(tuples, key = lambda tup: tup[0])",lm
443,"def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max",human
965,"def camel_to_snake(camel_case):
    snake_case = """"
    for char in camel_case:
        if char.isupper():
            snake_case += ""_"" + char.lower()
        else:
            snake_case += char
    return snake_case[1:]",lm
515,"def is_subset_divisible(arr, n, m):
    if (n == 0):
        return (m == 0)

    return (is_subset_divisible(arr[1:], n - 1, m) or
           is_subset_divisible(arr[1:], n - 1, m - arr[0]))",lm
642,"def remove_similar_row(test_list):
  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))
  return (res) ",human
328,"def RotateLeft(list, rotation):
    rotation %= len(list)
    return list[rotation:] + list[:rotation]",lm
207,"def findLongestRepeatSubSeq(str):
      
    n = len(str)
      
    dp = [[0 for j in range(n + 1)]
            for i in range( n + 1)]
      
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            if (str[i - 1] == str[j - 1] and
                i != j):
                dp[i][j] = 1 + dp[i - 1][j - 1];
            else:
                dp[i][j] = max(dp[i][j - 1],
                                dp[i - 1][j]);
      
    return dp[n][n]",lm
738,"def geometric_sum(n):
  if n < 0:
    return 0
  else:
    return 1 / (pow(2, n)) + geometric_sum(n - 1)",human
926,"def binomial_coeffi(n, k): 
	if (k == 0 or k == n): 
		return 1
	return (binomial_coeffi(n - 1, k - 1) 
		+ binomial_coeffi(n - 1, k)) 
def rencontres_number(n, m): 
	if (n == 0 and m == 0): 
		return 1
	if (n == 1 and m == 0): 
		return 0
	if (m == 0): 
		return ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) 
	return (binomial_coeffi(n, m) * rencontres_number(n - m, 0))",human
870,"def sum_positivenum(nums):
  sum_positivenum = list(filter(lambda nums:nums>0,nums))
  return sum(sum_positivenum)",human
866,"def check_monthnumb(monthname2):
  if(monthname2==""January"" or monthname2==""March""or monthname2==""May"" or monthname2==""July"" or monthname2==""Augest"" or monthname2==""October"" or monthname2==""December""):
    return True
  else:
    return False",human
448,"def sum_perrins(n): 
    if n <= 0: 
        return 0
    elif n == 1: 
        return 0
    elif n == 2: 
        return 1
    else: 
        P_1 = 0
        P_2 = 1
        P_3 = 0
        for i in range(2, n): 
            P_3 = P_1 + P_2 
            P_1 = P_2 
            P_2 = P_3 
        return P_1 + P_2 + P_3",lm
218,"def min_operations(x: int, y: int) -> int:
    """"""
    Find the minimum operations required to make two numbers equal.
    """"""
    ans = 0
    while x != y:
        if x < y:
            x *= 2
            ans += 1
        else:
            y *= 2
            ans += 1
    return ans",lm
24,"def binary_to_decimal(binary):
    binary1 = binary
    decimal, i, n = 0, 0, 0
    while(binary != 0):
        dec = binary % 10
        decimal = decimal + dec * pow(2, i)
        binary = binary//10
        i += 1
    print(""The decimal value of"", binary1, ""is"", decimal)

binary_to_decimal(1111)",lm
519,"import math
def volume_tetrahedron(num):
	volume = (num ** 3 / (6 * math.sqrt(2)))	
	return round(volume, 2)",human
323,"def right_rotate(arr, n, out_of_place, cur):
	temp = arr[cur]
	for i in range(cur, out_of_place, -1):
		arr[i] = arr[i - 1]
	arr[out_of_place] = temp
	return arr
def re_arrange(arr, n):
	out_of_place = -1
	for index in range(n):
		if (out_of_place >= 0):
			if ((arr[index] >= 0 and arr[out_of_place] < 0) or
			(arr[index] < 0 and arr[out_of_place] >= 0)):
				arr = right_rotate(arr, n, out_of_place, index)
				if (index-out_of_place > 2):
					out_of_place += 2
				else:
					out_of_place = - 1
		if (out_of_place == -1):
			if ((arr[index] >= 0 and index % 2 == 0) or
			 (arr[index] < 0 and index % 2 == 1)):
				out_of_place = index
	return arr",human
516,"def radix_sort(nums):
    if not nums:
        return []
    max_num = max(nums)

    exp = 1
    while max_num // exp > 0:
        counting_sort(nums, exp)
        exp *= 10


def counting_sort(nums, exp):
    n = len(nums)
    output = [0] * n
    count = [0] * 10

    for i in range(n):
        index = nums[i] // exp
        count[index % 10] += 1

    for i in range(1, 10):
        count[i] += count[i - 1]

    i = n - 1
    while i >= 0:
        index = nums[i] // exp
        output[count[index % 10] - 1] = nums[i]
        count[index % 10] -= 1
        i -= 1

    for i in range(n):
        nums[i] = output[i]",lm
515,"def modular_sum(arr, n, m): 
	if (n > m): 
		return True
	DP = [False for i in range(m)] 
	for i in range(n): 
		if (DP[0]): 
			return True
		temp = [False for i in range(m)] 
		for j in range(m): 
			if (DP[j] == True): 
				if (DP[(j + arr[i]) % m] == False): 
					temp[(j + arr[i]) % m] = True
		for j in range(m): 
			if (temp[j]): 
				DP[j] = True
		DP[arr[i] % m] = True
	return DP[0]",human
436,"def neg_nos(list1):
  for num in list1: 
    if num < 0: 
       return num ",human
251,"def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list",human
235,"def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) ",human
21,"def multiples_of_num(m,n): 
    multiples_of_num= list(range(n,(m+1)*n, n)) 
    return list(multiples_of_num)",human
597,"def findKthElement(arr1, arr2, k):
    if not arr1:
        return arr2[k - 1]
    if not arr2:
        return arr1[k - 1]
    if k == 1:
        return min(arr1[0], arr2[0])
    halfKth = k // 2
    if halfKth - 1 < len(arr1) and halfKth - 1 < len(arr2):
        if arr1[halfKth - 1] < arr2[halfKth - 1]:
            return findKthElement(arr1[halfKth:], arr2, k - halfKth)
        else:
            return findKthElement(arr1, arr2[halfKth:], k - halfKth)
    elif halfKth - 1 < len(arr1):
        return findKthElement(arr1[halfKth:], arr2, k - halfKth)
    else:
        return findKthElement(arr1, arr2[halfKth:], k - halfKth)",lm
408,"3
from typing import List, Tuple

def find_k_pairs(nums1: List[int], nums2: List[int], k: int) -> List[Tuple[int, int]]:
    """"""
    Args:
        nums1 (List[int]): Sorted list of integers.
        nums2 (List[int]): Sorted list of integers.
        k (int): Number of pairs to find.

    Returns:
        List[Tuple[int, int]]: List of pairs of integers.
    """"""

    if not nums1 or not nums2 or k <= 0:
        return []

    # Initialize the result list.
    result = []

    # Initialize the pointers to the first elements of both lists.
    i = 0
    j = 0

    # Initialize the minimum difference between the current pair and the k-th smallest pair.
    min_diff = float('inf')

    # Iterate over the two lists until we have found k pairs.
    while i < len(nums1) and j < len(nums2) and len(result) < k:
        # Calculate the current difference between the current pair and the k-th smallest pair.
        diff = abs(nums1[i] + nums2[j] - result[-1][0] - result[-1][1])

        # If the current difference is less than the minimum difference, update the minimum difference and the result list.
        if diff < min_diff:
            min_diff = diff
            result.append((nums1[i], nums2[j]))

        # If the current pair is greater than the k-th smallest pair, move the pointer to the next element in the first list.
        if nums1[i] + nums2[j] >= result[-1][0] + result[-1][1]:
            i += 1

        # Otherwise, move the pointer to the next element in the second list.
        else:
            j += 1

    # Return the result list.
    return result",lm
791,"def remove_nested(test_tup):
  res = tuple()
  for count, ele in enumerate(test_tup):
    if not isinstance(ele, tuple):
      res = res + (ele, )
  return (res) ",human
618,"def div_list(nums1,nums2):
  result = map(lambda x, y: x / y, nums1, nums2)
  return list(result)",human
431,"def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result",human
148,"def divide_into_two_parts_sum_digits_maximum(num):
    """"""
    Divide a number into two parts such that the sum of digits is maximum.

    Args:
        num: The number to be divided.

    Returns:
        A tuple containing the two parts of the number.
    """"""
    a = num
    b = 0
    while a > 0:
        if a % 10 > b % 10:
            b = b * 10 + a % 10
            a = a // 10
        else:
            a = a // 10
            b = b * 10
    return (a, b)",lm
302,"def most_significant_set_bit(n):
    """"""Finds the most significant bit number which is also a set bit.""""""
    if n == 0:
        return 0
    ms_bit = 0
    while n > 0:
        if n & 1 == 1:
            ms_bit = n
        n >>= 1
    return ms_bit",lm
788,"def createTuple(str1, lst):
    newTuple = tuple(str1) + tuple(lst)
    return newTuple",lm
580,"def extract_even(test_tuple):
  res = tuple(ele for sub in test_tuple for ele in sub if type(ele) == int and ele%2 == 0)
  return (res)",lm
582,"def my_dict(dict1):
  if bool(dict1):
     return False
  else:
     return True",human
571,"def max_sum_ disjoint_pairs(arr, k: int) -> int:
    arr.sort()

    i, j = 0, len(arr) - 1
    max_sum = 0
    while i < j:
        if arr[i] + arr[j] < k:
            max_sum += arr[i] + arr[j]
            i += 1
        else:
            j -= 1

    return max_sum",lm
951,"def max_similar_indices(test_1, test_2): 
    max_list = [] 
    for i in range (len(test_1)): 
        if test_1[i][0] == test_2[i][0]: 
            max_list.append(max(test_1[i][1], test_2[i][1])) 
    return max_list",lm
135,"def hexagonal_number(n):
    """"""Return the nth hexagonal number.""""""
    return n * (2 * n - 1)",lm
560,"def union_tuples(tup1, tup2):
  result = tuple(set(tup1).union(set(tup2)))
  return result",lm
685,"def sum_primes(n):
    primes = [2]
    for num in range(3, n+1, 2):
        is_prime = True
        for prime in primes:
            if num % prime == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(num)
    return sum(primes)",lm
213,"3
def cat_string_tuples(tuple1, tuple2):
    return tuple1 + tuple2",lm
665,"def move_last(num_list):
    a = [num_list[0] for i in range(num_list.count(num_list[0]))]
    x = [ i for i in num_list if i != num_list[0]]
    x.extend(a)
    return (x)",human
125,"def max_subarray_diff(s):
    max_diff = 0
    cnt = 0
    for ch in s:
        cnt += 1 if ch == '1' else -1
        max_diff = max(max_diff, abs(cnt))
    return max_diff",lm
11,"def remove_first_last(string,char):
    first_index = string.find(char)
    last_index = string.rfind(char)
    if first_index != -1 and last_index != -1:
        new_string = string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]
        return new_string
    else:
        return string",lm
636,"def check_reciprocal_roots(a, b, c):
  """"""
  Check if roots of a quadratic equation are reciprocal of each other.

  Args:
    a (float): Coefficient of x^2.
    b (float): Coefficient of x.
    c (float): Constant term.

  Returns:
    bool: True if roots are reciprocal of each other, False otherwise.
  """"""

  # Calculate the discriminant.
  discriminant = b**2 - 4*a*c

  # Check if the equation has real roots.
  if discriminant < 0:
    return False

  # Calculate the roots.
  x1 = (-b + discriminant**0.5) / (2*a)
  x2 = (-b - discriminant**0.5) / (2*a)

  # Check if the roots are reciprocal of each other.
  return x1 * x2 == 1",lm
149,"def longest_subsequence(arr):
    dp = [1] * len(arr)
    max_len = 1
    for i in range(1, len(arr)):
        for j in range(i):
            if abs(arr[i] - arr[j]) == 1:
                dp[i] = max(dp[i], dp[j] + 1)
                max_len = max(max_len, dp[i])
    return max_len",lm
963,"def discriminant_value(x,y,z):
    discriminant = (y**2) - (4*x*z)
    if discriminant > 0:
        return (""Two solutions"",discriminant)
    elif discriminant == 0:
        return (""one solution"",discriminant)
    elif discriminant < 0:
        return (""no real solution"",discriminant)",human
266,"def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA",human
336,"def is_28_day_month(month_name):
    """"""
    Checks if the given month name contains 28 days or not.

    Args:
        month_name (str): The name of the month.

    Returns:
        bool: True if the month has 28 days, False otherwise.
    """"""

    month_names_with_28_days = [""February""]
    return month_name in month_names_with_28_days",lm
585,"import heapq
def expensive_items(items,n):
  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])
  return expensive_items",human
521,"def check_scalene(a, b, c):
    return (a != b and b != c and c != a)",lm
825,"def access_elements(nums, list_index):
    result = [nums[i] for i in list_index]
    return result",human
77,"def is_Diff(n): 
    return (n % 11 == 0) ",human
142,"def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result",human
707,"def count_Set_Bits(n) :  
    n += 1; 
    powerOf2 = 2;   
    cnt = n // 2;  
    while (powerOf2 <= n) : 
        totalPairs = n // powerOf2;  
        cnt += (totalPairs // 2) * powerOf2;  
        if (totalPairs & 1) : 
            cnt += (n % powerOf2) 
        else : 
            cnt += 0
        powerOf2 <<= 1;    
    return cnt;  ",human
129,"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True",human
612,"def merge_first_last(lst):
  new_lst = []
  for sublst in lst:
    new_lst.append([sublst[0]])
    new_lst.append([sublst[-1]])
  return new_lst",lm
437,"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2",human
450,"def extract_strings(list1, n):
    result = []
    for element in list1:
        if len(element) == n:
            result.append(element)
    return result",lm
561,"def assign_elements(test_list):
  res = dict()
  for key, val in test_list:
    res.setdefault(val, [])
    res.setdefault(key, []).append(val)
  return (res) ",human
154,"def extractElement(nums, pos):
    result = []
    for row in nums:
        result.append(row[pos])
    return result",lm
76,"def count_Squares(m,n):
    if(n < m):
        temp = m
        m = n
        n = temp
    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",human
151,"def is_coprime(n, m):
  """"""
  Check whether the given number is co-prime or not.

  """"""
  if n <= 1 or m <= 1:
    return False

  while m:
    if n < m:
      n, m = m, n
    n, m = m, n % m

  if n == 1:
    return True
  else:
    return False",lm
463,"def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far",human
261,"def divide_tuples(tuple1, tuple2):
    result = ()
    for i in range(len(tuple1)):
        result += (tuple1[i] / tuple2[i], )
    return result",lm
481,"def subset(arr, sum):
    n = len(arr)
    dp = [[False for i in range(sum+1)]for j in range(n+1)]
    for i in range(n+1):
        dp[i][0] = True
    for i in range(1, n+1):
        for j in range(1, sum+1):
            dp[i][j] = dp[i-1][j]
            if arr[i-1] <= j:
                dp[i][j] |= dp[i-1][j - arr[i-1]]
    return dp[n][sum]",lm
726,"def multiply_elements(test_tup):
  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",human
872,"def is_subset(list1, list2):
  if not list1:
    return True
  for item in list1:
    if type(item) == list:
      if item not in list2:
        return False
      if not is_subset(item, list2):
        return False
    else:
      if item not in list2:
        return False
  return True",lm
426,"def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums",human
966,"def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]
   tuple1 = [t for t in tuple1 if t]
   return tuple1",human
852,"def remove_negs(num_list): 
    for item in num_list: 
        if item < 0: 
           num_list.remove(item) 
    return num_list",human
532,"def check_permutation(str1, str2):
  n1=len(str1)
  n2=len(str2)
  if(n1!=n2):
    return False
  a=sorted(str1)
  str1="" "".join(a)
  b=sorted(str2)
  str2="" "".join(b)
  for i in range(0, n1, 1):
    if(str1[i] != str2[i]):
      return False
  return True",human
735,"def set_middle_bits(n):  
    n |= n >> 1; 
    n |= n >> 2; 
    n |= n >> 4; 
    n |= n >> 8; 
    n |= n >> 16;  
    return (n >> 1) ^ 1
def toggle_middle_bits(n): 
    if (n == 1): 
        return 1
    return n ^ set_middle_bits(n) ",human
802,"def count_rotations(arr):
    if len(arr) < 1:
        return 0
    min_idx = 0
    max_idx = len(arr) - 1
    while min_idx < max_idx:
        mid_idx = int((min_idx + max_idx) / 2)
        if arr[min_idx] <= arr[mid_idx] <= arr[max_idx]:
            return min_idx
        elif arr[mid_idx] > arr[max_idx]:
            min_idx = mid_idx + 1
        else:
            max_idx = mid_idx - 1
    return 0",lm
496,"import heapq

def smallest_integers(lst, k):
  if k > len(lst):
    return ""Invalid input""

  return heapq.nsmallest(k, lst)",lm
858,"def count_list(input_list): 
    return (len(input_list))**2",human
488,"import math
def area_pentagon(a):
  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0
  return area",human
903,"def count_Unset_Bits(n) :  
    cnt = 0;  
    for i in range(1,n + 1) : 
        temp = i;  
        while (temp) :  
            if (temp % 2 == 0) : 
                cnt += 1;  
            temp = temp // 2;  
    return cnt;  ",human
444,"3
def trim_tuples(test_list, k):
  res = [[sub[0] for sub in ele] for ele in test_list]
  for idx in range(0, len(res)):
    for inner_idx in range(0, len(res[idx]) - k + 1, k):
      res[idx][inner_idx: inner_idx + k] = res[idx][inner_idx + k:]
  return res",lm
196,"def remove_tuples(test_list, K):
  res = [ele for ele in test_list if len(ele) != K]
  return (res) ",human
767,"def count_pairs(lst, sum):
   count = 0
   for i in range(len(lst)):
      for j in range(i + 1, len(lst)):
         if lst[i] + lst[j] == sum:
            count += 1
   return count",lm
375,"def round_num(n,m):
    a = (n //m) * m
    b = a + m
    return (b if n - a > b - n else a)",human
851,"def Sum_of_Inverse_Divisors(N,Sum): 
    ans = float(Sum)*1.0 /float(N);  
    return round(ans,2); ",human
390,"def add_string(list,string):
 add_string=[string.format(i) for i in  list]
 return add_string",human
117,"def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return (str(res)) ",human
818,"def count_lower_case(string):
    count = 0
    for char in string:
        if char>='a' and char<='z':
            count+=1
    return count",lm
679,"def access_by_index(input_dict):
    result = []
    for key in input_dict:
        result.append(input_dict[key][0])
    return result",lm
542,"import re
def fill_spaces(text):
  return (re.sub(""[ ,.]"", "":"", text))",human
720,"lambda tup: tup+(dict(input('\nEnter items in dictionary- key:value')),)",lm
64,"sorted(test_list, key = lambda i: i[1])",lm
651,"def is_subset_tuple(tuple1, tuple2):
    return all(x in tuple2 for x in tuple1)",lm
280,"def sequential_search(arr, x): 
    for i in range(len(arr)): 
        if arr[i] == x: 
            return i 
    return -1",lm
715,"def str_to_tuple(test_str):
  res = tuple(map(int, test_str.split(', ')))
  return (res) ",human
489,"def frequency_largest_value(arr):
    largest = max(arr)
    return arr.count(largest)",lm
875,"def min_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = min(temp)
  return (res) ",human
148,"def sum_digits_single(x) : 
    ans = 0
    while x : 
        ans += x % 10
        x //= 10  
    return ans 
def closest(x) : 
    ans = 0
    while (ans * 10 + 9 <= x) : 
        ans = ans * 10 + 9  
    return ans   
def sum_digits_twoparts(N) : 
    A = closest(N)  
    return sum_digits_single(A) + sum_digits_single(N - A) ",human
239,"def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]",human
656,"def find_Min_Sum(a,b,n): 
    a.sort() 
    b.sort() 
    sum = 0  
    for i in range(n): 
        sum = sum + abs(a[i] - b[i]) 
    return sum",human
428,"def shellSort(input_list):  
    gap = len(input_list) // 2  
    while gap > 0:  
        for i in range(gap, len(input_list)):  
            current_element = input_list[i]  
            j = i  
            while j >= gap and input_list[j - gap] > current_element:  
                input_list[j] = input_list[j - gap]  
                j = j - gap  
            input_list[j] = current_element  
        gap //= 2  
    return input_list",lm
677,"def check_triangle(a: int, b: int, c: int) -> bool:
    """"""
    Write a function to check if the triangle is valid or not.
    """"""
    if (a + b <= c) or (b + c <= a) or (a + c <= b):
        return False
    else:
        return True",lm
684,"def count_char_in_repeated_string(string, char, repeat_count):
    return string.count(char) * repeat_count",lm
315,"def first_max_even_word(str):
    words = str.split()
    maxlen = 0
    for word in words:
        if len(word) > maxlen and len(word) % 2 == 0:
            maxlen = len(word)
    return maxlen",lm
88,"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count",human
253,"def count_integers(numbers):
    return len(list(filter(lambda x: isinstance(x, int), numbers)))",lm
784,"def product_even_odd(lst): 
	even_prod = 1
	odd_prod = 1
	for i in lst: 
		if i % 2 == 0: 
			even_prod *= i 
		else: 
			odd_prod *= i 
	return even_prod * odd_prod",lm
878,"def check_tuples(test_tuple, K):
  res = all(ele in K for ele in test_tuple)
  return (res) ",human
482,"import re 
def match(text): 
		pattern = '[A-Z]+[a-z]+$'
		if re.search(pattern, text): 
				return('Yes') 
		else: 
				return('No') ",human
899,"def corner_sort(arr):
    n = len(arr)
    for i in range(1, n-1):
        if arr[i] < max(arr[0], arr[n-1]):
            return False
    return True",lm
933,"import re
def camel_to_snake(name):
  name = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
  return re.sub('([a-z0-9])([A-Z])', r'\1_\2', name).lower()",lm
580,"def even_ele(test_tuple, even_fnc): 
	res = tuple() 
	for ele in test_tuple: 
		if isinstance(ele, tuple): 
			res += (even_ele(ele, even_fnc), ) 
		elif even_fnc(ele): 
			res += (ele, ) 
	return res 
def extract_even(test_tuple):
  res = even_ele(test_tuple, lambda x: x % 2 == 0)
  return (res) ",human
354,"def tn_ap(a,n,d):
  tn = a + (n - 1) * d
  return tn",human
734,"def find_sum_of_products(arr):
    """"""
    Calculates the sum of products of all possible subarrays.

    Args:
        arr (list): A list of integers.

    Returns:
        int: The sum of products of all possible subarrays.
    """"""

    sum = 0
    for i in range(len(arr)):
        product = 1
        for j in range(i, len(arr)):
            product *= arr[j]
            sum += product

    return sum",lm
821,"import collections as ct
def merge_dictionaries(dict1,dict2):
    merged_dict = dict(ct.ChainMap({}, dict1, dict2))
    return merged_dict",human
276,"def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume",human
532,"def check_permutation(str1, str2):
  if len(str1) != len(str2):
    return False

  char_dict = {}
  for char in str1:
    if char in char_dict:
      char_dict[char] += 1
    else:
      char_dict[char] = 1

  for char in str2:
    if char not in char_dict or char_dict[char] == 0:
      return False
    else:
      char_dict[char] -= 1

  return True",lm
273,"def subtract_tuples(tuple1, tuple2):
    result = tuple(a - b for a, b in zip(tuple1, tuple2))
    return result",lm
912,"import math

def lobbs_number(n, m):
    return 2 ** (2 ** (n + 1) - 1) * (2 ** (2 ** n) - 1) ** m - 1",lm
797,"def sum_odd_range(l, r):
    """"""Find the sum of all odd natural numbers within the range l and r.""""""
    sum = 0
    for i in range(l, r + 1):
        if i % 2 == 1:
            sum += i
    return sum",lm
445,"def multiply_tuple_elements(tuple1, tuple2):
    """"""Returns a new tuple with elements that are the product of the corresponding elements in the original tuples.""""""
    return tuple(x * y for x, y in zip(tuple1, tuple2))",lm
132,"def tup_string(tup1):
  str =  ''.join(tup1)
  return str",human
186,"import re
def check_literals(text, patterns):
  for pattern in patterns:
    if re.search(pattern,  text):
        return ('Matched!')
    else:
        return ('Not Matched!')",human
895,"def max_sum_no_adjacent(nums):
    dp = [0] * len(nums)
    dp[0] = nums[0]
    if len(nums) > 1:
        dp[1] = max(nums[0], nums[1])
    for i in range(2, len(nums)):
        dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])
    return dp[-1]",lm
507,"def remove_words(list1, removewords):
    for word in list(list1):
        if word in removewords:
            list1.remove(word)
    return list1  ",human
30,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n): 
        for j in range(1,n-i+1):  
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ",human
187,"def longest_common_subsequence(X, Y, m, n): 
    if m == 0 or n == 0: 
       return 0 
    elif X[m-1] == Y[n-1]: 
       return 1 + longest_common_subsequence(X, Y, m-1, n-1) 
    else: 
       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",human
750,"def add_tuple(test_list, test_tup):
  test_list += test_tup
  return (test_list) ",human
568,"def create_empty_dictionaries(n):
    return [{} for _ in range(n)]",lm
379,"def surfacearea_cuboid(l,w,h):
  SA = 2*(l*w + l * h + w * h)
  return SA",human
780,"def find_combos_of_sums(tup_list):
  """"""Finds the combinations of sums with tuples in the given tuple list.

    Args:
      tup_list: A list of tuples.

    Returns:
      A list of tuples containing all possible combinations of sums.
  """"""

  if not tup_list:
    return []

  result = []
  for i in range(len(tup_list)):
    for j in range(i + 1, len(tup_list)):
      result.append(tuple(sum(x) for x in zip(tup_list[i], tup_list[j])))

  return result",lm
554,"def odd_numbers(mixed_list):
  odd_list = []
  for item in mixed_list:
    if isinstance(item, int) and item % 2 != 0:
      odd_list.append(item)
  return odd_list",lm
542,"3
import re

def replace_special_chars_with_colon(text):
  pattern = r'[ ,.]'
  return re.sub(pattern, ':', text)",lm
671,"import math 
def get_Pos_Of_Right_most_Set_Bit(n): 
    return int(math.log2(n&-n)+1)   
def set_Right_most_Unset_Bit(n): 
    if (n == 0): 
        return 1
    if ((n & (n + 1)) == 0):     
        return n 
    pos = get_Pos_Of_Right_most_Set_Bit(~n)      
    return ((1 << (pos - 1)) | n) ",human
86,"def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1",human
964,"def check_word_length_even(word):
  """"""
  Write a python function to check whether the length of the word is even or not.
  """"""
  if len(word) % 2 == 0:
    return True
  else:
    return False",lm
8,"def square_nums(nums):
 square_nums = list(map(lambda x: x ** 2, nums))
 return square_nums",human
183,"3
def count_pairs_with_diff_k(arr, k):
    """"""Counts the number of distinct pairs having a difference of k in any array.""""""
    count = 0
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if abs(arr[i] - arr[j]) == k:
                count += 1
    return count",lm
355,"def count_rectangles(r):
    count = 0
    for x1 in range(-r, r+1):
        for y1 in range(-r, r+1):
            for x2 in range(x1, r+1):
                for y2 in range(y1, r+1):
                    if ((x1**2 + y1**2) <= r**2) and ((x2**2 + y2**2) <= r**2):
                        count += 1
    return count",lm
609,"def floor_Min(A,B,N):
    x = max(B - 1,N)
    return (A*x) // B",human
419,"def print_sum(numbers):
    total = 0
    for num in numbers:
        total += round(num)
    print(total * len(numbers))",lm
508,"def same_order(l1, l2):
    common_elements = set(l1) & set(l2)
    l1 = [e for e in l1 if e in common_elements]
    l2 = [e for e in l2 if e in common_elements]
    return l1 == l2",human
390,"def insert_string_at_beginning(list1, string1): 
    list2 = [string1 + item for item in list1] 
    return list2",lm
702,"3
def Minimum_Elements_To_Be_Removed(arr, k): 
    arr.sort() 
    ans = 0
    for i in range(len(arr) - 1): 
        if arr[i + 1] - arr[i] <= k: 
            continue
        else: 
            x = (arr[i + 1] - arr[i] - k) 
            ans += x 
            arr[i + 1] -= x 
    return ans",lm
458,"def rectangle_area(l,b):
  area=l*b
  return area",human
714,"def count_distinct_prime_factors(num: int) -> int:
        cnt = 0
        i = 2
        while num > 1:
            if num % i == 0:
                num = num // i
                cnt += 1
                while num % i == 0:
                    num = num // i
            i += 1
        return cnt",lm
898,"def extract_elements(list1, n):
  return list1[0:n]",lm
607,"import re
pattern = 'fox'
text = 'The quick brown fox jumps over the lazy dog.'
def find_literals(text, pattern):
  match = re.search(pattern, text)
  s = match.start()
  e = match.end()
  return (match.re.pattern, s, e)",human
6,"def bit_diff(n1, n2):
    xor = n1 ^ n2
    return bin(xor).count('1') == 1",lm
373,"def cuboid_volume(length, width, height):
    """"""Finds the volume of a cuboid.""""""
    return length * width * height",lm
150,"def does_Contain_B(a,b,c): 
    if (a == b): 
        return True
    if ((b - a) * c > 0 and (b - a) % c == 0): 
        return True
    return False",human
577,"def find_last_digit_factorial(number):
    if number < 0:
        return -1
    if number == 0:
        return 1
    last_digit = 1
    for i in range(1, number + 1):
        last_digit = (last_digit * i) % 10
    return last_digit",lm
524,"3
def max_inc_subsequence_sum(arr):
  n = len(arr)
  dp = [0] * n
  for i in range(n):
    dp[i] = arr[i]
  for i in range(1, n):
    for j in range(i):
      if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:
        dp[i] = dp[j] + arr[i]
  return max(dp)",lm
738,"def geometric_sum(n):
    """"""Calculates the geometric sum of n-1.""""""
    return (1 - (1/n)) / (1 - (1/2))",lm
46,"def test_distinct(data):
  if len(data) == len(set(data)):
    return True
  else:
    return False;",human
608,"def bellNumber(n):
    bell = [[0 for i in range(n+1)] for j in range(n+1)]
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
    return bell[n][0]",lm
620,"def largest_divisible_subset(nums):
    nums.sort()
    dp = [1 for i in range(len(nums))]
    prev = [-1 for i in range(len(nums))]
    maxi = 1
    last_index = 0
    for i in range(len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0 and dp[i] < dp[j] + 1:
                dp[i] = dp[j] + 1
                prev[i] = j
                if dp[i] > maxi:
                    maxi = dp[i]
                    last_index = i
    subset = []
    while last_index != -1:
        subset.append(nums[last_index])
        last_index = prev[last_index]
    subset.reverse()
    return subset",lm
7,"import re
def find_long_words(text):
    pattern = r""\b\w{4,}\b""
    matches = re.findall(pattern, text)
    return matches",lm
860,"import re 
regex = '[a-zA-z0-9]$'
def check_alphanumeric(string): 
	if(re.search(regex, string)): 
		return (""Accept"") 
	else: 
		return (""Discard"") ",human
198,"import math
def largest_triangle(a,b): 
    if (a < 0 or b < 0): 
        return -1 
    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  
    return area ",human
169,"def pell_number(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a = 0
        b = 1
        for _ in range(n - 1):
            c = 2 * b + a
            a = b
            b = c
        return c",lm
563,"import re
def extract_quoted_values(string):
    return re.findall(r'""(.*?)""', string)",lm
554,"def Split(list): 
    od_li = [] 
    for i in list: 
        if (i % 2 != 0): 
            od_li.append(i)  
    return od_li",human
399,"def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",human
923,"def shortest_supersequence(str1, str2):
    m = len(str1)
    n = len(str2)
    L = [[0] * (n+1) for _ in range(m+1)]
    for i in range(m+1):
        for j in range(n+1):
            L[i][j] = 0
    for i in range(m+1):
        L[i][0] = i
    for j in range(n+1):
        L[0][j] = j
    for i in range(1, m+1):
        for j in range(1, n+1):
            if str1[i-1] == str2[j-1]:
                L[i][j] = L[i-1][j-1] + 1
            else:
                L[i][j] = min(L[i-1][j], L[i][j-1]) + 1
    return L[m][n]",lm
543,"def count_digits(num1,num2):
    number=num1+num2
    count = 0
    while(number > 0):
        number = number // 10
        count = count + 1
    return count",human
293,"def third_side(a, b):
    return (a**2 + b**2)**0.5",lm
668,"import re 
def replace(string, char): 
    pattern = char + '{2,}'
    string = re.sub(pattern, char, string) 
    return string ",human
346,"def zigzag(n, k): 
	if (n == 0 and k == 0): 
		return 1
	if (k == 0): 
		return 0
	return zigzag(n, k - 1) + zigzag(n - 1, n - k)",human
843,"def nthSuperUglyNumber(n, primes):
    ugly = [1]
    heap = [(prime, i, prime) for i, prime in enumerate(primes)]
    for _ in range(n - 1):
        curr, idx, prime = heapq.heappop(heap)
        ugly.append(curr)
        heapq.heappush(heap, (prime * ugly[idx + 1], idx + 1, prime))
    return ugly[-1]",lm
1,"def minCostPath(cost, m, n):
    dp = [[0 for x in range(n + 1)] for x in range(m + 1)]
    dp[0][0] = cost[0][0]
    for i in range(1, m + 1):
        dp[i][0] = dp[i - 1][0] + cost[i][0]
    for j in range(1, n + 1):
        dp[0][j] = dp[0][j - 1] + cost[0][j]
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]
    return dp[m][n]",lm
282,"def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)",human
703,"def is_key_present(x):
    if x in my_dict:
        print('Key is present in the dictionary')
    else:
        print('Key is not present in the dictionary')",lm
946,"3
def find_most_common_elements(text, n=10):
  """"""Find the most common elements and their counts of a specified text.

  Args:
    text: The text to analyze.
    n: The number of most common elements to return.

  Returns:
    A list of tuples containing the most common elements and their counts.
  """"""

  elements = text.split()
  frequency = {}
  for element in elements:
    frequency[element] = frequency.get(element, 0) + 1

  most_common = sorted(frequency.items(), key=lambda x: x[1], reverse=True)

  return most_common[:n]",lm
313,"def pos_nums(list1):
    res = [i for i in list1 if i > 0]
    return res",lm
225,"def find_minimum_in_sorted_rotated_array(arr):
    low, high = 0, len(arr) - 1
    while low < high:
        mid = (low + high) // 2
        if arr[mid] > arr[high]:
            low = mid + 1
        else:
            high = mid
    return arr[low]",lm
942,"def check_element(test_tup, check_list):
  res = False
  for ele in check_list:
    if ele in test_tup:
      res = True
      break
  return (res) ",human
206,"def concatenate_elements(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",human
525,"def parallel_lines(line1, line2):
  return line1[0]/line1[1] == line2[0]/line2[1]",human
393,"max_list = lambda x, y: (x if len(x) > len(y) else y)",lm
938,"def three_closest_elements(arr1, arr2, arr3):
    i1, i2, i3 = 0, 0, 0
    min_diff = float('inf')
    closest_sum = float('inf')
    while i1 < len(arr1) and i2 < len(arr2) and i3 < len(arr3):
        diff = max(arr1[i1], arr2[i2], arr3[i3]) - min(arr1[i1], arr2[i2], arr3[i3])
        if diff < min_diff:
            min_diff = diff
            closest_sum = arr1[i1] + arr2[i2] + arr3[i3]
        if arr1[i1] <= arr2[i2] and arr1[i1] <= arr3[i3]:
            i1 += 1
        elif arr2[i2] <= arr1[i1] and arr2[i2] <= arr3[i3]:
            i2 += 1
        else:
            i3 += 1
    return closest_sum",lm
93,"def power(a, b): 
    if b == 0: 
        return 1
    if b == 1: 
        return a 
    if b< 0: 
        return 1/power(a, -b) 
    else: 
        return a * power(a, b-1)",lm
892,"import re
def remove_spaces(text):
 return (re.sub(' +',' ',text))",human
561,"def pair_assignment(input_tuple): 
    result = [] 
    for i in range(0, len(input_tuple), 2): 
        result.append((input_tuple[i], input_tuple[i + 1])) 
    return result",lm
807,"def find_first_odd(numbers: list) -> int:
    for number in numbers:
        if number % 2 == 1:
            return number
    return -1",lm
123,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)",human
753,"3
def find_minimum_records(tuple_list, k):
    """"""
    Finds the minimum k records from a tuple list.

    Args:
    tuple_list: The list of tuples to search through.
    k: The number of minimum records to find.

    Returns:
    A list of the minimum k records.
    """"""

    # Sort the tuple list by the second element in each tuple.
    sorted_tuple_list = sorted(tuple_list, key=lambda x: x[1])

    # Return the first k records from the sorted list.
    return sorted_tuple_list[:k]",lm
470,"3
def addition_tuple_elements(tuple1, tuple2):
    """"""
    This function finds the pairwise addition of the elements of the given tuples.

    Args:
        tuple1 (tuple): The first tuple.
        tuple2 (tuple): The second tuple.

    Returns:
        tuple: A tuple containing the pairwise addition of the elements of the given tuples.
    """"""

    # Check if the tuples have the same length.
    if len(tuple1) != len(tuple2):
        raise ValueError(""Tuples must have the same length."")

    # Create a new tuple to store the pairwise addition of the elements.
    result_tuple = ()

    # Iterate over the tuples.
    for i in range(len(tuple1)):
        # Add the corresponding elements of the tuples.
        result_tuple += (tuple1[i] + tuple2[i],)

    # Return the result tuple.
    return result_tuple",lm
398,"def digit_sum(nums): 
    return [sum(int(i) for i in str(n)) for n in nums]",lm
307,"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon",human
500,"def concatenate_list_to_string(list1):
    result = """"
    for element in list1:
        result += str(element)
    return result",lm
435,"def last_digit(num):
    return int(str(num)[-1])",lm
456,"def reverse_strings(list_of_strings):
    reversed_strings = []
    for string in list_of_strings:
        reversed_strings.append(string[::-1])
    return reversed_strings",lm
5,"def count_ways(n): 
	A = [0] * (n + 1) 
	B = [0] * (n + 1) 
	A[0] = 1
	A[1] = 0
	B[0] = 0
	B[1] = 1
	for i in range(2, n+1): 
		A[i] = A[i - 2] + 2 * B[i - 1] 
		B[i] = A[i - 1] + B[i - 2] 
	return A[n] ",human
110,"def extract_missing(test_list, strt_val, stop_val):
  res = []
  for sub in test_list:
    if sub[0] > strt_val:
      res.append((strt_val, sub[0]))
      strt_val = sub[1]
    if strt_val < stop_val:
      res.append((strt_val, stop_val))
  return (res) ",human
48,"def odd_bit_set_number(n):
    count = 0;res = 0;temp = n
    while temp > 0:
        if count % 2 == 0:
            res |= (1 << count)
        count += 1
        temp >>= 1
    return (n | res)",human
439,"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x",human
195,"def first(arr,x,n): 
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            high = mid - 1
    return res",human
277,"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result",human
13,"3
def find_most_common_words(words, n):
    """"""Counts the most common words in a dictionary.""""""
    word_counts = {}
    for word in words:
        word = word.lower()
        word_counts[word] = word_counts.get(word, 0) + 1
    most_common_words = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)[:n]
    return [word for word, count in most_common_words]",lm
582,"def is_empty(dict):
    if len(dict) == 0:
        return True
    else:
        return False",lm
441,"def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea",human
917,"def find_sequences(s):
  sequences = []
  i = 0
  while i < len(s):
    if s[i].isupper():
      j = i + 1
      while j < len(s) and s[j].islower():
        j += 1
      sequences.append(s[i:j])
      i = j
    else:
      i += 1
  return sequences",lm
200,"def max_index_positions(nums): 
    max_value = max(nums) 
    return [i for i, j in enumerate(nums) if j == max_value]",lm
774,"import re
def is_valid_email(email):
    regex = r""^[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$""
    return re.match(regex, email)",lm
524,"def max_sum_increasing_subsequence(arr, n): 
	max = 0
	msis = [0 for x in range(n)] 
	for i in range(n): 
		msis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
				msis[i] < msis[j] + arr[i]): 
				msis[i] = msis[j] + arr[i] 
	for i in range(n): 
		if max < msis[i]: 
			max = msis[i] 
	return max",human
444,"def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) ",human
298,"def intersection_nested_lists(l1, l2):
    result = [[n for n in lst if n in l1] for lst in l2]
    return result",human
683,"def sum_Square(n) : 
    i = 1 
    while i*i <= n : 
        j = 1
        while (j*j <= n) : 
            if (i*i+j*j == n) : 
                return True
            j = j+1
        i = i+1     
    return False",human
925,"def product_tuple(test_tup):
  res = 1
  for ele in test_tup:
    res = res * ele
  return (res)",lm
611,"def max_of_nth(test_list, N):
  res = max([sub[N] for sub in test_list])
  return (res) ",human
106,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ",human
420,"def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum",human
476,"def sum_of_largest_smallest(arr):
    if not arr:
        return 0
    return max(arr)+min(arr)",lm
42,"def find_Sum(arr,n): 
    return sum([x for x in arr if arr.count(x) > 1])",human
157,"def run_length_encoding(sequence):
  encoding = []
  i = 0
  while i < len(sequence):
    count = 1
    while i + 1 < len(sequence) and sequence[i] == sequence[i + 1]:
      count += 1
      i += 1
    encoding.append((sequence[i], count))
    i += 1
  return encoding",lm
136,"def cal_electbill(units):
 if(units < 50):
    amount = units * 2.60
    surcharge = 25
 elif(units <= 100):
    amount = 130 + ((units - 50) * 3.25)
    surcharge = 35
 elif(units <= 200):
    amount = 130 + 162.50 + ((units - 100) * 5.26)
    surcharge = 45
 else:
    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)
    surcharge = 75
 total = amount + surcharge
 return total",human
365,"def count_Digit(n):
    count = 0
    while n != 0:
        n //= 10
        count += 1
    return count",human
652,"def flatten_by_column(matrix):
    return tuple(zip(*matrix))",lm
72,"def checkPerfectSquareDiff(n: int) -> bool:
    if n < 0:
        return False
    i = 0
    while i * i <= n:
        j = int((n - i * i) ** 0.5)
        if i * i + j * j == n:
            return True
        i += 1
    return False",lm
196,"def remove_tuples_of_length_k(lst, k):
    return [tup for tup in lst if len(tup)!=k]",lm
488,"def pentagon_area(side):
    """"""Calculates the area of a regular pentagon.

    Parameters:
          side: Length of a side of the pentagon.

    Returns:
          The area of the pentagon.
    """"""
    import math
    return (side**2) * math.sqrt(25 + 10 * math.sqrt(5)) / 4",lm
177,"def lcm(x, y):
    if x > y:
        greater = x
    else:
        greater = y
    while True:
        if greater % x == 0 and greater % y == 0:
            lcm = greater
            break
        greater += 1
    return lcm


def find_distinct_numbers(n, m):
    for i in range(1, n + 1):
        for j in range(i + 1, n + 1):
            if lcm(i, j) in range(n, m + 1):
                return (i, j)
    return (-1, -1)",lm
124,"def angle(complex_number):
    """"""Get the angle of a complex number.""""""
    return math.atan2(complex_number.imag, complex_number.real)",lm
570,"def remove_words(list_of_strings, character_or_string):
    """"""
    Write a function to remove words from a given list of strings containing a character or string.
    """"""

    new_list = []
    for string in list_of_strings:
        if character_or_string not in string:
            new_list.append(string)

    return new_list",lm
592,"def binomial_Coeff(n,k): 
    C = [0] * (k + 1); 
    C[0] = 1; # nC0 is 1 
    for i in range(1,n + 1):  
        for j in range(min(i, k),0,-1): 
            C[j] = C[j] + C[j - 1]; 
    return C[k]; 
def sum_Of_product(n): 
    return binomial_Coeff(2 * n,n - 1); ",human
962,"def sum_Natural(n): 
    sum = (n * (n + 1)) 
    return int(sum) 
def sum_Even(l,r): 
    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ",human
70,"3
def equalTuples(test_tup): 
  res = map(len, test_tup) 
  return (len(set(res)) == 1)",lm
724,"def power_base_sum(base, power):
    return sum([int(i) for i in str(pow(base, power))])",human
391,"def convert(lists):
    result = dict()
    for i in range(len(lists)):
        result[i] = lists[i]
    return result",lm
952,"def nCr_mod_p(n, r, p): 
	if (r > n- r): 
		r = n - r 
	C = [0 for i in range(r + 1)] 
	C[0] = 1 
	for i in range(1, n + 1): 
		for j in range(min(i, r), 0, -1): 
			C[j] = (C[j] + C[j-1]) % p 
	return C[r] ",human
29,"def getOddOccurrence(arr, arr_size): 
    res = 0
    for element in arr: 
        res = res ^ element 
    return res",lm
189,"def first_Missing_Positive(arr,n): 
    ptr = 0
    for i in range(n):
        if arr[i] == 1:
            ptr = 1
            break
    if ptr == 0:
        return(1)
    for i in range(n):
        if arr[i] <= 0 or arr[i] > n:
            arr[i] = 1
    for i in range(n):
        arr[(arr[i] - 1) % n] += n
    for i in range(n):
        if arr[i] <= n:
            return(i + 1)
    return(n + 1)",human
84,"def newman_conway(n):
    arr = [1, 1]
    while len(arr) < n:
        a, b = arr[-1], arr[-2]
        if a == b:
            arr.append(a + 1)
        else:
            arr.append(a)
            arr.append(b)
    return arr[n-1]",lm
114,"from collections import Counter 
def assign_freq(test_list):
  res = [(*key, val) for key, val in Counter(test_list).items()]
  return (str(res)) ",human
407,"def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False",human
606,"import math
def deg_to_radians(degrees):
  """"""Convert degrees to radians.

  Args:
    degrees: The angle in degrees.

  Returns:
    The angle in radians.
  """"""

  return degrees * math.pi / 180",lm
327,"def check_isosceles(x,y,z):
  if x==y or y==z or z==x:
	   return True
  else:
     return False",human
601,"def longest_chain(pairs, names):
    n = len(names)
    graph = [[] for _ in range(n + 1)]
    for u, v in pairs:
        graph[u].append(v)
        graph[v].append(u)

    visited = [False] * (n + 1)
    max_len = 0
    max_chain = []

    def dfs(node, chain):
        nonlocal max_len, max_chain
        if visited[node]:
            return
        visited[node] = True
        chain.append(names[node - 1])
        if len(chain) > max_len:
            max_len = len(chain)
            max_chain = chain.copy()
        for next in graph[node]:
            dfs(next, chain)
        visited[node] = False
        chain.pop()

    for i in range(1, n + 1):
        if not visited[i]:
            dfs(i, [])

    return max_len, max_chain",lm
906,"import re
def extract_date(url):
        return re.findall(r'/(\d{4})/(\d{1,2})/(\d{1,2})/', url)",human
307,"def get_colon_of_a_tuple(tuple1):
    return tuple1[1:]",lm
689,"def min_jumps_to_reach_end(nums):
    """"""
    Finds the minimum number of jumps to reach the end of the array.

    Args:
    nums: A list of integers, where each element represents the max number of steps
        that can be made forward from that element.

    Returns:
    The minimum number of jumps to reach the end of the array, or -1 if it is
    impossible.
    """"""
    if not nums:
        return 0

    # Initialize the minimum number of jumps to reach each index.
    min_jumps = [float('inf')] * len(nums)
    min_jumps[0] = 0

    # Iterate over the array.
    for i in range(1, len(nums)):
        # Find the minimum number of jumps to reach the current index.
        for j in range(i):
            # If we can reach the current index from the previous index, update the
            # minimum number of jumps to reach the current index.
            if j + nums[j] >= i and min_jumps[j] + 1 < min_jumps[i]:
                min_jumps[i] = min_jumps[j] + 1

    # Return the minimum number of jumps to reach the end of the array.
    return min_jumps[-1] if min_jumps[-1] != float('inf') else -1",lm
527,"def find_pairs(array, number):
    result = []
    for i in range(len(array)):
        for j in range(i + 1, len(array)):
            if array[i] + array[j] == number:
                result.append((array[i], array[j]))
    return result",lm
413,"def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result",human
65,"def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total",human
531,"def min_coins(coins, amount):
    dp = [float('inf') for _ in range(amount + 1)]
    dp[0] = 0
    for i in range(1, amount + 1):
        for coin in coins:
            if i - coin >= 0 and dp[i - coin] != float('inf'):
                dp[i] = min(dp[i], dp[i - coin] + 1)
    return dp[amount] if dp[amount] != float('inf') else -1",lm
170,"def sum_range(nums: list[int], start: int, end: int) -> int:
    """"""Write a function to find sum of the numbers in a list between the indices of a specified range.""""""
    return sum(nums[start:end + 1])",lm
331,"def countUnsetBits(n):
    cnt = 0
    i = 0
    while 1 << i <= n:
        if not (1 << i & n):
            cnt += 1
        i += 1
    return cnt",lm
45,"def gcd_array(arr):
    gcd = arr[0]
    for i in arr:
        gcd = reduce(gcd, i)
    return gcd",lm
440,"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))",human
951,"def max_similar_indices(test_list1, test_list2):
  res = [(max(x[0], y[0]), max(x[1], y[1]))
   for x, y in zip(test_list1, test_list2)]
  return (res) ",human
640,"import re
def remove_parenthesis(items):
 for item in items:
    return (re.sub(r"" ?\([^)]+\)"", """", item))",human
27,"def remove_digits(list_of_strings):
    new_list = []
    for string in list_of_strings:
        new_string = ''.join(filter(lambda char: not char.isdigit(), string))
        new_list.append(new_string)
    return new_list",lm
966,"def remove_empty_tuples(list_of_tuples):
    return [t for t in list_of_tuples if t]",lm
13,"from collections import Counter
def count_common(words):
  word_counts = Counter(words)
  top_four = word_counts.most_common(4)
  return (top_four)
",human
648,"def swap_n_plus_1_elements(list1, n): 
    if n < 2 or n > len(list1) - 1: 
        return list1 
    
    for i in range(n - 1, len(list1), n): 
        list1[i], list1[i + 1] = list1[i + 1], list1[i] 
    
    return list1",lm
781,"def check_divisors(n):
  """"""Check whether the count of divisors is even or odd.""""""
  if n % 2 == 1:
    return ""Odd""

  cnt = 0
  for i in range(1, int(n ** 0.5) + 1):
    if n % i == 0:
      cnt += 1
      if n // i != i:
        cnt += 1

  if cnt % 2 == 0:
    return ""Even""
  else:
    return ""Odd""",lm
89,"def closest_num(N):
  return (N - 1)",human
908,"def find_fixed_point(arr, n): 
	for i in range(n): 
		if arr[i] is i: 
			return i 
	return -1",human
514,"def sum_elements(test_tup):
  res = sum(list(test_tup))
  return (res) ",human
743,"def rotate_right(list1,m,n):
  result =  list1[-(m):]+list1[:-(n)]
  return result",human
41,"def filter_evennumbers(nums):
 even_nums = list(filter(lambda x: x%2 == 0, nums))
 return even_nums",human
680,"def is_increasing(seq):
    """"""
    Checks whether a sequence of numbers has an increasing trend or not.

    Parameters:
    seq: A list of numbers.

    Returns:
    A boolean value indicating whether the sequence has an increasing trend or not.
    """"""

    # Check if the sequence is empty or has only one element.
    if len(seq) <= 1:
        return True

    # Check if the sequence is in increasing order.
    for i in range(1, len(seq)):
        if seq[i] <= seq[i - 1]:
            return False

    # The sequence is in increasing order.
    return True",lm
935,"def series_sum(number):
 total = 0
 total = (number * (number + 1) * (2 * number + 1)) / 6
 return total",human
179,"def is_num_keith(x): 
	terms = [] 
	temp = x 
	n = 0 
	while (temp > 0): 
		terms.append(temp % 10) 
		temp = int(temp / 10) 
		n+=1 
	terms.reverse() 
	next_term = 0 
	i = n 
	while (next_term < x): 
		next_term = 0 
		for j in range(1,n+1): 
			next_term += terms[i - j] 
		terms.append(next_term) 
		i+=1 
	return (next_term == x) ",human
302,"def set_Bit_Number(n): 
    if (n == 0): 
        return 0; 
    msb = 0; 
    n = int(n / 2); 
    while (n > 0): 
        n = int(n / 2); 
        msb += 1; 
    return (1 << msb)",human
475,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter",human
139,"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter",human
398,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",human
721,"def maxAveragePath(arr, n):
    dp = []
    for i in range(n):
        dp.append([0] * n)
    dp[0][0] = arr[0][0]
    for i in range(1, n):
        dp[i][0] = dp[i - 1][0] + arr[i][0]
        dp[0][i] = dp[0][i - 1] + arr[0][i]
    for i in range(1, n):
        for j in range(1, n):
            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + arr[i][j]
    maxAvg = dp[n - 1][n - 1] / (n * n)
    return maxAvg",lm
768,"def check_Odd_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 1): 
        return True
    else: 
        return False",human
1,"R = 3
C = 3
def min_cost(cost, m, n): 
	tc = [[0 for x in range(C)] for x in range(R)] 
	tc[0][0] = cost[0][0] 
	for i in range(1, m+1): 
		tc[i][0] = tc[i-1][0] + cost[i][0] 
	for j in range(1, n+1): 
		tc[0][j] = tc[0][j-1] + cost[0][j] 
	for i in range(1, m+1): 
		for j in range(1, n+1): 
			tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] 
	return tc[m][n]",human
296,"def get_Inv_Count(arr,n): 
    inv_count = 0
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ",human
555,"def diff_sum_cube_sum(n):
    sum_cubes = 0
    sum_nums = 0
    for i in range(1, n + 1):
        sum_cubes += i ** 3
        sum_nums += i
    return sum_cubes - sum_nums",lm
905,"def sum_binomial_squares(n):
    f = [0] * (n + 1)
    for i in range(1, n + 1):
        for j in range(i, 0, -1):
            f[j] = f[j] + f[j - 1]
        f[0] = 1
    return sum(map(lambda x: x * x, f))",lm
289,"def odd_Days(N): 
    hund1 = N // 100
    hund4 = N // 400
    leap = N >> 2
    ordd = N - leap 
    if (hund1): 
        ordd += hund1 
        leap -= hund1 
    if (hund4): 
        ordd -= hund4 
        leap += hund4 
    days = ordd + leap * 2
    odd = days % 7
    return odd ",human
161,"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result",human
64,"def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks",human
883,"def divisible_by_m_and_n(lst, m, n):
    result = list(filter(lambda x: x % m == 0 and x % n == 0, lst))
    return result",lm
134,"def endIsEvenOrOdd(arr: list, n: int, p: int):
    add = 0
    add = n
    for _ in range(p):
        arr.append((arr[len(arr)-1] + add)%2)
    return arr[len(arr)-1]%2",lm
672,"def max3(a: int, b: int, c: int) -> int:
    max = a
    if b > max:
        max = b
    if c > max:
        max = c
    return max",lm
24,"def binary_to_decimal(binary): 
    binary1 = binary 
    decimal, i, n = 0, 0, 0
    while(binary != 0): 
        dec = binary % 10
        decimal = decimal + dec * pow(2, i) 
        binary = binary//10
        i += 1
    return (decimal)",human
698,"def sort_dict_by_tuple_product(dict1):
    """"""Sort dictionary items by tuple product of keys for the given dictionary with tuple keys.
    """"""
    sort_key = lambda x: reduce(lambda a, b: a * b, x)
    return sorted(dict1.items(), key=sort_key)",lm
435,"def last_Digit(n) :
    return (n % 10) ",human
138,"def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True",human
799,"def left_rotate(n, d):
  return (n << d | n >> (32 - d)) & 0xFFFFFFFF",lm
912,"def binomial_coeff(n, k): 
	C = [[0 for j in range(k + 1)] 
			for i in range(n + 1)] 
	for i in range(0, n + 1): 
		for j in range(0, min(i, k) + 1): 
			if (j == 0 or j == i): 
				C[i][j] = 1
			else: 
				C[i][j] = (C[i - 1][j - 1] 
							+ C[i - 1][j]) 
	return C[n][k] 
def lobb_num(n, m): 
	return (((2 * m + 1) *
		binomial_coeff(2 * n, m + n)) 
					/ (m + n + 1))",human
372,"import heapq

def heap_sort(arr):
    heapq.heapify(arr)
    sorted_arr = []
    while arr:
        sorted_arr.append(heapq.heappop(arr))
    return sorted_arr",lm
896,"def last(n):
   return n[-1]
def sort_list_last(tuples):
  return sorted(tuples, key=last)",human
85,"import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea",human
909,"def previous_palindrome(num):
    for x in range(num-1,0,-1):
        if str(x) == str(x)[::-1]:
            return x",human
57,"def largest_number_from_digits(digits):
    digits.sort(reverse=True)
    largest_number = """".join(digits)
    return largest_number",lm
312,"def volume_cone(radius, height):
  """"""Calculates the volume of a cone.

  Args:
    radius: The radius of the cone in centimeters.
    height: The height of the cone in centimeters.

  Returns:
    The volume of the cone in cubic centimeters.
  """"""

  pi = 3.14159
  volume = (1/3) * pi * radius**2 * height
  return volume",lm
424,"def get_last_char_of_tuple(test_tup):
  res = tuple([ele[::-1][0] for ele in test_tup])
  return (res)",lm
71,"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums",human
169,"def get_pell(n): 
	if (n <= 2): 
		return n 
	a = 1
	b = 2
	for i in range(3, n+1): 
		c = 2 * b + a 
		a = b 
		b = c 
	return b ",human
681,"import math

def smallest_prime_divisor(n):
  if n <= 1:
    return None
  if n % 2 == 0:
    return 2
  for i in range(3, int(math.sqrt(n)) + 1, 2):
    if n % i == 0:
      return i
  return n",lm
623,"def nth_nums(nums,n):
 nth_nums = list(map(lambda x: x ** n, nums))
 return nth_nums",human
706,"def is_subset(arr1, arr2):
    return set(arr1).issubset(set(arr2))",lm
309,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ",human
122,"def findNthSmart(n):
    count = 0
    num = 1

    while count < n:
        if '2' not in str(num) and '3' not in str(num)\
                and '5' not in str(num) and '7' not in str(num):
            count += 1
        num += 1

    return num - 1",lm
595,"def minSwaps(s1, s2): 
    n1=len(s1) 
    n2=len(s2) 
    if n1 != n2: 
        print(""No"") 
        return 
    x = sum (ord(i) - ord('0') for i in s1) 
    y = sum (ord(i) - ord('0') for i in s2) 
    if(x != y): 
        print(""No"") 
    else: 
        count = 0
        for i in range(n1): 
            if s1[i]!=s2[i]: 
                count+=1
    answer = count/2
    print(int(answer))",lm
749,"def sort_strings_of_numbers(list_of_strings):
    """"""
    Sorts a given list of strings of numbers numerically.

    Args:
        list_of_strings: A list of strings of numbers.

    Returns:
        A list of strings of numbers sorted numerically.
    """"""
    numeric_list = [int(s) for s in list_of_strings]
    numeric_list.sort()
    return [str(n) for n in numeric_list]",lm
949,"def count_digs(tup):
  return sum([len(str(ele)) for ele in tup ]) 
def sort_list(test_list):
  test_list.sort(key = count_digs)
  return (str(test_list))",human
389,"def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ",human
73,"import re

def split_with_multiple_delimiters(string, delimiters):
    """"""
    Split a given string with multiple delimiters by using regex.

    Args:
        string: The string to be split.
        delimiters: A string containing the delimiters to be used.

    Returns:
        A list of substrings.
    """"""

    regex_pattern = '|'.join(map(re.escape, delimiters))
    return re.split(regex_pattern, string)",lm
709,"from collections import defaultdict 
def get_unique(test_list):
  res = defaultdict(list)
  for sub in test_list:
    res[sub[1]].append(sub[0])
  res = dict(res)
  res_dict = dict()
  for key in res:
    res_dict[key] = len(list(set(res[key])))
  return (str(res_dict)) ",human
727,"import re 
def remove_char(S):
  result = re.sub('[\W_]+', '', S) 
  return result",human
748,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)",human
3,"import math
def is_not_prime(n):
    result = False
    for i in range(2,int(math.sqrt(n)) + 1):
        if n % i == 0:
            result = True
    return result",human
560,"def union_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1 + test_tup2))
  return (res) ",human
623,"lambda_power = lambda n: list(map(lambda x: x ** n, lst))",lm
933,"import re
def camel_to_snake(text):
  str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
  return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()",human
900,"import re
def match_num(string):
    text = re.compile(r""^5"")
    if text.match(string):
        return True
    else:
        return False",human
275,"import math as mt 
def get_Position(a,n,m): 
    for i in range(n): 
        a[i] = (a[i] // m + (a[i] % m != 0))  
    result,maxx = -1,-1
    for i in range(n - 1,-1,-1): 
        if (maxx < a[i]): 
            maxx = a[i] 
            result = i 
    return result + 1",human
604,"def reverse_words(string):
    reversed_string = ' '.join(reversed(string.split()))
    return reversed_string",lm
577,"def last_Digit_Factorial(n): 
    if (n == 0): return 1
    elif (n <= 2): return n  
    elif (n == 3): return 6
    elif (n == 4): return 4 
    else: 
      return 0",human
298,"def find_nested_list_elements_in_list(nested_list, list_to_search):
    """"""
    Finds the nested list elements which are present in another list.

    Args:
        nested_list (list): The nested list to search in.
        list_to_search (list): The list to search for.

    Returns:
        list: The list of nested list elements which are present in the list to search.
    """"""

    found_elements = []

    def dfs(current_list):
        for element in current_list:
            if isinstance(element, list):
                dfs(element)
            elif element in list_to_search:
                found_elements.append(element)

    dfs(nested_list)

    return found_elements",lm
19,"def contains_duplicate(nums):
    return len(nums) > len(set(nums))",lm
395,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None",human
829,"def second_most_repeated(Sequence):
    count = {}
    for x in Sequence:
        if x in count:
            count[x] += 1
        else:
            count[x] = 1
    max1, max2 = 0, 0
    s_max1, s_max2 = """", """"
    for key, value in count.items():
        if value > max1:
            max1, max2 = value, max1
            s_max1, s_max2 = key, s_max1
        elif value > max2 and value != max1:
            max2, s_max2 = value, key
    return s_max2",lm
53,"def check_Equality(str):
  if (str[0] == str[-1]):  
    return (""Equal"") 
  else:  
    return (""Not Equal"") ",human
26,"def check_k_elements(test_list, K):
  res = True
  for tup in test_list:
    for ele in tup:
      if ele != K:
        res = False
  return (res) ",human
106,"def add_list_to_tuples(test_tup, test_list): 
  res = [(ele + test_list) for ele in test_tup] 
  return (res)",lm
916,"def find_triplet_array(A, arr_size, sum): 
	for i in range( 0, arr_size-2): 
		for j in range(i + 1, arr_size-1): 
			for k in range(j + 1, arr_size): 
				if A[i] + A[j] + A[k] == sum: 
					return  A[i],A[j],A[k] 
					return True
	return False",human
292,"def find(n,m):  
    q = n//m 
    return (q)",human
232,"import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest",human
25,"def product_of_non_repeated(arr):
    unique_arr = list(set(arr))
    product = 1
    for i in unique_arr:
        product *= i
    return product",lm
20,"def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False",human
552,"def is_linear(seq):
  """"""
  Checks whether a given sequence is linear or not.

  Parameters:
    seq: The sequence to check.

  Returns:
    True if the sequence is linear, False otherwise.
  """"""

  if len(seq) <= 1:
    return True

  for i in range(1, len(seq)):
    if seq[i] - seq[i - 1] != seq[1] - seq[0]:
      return False

  return True",lm
93,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)",human
404,"def minimum_of_two_numbers(a, b):
    """"""Finds the minimum of two numbers.""""""
    if a < b:
        return a
    else:
        return b",lm
332,"def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict",human
260,"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)",human
366,"def adjacent_num_product(list_nums):
    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",human
423,"def get_maximum_gold(triangle):
    copy = []
    for row in triangle:
        copy.append([None] * len(row))
    copy[0][0] = triangle[0][0]
    for i in range(1, len(triangle)):
        for j in range(len(triangle[i])):
            if j == 0:
                copy[i][j] = triangle[i][j] + copy[i - 1][0]
            elif j == len(triangle[i]) - 1:
                copy[i][j] = triangle[i][j] + copy[i - 1][-1]
            else:
                copy[i][j] = triangle[i][j] + max(copy[i - 1][j], copy[i - 1][j - 1])
    return max(copy[-1])",lm
916,"def findTriplets(nums, n, sum):
    found = False
    for i in range(0, n-2):
        for j in range(i+1, n-1):
            for k in range(j+1, n):
                if nums[i] + nums[j] + nums[k] == sum:
                    print(nums[i], nums[j], nums[k])
                    found = True
    if not found:
        print(""No Triplet Found"")
    return found",lm
737,"import re 
regex = '^[aeiouAEIOU][A-Za-z0-9_]*'
def check_str(string): 
	if(re.search(regex, string)): 
		return (""Valid"") 
	else: 
		return (""Invalid"") ",human
593,"def remove_leading_zeroes(ip_address):
    """"""Remove leading zeroes from an ip address.""""""

    return '.'.join(str(int(part)) for part in ip_address.split('.'))",lm
963,"def discriminant(a, b, c):
  return b**2 - 4*a*c",lm
716,"def rombus_perimeter(a):
  perimeter=4*a
  return perimeter",human
615,"def avg_tuple_tuples(test_tup): 
    res = tuple(sum(ele) / len(ele) for ele in zip(*test_tup)) 
    return (res)",lm
286,"def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far",human
352,"def unique_Characters(str):
    for i in range(len(str)):
        for j in range(i + 1,len(str)): 
            if (str[i] == str[j]):
                return False;
    return True;",human
507,"def remove_words(word_list, words_to_remove):
    """"""
    Remove specific words from a given list.

    Args:
        word_list: The list of words to remove from.
        words_to_remove: The list of words to remove.

    Returns:
        A new list with the words removed.
    """"""

    new_list = []
    for word in word_list:
        if word not in words_to_remove:
            new_list.append(word)

    return new_list",lm
880,"def Check_Solution(a,b,c) : 
    if ((b*b) - (4*a*c)) > 0 : 
        return (""2 solutions"") 
    elif ((b*b) - (4*a*c)) == 0 : 
        return (""1 solution"") 
    else : 
        return (""No solutions"") ",human
90,"def length_of_longword(text):
    words = text.split()
    longest_word = """"
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return len(longest_word)",lm
837,"def cube_sum_odd(n):
    sum = 0
    for i in range(1, n + 1):
        if i % 2 == 1:
            sum += i * i * i
    return sum",lm
722,"def filter_data(students,h,w):
    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}
    return result    ",human
608,"def bell_Number(n): 
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] 
    return bell[n][0] ",human
34,"def find_missing(ar,N): 
    l = 0
    r = N - 1
    while (l <= r):  
        mid = (l + r) / 2
        mid= int (mid) 
        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): 
            return (mid + 1)  
        elif (ar[mid] != mid + 1): 
            r = mid - 1 
        else: 
            l = mid + 1
    return (-1) ",human
300,"def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res ",human
545,"def take_L_and_F_set_bits(n) : 
    n = n | n >> 1
    n = n | n >> 2
    n = n | n >> 4
    n = n | n >> 8
    n = n | n >> 16 
    return ((n + 1) >> 1) + 1      
def toggle_F_and_L_bits(n) :  
    if (n == 1) : 
        return 0 
    return n ^ take_L_and_F_set_bits(n) ",human
556,"def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  ",human
96,"def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x",human
943,"import heapq

def merge_sorted_lists(l1, l2):
  merged_list = []
  heapq.merge(l1, l2, merged_list)
  return merged_list",lm
53,"def check_first_last(str1):
    if len(str1) <= 1:
        return True
    if str1[0] == str1[-1]:
        return True
    else:
        return False",lm
913,"import re
def end_num(string):
    text = re.compile(r"".*[0-9]$"")
    if text.match(string):
        return True
    else:
        return False",human
578,"def interleave(*lists):
    return list(zip(*lists))",lm
168,"def frequency(a,x): 
    count = 0  
    for i in a: 
        if i == x: count += 1
    return count ",human
280,"def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos",human
9,"def min_rotations(s):
    n = len(s)
    for i in range(1, n):
        if s[i] < s[i - 1]:
            return i
    return 0",lm
702,"def find_ind(key, i, n, 
			k, arr):
	ind = -1
	start = i + 1
	end = n - 1;
	while (start < end):
		mid = int(start +
				(end - start) / 2)
		if (arr[mid] - key <= k):
			ind = mid
			start = mid + 1
		else:
			end = mid
	return ind
def removals(arr, n, k):
	ans = n - 1
	arr.sort()
	for i in range(0, n):
		j = find_ind(arr[i], i, 
					n, k, arr)
		if (j != -1):
			ans = min(ans, n -
						(j - i + 1))
	return ans",human
161,"def remove_elements(list1, list2):
    final_list = [element for element in list1 if element not in list2]
    return final_list",lm
158,"def min_Ops(arr,n,k): 
    max1 = max(arr) 
    res = 0
    for i in range(0,n):  
        if ((max1 - arr[i]) % k != 0): 
            return -1 
        else: 
            res += (max1 - arr[i]) / k 
    return int(res) ",human
948,"def get_item(tup1,index):
  item = tup1[index]
  return item",human
920,"def remove_none_tuples(test_list):
  res = list(filter(lambda ele: not all(ele == None for ele in list(ele)), test_list)) 
  return (res)",lm
281,"def check_if_unique(list1):
    unique = True
    for i in range(len(list1)):
        for j in range(i + 1, len(list1)):
            if list1[i] == list1[j]:
                unique = False
                break
    return unique",lm
902,"def combine_dicts(dict1, dict2):
  combined = dict1.copy()
  for key, value in dict2.items():
    if key in combined:
      combined[key] += value
    else:
      combined[key] = value
  return combined",lm
405,"def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False",human
846,"def find_platform(arr, dep, n): 
    arr.sort() 
    dep.sort() 
    plat_needed = 1
    result = 1
    i = 1
    j = 0
    while (i < n and j < n): 
        if (arr[i] <= dep[j]):           
            plat_needed+= 1
            i+= 1
        elif (arr[i] > dep[j]):           
            plat_needed-= 1
            j+= 1
        if (plat_needed > result):  
            result = plat_needed           
    return result",human
942,"3
def check_list_element_present(list1, element):
    if element in list1:
        return True
    else:
        return False",lm
158,"def operation_equ_ele(arr: list, n: int, k: int) -> int:
    """"""Write a python function to find k number of operations required to make all elements equal.""""""
    lm = float('inf')
    mx = float('-inf')
    
    for i in range(n):
        lm = min(lm, arr[i])
        mx = max(mx, arr[i])
        
    diff = mx - lm
    if diff <= k:
        return diff
    else:
        return 2*(k - diff)",lm
291,"def countWays(n, k):
    same = [0] * (n + 1)
    diff = [0] * (n + 1)

    same[1] = k
    diff[1] = k * (k - 1)

    for i in range(2, n + 1):
        same[i] = diff[i - 1]
        diff[i] = (same[i - 1] + diff[i - 1]) * (k - 1)

    return same[n] + diff[n]",lm
456,"def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result",human
160,"def solve_ax_by_n(n, a, b):
    for x in range(1, int((n+a-1)/a)):
        y = (n - a*x) // b
        if (a*x + b*y == n):
            return x, y
    return None, None",lm
518,"def square_root(number):
    if number < 0:
        return (""The square root of a negative number is undefined."")
    low, high = 0, number
    while low <= high:
        mid = (low + high) // 2
        if mid*mid == number:
            return mid
        elif mid*mid < number:
            low = mid + 1
        else:
            high = mid - 1
    return (""The given number is not a perfect square."")",lm
874,"def check_Concat(str1,str2):
    N = len(str1)
    M = len(str2)
    if (N % M != 0):
        return False
    for i in range(N):
        if (str1[i] != str2[i % M]):
            return False         
    return True",human
547,"def hamming_distance_sum(n):
  return (n * (n + 1)) // 2",lm
553,"def tuple_to_float(test_tup):
  res = float('.'.join(str(ele) for ele in test_tup))
  return (res) ",human
573,"def unique_product(list_data):
    temp = list(set(list_data))
    p = 1
    for i in temp:
        p *= i
    return p",human
16,"import re

def find_lowercase_underscore_sequences(text):
  """"""
  Find sequences of lowercase letters joined with an underscore.

  Args:
    text: The text to search.

  Returns:
    A list of sequences of lowercase letters joined with an underscore.
  """"""

  pattern = r""[a-z]+_[a-z]+""
  matches = re.findall(pattern, text)

  return matches",lm
824,"def remove_even(l):
    for i in l:
        if i % 2 == 0:
            l.remove(i)
    return l",human
422,"def sum_cubes(n):
    result = 0
    for i in range(1, n + 1):
        result += i ** 3
    return result",lm
33,"def decimalToBinary(n):
    '''function to convert decimal to binary'''
    if n > 1:
        decimalToBinary(n//2)
    print(n % 2,end = '')",lm
686,"def find_frequency_list(test_list):
  res = {}
  for ele in test_list:
    if ele not in res:
      res[ele] = 0
    res[ele] += 1  
  return res",lm
937,"from collections import Counter 
def max_char(str1):
    temp = Counter(str1) 
    max_char = max(temp, key = temp.get)
    return max_char",human
179,"def isKeithNumber(n): 
    string = str(n) 
    i = 2
    while len(string) < n: 
        string += str(int(string[i - 2:i])) 
        i += 1
    return int(string) == n",lm
100,"def next_palindrome(n):
    n = n + 1
    while not is_palindrome(n):
        n += 1
    return n
def is_palindrome(n):
    return str(n) == str(n)[::-1]",lm
865,"def ntimes_list(nums,n):
    result = map(lambda x:n*x, nums) 
    return list(result)",human
564,"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] != arr[j]): 
                cnt += 1; 
    return cnt; ",human
613,"def max_record(test_tup):
  res = max(test_tup, key = lambda x: x[1][0]) 
  return (res) 


def max_record(test_tup):
  res = max(test_tup, key = lambda x: x[1][0]) 
  return (res)",lm
122,"MAX = 3000 
def smartNumber(n): 
	primes = [0] * MAX 
	result = [] 
	for i in range(2, MAX): 
		if (primes[i] == 0): 
			primes[i] = 1 
			j = i * 2 
			while (j < MAX): 
				primes[j] -= 1 
				if ( (primes[j] + 3) == 0): 
					result.append(j) 
				j = j + i 
	result.sort() 
	return result[n - 1] ",human
730,"def remove_consecutive_duplicates(list1):
  result = []
  for item in list1:
    if not result or item != result[-1]:
      result.append(item)
  return result",lm
904,"def is_even(num):
    return num % 2 == 0",lm
248,"def harmonic_sum(n):
    """"""Calculate the harmonic sum of n-1.""""""
    h_sum = 0
    for i in range(1, n):
        h_sum += 1 / i
    return h_sum",lm
910,"def validate_date(date_text):
    try:
        datetime.strptime(date_text, '%Y-%m-%d')
        return True
    except ValueError:
        return False",lm
474,"def replace_characters(str1, char1, char2):
    """""" Replaces all occurrences of 'char1' with 'char2' in 'str1'.""""""
    str1 = str1.replace(char1, char2)
    return str1",lm
348,"def bin_coff(n, r): 
	val = 1
	if (r > (n - r)): 
		r = (n - r) 
	for i in range(0, r): 
		val *= (n - i) 
		val //= (i + 1) 
	return val 
def find_ways(M): 
	n = M // 2
	a = bin_coff(2 * n, n) 
	b = a // (n + 1) 
	return (b) ",human
403,"import re
def is_valid_URL(str):
	regex = (""((http|https)://)(www.)?"" +
			""[a-zA-Z0-9@:%._\\+~#?&//=]"" +
			""{2,256}\\.[a-z]"" +
			""{2,6}\\b([-a-zA-Z0-9@:%"" +
			""._\\+~#?&//=]*)"")
	p = re.compile(regex)
	if (str == None):
		return False
	if(re.search(p, str)):
		return True
	else:
		return False",human
918,"def count_change(amount: int, coins: list[int]) -> int:
    """"""
    Counts the number of ways to make change for a given amount of money using a given list of coins.

    Args:
    amount: The amount of money to make change for.
    coins: A list of coins, represented by their values in cents.

    Returns:
    The number of ways to make change for the given amount of money using the given list of coins.
    """"""

    # If the amount is 0, then there is only one way to make change: do nothing.
    if amount == 0:
        return 1

    # If the amount is negative, then there is no way to make change.
    if amount < 0:
        return 0

    # If the list of coins is empty, then there is no way to make change.
    if not coins:
        return 0

    # Initialize a list to store the number of ways to make change for each amount from 0 to the given amount.
    ways = [0] * (amount + 1)

    # Set the number of ways to make change for 0 to 1.
    ways[0] = 1

    # For each coin in the list of coins, iterate over the amounts from the value of the coin to the given amount.
    for coin in coins:
        for i in range(coin, amount + 1):
            # Add the number of ways to make change for the amount minus the value of the coin to the number of ways to make change for the amount.
            ways[i] += ways[i - coin]

    # Return the number of ways to make change for the given amount.
    return ways[amount]",lm
803,"def isPerfectSquare(n):
    if n > 0:
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0 and n / i == i:
                return True
    return False",lm
961,"def romanToInt(s):
  roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
  result = 0
  for i in range(len(s)):
    if i > 0 and roman[s[i]] > roman[s[i - 1]]:
      result += roman[s[i]] - 2 * roman[s[i - 1]]
    else:
      result += roman[s[i]]
  return result",lm
97,"def find_frequency(sequence):
    freq_count = {}
    for item in sequence:
        if item in freq_count:
            freq_count[item] += 1
        else:
            freq_count[item] = 1
    return freq_count",lm
574,"def cylinder_surface_area(radius, height):
    import math
    return 2 * math.pi * radius * height + 2 * math.pi * radius ** 2",lm
426,"oddNumbers = list(filter(lambda x: x%2!=0, range(1,20)))",lm
516,"def radix_sort(nums):
    RADIX = 10
    placement = 1
    max_digit = max(nums)

    while placement < max_digit:
      buckets = [list() for _ in range( RADIX )]
      for i in nums:
        tmp = int((i / placement) % RADIX)
        buckets[tmp].append(i)
      a = 0
      for b in range( RADIX ):
        buck = buckets[b]
        for i in buck:
          nums[a] = i
          a += 1
      placement *= RADIX
    return nums",human
830,"import math
def round_up(a, digits):
    n = 10**-digits
    return round(math.ceil(a / n) * n, digits)",human
403,"import re

def is_valid_url(url):
    regex = r""^(?:http|ftp)s?://""  # http or https
    regex += r""(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),])+""  # domain name
    regex += r""(?:[a-zA-Z0-9]+(?:\.[a-zA-Z0-9]+)*)?""  # subdomain
    regex += r""(?:\:[0-9]{2,5})?""  # port
    regex += r""(?:[/?].*)?""  # query string
    return re.match(regex, url)",lm
193,"def remove_tuple(test_tup):
  res = tuple(set(test_tup))
  return (res) ",human
832,"import re 
def extract_max(input): 
	numbers = re.findall('\d+',input) 
	numbers = map(int,numbers) 
	return max(numbers)",human
190,"def count_integral_points_inside_square(side_length):
    return (side_length - 1) ** 2",lm
536,"def select_nth(list1, n):
    """"""Select the nth items of a list.""""""

    if n < 1 or n > len(list1):
        return None

    return list1[n-1]",lm
319,"import re
def find_five_characters_long_words(text):
    pattern = r""\b[a-zA-Z]{5}\b""
    matches = re.findall(pattern, text)
    return matches",lm
845,"def count_digits(n):
    result = 1
    count = 0
    while n > 0:
        result *= n
        count += 1
        n //= 5

    result = str(result)
    return len(result)",lm
243,"def sort_by_first_element(list1): 
    list1.sort( key = lambda x: x[0]) 
    return list1",lm
491,"def geometric_sum(a, r, n):
    if r == 1:
        return a * n
    else:
        return a * (1 - r ** n) / (1 - r)",lm
901,"def smallest_multiple(n):
    if (n<=2):
      return n
    i = n * 2
    factors = [number  for number in range(n, 1, -1) if number * 2 > n]
    while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i",human
915,"def rearrange_positives_negatives(arr):
  positives = list(filter(lambda x: x > 0, arr))
  negatives = list(filter(lambda x: x < 0, arr))
  return positives + negatives",lm
104,"sorted_sublists = list(map(sorted, l))",lm
745,"def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]",human
28,"def binomial_Coeff(n,k): 
    if k > n : 
       return 0
    if k==0 or k ==n : 
        return 1 
    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",human
47,"def lastDigitFactorial(a, b):
  res = 1
  for i in range(2, min(a, b) + 1):
    res = (res * i) % 10
  return res",lm
619,"def move_numbers_to_string(string: str) -> str:
    """""" Write a function to move all the numbers in it to the given string. """"""
    new_string = """"
    for i in string:
        if i.isdigit():
            new_string += i
    return new_string",lm
622,"def find_median(arr1, arr2):
    i = 0  # Index of current element in arr1[0..m-1]
    j = 0  # Index of current element in arr2[0..n-1]
    m = len(arr1)
    n = len(arr2)
    median = 0.0

    while i < m and j < n:
        # If the current element of arr1 is less than or equal to the current element of arr2
        if arr1[i] <= arr2[j]:
            # Store the smaller element and move forward in arr1
            median = arr1[i]
            i += 1
        else:
            # Store the smaller element and move forward in arr2
            median = arr2[j]
            j += 1

    # Check if any element was left
    while i < m:
        median = arr1[i]
        i += 1

    while j < n:
        median = arr2[j]
        j += 1

    return median",lm
649,"def sum_Range_list(nums, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += nums[i]                                                                                                                                                                                                  
    return sum_range   ",human
382,"def find_rotation_count(A):
    (left, right) = (0, len(A) - 1)
    while left <= right:
        if A[left] <= A[right]:
            return left
        mid = (left + right) // 2
        next = (mid + 1) % len(A)
        prev = (mid - 1 + len(A)) % len(A)
        if A[mid] <= A[next] and A[mid] <= A[prev]:
            return mid
        elif A[mid] <= A[right]:
            right = mid - 1
        elif A[mid] >= A[left]:
            left = mid + 1
    return -1",human
234,"def volume_cube(l):
  volume = l * l * l
  return volume",human
52,"def parallelogram_area(b,h):
  area=b*h
  return area",human
44,"import re
def text_match_string(text):
        patterns = '^\w+'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'",human
810,"def repeat_by_count(l: list[int]) -> list[int]:
    """"""Write a function to iterate over elements repeating each as many times as its count.
    """"""
    ret = []
    for item in l:
        for _ in range(item):
            ret.append(item)
    return ret",lm
789,"def perimeter(n,s): return s*n",lm
947,"def len_log(list1):
    min=len(list1[0])
    for i in list1:
        if len(i)<min:
            min=len(i)
    return min",human
23,"def maximum_Sum(list1): 
    maxi = -100000
    for x in list1: 
        sum = 0 
        for y in x: 
            sum+= y      
        maxi = max(sum,maxi)     
    return maxi ",human
143,"def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ",human
724,"def sum_digits_of_base_to_power(base, power):
    str_base_to_power = str(base ** power)
    sum_of_digits = 0
    for digit in str_base_to_power:
        sum_of_digits += int(digit)
    return sum_of_digits",lm
633,"def sum_xor_pairs(arr):
  """"""
  Finds the sum of xor of all pairs of numbers in the given array.

  Args:
    arr: A list of integers.

  Returns:
    An integer representing the sum of xor of all pairs of numbers in the array.
  """"""

  sum = 0
  for i in range(len(arr)):
    for j in range(i + 1, len(arr)):
      sum += arr[i] ^ arr[j]

  return sum",lm
769,"def difference(list1, list2):
    result = [item for item in list1 if item not in list2]
    return result",lm
873,"def fibonacci(n):
    if n < 2:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)",lm
495,"import re

def rem_lc(string):
  return re.sub(r'([a-z]+)', '', string)",lm
887,"def is_odd(num):
  return num & 1",lm
69,"def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set",human
526,"def capitalize_first_last_letters(str1):
     str1 = result = str1.title()
     result =  """"
     for word in str1.split():
        result += word[:-1] + word[-1].upper() + "" ""
     return result[:-1]  ",human
764,"def number_ctr(str):
      number_ctr= 0
      for i in range(len(str)):
          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     
      return  number_ctr",human
557,"3
def toggle_case(string):
    return ''.join(map(lambda c: chr(ord(c) - 32) if c.islower() else chr(ord(c) + 32), string))",lm
171,"def pentagon_perimeter(side):
  return 5 * side",lm
605,"def is_prime(n):
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            return False
    return True",lm
233,"def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface",human
427,"3
import re

def convert_date_format(date):
  regex = r'(\d{4})-(\d{1,2})-(\d{1,2})'  # Date format regex
  match = re.match(regex, date)

  if match:
    day, month, year = match.groups()
    return f'{day}-{month}-{year}'  # Return converted date

  return 'Invalid date format'  # Return error message for invalid input",lm
471,"def find_remainder(arr, lens, n): 
    mul = 1
    for i in range(lens):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n ",human
483,"def first_factorial_divisible_by_x(x):
    """"""
    Finds the first natural number whose factorial is divisible by x.

    Parameters:
    x: The number to find the factorial of.

    Returns:
    The first natural number whose factorial is divisible by x.
    """"""
    factorial = 1
    number = 1
    while factorial % x != 0:
        factorial *= number
        number += 1
    return number",lm
442,"def ratio_positives(arr):
  pos_count = 0
  for i in arr:
    if i > 0:
      pos_count += 1
  return pos_count / len(arr)",lm
911,"import heapq
def maxProductThree(arr):
    """"""
    Computes the maximum product of three numbers of a given array of integers using heap queue algorithm.

    Parameters:
        arr: An array of integers.

    Returns:
        The maximum product of three numbers in the array.
    """"""
    # Build a max heap of size 3.
    heap = heapq.nlargest(3, arr)

    # If heap contains at least three positive numbers, return the product of the three largest positive numbers.
    if heap[0] > 0 and heap[1] > 0 and heap[2] > 0:
        return heap[0] * heap[1] * heap[2]

    # If heap contains at least two positive numbers and one negative number, return the product of the two largest positive numbers and the largest negative number.
    if heap[0] > 0 and heap[1] > 0 and heap[2] < 0:
        return heap[0] * heap[1] * heap[2]

    # If heap contains at least one positive number and two negative numbers, return the product of the largest positive number and the two largest negative numbers.
    if heap[0] < 0 and heap[1] < 0 and heap[2] > 0:
        return heap[0] * heap[1] * heap[2]

    # If heap contains three negative numbers, return the product of the three largest negative numbers.
    return heap[0] * heap[1] * heap[2]",lm
439,"def convert_list_to_int(list1):
    final_int = 0
    for num in list1:
        final_int = final_int * 10 + num
    return final_int",lm
272,"3
def rear_element_extraction_from_list_of_tuples(test_list):
  res = [sub[-1] for sub in test_list]
  return (res)",lm
15,"import re
def split_lowerstring(text):
 return (re.findall('[a-z][^a-z]*', text))",human
696,"def zip_2d(a, b):
    if len(a) != len(b):
        raise ValueError('Lists must be of the same length')
    return [[ai, bi] for ai, bi in zip(a, b)]",lm
839,"def sort_tuple(tup): 
	n = len(tup) 
	for i in range(n): 
		for j in range(n-i-1): 
			if tup[j][0] > tup[j + 1][0]: 
				tup[j], tup[j + 1] = tup[j + 1], tup[j] 
	return tup",human
290,"def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)",human
335,"def ap_sum(a,n,d):
  total = (n * (2 * a + (n - 1) * d)) / 2
  return total",human
234,"def volume_of_cube(side):
  return side**3",lm
391,"def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result",human
145,"def max_diff(arr):
     if not arr or len(arr) < 2:
        return None  # Handle cases where the array is empty or has less than two elements
     max_diff = arr[1] - arr[0]  # Initialize the maximum difference with the difference between the first two elements
     for i in range(1, len(arr)):
         for j in range(i):
            diff = arr[i] - arr[j]
            if abs(diff) > abs(max_diff):
                max_diff = diff  # Update the maximum difference if a larger one is found
     return max_diff",lm
354,"def t_nth_term(a,d,n):
  t_nth = a + (n-1)*d
  return t_nth",lm
267,"def findSumOfSquaresOfOddNaturalNumbers(n):
    sum = 0
    for i in range(1, n + 1):
        if i % 2 != 0:
            sum += i ** 2
    return sum",lm
400,"def tuple_count_order_irrespective(list1):
    freq = {}
    for tup in list1:
        tup = tuple(sorted(tup))
        freq[tup] = freq.get(tup, 0) + 1
    return freq",lm
667,"def Check_Vow(string, vowels): 
    final = [each for each in string if each in vowels] 
    return(len(final)) 
",human
239,"def seq_count(n: int, m: int) -> int:
        """"""Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.""""""
        dp = [0 for i in range(m+1)]
        dp[1] = 1
        for i in range(2, n+1):
            for j in range(1, m+1):
                dp[j] = sum(dp[k] for k in range(max(1, (j+1)//2), j+1))
        return sum(dp)",lm
462,"def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result",human
127,"def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)",human
473,"def tuple_intersection(*args):
    """"""Return the intersection of the elements in the given tuple list irrespective of their order.""""""
    if not args:
        return ()
    result = set(args[0])
    for t in args[1:]:
        result &= set(t)
    return tuple(result)",lm
245,"def max_sum(arr, n): 
	MSIBS = arr[:] 
	for i in range(n): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, n + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float(""-Inf"") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum",human
306,"def find_increasing_kth(nums, k):
    n = len(nums)
    if n == 0 or k > n:
        return 0

    dp = [0] * n
    dp[0] = nums[0]
    for i in range(1, n):
        dp[i] = max(dp[i - 1], 0) + nums[i]

    kth_sum = 0
    for j in range(k, n):
        kth_sum = max(kth_sum, dp[j - k - 1] + nums[j])

    return kth_sum",lm
503,"def add_consecutive_nums(nums):
    result = [b+a for a, b in zip(nums[:-1], nums[1:])]
    return result",human
550,"def find_Max(arr,low,high): 
    if (high < low): 
        return arr[0] 
    if (high == low): 
        return arr[low] 
    mid = low + (high - low) // 2 
    if (mid < high and arr[mid + 1] < arr[mid]): 
        return arr[mid] 
    if (mid > low and arr[mid] < arr[mid - 1]): 
        return arr[mid - 1]  
    if (arr[low] > arr[mid]): 
        return find_Max(arr,low,mid - 1) 
    else: 
        return find_Max(arr,mid + 1,high) ",human
659,"def Repeat(x): 
    _size = len(x) 
    repeated = [] 
    for i in range(_size): 
        k = i + 1
        for j in range(k, _size): 
            if x[i] == x[j] and x[i] not in repeated: 
                repeated.append(x[i]) 
    return repeated ",human
876,"def lcm(x, y):
    """"""This function returns the least common multiple of two positive integers.""""""

    # Find the greatest common divisor of x and y.
    gcd = 1
    for i in range(1, min(x, y) + 1):
        if x % i == 0 and y % i == 0:
            gcd = i

    # The LCM of x and y is the product of x and y divided by the GCD.
    lcm = (x * y) // gcd

    return lcm",lm
438,"def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return (str(res)) ",human
388,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i; 
            break; 
    return res; ",human
219,"
def extract_min_max(test_tup, K):
  res = []
  test_tup = list(test_tup)
  temp = sorted(test_tup)
  for idx, val in enumerate(temp):
    if idx < K or idx >= len(temp) - K:
      res.append(val)
  res = tuple(res)
  return (res) ",human
719,"def match_string(text):
  import re
  pattern = r'a(b*)'
  result = re.match(pattern, text)
  if result:
    return True
  else:
    return False",lm
82,"def volume_of_sphere(radius):
    from math import pi
    volume = (4/3) * pi * (radius ** 3)
    return volume",lm
540,"def find_Diff(arr,n): 
    arr.sort()  
    count = 0; max_count = 0; min_count = n 
    for i in range(0,(n-1)): 
        if arr[i] == arr[i + 1]: 
            count += 1
            continue
        else: 
            max_count = max(max_count,count) 
            min_count = min(min_count,count) 
            count = 0
    return max_count - min_count ",human
123,"def sum_amicable_numbers(n):
    def sum_proper_divisors(num):
        divisors = [1]
        for i in range(2, int(num**.5) + 1):
            if num % i == 0:
                divisors.extend([i, num // i])
        return sum(divisors)

    amicable_numbers = []
    for i in range(1, n + 1):
        sum_divisors_i = sum_proper_divisors(i)
        sum_divisors_sum_divisors_i = sum_proper_divisors(sum_divisors_i)
        if i == sum_divisors_sum_divisors_i and i != sum_divisors_i:
            amicable_numbers.append(i)

    return sum(amicable_numbers)",lm
614,"def cumulative_sum(tuple_list):
    cumulative_sum = 0
    for tuple in tuple_list:
        for value in tuple:
            cumulative_sum += value
    return cumulative_sum",lm
746,"def find_area_of_sector(radius, angle):
    """"""Calculates the area of a sector given its radius and angle""""""
    from math import pi
    return (angle/360)*pi*radius**2",lm
220,"def replace_chars(string, n):
  """"""Replace maximum n occurrences of spaces, commas, or dots with a colon.""""""

  chars = [',', '.', ' ']
  for char in chars:
    string = string.replace(char, ':', n)
  return string",lm
442,"from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",human
430,"def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix",human
944,"def print_numbers_and_positions(str1):
    new_str = """"
    num = 0
    for i in str1:
        if i.isdigit():
            new_str += i
            num += 1
        else:
            if num > 0:
                print(new_str, ""found at index"", str1.find(new_str))
            new_str = """"
            num = 0
    if num > 0:
        print(new_str, ""found at index"", str1.find(new_str))",lm
541,"def isAbundant(n):
    if(n <= 0):
        return 0
    sum = 0
    for i in range(1, int(n ** 0.5) + 1):
        if(n % i == 0):
            sum = sum + i
            if(n // i != i):
                sum = sum + n // i
    if(sum > 2 * n):
        return 1
    return 0",lm
101,"def find_kth_element(arr, k):
  """"""Finds the kth element in the given array.""""""

  # Sort the array in ascending order
  arr.sort()

  # Check if the kth element is valid
  if k <= 0 or k > len(arr):
    return None

  # Return the kth element
  return arr[k - 1]",lm
531,"import sys 
def min_coins(coins, m, V): 
    if (V == 0): 
        return 0
    res = sys.maxsize 
    for i in range(0, m): 
        if (coins[i] <= V): 
            sub_res = min_coins(coins, m, V-coins[i]) 
            if (sub_res != sys.maxsize and sub_res + 1 < res): 
                res = sub_res + 1  
    return res ",human
363,"def add_to_tuple(test_tup, K):
  res = tuple(ele + K for ele in test_tup)
  return (res)",lm
358,"def moddiv_list(nums1,nums2):
  result = map(lambda x, y: x % y, nums1, nums2)
  return list(result)",human
631,"import re
text = 'Python Exercises'
def replace_spaces(text):
  text =text.replace ("" "", ""_"")
  return (text)
  text =text.replace (""_"", "" "")
  return (text)",human
883,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) 
 return result",human
867,"def add_min_to_even(arr):
    sum = 0
    for num in arr:
        sum += num
    if sum % 2 == 0:
        return 0
    else:
        min_add = 1
        for num in arr:
            if (sum + num) % 2 == 0 and num < min_add:
                min_add = num
        return min_add",lm
349,"def check(string) :
    p = set(string) 
    s = {'0', '1'} 
    if s == p or p == {'0'} or p == {'1'}: 
        return (""Yes"") 
    else : 
        return (""No"") ",human
697,"def count_even(array_nums):
   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))
   return count_even",human
956,"3
import re

def split_at_uppercase(text):
    return re.split('(?=[A-Z])', text)",lm
650,"def are_Equal(arr1,arr2,n,m):
    if (n != m):
        return False
    arr1.sort()
    arr2.sort()
    for i in range(0,n - 1):
        if (arr1[i] != arr2[i]):
            return False
    return True",human
868,"def length_Of_Last_Word(a): 
    l = 0
    x = a.strip() 
    for i in range(len(x)): 
        if x[i] == "" "": 
            l = 0
        else: 
            l += 1
    return l ",human
469,"def max_profit(price, k):
    n = len(price)
    final_profit = [[None for x in range(n)] for y in range(k + 1)]
    for i in range(k + 1):
        for j in range(n):
            if i == 0 or j == 0:
                final_profit[i][j] = 0
            else:
                max_so_far = 0
                for x in range(j):
                    curr_price = price[j] - price[x] + final_profit[i-1][x]
                    if max_so_far < curr_price:
                        max_so_far = curr_price
                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)
    return final_profit[k][n-1]",human
285,"def match_ab(text):
    import re
    patterns = 'ab{2,3}'
    if re.search(patterns,  text):
        return True
    else:
        return False",lm
240,"def replace_last_element(list1, list2):
    list1[-1:] = list2
    return list1",lm
614,"def cummulative_sum(test_list):
  res = sum(map(sum, test_list))
  return (res)",human
774,"import re 
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
def check_email(email): 
	if(re.search(regex,email)): 
		return (""Valid Email"") 
	else: 
		return (""Invalid Email"") ",human
891,"def same_Length(A,B): 
    while (A > 0 and B > 0): 
        A = A / 10; 
        B = B / 10; 
    if (A == 0 and B == 0): 
        return True; 
    return False; ",human
329,"def count_negative(list1):
    count = 0
    for elem in list1:
        if elem < 0:
            count += 1
    return count",lm
973,"def left_rotate(s,d):
    tmp = s[d : ] + s[0 : d]
    return tmp  ",human
172,"def count_occurance(s):
  count=0
  for i in range(len(s)):
    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):
      count = count + 1
  return count",human
229,"def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr",human
308,"def largest_product(nums1, nums2, k):
    nums1.sort(reverse=True)
    nums2.sort(reverse=True)

    result = []
    for i in range(k):
        result.append(nums1[i] * nums2[i])

    return result",lm
31,"3
import heapq
class Solution:
    def find_top_k(self, lists: List[List[int]], k: int) -> List[int]:
        heap = []
        count = {}
        for l in lists:
            for num in l:
                count[num] = count.get(num, 0) + 1
        for num, freq in count.items():
            heapq.heappush(heap, (freq, num))  # Store (freq, num) in heap
            if len(heap) > k:  # Maintain top k elements in heap
                heapq.heappop(heap)
        res = []
        while heap:
            freq, num = heapq.heappop(heap)
            res.append(num)
        return res[::-1]",lm
903,"def count_unset_bits(n):
    count = 0
    for i in range(1, n + 1):
        binary_str = bin(i)[2:]
        count += binary_str.count('0')
    return count",lm
675,"def sum_in_range(a: int, b: int, x: int, y: int) -> int:
    """"""Write a function to add two integers. however, if the sum is between the given range it will return 20.""""""
    sum = a + b
    if x <= sum <= y:
        return 20
    else:
        return sum",lm
905,"def factorial(start,end): 
    res = 1 
    for i in range(start,end + 1): 
        res *= i      
    return res 
def sum_of_square(n): 
   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ",human
181,"def longestCommonPrefix(self, strs: List[str]) -> str:
    if strs == []:
        return """"
    
    prefix = """"
    shortestLen = len(min(strs, key=len))

    for i in range(shortestLen):
        char = strs[0][i]
        if all(s[i] == char for s in strs):
            prefix += char
        else:
            break
    return prefix",lm
666,"def count_character(string, target):
    """"""Counts the number of occurrences of a character in a string.

    Args:
        string (str): The string to search.
        target (str): The character to search for.

    Returns:
        int: The number of occurrences of the character in the string.
    """"""

    count = 0
    for char in string:
        if char == target:
            count += 1

    return count",lm
270,"def sum_even_and_even_index(arr,n):  
    i = 0
    sum = 0
    for i in range(0,n,2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum",human
537,"def first_repeated_word(str1):
  words = str1.split()
  word_dict = {}
  for word in words:
    word = word.lower()
    if word in word_dict:
      return word
    word_dict[word] = True
  return None",lm
47,"def compute_Last_Digit(A,B): 
    variable = 1
    if (A == B): 
        return 1
    elif ((B - A) >= 5):  
        return 0
    else:   
        for i in range(A + 1,B + 1): 
            variable = (variable * (i % 10)) % 10
        return variable % 10",human
874,"def is_concatenated(s1, s2):
    """"""
    Check if the string is a concatenation of another string.
    """"""

    if len(s2) > len(s1):
        return False

    s1_len = len(s1)
    s2_len = len(s2)
    
    for i in range(s2_len):
        if s2[i] != s1[i]:
            return False

    i = s2_len
    j = 0
    while i < s1_len:
        if s1[i] != s2[j]:
            return False
        i += 1
        j += 1

    return True",lm
409,"def minimumProductPairs(nums: list[(int, int)]) -> int:
    """"""
    Write a function to find the minimum product from the pairs of tuples within a given list.
    """"""
    nums.sort( key=lambda x:x[0]*x[1])
    minimum_product = nums[0][0] * nums[0][1]
    for i in range(1,len(nums)):
        minimum_product = min(minimum_product, nums[i][0]*nums[i][1])
        
    return minimum_product",lm
367,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def get_height(root): 
	if root is None: 
		return 0
	return max(get_height(root.left), get_height(root.right)) + 1
def is_tree_balanced(root): 
	if root is None: 
		return True
	lh = get_height(root.left) 
	rh = get_height(root.right) 
	if (abs(lh - rh) <= 1) and is_tree_balanced( 
	root.left) is True and is_tree_balanced( root.right) is True: 
		return True
	return False",human
855,"def check_even_parity(num):
    cnt = 0
    while int(num) > 0:
        if int(num) % 2:
            cnt += 1
        num = int(int(num)/2) 
    if cnt % 2 == 0:
        return 'Even'
    else:
        return 'Odd'",lm
896,"def sort_by_last(list_of_tuples): 
    return sorted(list_of_tuples, key=lambda x: x[-1])",lm
599,"def sum_average(number):
 total = 0
 for value in range(1, number + 1):
    total = total + value
 average = total / number
 return (total,average)",human
929,"def count_repeated(test_tup):
  res = dict()
  for ele in test_tup:
    if ele in res:
      res[ele] = res[ele] + 1
    else:
      res[ele] = 1
  return res",lm
551,"def extract_column(lst, column_index):
  return [row[column_index] for row in lst]",lm
899,"def check(arr,n): 
    g = 0 
    for i in range(1,n): 
        if (arr[i] - arr[i - 1] > 0 and g == 1): 
            return False
        if (arr[i] - arr[i] < 0): 
            g = 1
    return True",human
453,"import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res ",human
346,"def egcd(n, k):
    if k == 0:
        return 1, 0, n
    x1, y1, gcd = egcd(k, n % k)
    x, y = y1, x1 - (n // k) * y1
    return x, y, gcd",lm
633,"def pair_OR_Sum(arr,n) : 
    ans = 0 
    for i in range(0,n) :    
        for j in range(i + 1,n) :   
            ans = ans + (arr[i] ^ arr[j])          
    return ans ",human
288,"def modular_inverse(arr, N, P):
	current_element = 0
	for i in range(0, N):
		if ((arr[i] * arr[i]) % P == 1):
			current_element = current_element + 1
	return current_element",human
746,"def sector_area(r,a):
    pi=22/7
    if a >= 360:
        return None
    sectorarea = (pi*r**2) * (a/360)
    return sectorarea",human
572,"def two_unique_nums(nums):
  return [i for i in nums if nums.count(i)==1]",human
711,"def product_of_digits_even_odd(n):
    even_product = 1
    odd_product = 1
    i = 0
    while n > 0:
        digit = n % 10
        if i % 2 == 0:
            even_product *= digit
        else:
            odd_product *= digit
        n //= 10
        i += 1
    return even_product == odd_product",lm
66,"def count_positives(numbers):
    count = 0
    for num in numbers:
        if num > 0:
            count += 1
    return count",lm
832,"import re

def extract_max_num(s):
    numbers = re.findall('[0-9]+', s)
    if numbers:
        return max(numbers, key=int)
    else:
        return """"",lm
384,"def frequency_Of_Smallest(n,arr): 
    mn = arr[0] 
    freq = 1
    for i in range(1,n): 
        if (arr[i] < mn): 
            mn = arr[i] 
            freq = 1
        elif (arr[i] == mn): 
            freq += 1
    return freq ",human
690,"def mul_consecutive_nums(nums):
    result = [b*a for a, b in zip(nums[:-1], nums[1:])]
    return result",human
259,"def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",human
836,"from sys import maxsize 
def max_sub_array_sum(a,size): 
	max_so_far = -maxsize - 1
	max_ending_here = 0
	start = 0
	end = 0
	s = 0
	for i in range(0,size): 
		max_ending_here += a[i] 
		if max_so_far < max_ending_here: 
			max_so_far = max_ending_here 
			start = s 
			end = i 
		if max_ending_here < 0: 
			max_ending_here = 0
			s = i+1
	return (end - start + 1)",human
632,"def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [ i for i in num_list if i != 0]
    x.extend(a)
    return (x)",human
428,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list",human
74,"def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True",human
962,"def sum_even(l, r):
    sum = 0
    for i in range(l, r+1):
        if i%2 == 0:
            sum += i
    return sum",lm
461,"def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr",human
441,"def cube_surface_area(side):
    return 6 * side ** 2",lm
226,"def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result",human
74,"def pattern_match(arr, patterns):
  for i, pattern in enumerate(patterns):
    if pattern[0] != arr[i]:
      return False
  return True",lm
534,"def search(string, pattern):
    """"""Search a literals string in a string and also find the location within the original string where the pattern occurs.""""""
    index = string.find(pattern)
    if index == -1:
        return None
    return [index, index + len(pattern) - 1]",lm
717,"import math

def standard_deviation(data):
  """"""Calculates the standard deviation of a list of numbers.""""""

  mean = sum(data) / len(data)

  deviations = [(x - mean) ** 2 for x in data]

  variance = sum(deviations) / len(deviations)

  return math.sqrt(variance)",lm
756,"def find_ab(txt):
  pattern = 'ab?'
  if re.search(pattern, txt):
    return True
  else:
    return False",lm
361,"def remove_empty(lst): 
    return [x for x in lst if x]",lm
304,"def find_element(arr: list, target: int, rotations: int) -> int:
    """"""
    Find element at a given index after number of rotations.
    """"""
    size = len(arr)
    rotations %= size
    return arr[(rotations + target) % size]",lm
16,"import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
788,"def new_tuple(test_list, test_str):
  res = tuple(test_list + [test_str])
  return (res) ",human
319,"import re
def find_long_word(text):
  return (re.findall(r""\b\w{5}\b"", text))",human
958,"def int_to_roman(num):
    roman = """"
    values = [
        (1000, ""M""),
        (900, ""CM""),
        (500, ""D""),
        (400, ""CD""),
        (100, ""C""),
        (90, ""XC""),
        (50, ""L""),
        (40, ""XL""),
        (10, ""X""),
        (9, ""IX""),
        (5, ""V""),
        (4, ""IV""),
        (1, ""I""),
    ]
    i = 0
    while num > 0:
        val, roman_val = values[i]
        count, num = divmod(num, val)
        roman += roman_val * count
        i += 1
    return roman",lm
790,"def even_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))",human
372,"import heapq as hq
def heap_assending(nums):
  hq.heapify(nums)
  s_result = [hq.heappop(nums) for i in range(len(nums))]
  return s_result",human
921,"def chunk_tuples(tup, n):
    return list(zip(*[iter(tup)] * n))",lm
505,"def re_order(A):
    k = 0
    for i in A:
        if i:
            A[k] = i
            k = k + 1
    for i in range(k, len(A)):
        A[i] = 0
    return A",human
705,"def sort_sublists(list1):
      list1.sort()  
      list1.sort(key=len)
      return  list1",human
87,"import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict",human
510,"def count_subsequences(arr, k):
    if arr is None or len(arr) == 0:
        return 0
    
    n = len(arr)
    dp = [[0] * 2 for _ in range(n + 1)]
    
    # Initialize the dp table
    dp[0][0] = 1  # Base case: empty subsequence has product 1
    
    for i in range(1, n + 1):
        for j in range(2):
            dp[i][j] = dp[i - 1][j]  # Don't include the current element
            
            if j == 0 or arr[i - 1] < k // dp[i - 1][1]:
                dp[i][1] += dp[i - 1][j]  # Include the current element

    return dp[n][1]",lm
728,"def sum_of_two_lists(list_1, list_2):
    sum_of_lists = []
    for i in range(len(list_1)):
        sum_of_lists.append(list_1[i] + list_2[i])
    return sum_of_lists",lm
10,"import heapq
def small_nnum(list1,n):
  smallest=heapq.nsmallest(n,list1)
  return smallest",human
243,"def sort_on_occurence(lst): 
	dct = {} 
	for i, j in lst: 
		dct.setdefault(i, []).append(j) 
	return ([(i, *dict.fromkeys(j), len(j)) 
				for i, j in dct.items()]) ",human
308,"def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result",human
639,"def name_length_sum(names):
  return sum(len(x) for x in names if x[0].isupper())",lm
422,"def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) ",human
834,"def generate_spiral_matrix(n):
  matrix = [[0 for _ in range(n)] for _ in range(n)]
  top, left, bottom, right = 0, 0, n - 1, n - 1
  direction = 0
  value = 1
  while top <= bottom and left <= right:
    if direction == 0:
      for i in range(left, right + 1):
        matrix[top][i] = value
        value += 1
      top += 1
    elif direction == 1:
      for i in range(top, bottom + 1):
        matrix[i][right] = value
        value += 1
      right -= 1
    elif direction == 2:
      for i in range(right, left - 1, -1):
        matrix[bottom][i] = value
        value += 1
      bottom -= 1
    elif direction == 3:
      for i in range(bottom, top - 1, -1):
        matrix[i][left] = value
        value += 1
      left += 1
    direction = (direction + 1) % 4
  return matrix",lm
380,"def generate_array(rows, cols, val):
    arr = [[val for _ in range(cols)] for _ in range(rows)]
    return arr",lm
43,"import re
def text_match(text):
  patterns = '^[a-z]+_[a-z]+$'
  if re.search(patterns,  text):
    return ('Found a match!')
  else:
    return ('Not matched!')",human
260,"3
def find_prime(n):
    """"""Find the nth newman–shanks–williams prime number.""""""
    p = 1
    while n > 0:
        p = p + 1
        if is_prime(2**p - 1):
            n -= 1
    return p - 1


def is_prime(n):
    """"""Check if n is prime.""""""
    if n == 2:
        return True
    if n % 2 == 0 or n <= 1:
        return False

    sqr = int(n ** 0.5) + 1

    for divisor in range(3, sqr, 2):
        if n % divisor == 0:
            return False
    return True",lm
840,"def Check_Solution(a,b,c):  
    if b == 0:  
        return (""Yes"")  
    else: 
        return (""No"")  ",human
27,"import re  
def remove(list): 
    pattern = '[0-9]'
    list = [re.sub(pattern, '', i) for i in list] 
    return list",human
241,"3
def three_d_array_of_stars(x: int, y: int, z: int) -> list:
    """""" Write a function to generate a 3d array having each element as '*'. """"""
    return [[['*' for _ in range(z)] for _ in range(y)] for _ in range(x)]",lm
735,"def toggle_bits(n): 
      return ((n << 1) | 2) >> 2",lm
845,"import math 
def find_Digits(n): 
    if (n < 0): 
        return 0;
    if (n <= 1): 
        return 1; 
    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); 
    return math.floor(x) + 1; ",human
652,"def matrix_to_list(test_list):
  temp = [ele for sub in test_list for ele in sub]
  res = list(zip(*temp))
  return (str(res))",human
171,"import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter",human
921,"def chunk_tuples(test_tup, N):
  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]
  return (res) ",human
767,"def get_Pairs_Count(arr,n,sum):
    count = 0  
    for i in range(0,n):
        for j in range(i + 1,n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count",human
201,"def check_same(nums):
    return all(i == nums[0] for i in nums)",lm
791,"def remove_nested_record(tuple1):

    # create an empty tuple
    tuple2 = ()

    # iterate over the tuple
    for item in tuple1:

        # check if the item is not a tuple
        if not isinstance(item, tuple):

            # add the item to the new tuple
            tuple2 += (item,)

        # otherwise, call the function recursively
        else:
            tuple2 += (remove_nested_record(item),)

    # return the new tuple
    return tuple2",lm
947,"def find_shortest_word_length(words):
    shortest_length = len(min(words, key=len))
    return shortest_length",lm
692,"def last_two_digits_of_factorial(n):
    if n == 0 or n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:
        return 6
    if n == 4:
        return 4
    return (n % 10) * last_two_digits_of_factorial(n-1) % 100",lm
927,"class Node: 
	def __init__(self, data): 
		self.data = data 
		self.left = None
		self.right = None
def max_height(node): 
	if node is None: 
		return 0 ; 
	else : 
		left_height = max_height(node.left) 
		right_height = max_height(node.right) 
		if (left_height > right_height): 
			return left_height+1
		else: 
			return right_height+1",human
909,"def prev_palindrome(n):
    while True:
        n -= 1
        if str(n) == str(n)[::-1]:
            return n",lm
596,"3
def tuple_size(test_tup):
  res = len(test_tup)
  return (res)",lm
430,"def parabola_directrix(coefficients):
  """"""Find the directrix of a parabola.

  Args:
    coefficients: a list of coefficients for a quadratic equation in the form of
      ax^2 + bx + c = 0.

  Returns:
    the directrix of the parabola, or None if the equation is not a parabola.
  """"""

  # Check if the equation is a parabola.
  if coefficients[0] == 0:
    return None

  # Calculate the directrix.
  directrix = -coefficients[2] / (4 * coefficients[0])

  return directrix",lm
209,"import heapq as hq
def heap_replace(heap,a):
  hq.heapify(heap)
  hq.heapreplace(heap, a)
  return heap",human
317,"def decode_rle(rle):
  decoded = []
  idx = 0

  while idx < len(rle):
    cnt = rle[idx]
    val = rle[idx + 1]
    decoded += [val] * cnt
    idx += 2

  return decoded",lm
936,"def reorder_tuples(tuples, order):
    return sorted(tuples, key=lambda x: order.index(x[0]))",lm
761,"def arclength(radius, angle):
    """"""Calculate arc length of an angle.""""""
    return radius * angle",lm
671,"def setRightMostUnsetBit(n): 
    return n | (n + 1)",lm
958,"def int_to_roman( num):
        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]
        syb = [""M"", ""CM"", ""D"", ""CD"",""C"", ""XC"", ""L"", ""XL"",""X"", ""IX"", ""V"", ""IV"",""I""]
        roman_num = ''
        i = 0
        while  num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num",human
69,"def is_sublist(l1: list[int], l2: list[int]) -> bool:
    s = 0
    for i in l1:
        if i == l2[s]:
            s += 1
            if s == len(l2):
                return True
    return False",lm
914,"def alternate_characters(s):
      i = 0
      while i < len(s):
          char = s[i]
          if i + 1 < len(s) and s[i + 1] == char:
              return False
          i += 2
      return True",lm
890,"def find_extra_element_index(arr1, arr2):
    """"""Finds the index of an extra element present in one sorted array.""""""

    i = 0
    j = 0

    while i < len(arr1) and j < len(arr2):
        if arr1[i] == arr2[j]:
            i += 1
            j += 1
        else:
            return j

    return j",lm
535,"def cylinder_top_bottom_area(radius, height):
    from math import pi
    return pi * radius ** 2",lm
625,"def interchange(list1):
    temp = list1[0]
    list1[0] = list1[-1]
    list1[-1] = temp
    return list1",lm
67,"def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ",human
120,"def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max",human
566,"3
def get_sum(n):
    sum = 0
    for i in range(1, n + 1):
        sum += i
    return sum",lm
793,"def find_last_position(nums, target):
    left, right = 0, len(nums) - 1

    while left <= right:
        mid = (left + right) // 2

        if nums[mid] <= target:
            left = mid + 1
        else:
            right = mid - 1

    return left - 1",lm
694,"def unique_dict_values(my_dict):
    unique_values = set()
    for _, values in my_dict.items():
        unique_values.update(values)
    return unique_values",lm
686,"from collections import defaultdict 
def freq_element(test_tup):
  res = defaultdict(int)
  for ele in test_tup:
    res[ele] += 1
  return (str(dict(res))) ",human
860,"import re

def is_alphanumeric_ending(string):
    pattern = r""^[a-zA-Z0-9]*$""
    return re.match(pattern, string)",lm
503,"def add_consecutive_numbers(list1): 
    i = 0
    sum = 0
    while(i < len(list1)): 
        sum = sum + list1[i] 
        i = i + 1
    return sum",lm
655,"def fifthPowerSum(n):
    sum = 0
    for i in range(n):
        sum += (i+1)**5
    return sum",lm
81,"def zip_tuples(test_tup1, test_tup2):
  res = []
  for i, j in enumerate(test_tup1):
    res.append((j, test_tup2[i % len(test_tup2)])) 
  return (res) ",human
116,"def convert(tp):  
    num = 0
    for i in tp:
        if not isinstance(i, int) or i < 0:
            raise ValueError(""Tuple must contain positive integers only"")
        num = num * 10 + i
    return num",lm
262,"def split_two_parts(list1, L):
    return list1[:L], list1[L:]",human
583,"def catalan(n):
    if n == 0 or n == 1:
        return 1
    catalan_nums = [0] * (n + 1)
    catalan_nums[0] = 1
    catalan_nums[1] = 1
    for i in range(2, n + 1):
        for j in range(i):
            catalan_nums[i] += catalan_nums[j] * catalan_nums[i - j - 1]
    return catalan_nums[n]",lm
70,"def find_equal_tuple(Input, k):
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input, k):
  if find_equal_tuple(Input, k) == 1:
    return (""All tuples have same length"")
  else:
    return (""All tuples do not have same length"")",human
41,lambda x: x%2==0,lm
795,"import heapq
def find_n_cheap_items(items, n):
    """"""
    Find the n - cheap price items from a given dataset using heap queue algorithm.

    Args:
        items: A list of items, each represented by a tuple (price, name).
        n: The number of cheap items to find.

    Returns:
        A list of the n cheapest items, sorted by price.
    """"""
    heap = []
    for price, name in items:
        heapq.heappush(heap, (price, name))

    cheap_items = []
    for _ in range(n):
        price, name = heapq.heappop(heap)
        cheap_items.append((price, name))

    return cheap_items",lm
898,"from itertools import groupby 
def extract_elements(numbers, n):
    result = [i for i, j in groupby(numbers) if len(list(j)) == n] 
    return result",human
565,"def split(word):
    return [char for char in word]",lm
733,"def find_first_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result",human
416,"def maxSumPartition(n):
    # Base Case
    if (n <= 2):
        return 0
    if (dp[n] != -1):
        return dp[n]
    # Calculate the maximum sum by
    # including the current number in three ways
    ans1 = maxSumPartition(n - 1) + n
    ans2 = maxSumPartition(n - 2) + n * 2
    ans3 = maxSumPartition(n - 3) + n * 3

    # Store the maximum of the three ways
    dp[n] = max(ans1, ans2, ans3)
    return dp[n]",lm
36,"def find_nth_digit_in_proper_fraction(n, dividend, divisor):
    """"""Finds the nth digit in the proper fraction of two given numbers.""""""

    # Calculate the proper fraction.
    proper_fraction = dividend / divisor

    # Convert the proper fraction to a string.
    proper_fraction_string = str(proper_fraction)

    # Find the nth digit in the proper fraction string.
    nth_digit = proper_fraction_string[n]

    # Return the nth digit.
    return nth_digit",lm
562,"def Find_Max_Length(lst):  
    maxLength = max(len(x) for x in lst )
    return maxLength ",human
714,"def count_Fac(n):  
    m = n 
    count = 0
    i = 2
    while((i * i) <= m): 
        total = 0
        while (n % i == 0): 
            n /= i 
            total += 1 
        temp = 0
        j = 1
        while((temp + j) <= total): 
            temp += j 
            count += 1
            j += 1 
        i += 1
    if (n != 1): 
        count += 1 
    return count ",human
447,"def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums",human
325,"def min_squares(n):
    if n <= 3:
        return n
    dp = [float('inf') for i in range(n + 1)]
    dp[0] = 0
    for i in range(1, n + 1):
        j = 1
        while j * j <= i:
            dp[i] = min(dp[i], dp[i - j * j] + 1)
            j += 1
    return dp[n]",lm
301,"def dict_depth(dict_obj):
    depth = 0
    for key, value in dict_obj.items():
        if isinstance(value, dict):
            depth_value = dict_depth(value)
            if depth_value > depth:
                depth = depth_value
    return depth + 1",lm
693,"def remove_multiple_spaces(text):
    pattern = r'\s+'
    text = re.sub(pattern, ' ', text)
    return text",lm
395,"def first_non_repeated_char(string):
    char_dict = {}
    for char in string:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1

    for char in string:
        if char_dict[char] == 1:
            return char

    return None",lm
610,"def remove_kth_element(lst, k):
  return lst[:k-1] + lst[k:]",lm
141,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums",human
377,"def remove_character(str1, char):
    str1 = str1.replace(char, '')
    return str1",lm
800,"import re
def remove_all_spaces(text):
 return (re.sub(r'\s+', '',text))",human
589,"def perfect_squares(a, b):
    lists=[]
    for i in range (a,b+1):
        j = 1;
        while j*j <= i:
            if j*j == i:
                 lists.append(i)  
            j = j+1
        i = i+1
    return lists",human
183,"def count_pairs(arr, n, k):
  count=0;
  for i in range(0,n):
    for j in range(i+1, n):
      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:
        count += 1
  return count",human
99,"def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ",human
206,"def adjacent_element_concatenation(test_tup):
  res = tuple(map(lambda x: x[0]+x[1], zip(test_tup, test_tup[1:])))
  return (res)",lm
107,"def count_hexadecimal(start, end):
  count = 0
  hex_digits = ""0123456789ABCDEF""
  for i in range(start, end + 1):
      hex_representation = """"
      while i > 0:
          hex_representation = hex_digits[i & 0xf] + hex_representation
          i >>= 4
      if hex_representation != """":
          count += 1
  return count",lm
628,"MAX=1000;
def replace_spaces(string):
  string=string.strip()
  i=len(string)
  space_count=string.count(' ')
  new_length = i + space_count*2
  if new_length > MAX:
    return -1
  index = new_length-1
  string=list(string)
  for f in range(i-2, new_length-2):
    string.append('0')
  for j in range(i-1, 0, -1):
    if string[j] == ' ':
      string[index] = '0'
      string[index-1] = '2'
      string[index-2] = '%'
      index=index-3
    else:
      string[index] = string[j]
      index -= 1
  return ''.join(string)",human
727,"3
import re
def remove_special_characters(text):
    pattern = r'[^a-zA-Z0-9]'
    text = re.sub(pattern, '', text)
    return text",lm
247,"def longest_palindromic_subsequence(string):
    n = len(string)
    dp = [[0] * (n + 1) for _ in range(n + 1)]

    for i in range(n - 1, -1, -1):
        dp[i][i] = 1
        for j in range(i + 1, n):
            if string[i] == string[j]:
                dp[i][j] = dp[i + 1][j - 1] + 2
            else:
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])

    return dp[0][n - 1]",lm
501,"def findCommonDivisor(x, y): 
    i = 1
    while(i <= x and i <= y): 
        if(x % i == 0 and y % i == 0): 
            gcd = i 
        i = i + 1
    return gcd",lm
293,"import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s",human
584,"import re

def find_adverbs(sentence):
    adverbs = []
    regex = r""(\w+ly)""
    matches = re.finditer(regex, sentence)
    for match in matches:
        adverbs.append((match.group(), match.start()))
    return adverbs",lm
622,"def get_median(arr1, arr2, n):
  i = 0
  j = 0
  m1 = -1
  m2 = -1
  count = 0
  while count < n + 1:
    count += 1
    if i == n:
      m1 = m2
      m2 = arr2[0]
      break
    elif j == n:
      m1 = m2
      m2 = arr1[0]
      break
    if arr1[i] <= arr2[j]:
      m1 = m2
      m2 = arr1[i]
      i += 1
    else:
      m1 = m2
      m2 = arr2[j]
      j += 1
  return (m1 + m2)/2",human
38,"def div_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even/first_odd)",human
526,"def word_cap(str1):
    words = str1.split()
    for i in range(len(words)):
        words[i] = words[i][0].upper() + words[i][1:].lower()
    return "" "".join(words)",lm
602,"def first_repeated_char(str1):
  for index,c in enumerate(str1):
    if str1[:index+1].count(c) > 1:
      return c 
  return ""None""",human
9,"def find_Rotations(str): 
    tmp = str + str
    n = len(str) 
    for i in range(1,n + 1): 
        substring = tmp[i: i+n] 
        if (str == substring): 
            return i 
    return n ",human
676,"3
import re
def remove_non_alphanumeric(text):
    return re.sub(r'[^a-zA-Z0-9]', '', text)",lm
300,"def BinarySequence(n): 
    dp = [[[-1 for k in range(2)] 
             for j in range(n + 1)] 
             for i in range(n + 1)] 
    def solve(i, j, k): 
        if (i == n and j == n and k == 0): 
            return 1
        if (i > n or j > n or i + j > 2 * n): 
            return 0
        if (dp[i][j][k] != -1): 
            return dp[i][j][k] 
        dp[i][j][k] = (solve(i + 1, j, (k + 1) % 2) + 
                   solve(i, j + 1, k)) 
        return dp[i][j][k] 
    return solve(0, 0, 0)",lm
237,"from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ",human
25,"def find_Product(arr,n): 
    arr.sort() 
    prod = 1
    for i in range(0,n,1): 
        if (arr[i - 1] != arr[i]): 
            prod = prod * arr[i] 
    return prod; ",human
550,"def find_max_rotated_sorted_array(nums):
    """"""
    Finds the maximum element in a sorted and rotated array.
    """"""
    left, right = 0, len(nums) - 1
    while left < right:
        mid = left + (right - left) // 2
        if nums[mid] > nums[right]:
            left = mid + 1
        else:
            right = mid
    return nums[left]",lm
709,"3
def count_unique_keys(test_tup):
  res = dict()
  for x in test_tup:
    for key in x:
      if key not in res:
        res[key] = 1
      else:
        res[key] += 1
  return (res)",lm
449,"def check_Triangle(x1,y1,x2,y2,x3,y3): 
    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   
    if a == 0: 
        return ('No') 
    else: 
        return ('Yes') ",human
459,"import re
def remove_uppercase(str1):
  remove_upper = lambda text: re.sub('[A-Z]', '', text)
  result =  remove_upper(str1)
  return (result)",human
809,"def check_smaller(test_tup1, test_tup2):
  res = [ele1 < ele2 for ele1, ele2 in zip(test_tup1, test_tup2)]
  return all(res)",lm
95,"def minimum_sublist_len(arr, n, x): 
    if (n == 0): 
        return 0
    window_sum = arr[0] 
    min_len = n 
    window_start = 0
    for window_end in range(1, n): 
        window_sum += arr[window_end] 
        while (window_sum >= x): 
            min_len = min(min_len, window_end - window_start + 1)
            window_sum -= arr[window_start] 
            window_start += 1
    return min_len",lm
930,"3
import re
def match_regex(text):
    matches = re.findall(r'a[b]*', text)
    return matches",lm
703,"def is_key_present(d,x):
  if x in d:
    return True
  else:
     return False",human
547,"def Total_Hamming_Distance(n):   
    i = 1
    sum = 0
    while (n // i > 0):  
        sum = sum + n // i  
        i = i * 2     
    return sum",human
630,"def get_adjacent_coordinates(coordinate):
    adjacent_coordinates = []
    row, col = coordinate
    for r in range(row - 1, row + 2):
        for c in range(col - 1, col + 2):
            if (r, c) != coordinate and 0 <= r < 8 and 0 <= c < 8:
                adjacent_coordinates.append((r, c))
    return adjacent_coordinates",lm
356,"def third_angle(angle1, angle2):
  return 180 - angle1 - angle2",lm
296,"def count_inversions(arr): 
    temp = [0] * len(arr) 
    return _mergeSort(arr, temp, 0, len(arr) - 1) 


def _mergeSort(arr, temp, left, right): 
    inv_count = 0
    if left < right: 
        mid = (left + right) // 2
        inv_count += _mergeSort(arr, temp, left, mid) 
        inv_count += _mergeSort(arr, temp, mid + 1, right) 
        inv_count += merge(arr, temp, left, mid, right) 
    return inv_count 


def merge(arr, temp, left, mid, right): 
    i, j, k = left, mid + 1, left
    inv_count = 0
    while i <= mid and j <= right: 
        if arr[i] <= arr[j]: 
            temp[k] = arr[i] 
            k += 1
            i += 1
        else: 
            temp[k] = arr[j] 
            inv_count += (mid - i + 1) 
            k += 1
            j += 1
    while i <= mid: 
        temp[k] = arr[i] 
        k += 1
        i += 1
    while j <= right: 
        temp[k] = arr[j] 
        k += 1
        j += 1
    for i in range(left, right + 1): 
        arr[i] = temp[i] 
    return inv_count",lm
255,"from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))",human
843,"import heapq
def nth_super_ugly_number(n, primes):
    uglies = [1]
    def gen(prime):
        for ugly in uglies:
            yield ugly * prime
    merged = heapq.merge(*map(gen, primes))
    while len(uglies) < n:
        ugly = next(merged)
        if ugly != uglies[-1]:
            uglies.append(ugly)
    return uglies[-1]",human
882,"def parallelogram_perimeter(side1, side2):
    return 2 * (side1 + side2)",lm
856,"def minSwaps(arr):
    n = len(arr)
    count = 0
    for i in range(0,n):
        if (arr[i]==0):
            count=count+1
    
    if (count<=n//2):
        ans = count
    else:
        ans = n-count
    
    return ans",lm
575,"def count_no (A,N,L,R): 
    count = 0
    for i in range (L,R + 1): 
        if (i % A != 0): 
            count += 1
        if (count == N): 
            break
    return (i) ",human
271,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ",human
258,"def count_odd(array_nums):
   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))
   return count_odd",human
533,"def remove_datatype(test_tuple, data_type):
  res = []
  for ele in test_tuple:
    if not isinstance(ele, data_type):
      res.append(ele)
  return (res) ",human
250,"def count_element_occurrence(test_tup, x):
  res = test_tup.count(x)
  return res",lm
180,"import math

def distance(lat1, lon1, lat2, lon2):
    """"""
    Calculate the distance between two points using latitude and longitude.

    """"""
    radius = 6371  # Earth's radius in kilometers
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return radius * c",lm
592,"def product_binom_coeff(n):
    """"""Return the sum of product of binomial co-efficients.""""""
    pascal = [1] * (n + 1)
    for i in range(2, n + 1):
        for j in range(i - 1, 0, -1):
            pascal[j] += pascal[j - 1]
    return sum([x * y for x, y in enumerate(pascal)])",lm
83,"def add_chars(string):
    num = 0
    for char in string:
        num += ord(char)
    return chr(num)",lm
315,"def find_Max_Len_Even(str): 
    n = len(str) 
    i = 0
    currlen = 0
    maxlen = 0
    st = -1
    while (i < n): 
        if (str[i] == ' '): 
            if (currlen % 2 == 0): 
                if (maxlen < currlen): 
                    maxlen = currlen 
                    st = i - currlen 
            currlen = 0 
        else : 
            currlen += 1
        i += 1
    if (currlen % 2 == 0): 
        if (maxlen < currlen): 
            maxlen = currlen 
            st = i - currlen 
    if (st == -1): 
        return ""-1"" 
    return str[st: st + maxlen] ",human
553,"def tuple_to_float(tup):
    """"""Convert the given tuple to a floating-point number.""""""
    if not isinstance(tup, tuple):
        raise TypeError(""Input must be a tuple"")
    if not all(isinstance(x, int) or isinstance(x, float) for x in tup):
        raise ValueError(""Tuple must contain only integers or floats"")
    if len(tup) == 0:
        return 0.0
    return float(""."".join(map(str, tup)))",lm
257,"def swap(x, y):
    x ^= y
    y ^= x
    x ^= y",lm
834,"def generate_matrix(n):
        if n<=0:
            return [] 
        matrix=[row[:] for row in [[0]*n]*n]        
        row_st=0
        row_ed=n-1        
        col_st=0
        col_ed=n-1
        current=1        
        while (True):
            if current>n*n:
                break
            for c in range (col_st, col_ed+1):
                matrix[row_st][c]=current
                current+=1
            row_st+=1
            for r in range (row_st, row_ed+1):
                matrix[r][col_ed]=current
                current+=1
            col_ed-=1
            for c in range (col_ed, col_st-1, -1):
                matrix[row_ed][c]=current
                current+=1
            row_ed-=1
            for r in range (row_ed, row_st-1, -1):
                matrix[r][col_st]=current
                current+=1
            col_st+=1
        return matrix",human
844,"def get_Number(n, k): 
    arr = [0] * n; 
    i = 0; 
    odd = 1; 
    while (odd <= n):   
        arr[i] = odd; 
        i += 1; 
        odd += 2;
    even = 2; 
    while (even <= n): 
        arr[i] = even; 
        i += 1;
        even += 2; 
    return arr[k - 1]; ",human
484,"def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) ",human
807,"def first_odd(nums):
  first_odd = next((el for el in nums if el%2!=0),-1)
  return first_odd",human
213,"def concatenate_strings(test_tup1, test_tup2):
  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",human
418,"def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList",human
785,"def convertTupleStringToIntTuple(tuple_str):
    tuple_str = tuple_str.strip()
    if tuple_str[0] == '(' and tuple_str[-1] == ')':
        tuple_str = tuple_str[1:-1]
    tuple_list = tuple_str.split(',')
    for i in range(len(tuple_list)):
        tuple_list[i] = int(tuple_list[i])
    return tuple(tuple_list)",lm
490,"def extract_symmetric(test_list):
  temp = set(test_list) & {(b, a) for a, b in test_list}
  res = {(a, b) for a, b in temp if a < b}
  return (res) ",human
804,"def is_product_even(lst):
    product = 1
    for num in lst:
        product *= num
    return product % 2 == 0",lm
15,"def split_camel_cased_string(string):
    """"""Split a string at lowercase letters.

    Args:
        string (str): The string to split.

    Returns:
        list[str]: The split string.
    """"""

    # Check if the string is empty.

    if not string:
        return []

    # Create a list to store the split string.

    split_string = []

    # Iterate over the string.

    for char in string:

        # Check if the character is lowercase.

        if char.islower():

            # If the character is lowercase, add it to the split string.

            split_string.append(char)

        # Otherwise, add the character to the previous word in the split string.

        else:

            # Get the previous word in the split string.

            previous_word = split_string[-1]

            # Add the character to the previous word.

            previous_word += char

            # Update the split string.

            split_string[-1] = previous_word

    # Return the split string.

    return split_string",lm
586,"def split_Arr(a,n,k):  
   b = a[:k] 
   return (a[k::]+b[::]) ",human
747,"3
def LCSof3(X, Y, Z):
    m, n, p = len(X), len(Y), len(Z)
    L = [ [ [0]*(p + 1) for i in range(n + 1) ] for j in range(m + 1) ]
    for i in range(m + 1):
        for j in range(n + 1):
            for k in range(p + 1):
                if i == 0 or j == 0 or k == 0:
                    L[i][j][k] = 0
                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:
                    L[i][j][k] = L[i-1][j-1][k-1] + 1
                else:
                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])
    return L[m][n][p]",lm
873,"def fibonacci(n):
  if n == 1 or n == 2:
    return 1
  else:
    return (fibonacci(n - 1) + (fibonacci(n - 2)))",human
572,"def duplicates(nums): 
    result = [] 
    nums = sorted(nums) 
    for i in range(len(nums)-1): 
        if nums[i] == nums[i+1]: 
            result.append(nums[i]) 
    return result",lm
870,"lambda lst: sum(list(filter(lambda x: x>0, lst)))",lm
726,"def adjacent_multiplication(test_tup):
  res = [test_tup[i] * test_tup[i + 1] for i in range(0, len(test_tup) - 1)] 
  return (res)",lm
568,"def empty_list(length):
 empty_list = [{} for _ in range(length)]
 return empty_list",human
437,"def removeOddCharacters(str1):
    res = """" 
    for i in range(0, len(str1)):
        if ord(str1[i]) % 2 == 0:
            res = res + str1[i]
    return res",lm
663,"import sys 
def find_max_val(n, x, y): 
	ans = -sys.maxsize 
	for k in range(n + 1): 
		if (k % x == y): 
			ans = max(ans, k) 
	return (ans if (ans >= 0 and
					ans <= n) else -1) ",human
924,"def max_of_two(num1, num2):
  if num1 > num2:
    return num1
  else:
    return num2",lm
638,"def windChill(t: float, v: float) -> float:
    """"""Calculates the wind chill index.

    Args:
        t: The temperature in Fahrenheit.
        v: The wind speed in miles per hour.

    Returns:
        The wind chill index.
    """"""
    if v < 4:
        return t
    else:
        return 35.74 + 0.6215 * t - 35.75 * v**0.16 + 0.4275 * t * v**0.16",lm
823,"3
import re

def check_string_starts_with_substring_regex(string, substring):
    """"""
    Checks if the given string starts with a substring using regex.

    Args:
        string: The string to check.
        substring: The substring to check for.

    Returns:
        True if the string starts with the substring, False otherwise.
    """"""

    pattern = ""^"" + substring
    return re.match(pattern, string) is not None",lm
304,"def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] ",human
266,"def lsa_cube(side):
    return 4 * side**2",lm
742,"import math
def area_tetrahedron(side):
  area = math.sqrt(3)*(side*side)
  return area",human
740,"def tuple_to_dict(test_tup):
  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
  return (res) ",human
741,"def all_Characters_Same(s) :
    n = len(s)
    for i in range(1,n) :
        if s[i] != s[0] :
            return False
    return True",human
150,"def check_fibonacci(n):
    a = 0
    b = 1
    while a < n:
        c = a + b
        a = b
        b = c
    return a == n",lm
299,"def max_aggregate(list_of_tuples):
    max_sum = 0
    for item in list_of_tuples:
        max_sum = max(max_sum, sum(item))
    return max_sum",lm
465,"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1",human
246,"def babylonian_sqrt(number: float) -> float:
    """"""Write a function for computing square roots using the babylonian method.""""""
    epsilon = 0.000001
    guess = number / 2.0
    while abs(guess * guess - number) > epsilon:
        guess = (guess + number / guess) / 2.0
    return guess",lm
865,"def print_n_times(list1, n):
   result = map(lambda x: x * n, list1)
   print(list(result))",lm
272,"def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ",human
321,"def demlo_number(n):
    check = True
    while n >= 0 and check:
        n = sum([int(i) for i in str(n)])
        if n < 10:
            check = False
    return n",lm
132,"3
def tuple_to_string(test_tup):
  res = "" "".join([str(ele) for ele in test_tup])
  return (res)",lm
254,"import re
def words_ae(text):
 list = re.findall(""[ae]\w+"", text)
 return list",human
394,"def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return (res) ",human
961,"def roman_to_int(s):
        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        int_val = 0
        for i in range(len(s)):
            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
            else:
                int_val += rom_val[s[i]]
        return int_val",human
812,"import re
def road_rd(street):
  return (re.sub('Road$', 'Rd.', street))",human
740,"def tuple_to_dict(tup):
  """"""Convert the given tuple to a key-value dictionary using adjacent elements.""""""
  d = {}
  for i in range(0, len(tup), 2):
    d[tup[i]] = tup[i + 1]
  return d",lm
51,"def eqtriangle(a,b,c):
    if(a==b==c):
        print(""Equilateral Triangle"")
    else:
        print(""Not an Equilateral Triangle"")",lm
864,"def palindrome_lambda(texts):
  result = list(filter(lambda x: (x == """".join(reversed(x))), texts))
  return result",human
34,"def missing_number(arr):
    i = 0
    while i < len(arr) - 1:
        if arr[i] + 1 != arr[i+1]:
            return arr[i] + 1
        i += 1
    return -1",lm
332,"def count_char_frequency(string):
    """"""Counts the frequency of each character in a string.""""""
    frequencies = {}
    for char in string:
        if char in frequencies:
            frequencies[char] += 1
        else:
            frequencies[char] = 1
    return frequencies",lm
204,"def count(s,c) : 
    res = 0 
    for i in range(len(s)) : 
        if (s[i] == c): 
            res = res + 1
    return res ",human
620,"def largest_subset(a, n):
	dp = [0 for i in range(n)]
	dp[n - 1] = 1; 
	for i in range(n - 2, -1, -1):
		mxm = 0;
		for j in range(i + 1, n):
			if a[j] % a[i] == 0 or a[i] % a[j] == 0:
				mxm = max(mxm, dp[j])
		dp[i] = 1 + mxm
	return max(dp)",human
205,"def inversion_elements(test_tup):
  res = tuple(list(map(lambda x: ~x, list(test_tup))))
  return (res) ",human
603,"3
def get_lucid_num(n):
    for i in range(n,-1,-1):
        if not any(map(lambda x:i%x==0,[2,3,5])):
            return i",lm
102,"def snake_to_camel(s):
    return ''.join(x.capitalize() for x in s.split('_'))[0].lower()+''.join(x.capitalize() for x in s.split('_'))[1:]",lm
783,"def rgb_to_hsv(rgb):
    r, g, b = rgb[0] / 255.0, rgb[1] / 255.0, rgb[2] / 255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx - mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g - b) / df) + 360) % 360
    elif mx == g:
        h = (60 * ((b - r) / df) + 120) % 360
    elif mx == b:
        h = (60 * ((r - g) / df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df / mx) * 100
    v = mx * 100
    return h, s, v",lm
51,"def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False",human
109,"def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ",human
945,"def tuple_to_set(t):
  s = set(t)
  return (s) ",human
165,"def count_char_at_pos(string):
    char_count = [0] * 26
    for char in string.lower():
        if ord('a') <= ord(char) <= ord('z'):
            char_count[ord(char) - ord('a')] += 1
    return char_count",lm
674,"from collections import OrderedDict

def remove_duplicates(string):
    # Split the string into a list of words
    words = string.split()

    # Use OrderedDict to remove duplicate words while preserving the order of the original string
    words = OrderedDict.fromkeys(words)

    # Join the list of words back into a string
    return ' '.join(words)",lm
22,"def find_duplicate(array):
    seen = set()
    for number in array:
        if number in seen:
            return number
        seen.add(number)
    return -1",lm
350,"def min_length(s):
    freq = {}
    for ch in s:
        freq[ch] = freq.get(ch, 0) + 1
    min_len = len(s)
    for ch in freq:
        min_len = min(min_len, len(s) - freq[ch])
    return min_len",lm
381,"def sort_list_by_index(list_of_lists, index):
    return sorted(list_of_lists, key=lambda x: x[index])",lm
222,"def check_tuple_data_type(test_tuple):
  res = all(isinstance(ele, type(test_tuple[0])) for ele in test_tuple)
  return (res)",lm
789,"from math import tan, pi
def perimeter_polygon(s,l):
  perimeter = s*l
  return perimeter",human
238,"def count_substring(string):
  count = 0
  for i in range(len(string)):
    for j in range(i + 1, len(string) + 1):
      if string[i:j]:
        count += 1
  return count",lm
81,"def zipTuple(tuple1, tuple2): 
    zipped_tuple = zip(tuple1, tuple2) 
    return tuple(zipped_tuple)",lm
518,"import math
def sqrt_root(num):
 sqrt_root = math.pow(num, 0.5)
 return sqrt_root ",human
913,"def check_number_at_end(s):
  """"""Checks if the last character of a string is a number.""""""
  return s and s[-1].isdigit()",lm
209,"def delete_and_insert(heap, item):
    """"""Delete the smallest element from the given heap and then insert a new item.""""""

    # Delete the smallest element
    smallest = heap[0]
    heap[0] = heap[len(heap) - 1]
    heap.pop()
    heapify_down(heap, 0)

    # Insert the new item
    heap.append(item)
    heapify_up(heap, len(heap) - 1)

    return smallest


def heapify_down(heap, i):
    """"""Heapify down from the given index.""""""

    # Get the left and right child indices
    left = 2 * i + 1
    right = 2 * i + 2

    # If the left child is smaller than the parent
    if left < len(heap) and heap[left] < heap[i]:
        # Swap the parent and left child
        heap[i], heap[left] = heap[left], heap[i]

        # Recursively heapify down from the left child
        heapify_down(heap, left)

    # If the right child is smaller than the parent
    if right < len(heap) and heap[right] < heap[i]:
        # Swap the parent and right child
        heap[i], heap[right] = heap[right], heap[i]

        # Recursively heapify down from the right child
        heapify_down(heap, right)


def heapify_up(heap, i):
    """"""Heapify up from the given index.""""""

    # Get the parent index
    parent = (i - 1) // 2

    # If the parent is greater than the child
    if parent >= 0 and heap[parent] > heap[i]:
        # Swap the parent and child
        heap[parent], heap[i] = heap[i], heap[parent]

        # Recursively heapify up from the parent
        heapify_up(heap, parent)",lm
569,"def sort_sublists(list1):
    result = list(map(sorted,list1)) 
    return result",human
552,"def Seq_Linear(seq_nums):
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  if len(set(seq_nums)) == 1: 
    return ""Linear Sequence""
  else:
    return ""Non Linear Sequence""",human
529,"def find_nth_jacobsthal_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return find_nth_jacobsthal_lucas(n-1) + find_nth_jacobsthal_lucas(n-2)",lm
68,"def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",human
558,"def distance(n1, n2):
    n1, n2 = str(n1), str(n2)
    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(n1, n2))",lm
277,"3
def filter_dictionary_by_value(dictionary, value_to_filter):
    filtered_dictionary = {}
    for key, value in dictionary.items():
        if value == value_to_filter:
            filtered_dictionary[key] = value
    return filtered_dictionary",lm
335,"def sum_arithmetic_progression(a, d, n):
  """"""Calculates the sum of an arithmetic progression.

  Args:
    a: The first term of the progression.
    d: The common difference of the progression.
    n: The number of terms in the progression.

  Returns:
    The sum of the arithmetic progression.
  """"""

  return (n / 2) * (2 * a + (n - 1) * d)",lm
777,"def find_Sum(arr,n): 
    arr.sort() 
    sum = arr[0] 
    for i in range(0,n-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum",human
731,"import math
def lateralsurface_cone(r,h):
  l = math.sqrt(r * r + h * h)
  LSA = math.pi * r  * l
  return LSA",human
897,"def is_Word_Present(sentence,word): 
    s = sentence.split("" "") 
    for i in s:  
        if (i == word): 
            return True
    return False",human
776,"def count_vowels(test_str):
  res = 0
  vow_list = ['a', 'e', 'i', 'o', 'u']
  for idx in range(1, len(test_str) - 1):
    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):
      res += 1
  if test_str[0] not in vow_list and test_str[1] in vow_list:
    res += 1
  if test_str[-1] not in vow_list and test_str[-2] in vow_list:
    res += 1
  return (res) ",human
278,"def count_preceding_ele(test_tup, key):
  res = [ele for ele in test_tup if ele < key]
  return len(res)",lm
212,"import math  
def fourth_Power_Sum(n): 
    sum = 0
    for i in range(1,n+1) : 
        sum = sum + (i*i*i*i) 
    return sum",human
954,"3
def calculate_profit(amount):
  if amount > 0:
    return amount
  else:
    return None",lm
226,"def remove_odd_index_chars(test_str):
  res = test_str[::2]
  return (res)",lm
425,"def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr",human
630,"def adjac(ele, sub = []): 
  if not ele: 
     yield sub 
  else: 
     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) 
                for idx in adjac(ele[1:], sub + [j])] 
def get_coordinates(test_tup):
  res = list(adjac(test_tup))
  return (res) ",human
145,"def max_Abs_Diff(arr,n): 
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ",human
972,"3
def concatenate_tuples(test_tup1, test_tup2): 
  res = (test_tup1, test_tup2) 
  return (res)",lm
303,"import sys 
def solve(a,n):   
    mx = -sys.maxsize - 1
    for j in range(1,n):  
        if (mx > a[j]):  
            return False  
        mx = max(mx,a[j - 1])    
    return True",human
974,"def minimum_path_sum(triangle):
  """"""
  Find the minimum total path sum in the given triangle.

  Args:
    triangle (list): A list of integers representing a triangle.

  Returns:
    int: The minimum total path sum.
  """"""
  # Initialize the minimum path sums for each row.
  min_path_sums = triangle[-1]

  # Iterate over the rows of the triangle in reverse order.
  for i in range(len(triangle) - 2, -1, -1):
    # Update the minimum path sums for each column in the row.
    for j in range(i + 1):
      min_path_sums[j] = min(min_path_sums[j], min_path_sums[j + 1]) + triangle[i][j]

  # Return the minimum path sum.
  return min_path_sums[0]",lm
543,"3
def add_and_print_digits(a, b):
  """"""Adds two numbers and prints number of digits of sum.""""""
  sum = a + b
  num_digits = len(str(sum))
  print(num_digits)",lm
143,"def find_lists(tup): 
    count = 0
    for ele in tup: 
        if type(ele) == list: 
            count += 1
    return count",lm
944,"import re
def num_position(text):
 for m in re.finditer(""\d+"", text):
    return m.start()",human
953,"def min_subset_count(nums):
    subsets = set()
    for num in nums:
        new_subsets = set()
        for subset in subsets:
            new_subsets.add(subset + (num,))
        subsets.update(new_subsets)
        subsets.add((num,))
    return len(subsets)",lm
357,"def max_value(tup):
    max_val = tup[0][1]
    for ele in tup:
        if max_val < ele[1]:
            max_val = ele[1]
    return max_val",lm
60,"def max_len_sub( arr, n): 
	mls=[] 
	max = 0
	for i in range(n): 
		mls.append(1) 
	for i in range(n): 
		for j in range(i): 
			if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): 
				mls[i] = mls[j] + 1
	for i in range(n): 
		if (max < mls[i]): 
			max = mls[i] 
	return max",human
232,"def get_n_largest(dataset, n):
    return sorted(dataset, reverse=True)[:n]",lm
67,"def partition_bell(n):
    """"""
    Finds the number of ways to partition a set of bell numbers.

    :param n: The number of bell numbers in the set.
    :return: The number of ways to partition the set.
    """"""
    if n == 0:
        return 1
    if n == 1:
        return 1
    partitions = [0] * (n + 1)
    partitions[0] = 1
    partitions[1] = 1
    for i in range(2, n + 1):
        for j in range(1, i + 1):
            partitions[i] += partitions[i - j] * partitions[j - 1]
    return partitions[n]",lm
662,"def sorted_dict(dict1):
  sorted_dict = {x: sorted(y) for x, y in dict1.items()}
  return sorted_dict",human
153,"def parabola_vertex(a, b, c): 
  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))
  return vertex",human
562,"def maximum_length(arr, n):
    maximum_len = 1
    for i in range(n):
        count = 1
        for j in range(i+1, n):
            if arr[i] < arr[j]:
                count += 1
        maximum_len = max(maximum_len, count)
    return maximum_len",lm
484,"3
def remove_matching_tuples(test_tup1, test_tup2):
  res = tuple([ele for ele in test_tup1 if ele not in test_tup2])
  return (res)",lm
793,"def last(arr,x,n):
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            low = mid + 1
    return res",human
528,"def find_min_length_lists(arr: list[list]) -> list[list]:

    # Get the minimum length of the lists in the array
    min_length = min(len(l) for l in arr)

    # Create a list to store the lists with minimum length
    min_length_lists = []

    # Iterate over the list of lists
    for l in arr:

        # Check if the length of the current list is equal to the minimum length
        if len(l) == min_length:

            # Append the current list to the list of minimum length lists
            min_length_lists.append(l)

    return min_length_lists",lm
185,"def parabola_focus(a, b, c): 
  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))
  return focus",human
673,"def convert(list): 
    s = [str(i) for i in list] 
    res = int("""".join(s))  
    return (res) ",human
367,"def isBalanced(root):
    if root is None:
        return True, 0

    lBalanced, lHeight = isBalanced(root.left)
    rBalanced, rHeight = isBalanced(root.right)

    return lBalanced and rBalanced and abs(lHeight - rHeight) <= 1, 1 + max(lHeight, rHeight)",lm
359,"def root_check(a, b, c):
    x = []
    D = b*b - 4*a*c
    if D < 0:
        return False
    elif D > 0:
        x1 = (-b + D**0.5) / (2*a)
        x2 = (-b - D**0.5) / (2*a)
        if x1 == 2*x2 or x2 == 2*x1:
            return True
        else:
            return False
    else:
        x1 = -b / (2*a)
        if x1 == 0:
            return True
        else:
            return False",lm
18,"NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ",human
20,"def is_woodball(n):
    """"""
    Checks if the given number is woodball or not.

    :param n: The number to check.
    :return: True if n is woodball, False otherwise.
    """"""
    if n == 0:
        return True
    if n < 0 or n % 10 == 0:
        return False
    return is_woodball(n // 10)",lm
863,"def find_longest_conseq_subseq(arr, n): 
	ans = 0
	count = 0
	arr.sort() 
	v = [] 
	v.append(arr[0]) 
	for i in range(1, n): 
		if (arr[i] != arr[i - 1]): 
			v.append(arr[i]) 
	for i in range(len(v)): 
		if (i > 0 and v[i] == v[i - 1] + 1): 
			count += 1
		else: 
			count = 1
		ans = max(ans, count) 
	return ans ",human
400,"def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)",human
495,"import re
def remove_lowercase(str1):
  remove_lower = lambda text: re.sub('[a-z]', '', text)
  result =  remove_lower(str1)
  return (result)",human
801,"def test_three_equal(x,y,z):
  result= set([x,y,z])
  if len(result)==3:
    return 0
  else:
    return (4-len(result))",human
147,"3
def max_sum(triangle):
  """"""Finds the maximum path sum in a given triangle.""""""
  for i in range(len(triangle) - 2, -1, -1):
    for j in range(len(triangle[i])):
      triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])
  return triangle[0][0]",lm
667,"def count_vowels(string):
  vowels = 'aeiouAEIOU'
  count = 0
  for char in string:
    if char in vowels:
      count += 1
  return count",lm
695,"def check_greater(test_tup1, test_tup2):
  res = all(x < y for x, y in zip(test_tup1, test_tup2))
  return (res) ",human
500,"def concatenate_elements(list):
  ans = ' '
  for i in list:
    ans = ans+ ' '+i
  return (ans) ",human
908,"def find_fixed_point(arr):
    for i, x in enumerate(arr):
        if x == i:
            return x
    return None",lm
381,"from operator import itemgetter
def index_on_inner_list(list_data, index_no):
    result = sorted(list_data, key=itemgetter(index_no))
    return result",human
970,"def min_of_two( x, y ):
    if x < y:
        return x
    return y",human
771,"def is_balanced(expression):
    stack = []
    brackets = {')': '(', '}': '{', ']': '['}
    for char in expression:
        if char in brackets.values():
            stack.append(char)
        elif char in brackets.keys():
            if not stack or stack.pop() != brackets[char]:
                return False
    return not stack",lm
269,ord(char),lm
287,"def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)",human
163,"def area_regular_polygon(side_length, number_of_sides):
  """"""Calculates the area of a regular polygon.

  Args:
    side_length: The length of one side of the polygon.
    number_of_sides: The number of sides of the polygon.

  Returns:
    The area of the polygon.
  """"""

  area = (1 / 4) * number_of_sides * side_length**2 * (1 / tan(pi / number_of_sides))
  return area",lm
570,"def remove_words(list1, charlist):
    new_list = []
    for line in list1:
        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])
        new_list.append(new_words)
    return new_list",human
716,"def perimeter(a, b, c, d):
  return a + b + c + d",lm
318,"def max_volume (s): 
    maxvalue = 0
    i = 1
    for i in range(s - 1): 
        j = 1
        for j in range(s): 
            k = s - i - j 
            maxvalue = max(maxvalue, i * j * k)         
    return maxvalue ",human
798,"def sum_array(arr): 
    total = 0
    for ele in arr: 
        total += ele 
    return total",lm
167,"def smallest_power_of_2(n):
  if(n == 0):
    return 1
  else:
    p = 1
    while(p < n):
      p = p << 1
    return p",lm
242,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total",human
377,"def remove_Char(s,c) :  
    counts = s.count(c) 
    s = list(s) 
    while counts :  
        s.remove(c) 
        counts -= 1 
    s = '' . join(s)   
    return (s) ",human
198,"def largest_inscribed_triangle(a, b):
    """"""Finds the largest triangle that can be inscribed in an ellipse.""""""
    # Calculate the semi-major and semi-minor axes of the ellipse.
    a_sq = a**2
    b_sq = b**2
    c = (a_sq - b_sq)**0.5

    # Calculate the area of the triangle.
    area = 0.5 * c

    # Calculate the base of the triangle.
    base = 2 * b_sq / c

    # Calculate the height of the triangle.
    height = 2 * a_sq / c

    return area, base, height",lm
350,"def minimum_Length(s) : 
    maxOcc = 0
    n = len(s) 
    arr = [0]*26
    for i in range(n) : 
        arr[ord(s[i]) -ord('a')] += 1
    for i in range(26) : 
        if arr[i] > maxOcc : 
            maxOcc = arr[i] 
    return n - maxOcc ",human
330,"import re
def find_char(text):
  return (re.findall(r""\b\w{3,5}\b"", text))",human
637,"def noprofit_noloss(actual_cost,sale_amount): 
  if(sale_amount == actual_cost):
    return True
  else:
    return False",human
972,"def concatenate_nested(test_tup1, test_tup2):
  res = test_tup1 + test_tup2
  return (res) ",human
66,"def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ",human
220,"import re
def replace_max_specialchar(text,n):
 return (re.sub(""[ ,.]"", "":"", text, n))",human
388,"def highest_power_of_2(n):
       p = 0
       while ((1 << p) <= n):
                p = p + 1
       return 1 << (p-1)",lm
78,"def count_odd_set_bits(n):
  cnt = 0
  for i in range(1, n + 1):
    set_bit_count = bin(i).count('1')
    if set_bit_count % 2 == 1:
      cnt += 1
  return cnt",lm
955,"def is_abundant(n):
    divisors = [1]
    sum = 1
    # Find proper divisors
    for i in range(2,int(n**0.5)+1):
        if n%i == 0:
            divisors.append(i)
            if i!=n//i:
                divisors.append(n//i)
    for d in divisors:
        sum += d
    return (sum>2*n)",lm
294,"def max_value(lst):
  max_val = lst[0]
  for val in lst:
    if not isinstance(val, (int, float)):
      continue
    max_val = max(max_val, val)
  return max_val",lm
739,"import math 
def find_Index(n): 
    x = math.sqrt(2 * math.pow(10,(n - 1))); 
    return round(x); ",human
816,"def clear_tuple(test_tup):
  res = tuple()
  return (res)",lm
699,"def min_swaps(s1, s2):
  if len(s1) != len(s2):
    return -1
  
  count = 0
  for i in range(len(s1)):
    if s1[i] != s2[i]:
      count += 1

  return count // 2",lm
932,"def remove_duplic_list(l):
    temp = []
    for x in l:
        if x not in temp:
            temp.append(x)
    return temp",human
949,"def sort_tuple_list_by_total_digits(tuple_list):
    tuple_list.sort(key=lambda x: sum(len(str(element)) for element in x))
    return tuple_list",lm
415,"def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    ",human
510,"def no_of_subsequences(arr, k): 
	n = len(arr) 
	dp = [[0 for i in range(n + 1)] 
			for j in range(k + 1)] 
	for i in range(1, k + 1): 
		for j in range(1, n + 1): 
			dp[i][j] = dp[i][j - 1] 
			if arr[j - 1] <= i and arr[j - 1] > 0: 
				dp[i][j] += dp[i // arr[j - 1]][j - 1] + 1
	return dp[k][n]",human
646,"def No_of_cubes(N,K):
    No = 0
    No = (N - K + 1)
    No = pow(No, 3)
    return No",human
522,"3
def bitonic(arr):
    n = len(arr)
    lis = [1] * n
    lds = [1] * n

    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and lis[i] < lis[j] + 1:
                lis[i] = lis[j] + 1

    for i in range(n - 2, -1, -1):
        for j in range(n - 1, i, -1):
            if arr[i] > arr[j] and lds[i] < lds[j] + 1:
                lds[i] = lds[j] + 1

    max_len = 0
    for i in range(n):
        max_len = max(max_len, lis[i] + lds[i] - 1)

    return max_len",lm
849,"def Sum(N): 
    SumOfPrimeDivisors = [0]*(N + 1)   
    for i in range(2,N + 1) : 
        if (SumOfPrimeDivisors[i] == 0) : 
            for j in range(i,N + 1,i) : 
                SumOfPrimeDivisors[j] += i           
    return SumOfPrimeDivisors[N] ",human
94,"3
def index_minimum_value_record(nums):
    index = 0
    minimum = nums[0][1]
    for i in range(1, len(nums)):
        if nums[i][1] < minimum:
            index = i
            minimum = nums[i][1]
    return index",lm
424,"def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) ",human
202,"def remove_even_chars(str1):
    result = """"
    for i in range(len(str1)):
        if i % 2 == 0:
            continue
        result += str1[i]
    return result",lm
611,"def max_nth_col_tuple_list(tuple_list, n): 
    max_nth_col = max(tuple_list, key=lambda x: x[n]) 
    return max_nth_col[n]",lm
177,"def answer(L,R): 
    if (2 * L <= R): 
        return (L ,2*L)
    else: 
        return (-1) ",human
396,"3
import re
def check_same_start_end(string):
    pattern = ""^"" + string[0] + ""$""
    return bool(re.match(pattern, string))",lm
380,"def multi_list(rownum,colnum):
  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]
  for row in range(rownum):
    for col in range(colnum):
        multi_list[row][col]= row*col
  return multi_list
",human
900,"def starts_with_number(input_str):
    return input_str[0].isdigit()",lm
893,"def get_list_last_element(list1):
    result = [sub_list[-1] for sub_list in list1]
    return result",lm
12,"def sort_matrix(matrix):
    rows = len(matrix)
    cols = len(matrix[0])
    sums = []
    for i in range(rows):
        row_sum = 0
        for j in range(cols):
            row_sum += matrix[i][j]
        sums.append(row_sum)
    sorted_indices = list(range(rows))
    sorted_indices.sort(key=lambda i: sums[i])
    sorted_matrix = []
    for i in sorted_indices:
        sorted_matrix.append(matrix[i])
    return sorted_matrix",lm
732,"def replace_characters(text):
    return ':'.join(text.split())",lm
84,"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))",human
416,"MAX = 1000000
def breakSum(n): 
	dp = [0]*(n+1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); 
	return dp[n]",human
862,"import operator

def find_n_most_common_words(text, n):
    words = text.split()
    word_counts = {}
    for word in words:
        word = word.strip('.,!?""').lower()
        if word:
            if word in word_counts:
                word_counts[word] += 1
            else:
                word_counts[word] = 1
    sorted_word_counts = sorted(word_counts.items(), key=operator.itemgetter(1), reverse=True)
    return sorted_word_counts[:n]",lm
95,"def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ",human
168,"def freq(arr,x):
  freq = arr.count(x)
  return freq",lm
79,"def check_odd_length(word):
    if len(word) % 2 == 1:
        return True
    else:
        return False",lm
394,"def is_distinct_tuple(test_tup):
  res = True
  for i in test_tup:
    cnt = test_tup.count(i)
    if cnt > 1:
      res = False
      break
  return (res)",lm
326,"def most_frequent_word(strings):
  word_frequency = {}
  for string in strings:
    words = string.split()
    for word in words:
      cleaned_word = word.strip('.,!?""').lower()
      if cleaned_word:
        if cleaned_word in word_frequency:
          word_frequency[cleaned_word] += 1
        else:
          word_frequency[cleaned_word] = 1
  most_frequent = """"
  max_count = 0
  for word, count in word_frequency.items():
    if count > max_count:
      max_count = count
      most_frequent = word
  return most_frequent",lm
172,"def list_std(test_str): 
  res = [i for i in range(len(test_str)) if test_str[i] in ['s', 't', 'd']] 
  return (res)",lm
936,"def re_arrange_tuples(test_list, ord_list):
  temp = dict(test_list)
  res = [(key, temp[key]) for key in ord_list]
  return (res) ",human
434,"def match_ab(text):
    import re
    pattern = 'ab+'
    if re.search(pattern, text):
        return True
    else:
        return False",lm
121,"def check_triplet(A, n, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or n == 0 or sum < 0:
        return False
    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\
           check_triplet(A, n - 1, sum, count)",human
467,"def decimalToOctal(n):
    octalNum = """"
    i = 0
    while n != 0:
        octalNum += str(n % 8)
        n = n // 8
        i += 1
    return octalNum[::-1]",lm
142,"def count_same_pair(list1, list2, list3): 
      count = 0
      for item1 in list1: 
          for item2 in list2: 
              if item1 == item2: 
                  for item3 in list3: 
                      if item2 == item3: 
                          count += 1
      return count",lm
586,"def split_array(arr, n):
    x = arr[0:n]
    y = arr[n:]
    return y + x",lm
563,"import re
def extract_values(text):
 return (re.findall(r'""(.*?)""', text))",human
830,"def round_up(number, digits):
    return math.ceil(number * (10 ** digits)) / (10 ** digits)",lm
211,"def count_Num(n): 
    if (n == 1): 
        return 1
    count = pow(2,n - 2) 
    return count ",human
751,"def check_min_heap(arr, i):
    if 2 * i + 2 > len(arr):
        return True
    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)
    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] 
                                      and check_min_heap(arr, 2 * i + 2))
    return left_child and right_child",human
345,"def diff_consecutivenums(nums):
    result = [b-a for a, b in zip(nums[:-1], nums[1:])]
    return result",human
320,"def sum_difference(n):
    sumofsquares = 0
    squareofsum = 0
    for num in range(1, n+1):
        sumofsquares += num * num
        squareofsum += num
    squareofsum = squareofsum ** 2
    return squareofsum - sumofsquares",human
597,"def find_kth(arr1, arr2, m, n, k):
	sorted1 = [0] * (m + n)
	i = 0
	j = 0
	d = 0
	while (i < m and j < n):
		if (arr1[i] < arr2[j]):
			sorted1[d] = arr1[i]
			i += 1
		else:
			sorted1[d] = arr2[j]
			j += 1
		d += 1
	while (i < m):
		sorted1[d] = arr1[i]
		d += 1
		i += 1
	while (j < n):
		sorted1[d] = arr2[j]
		d += 1
		j += 1
	return sorted1[k - 1]",human
596,"import sys 
def tuple_size(tuple_list):
  return (sys.getsizeof(tuple_list)) ",human
685,"def sum_Of_Primes(n): 
    prime = [True] * (n + 1)  
    p = 2
    while p * p <= n: 
        if prime[p] == True:  
            i = p * 2
            while i <= n: 
                prime[i] = False
                i += p 
        p += 1    
    sum = 0
    for i in range (2,n + 1): 
        if(prime[i]): 
            sum += i 
    return sum",human
264,"def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age",human
318,"def max_volume(s:int) :
    temp = s/6
    return temp*temp*temp",lm
203,"def hamming_Distance(n1,n2) : 
    x = n1 ^ n2  
    setBits = 0
    while (x > 0) : 
        setBits += x & 1
        x >>= 1
    return setBits  ",human
406,"def parity(n):
    count = 0
    while(int(n) > 0):

        if (int(n) % 2 != 0):
            count += 1

        n = int(int(n)/2) 
        
    if (count % 2 == 0):
        return ""Even""
    else:
        return ""Odd""",lm
827,"def sum_column(data, column):
  total = 0
  for row in data:
    total += row[column]
  return total",lm
374,"def permute_string(str):
    if len(str) == 0:
        return ['']
    prev_list = permute_string(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list",human
639,"def sample_nam(sample_names):
  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))
  return len(''.join(sample_names))",human
729,"3
def add_lists(list1, list2):
    result = map(lambda x, y: x + y, list1, list2)
    return list(result)",lm
448,"def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum",human
210,"import re
def is_allowed_specific_char(string):
    get_char = re.compile(r'[^a-zA-Z0-9.]')
    string = get_char.search(string)
    return not bool(string)",human
653,"from collections import defaultdict

def group_by_key(input_list): 
    result = defaultdict(list) 
    for k, v in input_list: 
        result[k].append(v) 
    return result",lm
919,"def multiply_list(items):
    tot = 1
    for x in items:
        tot *= x
    return tot",human
855,"def check_Even_Parity(x): 
    parity = 0
    while (x != 0): 
        x = x & (x - 1) 
        parity += 1
    if (parity % 2 == 0): 
        return True
    else: 
        return False",human
221,"def first_even(nums):
    first_even = next((el for el in nums if el%2==0),-1)
    return first_even",human
805,"def max_sum_list(lists):
  max_sum = 0
  max_list = []
  for i in range(len(lists)):
    sum = 0
    for j in range(len(lists[i])):
      sum += lists[i][j]
    if sum > max_sum:
      max_sum = sum
      max_list = lists[i]
  return max_list",lm
710,"lambda t: (t[0], t[-1])",lm
915,"def rearrange_numbs(array_nums):
  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)
  return result ",human
356,"def find_angle(a,b):
 c = 180 - (a + b)
 return c
",human
204,"def count_character(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count",lm
861,"from collections import Counter 
def anagram_lambda(texts,str):
  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) 
  return result",human
736,"def find_left_insertion_point(A, x):
    low, high = 0, len(A) - 1
    while low <= high:
        mid = (low + high) // 2
        if A[mid] == x:
            high = mid - 1
        elif A[mid] < x:
            low = mid + 1
        else:
            high = mid - 1
    return low",lm
697,"even_count = len(list(filter(lambda x: x%2 == 0, list1)))",lm
544,"def flatten_tuple_list(list_tuple):
    str1 = """"
    for tuple_item in list_tuple:
        for item in tuple_item:
            str1 = str1 + item
    return str1",lm
210,"import re
def string_check(string):
    pat = ""^[a-zA-Z0-9]+$""
    if re.match(pat, string):
        return True
    else:
        return False",lm
658,"def max_occurrences(list1):
    max_val = 0
    result = list1[0] 
    for i in list1:
        occu = list1.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result",human
128,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	",human
360,"def get_carol(n): 
	result = (2**n) - 1
	return result * result - 2",human
57,"def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ",human
928,"def convert_date(date):
    """"""Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.""""""
    year, month, day = date.split(""-"")
    return f""{day}-{month}-{year}""",lm
884,"def check_bits_range(nums, l, r):
  for num in nums:
    if num < l or num > r:
      return False
  return True",lm
188,"def checkPerfectSquare(n):
        sq = int(n ** 0.5)
        return sq * sq == n",lm
254,"def find_matching_words(text):
  words = text.split()
  matching_words = []
  for word in words:
    if word[0].lower() in ""ae"":
      matching_words.append(word)
  return matching_words",lm
224,"def countSetBits(n):
    count = 0
    while int(n) > 0:
        if int(n) % 2:
            count += 1
        n = int(int(n)/2)
    return count",lm
149,"def longest_subseq_with_diff_one(arr, n): 
	dp = [1 for i in range(n)] 
	for i in range(n): 
		for j in range(i): 
			if ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): 
				dp[i] = max(dp[i], dp[j]+1) 
	result = 1
	for i in range(n): 
		if (result < dp[i]): 
			result = dp[i] 
	return result",human
256,"def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr",human
285,"import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
386,"def minimum_swaps(s):
    if len(s) % 2 == 1:
        return -1
    stack = []
    for bracket in s:
        if bracket == ""("":
            stack.append(bracket)
        else:
            if stack:
                stack.pop()
            else:
                stack.append(bracket)
    open_braces = len(stack)
    close_braces = len(s) - open_braces
    return (open_braces + close_braces) // 2",lm
113,"def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False",human
43,"import re

def find_lowercase_underscore_sequences(text):
  """"""Find sequences of lowercase letters joined with an underscore using regex.""""""

  pattern = r""[a-z]+_[a-z]+""
  matches = re.findall(pattern, text)
  return matches",lm
588,"def difference_max_min_array(lst):
    min_num = min(lst)
    max_num = max(lst)
    diff = max_num - min_num
    return diff",lm
600,"def is_Even(n) : 
    if (n^1 == n+1) :
        return True; 
    else :
        return False; ",human
680,"def increasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False",human
60,"def find_max_subsequence_length(arr):
    dp = [1] * len(arr)
    for i in range(1, len(arr)):
        for j in range(i):
            if arr[i] - arr[j] == 1:
                dp[i] = max(dp[i], dp[j] + 1)
    return max(dp)",lm
498,"def gcd(x, y):
    gcd = 1
    if x % y == 0:
        return y
    for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd = k
            break  
    return gcd",human
679,"def access_key(ditionary,key):
  return list(ditionary)[key]",human
337,"def match_end(text, word, punctuation=''):
    punc = punctuation != ''
    if punc:
        return text.endswith(punctuation + word)
    return text.endswith(word)",lm
541,"import math 
def get_sum(n): 
	sum = 0
	i = 1
	while i <= (math.sqrt(n)): 
		if n%i == 0: 
			if n/i == i : 
				sum = sum + i 
			else: 
				sum = sum + i 
				sum = sum + (n / i ) 
		i = i + 1
	sum = sum - n 
	return sum
def check_abundant(n): 
	if (get_sum(n) > n): 
		return True
	else: 
		return False",human
255,"def choose_colors(colors, k):
    if k==0:
        return [[]]

    result = []
    for i in range(len(colors)):
        prev = choose_colors(colors[i+1:], k-1)
        cur = [[colors[i]] + item for item in prev]
        result.extend(cur)

    return result",lm
178,"import re
def string_literals(patterns,text):
  for pattern in patterns:
     if re.search(pattern,  text):
       return ('Matched!')
     else:
       return ('Not Matched!')",human
37,"def sort_mixed_list(mixed_list):
    int_part = sorted([i for i in mixed_list if type(i) is int])
    str_part = sorted([i for i in mixed_list if type(i) is str])
    return int_part + str_part",human
523,"has_capital_letter_lower_case_letter_number_and_length = lambda input_string, min_length: any(char.isupper() for char in input_string) and any(char.islower() for char in input_string) and any(char.isdigit() for char in input_string) and len(input_string) >= min_length",lm
105,"def count_true_booleans(list1): 
    cnt = 0
    for ele in list1: 
        if ele == True: 
            cnt += 1
    return cnt",lm
881,"def sum_even_odd(test_list):
  even_sum = sum(ele for ele in test_list if ele % 2 == 0)
  odd_sum = sum(ele for ele in test_list if ele % 2 != 0)
  res = [even_sum, odd_sum]
  return (res)",lm
118,"def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst",human
621,"def increment_numeric_values(string, k):
    result = []
    last_num = """"
    num_flag = False
    for char in string:
        if char.isnumeric():
            if not num_flag:
                last_num = """"
                num_flag = True
            last_num += char
        else:
            if num_flag:
                num_flag = False
                result.append(str(int(last_num) + k))
            result.append(char)
    if num_flag:
        result.append(str(int(last_num) + k))
    return """".join(result)",lm
352,"def unique_characters(s):
    char_set = set()
    for c in s:
        if c in char_set:
            return False
        char_set.add(c)
    return True",lm
957,"import math
def get_First_Set_Bit_Pos(n):
     return math.log2(n&-n)+1",human
362,"def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result",human
549,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n+1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j*j)     
    return sm ",human
939,"sorted(list_of_dictionaries, key=lambda dictionary: dictionary['key_to_sort_by'])",lm
943,"from heapq import merge
def combine_lists(num1,num2):
  combine_lists=list(merge(num1, num2))
  return combine_lists",human
91,"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False",human
678,"def remove_spaces(str1):
  str1 = str1.replace(' ','')
  return str1",human
77,"def DiffOddEven(n):
    odd_sum = 0
    even_sum = 0
    while n:
        digit = n % 10
        if digit % 2 == 0 :
            even_sum += digit
        else:
            odd_sum += digit
        n //= 10
    return abs(even_sum - odd_sum)",lm
723,"def count_same_pair(a, b):
    return len([x for x, y in map(list, zip(a, b)) if x == y])",lm
144,"def sum_absolute_differences(arr):
    sum = 0
    for i in arr:
        for j in arr:
            sum += abs(i - j)
    return sum",lm
207,"def find_longest_repeating_subseq(str): 
	n = len(str) 
	dp = [[0 for k in range(n+1)] for l in range(n+1)] 
	for i in range(1, n+1): 
		for j in range(1, n+1): 
			if (str[i-1] == str[j-1] and i != j): 
				dp[i][j] = 1 + dp[i-1][j-1] 
			else: 
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]) 
	return dp[n][n]",human
609,"def min_periodic_function(f, period, start, end):
    """"""Find minimum possible value for the given periodic function.""""""
    min_value = float('inf')
    for x in range(start, end + 1):
        value = f(x % period)
        min_value = min(min_value, value)
    return min_value",lm
715,"def string_to_tuple(s):
    """"""Convert the given string of integers into a tuple.""""""
    return tuple(map(int, s.split()))",lm
722,"def student_filter(students, min_height, max_height, min_width, max_width):
  return {
      key: value for key, value in students.items()
      if min_height <= value['height'] <= max_height and min_width <= value['width'] <= max_width
  }",lm
35,"def rectangular_number(n):
  return int(n*(n+1)/2)",lm
511,"def find_Min_Sum(num): 
    sum = 0
    i = 2
    while(i * i <= num): 
        while(num % i == 0): 
            sum += i 
            num /= i 
        i += 1
    sum += num 
    return sum",human
753,"def min_k(test_list, K):
  res = sorted(test_list, key = lambda x: x[1])[:K]
  return (res) ",human
729,"def add_list(nums1,nums2):
  result = map(lambda x, y: x + y, nums1, nums2)
  return list(result)",human
931,"def sum_of_cubes(n):
    sum = 0
    for i in range(1, n + 1):
        sum += i ** 3
    return sum",lm
923,"def super_seq(X, Y, m, n):
	if (not m):
		return n
	if (not n):
		return m
	if (X[m - 1] == Y[n - 1]):
		return 1 + super_seq(X, Y, m - 1, n - 1)
	return 1 + min(super_seq(X, Y, m - 1, n),	super_seq(X, Y, m, n - 1))",human
801,"def count_equal(i,j,k):
  c=0
  if (i==j):
    c+=1
  if (j==k):
    c+=1
  if (i==k):
    c+=1
  return c",lm
252,"import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) ",human
809,"def check_smaller(test_tup1, test_tup2):
  res = all(x > y for x, y in zip(test_tup1, test_tup2))
  return (res) ",human
102,"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))",human
871,"def are_Rotations(string1,string2): 
    size1 = len(string1) 
    size2 = len(string2) 
    temp = '' 
    if size1 != size2: 
        return False
    temp = string1 + string1 
    if (temp.count(string2)> 0): 
        return True
    else: 
        return False",human
311,"def set_left_most_unset_bit(num): 
    bit_position = 1
    while (num & bit_position) > 0: 
        bit_position = bit_position << 1
    num = num | bit_position 
    return num",lm
19,"def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ",human
815,"def sort_by_dnf(arr, n):
  low=0
  mid=0
  high=n-1
  while mid <= high:
    if arr[mid] == 0:
      arr[low], arr[mid] = arr[mid], arr[low]
      low = low + 1
      mid = mid + 1
    elif arr[mid] == 1:
      mid = mid + 1
    else:
      arr[mid], arr[high] = arr[high], arr[mid]
      high = high - 1
  return arr",human
287,"def sum_squares_even_natural(n) : 
      sum = 0
      for i in range(1, n+1) : 
            sum += i * i 
      return sum",lm
635,"import heapq

def heap_sort(arr):
    heapq.heapify(arr)     # convert list into heap
    sorted_arr = []       # list to store sorted elements

    while arr:           # while heap is not empty
        sorted_arr.append(heapq.heappop(arr))  # pop off smallest element

    return sorted_arr",lm
265,"3
def split_list(list1, n): 
    return [list1[i:i+n] for i in range(0, len(list1), n)]",lm
766,"def pairwise(iterable):
    ""s -> (s0,s1), (s1,s2), (s2, s3), ...""
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)",lm
181,"def common_prefix_util(str1, str2): 
	result = """"; 
	n1 = len(str1) 
	n2 = len(str2) 
	i = 0
	j = 0
	while i <= n1 - 1 and j <= n2 - 1: 
		if (str1[i] != str2[j]): 
			break
		result += str1[i] 
		i += 1
		j += 1
	return (result) 
def common_prefix (arr, n): 
	prefix = arr[0] 
	for i in range (1, n): 
		prefix = common_prefix_util(prefix, arr[i]) 
	return (prefix) ",human
499,"def diameter_of_circle(radius):
  """"""Finds the diameter of a circle.""""""

  if not isinstance(radius, (int, float)):
    raise TypeError(""Radius must be a number."")
  if radius <= 0:
    raise ValueError(""Radius must be positive."")

  return 2 * radius",lm
790,"def check_even_index_even_numbers(nums):
    check = True
    for element in range(0, len(nums), 2):
        if nums[element] % 2:
            check = False
            break
    return check",lm
253,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr",human
218,"import math   
def min_Operations(A,B):  
    if (A > B): 
        swap(A,B)  
    B = B // math.gcd(A,B);  
    return B - 1",human
696,"def zip_list(list1,list2):  
 result = list(map(list.__add__, list1, list2)) 
 return result",human
813,"def string_length(str1):
    count = 0
    for char in str1:
        count += 1
    return count",human
569,"def sub_sort(l):
  return [sorted(x) for x in l]",lm
110,"def find_missing_ranges(nums, start, end):
    result = []
    if not nums:
        if start == end:
            result.append(str(start))
        else:
            result.append(str(start) + ""->"" + str(end))
        return result
    for i in range(len(nums)):
        if nums[i] <= start:
            continue
        if nums[i] == start + 1:
            result.append(str(start))
            start = nums[i]
        else:
            result.append(str(start) + ""->"" + str(nums[i] - 1))
            start = nums[i]
    if start <= end:
        result.append(str(start) + ""->"" + str(end))
    return result",lm
98,"def avg_of_list(nums):
  result = 1
  for i in nums:
    result *= i
  return result / len(nums)",lm
311,"def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) ",human
113,"def is_integer(string):
  try:
    int(string)
    return True
  except ValueError:
    return False",lm
794,"def match_a_anything_b(text):
    pattern = 'a.*b$' 
    if re.search(pattern, text):
        return True
    else:
        return False",lm
182,"import re
def find_character(string):
  uppercase_characters = re.findall(r""[A-Z]"", string) 
  lowercase_characters = re.findall(r""[a-z]"", string) 
  numerical_characters = re.findall(r""[0-9]"", string) 
  special_characters = re.findall(r""[, .!?]"", string) 
  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",human
792,"def count_lists(lst): 
    count = 0
    for x in lst: 
        if isinstance(x, list): 
            count += 1
    return count",lm
2,"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ",human
822,"import re
def pass_validity(p):
 x = True
 while x:  
    if (len(p)<6 or len(p)>12):
        break
    elif not re.search(""[a-z]"",p):
        break
    elif not re.search(""[0-9]"",p):
        break
    elif not re.search(""[A-Z]"",p):
        break
    elif not re.search(""[$#@]"",p):
        break
    elif re.search(""\s"",p):
        break
    else:
        return True
        x=False
        break

 if x:
    return False",human
512,"3
def count_element_frequency(test_tup):
    res = {} 
    for ele in test_tup: 
        if type(ele) is tuple: 
            for sub in ele: 
                if sub not in res: 
                    res[sub] = 1
                else: 
                    res[sub] += 1
        else: 
            if ele not in res: 
                res[ele] = 1
            else: 
                res[ele] += 1
    return (res)",lm
114,"def assign_frequency(test_list): 
  res = dict() 
  for sub in test_list: 
    if sub not in res: 
      res[sub] = 1
    else: 
      res[sub] += 1
  return (res)",lm
688,"import cmath
def len_complex(a,b):
  cn=complex(a,b)
  length=abs(cn)
  return length",human
659,"def print_duplicates(nums):
  seen = set()
  duplicates = set()
  for num in nums:
    if num in seen:
      duplicates.add(num)
    else:
      seen.add(num)
  return duplicates",lm
478,"def remove_lowercase(s):
    return ''.join(c for c in s if c.isupper())",lm
351,"def first_Element(arr,n,k): 
    count_map = {}; 
    for i in range(0, n): 
        if(arr[i] in count_map.keys()): 
            count_map[arr[i]] += 1
        else: 
            count_map[arr[i]] = 1
        i += 1
    for i in range(0, n):  
        if (count_map[arr[i]] == k): 
            return arr[i] 
        i += 1 
    return -1",human
765,"def find_nth_polite_number(n): 
    if n <= 0: 
        return 0
    if n == 1: 
        return 1
    result = 3 
    polite_count = 1
    while polite_count < n: 
        result += 2
        if is_polite(result): 
            polite_count += 1
    return result 
def is_polite(number): 
    for i in range(2, int(number**0.5)+1): 
        if number % i == 0: 
            return False
    return True",lm
924,"def max_of_two( x, y ):
    if x > y:
        return x
    return y",human
248,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ",human
230,"def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2",human
935,"def sum_of_squares(n):
    sum = 0
    for i in range(1, n + 1):
        sum += i**2
    return sum",lm
969,"3
def join_tuples(tuples):
    """"""Join tuples if they have similar initial elements.""""""
    result = []
    for i in range(len(tuples)):
        if not result or tuples[i][0] != result[-1][0]:
            result.append(tuples[i])
            continue
        result[-1] = (result[-1][0], result[-1][1] + tuples[i][1])
    return result",lm
126,"def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum",human
530,"def neg_ratio(arr: list) -> float:
    """"""
    Write a function to find the ration of negative numbers in an array of integers.
    """"""
    neg_count = 0
    for num in arr:
        if num < 0:
            neg_count += 1
    return neg_count / len(arr)",lm
658,"def most_frequent(List):
    dict = {}
    count = 0
    for item in List:
        if (item in dict):
            dict[item] += 1
        else:
            dict[item] = 1
    for key in dict:
        if (dict[key] > count):
            count = dict[key]
            res = str(key)
    return res",lm
775,"def odd_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))",human
725,"import re
def extract_quotation(text1):
  return (re.findall(r'""(.*?)""', text1))",human
222,"def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) ",human
460,"def first_element(list1):
    result = [sub[0] for sub in list1]
    return result",lm
481,"def is_subset_sum(set, n, sum):
	if (sum == 0):
		return True
	if (n == 0):
		return False
	if (set[n - 1] > sum):
		return is_subset_sum(set, n - 1, sum)
	return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",human
387,"def even_or_odd(N): 
    l = len(N) 
    if (N[l-1] =='0'or N[l-1] =='2'or 
        N[l-1] =='4'or N[l-1] =='6'or 
        N[l-1] =='8'or N[l-1] =='A'or 
        N[l-1] =='C'or N[l-1] =='E'): 
        return (""Even"") 
    else: 
        return (""Odd"") ",human
401,"def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",human
877,"def sort_string(string):
    """"""Sort the given string.""""""
    return ''.join(sorted(string))",lm
893,"def Extract(lst): 
    return [item[-1] for item in lst] ",human
661,"def max_sum_of_three_consecutive(arr, n): 
	sum = [0 for k in range(n)] 
	if n >= 1: 
		sum[0] = arr[0] 
	if n >= 2: 
		sum[1] = arr[0] + arr[1] 
	if n > 2: 
		sum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) 
	for i in range(3, n): 
		sum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) 
	return sum[n-1]",human
837,"def cube_Sum(n): 
    sum = 0   
    for i in range(0,n) : 
        sum += (2*i+1)*(2*i+1)*(2*i+1) 
    return sum",human
471,"def findRemainder(arr, n):
    prod = 1
    for i in arr:
        prod = (prod*i)%n
    return prod%n",lm
704,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1))",human
558,"def digit_distance_nums(n1, n2):
         return sum(map(int,str(abs(n1-n2))))",human
742,"def tetrahedron_volume(a):
  return ((a**3) * math.sqrt(2)) / 12",lm
249,"lambda_intersection = lambda a, b: list(filter(lambda x: x in b, a))",lm
42,"def sum_of_repeated_elements(arr):
    dict1 = {}
    sum = 0
    for i in arr:
        if i in dict1:
            dict1[i] += 1
        else:
            dict1[i] = 1
    for key in dict1:
        if dict1[key] > 1:
            sum += (dict1[key] - 1) * key
    return sum",lm
662,"def sort_list_in_dict(dict):
  for key, value in dict.items():
    if isinstance(value, list):
      dict[key] = sorted(value)
  return dict",lm
876,"def lcm(x, y):
   if x > y:
       z = x
   else:
       z = y
   while(True):
       if((z % x == 0) and (z % y == 0)):
           lcm = z
           break
       z += 1
   return lcm",human
694,"def extract_unique(test_dict):
  res = list(sorted({ele for val in test_dict.values() for ele in val}))
  return res",human
29,"def get_Odd_Occurrence(arr,arr_size):   
    for i in range(0,arr_size): 
        count = 0
        for j in range(0,arr_size): 
            if arr[i] == arr[j]: 
                count+=1     
        if (count % 2 != 0): 
            return arr[i]     
    return -1",human
265,"def list_split(S, step):
    return [S[i::step] for i in range(step)]",human
836,"def max_sum_subarray(nums):
  current_sum = nums[0]
  max_sum = nums[0]
  for i in range(1, len(nums)):
    current_sum = max(nums[i], current_sum + nums[i])
    max_sum = max(max_sum, current_sum)
  return max_sum",lm
31,"def func(nums, k):
    import collections
    d = collections.defaultdict(int)
    for row in nums:
        for i in row:
            d[i] += 1
    temp = []
    import heapq
    for key, v in d.items():
        if len(temp) < k:
            temp.append((v, key))
            if len(temp) == k:
                heapq.heapify(temp)
        else:
            if v > temp[0][0]:
                heapq.heappop(temp)
                heapq.heappush(temp, (v, key))
    result = []
    while temp:
        v, key = heapq.heappop(temp)
        result.append(key)
    return result",human
155,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n 
    while (temp > 0) :     
        if (count % 2 == 1) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ",human
928,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)
        return change_date_format(dt)",human
215,"def decode_list(alist):
    def aux(g):
        if isinstance(g, list):
            return [(g[1], range(g[0]))]
        else:
            return [(g, [0])]
    return [x for g in alist for x, R in aux(g) for i in R]",human
443,"def largest_negative(nums):
  """"""Returns the largest negative number from the given list.""""""
  largest_negative = None
  for num in nums:
    if num < 0:
      if largest_negative is None or num > largest_negative:
        largest_negative = num
  return largest_negative",lm
678,"def remove_spaces(text):
  return ''.join(text.split())",lm
170,"def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ",human
857,"def listify_list(list1):
  result = list(map(list,list1)) 
  return result ",human
814,"def rombus_area(d1, d2):
    return 0.5 * d1 * d2",lm
673,"def convert(list):
    temp = 0
    for num in list:
        temp = temp * 10 + num
    return temp",lm
856,"def find_Min_Swaps(arr,n) : 
    noOfZeroes = [0] * n 
    count = 0 
    noOfZeroes[n - 1] = 1 - arr[n - 1] 
    for i in range(n-2,-1,-1) : 
        noOfZeroes[i] = noOfZeroes[i + 1] 
        if (arr[i] == 0) : 
            noOfZeroes[i] = noOfZeroes[i] + 1
    for i in range(0,n) : 
        if (arr[i] == 1) : 
            count = count + noOfZeroes[i] 
    return count ",human
775,"def check_odd(test_list):
  res = all(num % 2 != 0 for idx, num in enumerate(test_list) if idx % 2 != 0) 
  return (res)",lm
754,"def find_common(list1, list2, list3):
    result = []
    for i in range(len(list1)):
        if list1[i] in list2 and list1[i] in list3:
            result.append(list1[i])
    return result",lm
341,"def set_to_tuple(s):
  t = tuple(sorted(s))
  return (t)",human
755,"def second_smallest(numbers):
  if (len(numbers)<2):
    return
  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):
    return
  dup_items = set()
  uniq_items = []
  for x in numbers:
    if x not in dup_items:
      uniq_items.append(x)
      dup_items.add(x)
  uniq_items.sort()    
  return  uniq_items[1] ",human
508,"def check_elements_order(list_1, list_2):
  flag = True
  for i, element in enumerate(list_1):
    if element in list_2 and list_2.index(element) != i:
      flag = False
      break
  return flag",lm
2,"def find_similar_elements(lst1, lst2): 
    result = [] 
    for x in lst1: 
        for j in lst2:  
            if x == j: 
                result.append(x) 
    return result",lm
297,"def flatten(nested_list):
  flattened_list = []
  for element in nested_list:
    if isinstance(element, list):
      flattened_list.extend(flatten(element))
    else:
      flattened_list.append(element)
  return flattened_list",lm
421,"def concatenate_tuple(test_tup, delimiter):
  res = delimiter.join(test_tup) 
  return (res)",lm
853,"import math
def sum_of_odd_Factors(n): 
    res = 1
    while n % 2 == 0: 
        n = n // 2 
    for i in range(3,int(math.sqrt(n) + 1)): 
        count = 0
        curr_sum = 1
        curr_term = 1
        while n % i == 0: 
            count+=1 
            n = n // i 
            curr_term *= i 
            curr_sum += curr_term    
        res *= curr_sum  
    if n >= 2: 
        res *= (1 + n) 
    return res ",human
964,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2==0: 
            return True  
        else:
          return False",human
651,"def check_subset(test_tup1, test_tup2):
  res = set(test_tup2).issubset(test_tup1)
  return (res) ",human
197,"def find_exponentio(test_tup1, test_tup2):
  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res)
",human
822,"def check_password(password):
    valid = True
    if len(password) < 8:
        valid = False
    elif not any(char.isdigit() for char in password):
        valid = False
    elif not any(char.isupper() for char in password):
        valid = False
    elif not any(char.islower() for char in password):
        valid = False
    return valid",lm
130,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result",human
668,"def remove_dups_inplace(string):
    last_seen = {}
    write_index = 0
    for i, char in enumerate(string):
        if char in last_seen and last_seen[char] >= write_index:
            continue
        string[write_index] = char
        last_seen[char] = write_index
        write_index += 1
    return string[:write_index]",lm
467,"def decimal_to_Octal(deciNum):
    octalNum = 0
    countval = 1;
    dNo = deciNum;
    while (deciNum!= 0):
        remainder= deciNum % 8;
        octalNum+= remainder*countval;
        countval= countval*10;
        deciNum //= 8; 
    return (octalNum)",human
141,"def pancake_sort(arr):
    for i in range(len(arr),1,-1):
        mx_idx=0
        for j in range(1,i):
            if arr[j]>arr[mx_idx]:
                mx_idx=j
        arr[:mx_idx+1]=arr[mx_idx::-1]
        arr[:i]=arr[i-1::-1]
    return arr",lm
764,"def find_numbers(string):
    count = 0
    for char in string:
        if char.isdigit():
            count += 1
    return count",lm
364,"def find_flips(s): 
    n = len(s) 
    flip_1 = 0
    flip_0 = 0
    for i in range(n): 
        if (i % 2 == 0 and s[i] == '1'): 
            flip_1 += 1
        if (i % 2 == 1 and s[i] == '0'): 
            flip_1 += 1
        if (i % 2 == 0 and s[i] == '0'): 
            flip_0 += 1
        if (i % 2 == 1 and s[i] == '1'): 
            flip_0 += 1
    return min(flip_1, flip_0)",lm
166,"def find_even_Pair(A,N): 
    evenPair = 0
    for i in range(0,N): 
        for j in range(i+1,N): 
            if ((A[i] ^ A[j]) % 2 == 0): 
                evenPair+=1
    return evenPair; ",human
344,"def count_Odd_Squares(n,m): 
    return int(m**0.5) - int((n-1)**0.5) ",human
907,"def lucky_num(n):
 List=range(-1,n*n+9,2)
 i=2
 while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1
 return List[1:n+1]",human
14,"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ",human
33,"def decimal_To_Binary(N): 
    B_Number = 0
    cnt = 0
    while (N != 0): 
        rem = N % 2
        c = pow(10,cnt)  
        B_Number += rem*c  
        N //= 2 
        cnt += 1
    return B_Number  ",human
126,"def divisors_sum(n1,n2):
    import math
    sm = 0
    for i in range(1,int(math.sqrt(n1))+1):
        if n1%i==0:
            if n2%i==0:
                sm+=i
            x = n1//i
            if x!=i and n2%x==0:
                sm+=x
    return sm",lm
684,"def count_Char(str,x): 
    count = 0
    for i in range(len(str)):  
        if (str[i] == x) : 
            count += 1
    n = 10
    repititions = n // len(str)  
    count = count * repititions  
    l = n % len(str)  
    for i in range(l): 
        if (str[i] == x):  
            count += 1
    return count  ",human
46,"def all_diff(nums):
  if len(nums) == len(set(nums)):
    return True
  else:
    return False",lm
598,"def isArmstrong(num):
    sum = 0
    temp = num
    while temp > 0:
        sum += (temp % 10) ** (len(str(num)))
        temp //= 10
    return num == sum",lm
306,"def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]",human
363,"def add_K_element(test_list, K):
  res = [tuple(j + K for j in sub ) for sub in test_list]
  return (res) ",human
808,"def check_tuple(tup, k):
  return k in tup",lm
244,"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ",human
48,"def set_odd_bits(n):
    return (n | 0x55555555)
    

You could also use bitwise operators to iterate through each odd bit and set it to 1:

def set_odd_bits(n):
    mask = 1
    while mask <= n:
        n |= mask
        mask <<= 2
    return n

    
Both of these methods will set all the odd bits of the given number to 1, effectively doubling its value. For example, if n = 0b10111010, then set_odd_bits(n) will return 0b11111110.",lm
741,"def samechar(l):
  x = """"
  for i in l:
    if x == """":
      x = i
    elif x != i:
      return False
  return True",lm
818,"def lower_ctr(str):
      lower_ctr= 0
      for i in range(len(str)):
          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     
      return  lower_ctr",human
884,"def all_Bits_Set_In_The_Given_Range(n,l,r): 
    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) 
    new_num = n & num 
    if (num == new_num): 
        return True
    return False",human
55,"def t_nth_term_geometric_series(nth_term, r, a):
    return a * (r ** (nth_term - 1))",lm
682,"list1 = [1, 2, 3, 4, 5]
list2 = [6, 7, 8, 9, 10]

result = map(lambda x, y: x * y, list1, list2)
print(list(result))",lm
617,"def min_Jumps(a, b, d): 
    temp = a 
    a = min(a, b) 
    b = max(temp, b) 
    if (d >= b): 
        return (d + b - 1) / b 
    if (d == 0): 
        return 0
    if (d == a): 
        return 1
    else:
        return 2",human
278,"def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ",human
810,"from collections import Counter
def count_variable(a,b,c,d):
  c = Counter(p=a, q=b, r=c, s=d)
  return list(c.elements())",human
117,"3
def convert_to_float(list1): 
    new_list = [] 
    for element in list1: 
        try: 
            new_list.append(float(element))  
        except ValueError: 
            new_list.append(element) 
    return new_list",lm
781,"import math 
def count_Divisors(n) : 
    count = 0
    for i in range(1, (int)(math.sqrt(n)) + 2) : 
        if (n % i == 0) : 
            if( n // i == i) : 
                count = count + 1
            else : 
                count = count + 2
    if (count % 2 == 0) : 
        return (""Even"") 
    else : 
        return (""Odd"") ",human
408,"import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs",human
118,"3
def string_to_list(string):
    return list(string)",lm
452,"def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return None",human
493,"3
def hexagon_grid(n):
    """"""
    Generates a grid of hexagon coordinates.

    Args:
        n: The number of hexagons in each side of the grid.

    Returns:
        A list of lists containing 6 tuples of x, y point coordinates.
    """"""

    hex_grid = []
    for i in range(n):
        hex_row = []
        for j in range(n):
            hex_row.append((i * 3, j * 2))
            hex_row.append((i * 3 + 3, j * 2))
            hex_row.append((i * 3 + 3, j * 2 + 2))
            hex_row.append((i * 3, j * 2 + 4))
            hex_row.append((i * 3 - 3, j * 2 + 2))
            hex_row.append((i * 3 - 3, j * 2))
        hex_grid.append(hex_row)
    return hex_grid",lm
517,"def largest_positive_number(lst):
  largest = None
  for num in lst:
    if num > 0:
      if largest == None:
        largest = num
      largest = max(largest, num)
  return largest",lm
625,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp   
    return newList ",human
271,"def sum_fifth_power_even(n):
    total = 0
    for i in range(1, n + 1):
        if i % 2 == 0:
            total += i ** 5
    return total",lm
478,"import re
def remove_lowercase(str1):
 remove_lower = lambda text: re.sub('[a-z]', '', text)
 result =  remove_lower(str1)
 return result",human
772,"def remove_length(test_str, K):
  temp = test_str.split()
  res = [ele for ele in temp if len(ele) != K]
  res = ' '.join(res)
  return (res) ",human
937,"def count_most_common_character(string):
    characters = {}
    for char in string:
        if char in characters:
            characters[char] += 1
        else:
            characters[char] = 1
    most_common_char = max(characters, key=characters.get)
    return [most_common_char, characters[most_common_char]]",lm
386,"def swap_count(s):
	chars = s
	count_left = 0
	count_right = 0
	swap = 0
	imbalance = 0; 
	for i in range(len(chars)):
		if chars[i] == '[':
			count_left += 1
			if imbalance > 0:
				swap += imbalance
				imbalance -= 1
		elif chars[i] == ']':
			count_right += 1
			imbalance = (count_right - count_left) 
	return swap",human
167,"def next_Power_Of_2(n): 
    count = 0; 
    if (n and not(n & (n - 1))): 
        return n   
    while( n != 0): 
        n >>= 1
        count += 1
    return 1 << count; ",human
687,"def recur_gcd(a, b):
	low = min(a, b)
	high = max(a, b)
	if low == 0:
		return high
	elif low == 1:
		return 1
	else:
		return recur_gcd(low, high%low)",human
773,"def find_substrings(string, sub_string):
  positions = []
  start = 0
  while True:
    index = string.find(sub_string, start)
    if index == -1:
      break
    positions.append(index)
    start = index + 1
  return positions",lm
44,"import re

def match_beginning(word, string):
    pattern = ""^"" + word
    return bool(re.match(pattern, string))",lm
894,"3
def convert_str_to_tuple(str):
    return tuple(map(float, str.split()))",lm
217,"def first_Repeated_Char(str): 
    h = {}
    for ch in str:
        if ch in h: 
            return ch;
        else: 
            h[ch] = 0
    return '\0'",human
347,"def count_Squares(m,n): 
    if (n < m): 
        temp = m 
        m = n 
        n = temp 
    return n * (n + 1) * (3 * m - n + 1) // 6",human
217,"def find_first_repeated_char(str1):
    char_order = []
    char_set = set()

    for c in str1:
        if c in char_set:
            return c
        char_set.add(c)
        char_order.append(c)

    return None",lm
701,"def equilibrium(arr):
    total_sum = sum(arr)
    left_sum = 0
    
    for i in range(len(arr)):
        total_sum -= arr[i]

        if left_sum == total_sum:
            return i

        left_sum += arr[i]
    
    return -1",lm
216,"def check_subset_list(list1, list2): 
    l1, l2 = list1[0], list2[0] 
    exist = True
    for i in list2: 
        if i not in list1: 
            exist = False
    return exist ",human
314,"def max_sum_rectangular_grid(grid, n) : 
	incl = max(grid[0][0], grid[1][0]) 
	excl = 0
	for i in range(1, n) : 
		excl_new = max(excl, incl) 
		incl = excl + max(grid[0][i], grid[1][i]) 
		excl = excl_new 
	return max(excl, incl)",human
587,"def list_tuple(listx):
  tuplex = tuple(listx)
  return tuplex",human
295,"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)",human
849,"def primedivsum(n):
    sm = 0
    i = 2
    while i*i<=n:
        if n%i == 0 and n/i != i:
            sm+=i+(n/i)
        elif n%i == 0:
            sm+=i
        i+=1
    if n>1:
        sm+=n
    return sm",lm
191,"def thirty_day_month(month_name):
    month_names_with_30_days = {
        'April', 'June', 'September', 'November'
    }
    return month_name in month_names_with_30_days",lm
950,"def chinese_zodiac(year):
 if (year - 2000) % 12 == 0:
     sign = 'Dragon'
 elif (year - 2000) % 12 == 1:
     sign = 'Snake'
 elif (year - 2000) % 12 == 2:
     sign = 'Horse'
 elif (year - 2000) % 12 == 3:
     sign = 'sheep'
 elif (year - 2000) % 12 == 4:
     sign = 'Monkey'
 elif (year - 2000) % 12 == 5:
     sign = 'Rooster'
 elif (year - 2000) % 12 == 6:
     sign = 'Dog'
 elif (year - 2000) % 12 == 7:
     sign = 'Pig'
 elif (year - 2000) % 12 == 8:
     sign = 'Rat'
 elif (year - 2000) % 12 == 9:
     sign = 'Ox'
 elif (year - 2000) % 12 == 10:
     sign = 'Tiger'
 else:
     sign = 'Hare'
 return sign",human
717,"import math
import sys
def sd_calc(data):
    n = len(data)
    if n <= 1:
        return 0.0
    mean, sd = avg_calc(data), 0.0
    for el in data:
        sd += (float(el) - mean)**2
    sd = math.sqrt(sd / float(n-1))
    return sd
def avg_calc(ls):
    n, mean = len(ls), 0.0
    if n <= 1:
        return ls[0]
    for el in ls:
        mean = mean + float(el)
    mean = mean / float(n)
    return mean",human
373,"def volume_cuboid(l,w,h):
  volume=l*w*h
  return volume",human
513,"def convert_tuple_to_list(test_tup, K): 
  res = [] 
  for ele in test_tup: 
    res.append(ele) 
    res.append(K)
  return(res[:-1])",lm
780,"from itertools import combinations 
def find_combinations(test_list):
  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]
  return (res) ",human
971,"def maximum_segments(n, a, b, c) : 
	dp = [-1] * (n + 10) 
	dp[0] = 0
	for i in range(0, n) : 
		if (dp[i] != -1) : 
			if(i + a <= n ): 
				dp[i + a] = max(dp[i] + 1, 
							dp[i + a]) 
			if(i + b <= n ): 
				dp[i + b] = max(dp[i] + 1, 
							dp[i + b]) 
			if(i + c <= n ): 
				dp[i + c] = max(dp[i] + 1, 
							dp[i + c]) 
	return dp[n]",human
760,"def check_distinct(arr):
    return len(arr) == len(set(arr))",lm
647,"def split_upper(text):
    return re.sub('(?=[A-Z])', ' ', text).split()",lm
375,"def round_to_nearest_multiple(num, multiple):
    """"""Round the given number to the nearest multiple of a specific number.

    Args:
    num: The number to be rounded.
    multiple: The number to round to the nearest multiple of.

    Returns:
    The rounded number.
    """"""
    remainder = num % multiple
    if remainder >= multiple / 2:
        return num + multiple - remainder
    else:
        return num - remainder",lm
854,"def heapify(lst):
  """"""Converts a list to a heap using heap queue algorithm.""""""
  for i in range((len(lst) - 1), -1, -1):
    heapq.heapify(lst, i)
  return lst",lm
406,"def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return (""Odd Parity""); 
    return (""Even Parity""); ",human
824,"def remove_even(lst):
    return [x for x in lst if x%2!=0]",lm
757,"def count_reverse_pairs(test_list):
  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( 
	test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) 
  return str(res)",human
752,"def jacobsthal_num(n): 
	dp = [0] * (n + 1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2] 
	return dp[n]",human
316,"def find_last_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            left = mid + 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result ",human
676,"import re
def remove_extra_char(text1):
  pattern = re.compile('[\W_]+')
  return (pattern.sub('', text1))",human
297,"def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ",human
842,"def get_odd_occurence(arr, arr_size):
  for i in range(0, arr_size):
    count = 0
    for j in range(0, arr_size):
      if arr[i] == arr[j]:
        count += 1
    if (count % 2 != 0):
      return arr[i]
  return -1",human
128,"def find_long_words(word_list, n):
    """"""Return a list of words that are longer than n from a given list of words.""""""
    long_words = []
    for word in word_list:
        if len(word) > n:
            long_words.append(word)
    return long_words",lm
559,"def max_subarray_sum(arr):
  max_so_far = -2147483648
  max_ending_here = 0
  for i in range(0, len(arr)):
    max_ending_here = max_ending_here + arr[i]
    if (max_so_far < max_ending_here):
      max_so_far = max_ending_here
    if (max_ending_here < 0):
      max_ending_here = 0
  return max_so_far",lm
575,"def find_non_multiple(n, x):
    count = 0
    number = 1
    while True:
        if number % x != 0:
            count += 1
        if count == n:
            return number
        number += 1",lm
184,"def greater_than(list1, num):
    result = [i for i in list1 if i > num]
    return result",lm
747,"def lcs_of_three(X, Y, Z, m, n, o): 
	L = [[[0 for i in range(o+1)] for j in range(n+1)] 
		for k in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			for k in range(o+1): 
				if (i == 0 or j == 0 or k == 0): 
					L[i][j][k] = 0
				elif (X[i-1] == Y[j-1] and
					X[i-1] == Z[k-1]): 
					L[i][j][k] = L[i-1][j-1][k-1] + 1
				else: 
					L[i][j][k] = max(max(L[i-1][j][k], 
					L[i][j-1][k]), 
									L[i][j][k-1]) 
	return L[m][n][o]",human
178,"def search_literals(text, literals):
    results = {}
    for literal in literals:
        results[literal] = [i for i in range(len(text)) if text.startswith(literal, i)]
    return results",lm
772,"def remove_k_length_words(s, k):
	""""""
	Remove all the words with k length in the given string.
	""""""
	words = s.split()

	filtered = [word for word in words if len(word) != k]

	return ' '.join(filtered)",lm
695,"def check_greater(test_tup1, test_tup2):
  res = all(ele > idx for idx, ele in enumerate(test_tup2))
  return (res)",lm
392,"def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]",human
817,"def divisible(lst, m, n):
    result = list(filter(lambda x: (x % m == 0) or (x % n == 0), lst))
    return result",lm
599,"def sum_avg_natural_number(n):
    """"""Returns sum and average of first n natural numbers""""""
    sum = 0
    for i in range(1, n + 1):
        sum += i
    average = sum / n
    return sum, average",lm
756,"import re
def text_match_zero_one(text):
        patterns = 'ab?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
669,"import re 
regex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.( 
			25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''
def check_IP(Ip): 
	if(re.search(regex, Ip)): 
		return (""Valid IP address"") 
	else: 
		return (""Invalid IP address"") ",human
345,"def find_diff(nums):
        res = []
        for idx in range(1, len(nums)):
                res.append(nums[idx] - nums[idx-1])
        return res",lm
146,"def ascii_value_string(str1):
  for i in range(len(str1)):
   return ord(str1[i])",human
11,"def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ",human
366,"def largest_adjacent_product(lst): 
    adjacent_products = [lst[i] * lst[i + 1] for i in range(len(lst) - 1)] 
    return max(adjacent_products)",lm
186,"import re
def search_literals_regex(pattern, text):
    """"""
    This function searches the given literals in the given string using regex
    """"""
    matches = re.findall(pattern, text)
    return matches",lm
826,"def triangle_type(a: int, b: int, c: int) -> str:
    """"""Find the type of triangle from the given sides.""""""
    if a == b == c:
        return ""Equilateral""
    elif a == b or b == c or c == a:
        return ""Isosceles""
    else:
        return ""Scalene""",lm
333,"def sort_by_second_element(list1):
        # sorts the list by the second element of the sublist
        list1.sort(key = lambda x: x[1])
        return list1",lm
487,"def sort_by_last_element(tuples):
    return sorted(tuples, key=lambda x: x[1])",lm
829,"from collections import Counter 
	
def second_frequent(input): 
	dict = Counter(input) 
	value = sorted(dict.values(), reverse=True)  
	second_large = value[1] 
	for (key, val) in dict.items(): 
		if val == second_large: 
			return (key) ",human
404,"def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ",human
646,"def count_cubes_of_size_k_in_cube_of_size_n(k, n):
    """"""Counts the number of cubes of size k in a cube of size n.""""""

    # If the size of the cube is less than the size of the cube we want to count, return 0.
    if n < k:
        return 0

    # If the size of the cube is equal to the size of the cube we want to count, return 1.
    if n == k:
        return 1

    # Otherwise, recursively count the number of cubes of size k in each of the 27 sub-cubes of size n/3.
    else:
        return count_cubes_of_size_k_in_cube_of_size_n(k, n//3) + \
               count_cubes_of_size_k_in_cube_of_size_n(k, n//3) + \
               count_cubes_of_size_k_in_cube_of_size_n(k, n//3) + \
               count_cubes_of_size_k_in_cube_of_size_n(k, n//3) + \
               count_cubes_of_size_k_in_cube_of_size_n(k, n//3) + \
               count_cubes_of_size_k_in_cube_of_size_n(k, n//3) + \
               count_cubes_of_size_k_in_cube_of_size_n(k, n//3) + \
               count_cubes_of_size_k_in_cube_of_size_n(k, n//3) + \
               count_cubes_of_size_k_in_cube_of_size_n(k, n//3)",lm
645,"3
def kth_tuple_product(test_tup, K):
  res = 1
  for ele in test_tup:
    res *= ele[K]
  return (res)",lm
371,"def find_smallest_missing_element(arr):
    if len(arr) == 0:
        return 0
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == mid:
            left = mid + 1
        else:
            right = mid - 1
    return left",lm
838,"def min_Swaps(s1,s2) :  
    c0 = 0; c1 = 0;  
    for i in range(len(s1)) :  
        if (s1[i] == '0' and s2[i] == '1') : 
            c0 += 1;    
        elif (s1[i] == '1' and s2[i] == '0') : 
            c1 += 1;  
    result = c0 // 2 + c1 // 2;  
    if (c0 % 2 == 0 and c1 % 2 == 0) : 
        return result;  
    elif ((c0 + c1) % 2 == 0) : 
        return result + 2;  
    else : 
        return -1;  ",human
458,"def area_of_rectangle(length, width):
  """"""Calculates the area of a rectangle.

  Args:
    length: The length of the rectangle in meters.
    width: The width of the rectangle in meters.

  Returns:
    The area of the rectangle in square meters.
  """"""

  return length * width",lm
493,"import math
def calculate_polygons(startx, starty, endx, endy, radius):
    sl = (2 * radius) * math.tan(math.pi / 6)
    p = sl * 0.5
    b = sl * math.cos(math.radians(30))
    w = b * 2
    h = 2 * sl   
    startx = startx - w
    starty = starty - h
    endx = endx + w
    endy = endy + h
    origx = startx
    origy = starty
    xoffset = b
    yoffset = 3 * p
    polygons = []
    row = 1
    counter = 0
    while starty < endy:
        if row % 2 == 0:
            startx = origx + xoffset
        else:
            startx = origx
        while startx < endx:
            p1x = startx
            p1y = starty + p
            p2x = startx
            p2y = starty + (3 * p)
            p3x = startx + b
            p3y = starty + h
            p4x = startx + w
            p4y = starty + (3 * p)
            p5x = startx + w
            p5y = starty + p
            p6x = startx + b
            p6y = starty
            poly = [
                (p1x, p1y),
                (p2x, p2y),
                (p3x, p3y),
                (p4x, p4y),
                (p5x, p5y),
                (p6x, p6y),
                (p1x, p1y)]
            polygons.append(poly)
            counter += 1
            startx += w
        starty += yoffset
        row += 1
    return polygons",human
116,"def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result",human
736,"import bisect
def left_insertion(a, x):
    i = bisect.bisect_left(a, x)
    return i",human
713,"def check_valid(test_tup):
  res = not any(map(lambda ele: not ele, test_tup))
  return (res) ",human
868,"def find_last_word_length(string):
  words = string.split()
  if len(words) == 0:
    return 0
  return len(words[-1])",lm
879,"import re
def match_regex(text):
    pattern = r'a.*b$'
    result = re.findall(pattern, text)
    return result",lm
906,"def extract_date_from_url(url):
    match = re.search(r'(\d{4})/(\d{2})/(\d{2})', url)
    if match:
        return match.groups()
    return None",lm
743,"def rotate_list_right(l, n):
    return l[len(l)-n:] + l[:len(l)-n]",lm
750,"def add_tuple_to_list(list_of_tuples, tuple_to_add):
    list_of_tuples.append(tuple_to_add)",lm
564,"def unequal_pairs(arr): 
    count = 0
    for i in range(len(arr)): 
        for j in range(i + 1, len(arr)): 
            if arr[i] != arr[j]: 
                count += 1
    return count",lm
485,"def find_largest_palindromic_number(arr: list) -> int:
    """"""
    Write a function to find the largest palindromic number in the given array.
    """"""
    largest_palindrome = 0

    for num in arr:
        if num < 0:
            continue

        num_str = str(num)
        reversed_num_str = num_str[::-1]

        if num_str == reversed_num_str and num > largest_palindrome:
            largest_palindrome = num

    return largest_palindrome",lm
794,"import re
def text_starta_endb(text):
        patterns = 'a.*?b$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
512,"def flatten(test_tuple): 
	for tup in test_tuple: 
		if isinstance(tup, tuple): 
			yield from flatten(tup) 
		else: 
			yield tup 
def count_element_freq(test_tuple):
  res = {}
  for ele in flatten(test_tuple):
    if ele not in res:
      res[ele] = 0
    res[ele] += 1
  return (res) ",human
36,"def find_Nth_Digit(p,q,N) :  
    while (N > 0) : 
        N -= 1;  
        p *= 10;  
        res = p // q;  
        p %= q;  
    return res;  ",human
585,"3
from heapq import nlargest

def find_n_most_expensive(data, n):
    # Use heap queue to store the n most expensive items
    heap = []

    # Insert prices into the heap
    for price in data:
        heap.append(price)
        # Maintain the size of the heap to n
        if len(heap) > n:
            heapq.heappop(heap)

    # Return the n most expensive items
    return heap",lm
468,"def maxProductIncreasingSubsequence(arr):
        n = len(arr)
        dp = [1 for i in range(n)]
        ans = 1
        for i in range(n):
            for j in range(i):
                if arr[i] > arr[j]:
                    dp[i] = max(dp[i], dp[j] * arr[i])
            ans = max(ans, dp[i])
        return ans",lm
581,"def surface_area_square_pyramid(a, h):
    import math
    s = (math.sqrt(a**2 + h**2))**2
    return s + a**2",lm
957,"def position_of_rightmost_set_bit(num):
  pos = 0
  while num > 0:
    if num % 2 == 1:
      pos += 1
    num = num // 2
  return pos",lm
528,"def min_length(list1):
   min_length = min(len(x) for x in  list1 )  
   min_list = min((x) for x in   list1)
   return(min_length, min_list)     ",human
317,"from itertools import groupby
def modified_encode(alist):
        def ctr_ele(el):
            if len(el)>1: return [len(el), el[0]]
            else: return el[0]
        return [ctr_ele(list(group)) for key, group in groupby(alist)]",human
333,"def Sort(sub_li): 
    sub_li.sort(key = lambda x: x[1]) 
    return sub_li ",human
604,"def reverse_words(s):
        return ' '.join(reversed(s.split()))",human
536,"def nth_items(list,n):
 return list[::n]",human
310,"def string_to_tuple(string):
    """"""Convert a given string to a tuple.

    Args:
        string: The string to convert.

    Returns:
        A tuple containing the characters of the string.
    """"""
    return tuple(string)",lm
486,"def nCr(n, r): 
	if (r > n / 2): 
		r = n - r 
	answer = 1 
	for i in range(1, r + 1): 
		answer *= (n - r + i) 
		answer /= i 
	return answer 
def binomial_probability(n, k, p): 
	return (nCr(n, k) * pow(p, k) *	pow(1 - p, n - k)) ",human
355,"def count_Rectangles(radius):  
    rectangles = 0 
    diameter = 2 * radius 
    diameterSquare = diameter * diameter 
    for a in range(1, 2 * radius):  
        for b in range(1, 2 * radius): 
            diagnalLengthSquare = (a * a +  b * b)  
            if (diagnalLengthSquare <= diameterSquare) : 
                rectangles += 1
    return rectangles ",human
230,"def change_char(str1, char): 
    str1 = str1.replace(' ', char) 
    return str1",lm
744,"def check_none(test_tup): 
  res = any(ele is None for ele in test_tup) 
  return (res)",lm
842,"def find_odd_occurrence(arr):
    result = 0
    for num in arr:
        result ^= num
    return result",lm
223,"def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1",human
180,"from math import radians, sin, cos, acos
def distance_lat_long(slat,slon,elat,elon):
 dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))
 return dist",human
257,"def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)",human
872,"def check_subset(list1,list2): 
    return all(map(list1.__contains__,list2)) ",human
23,"def max_sum(list_of_lists):
  max_sum = 0
  for lst in list_of_lists:
    sum = 0
    for num in lst:
      sum += num
    max_sum = max(max_sum, sum)
  return max_sum",lm
21,"def find_multiples(n, m):
  """"""
  Finds m number of multiples of n.

  Args:
    n: The number to find multiples of.
    m: The number of multiples to find.

  Returns:
    A list of m multiples of n.
  """"""

  multiples = []
  for i in range(1, m + 1):
    multiples.append(n * i)

  return multiples",lm
327,"def check_triangle(a, b, c):
    if a == b == c:
        print(""Equilateral triangle"")
    elif a == b or b == c or c == a:
        print(""Isosceles triangle"")
    else:
        print(""Scalene triangle"")",lm
901,"def find_smallest_multiple(n):
    if n < 1:
        return 0
    multiple = 1
    for i in range(1, n + 1):
        while multiple % i != 0:
            multiple += 1
    return multiple",lm
520,"def lcm(arr):
    ans=arr[0]
    for i in range(1,len(arr)):
        ans=int((ans*arr[i])/math.gcd(ans,arr[i]))
    return ans",lm
192,"def check_String(str): 
    flag_l = False
    flag_n = False
    for i in str: 
        if i.isalpha(): 
            flag_l = True  
        if i.isdigit(): 
            flag_n = True
    return flag_l and flag_n ",human
97,"def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
",human
473,"def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)",human
414,"def is_value_in_sequence(sequence, value):
    if value in sequence:
        return True
    else:
        return False",lm
504,"def sum_cubes(n):
  sum = 0
  for i in range(1,n+1):
    sum += i**3
  return sum",lm
917,"import re
def text_uppercase_lowercase(text):
        patterns = '[A-Z]+[a-z]+$'
        if re.search(patterns, text):
                return 'Found a match!'
        else:
                return ('Not matched!')",human
509,"def average_odd_numbers(num):
    # Initialize variables
    odd_sum = 0
    count = 0
    # Iterate through numbers from 1 to the given number
    for i in range(1, num + 1):
        # Check if the number is odd
        if i % 2 != 0:
            # Add the number to the sum
            odd_sum += i
            # Increment the count of odd numbers
            count += 1
    # Calculate the average of odd numbers
    average = odd_sum / count
    return average",lm
888,"def sub_tuple(tuple1, tuple2): 
    result_tuple = [] 
    for i in range(len(tuple1)): 
        result_tuple.append(tuple1[i] - tuple2[i])  
    return tuple(result_tuple)",lm
412,"def remove_odd(lst):
    return [x for x in lst if x%2==0]",lm
371,"def smallest_missing(A, left_element, right_element):
    if left_element > right_element:
        return left_element
    mid = left_element + (right_element - left_element) // 2
    if A[mid] == mid:
        return smallest_missing(A, mid + 1, right_element)
    else:
        return smallest_missing(A, left_element, mid - 1)",human
334,"def check_triangle(a: int, b: int, c: int) -> bool:
  """"""
  Check if the triangle is valid or not if sides are given.

  Args:
    a: Side length of the triangle.
    b: Side length of the triangle.
    c: Side length of the triangle.

  Returns:
    True if the triangle is valid, False otherwise.
  """"""

  # Check if any side is negative or zero.
  if a <= 0 or b <= 0 or c <= 0:
    return False

  # Check if the sum of two sides is greater than the third side.
  if a + b <= c or a + c <= b or b + c <= a:
    return False

  return True",lm
496,"import heapq as hq
def heap_queue_smallest(nums,n):
  smallest_nums = hq.nsmallest(n, nums)
  return smallest_nums",human
959,"def Average(lst): 
    return sum(lst) / len(lst) ",human
859,"from itertools import combinations
def sub_lists(my_list):
	subs = []
	for i in range(0, len(my_list)+1):
	  temp = [list(x) for x in combinations(my_list, i)]
	  if len(temp)>0:
	    subs.extend(temp)
	return subs",human
631,"import re

def replace_whitespaces_underscore(input_str):
    """"""Replace whitespaces with an underscore and vice versa in a given string by using regex.""""""
    pattern = re.compile(r'[\s_]')
    output_str = pattern.sub(lambda m: '_' if m.group() == ' ' else ' ', input_str)
    return output_str",lm
462,"def all_combinations(lst):
    if not lst: return [[]]
    elem = lst.pop(0)
    comb = all_combinations(lst)
    new_comb = [[elem] + c for c in comb]
    return comb + new_comb",lm
795,"import heapq
def cheap_items(items,n):
  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])
  return cheap_items",human
267,"def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ",human
866,"def check_31_days(month_name):
  month_names_with_31 = [""January"", ""March"", ""May"", ""July"", ""August"", ""October"", ""December""]
  return month_name in month_names_with_31",lm
433,"def greater_than(num, arr):
    return num > max(arr)",lm
720,"def add_dict_to_tuple(test_tup, test_dict):
  test_tup = list(test_tup)
  test_tup.append(test_dict)
  test_tup = tuple(test_tup)
  return (test_tup) ",human
18,"def remove_chars(string1, string2):
    result = """"
    for char in string1:
        if char not in string2:
            result += char
    return result",lm
314,"def max_sum_non_adjacent(grid):
    m, n = len(grid), len(grid[0])
    dp = [[0] * n for _ in range(m)]
    dp[0][0] = grid[0][0]
    dp[1][0] = grid[1][0]
    for j in range(1, n):
        dp[0][j] = dp[0][j - 1] + grid[0][j]
        dp[1][j] = dp[1][j - 1] + grid[1][j]
    for i in range(2, m):
        for j in range(n):
            dp[i][j] = max(dp[i - 1][j], dp[i - 2][j]) + grid[i][j]
    return max(dp[-1])",lm
755,"def second_smallest(numbers):
    first = second = float('inf')
    for x in numbers:
        if x < first:
            second = first
            first = x
        elif x < second and x != first:
            second = x
    return second",lm
681,"def smallest_Divisor(n): 
    if (n % 2 == 0): 
        return 2; 
    i = 3;  
    while (i*i <= n): 
        if (n % i == 0): 
            return i; 
        i += 2; 
    return n; ",human
819,"def count_duplic(lists):
    element = []
    frequency = []
    if not lists:
        return element
    running_count = 1
    for i in range(len(lists)-1):
        if lists[i] == lists[i+1]:
            running_count += 1
        else:
            frequency.append(running_count)
            element.append(lists[i])
            running_count = 1
    frequency.append(running_count)
    element.append(lists[i+1])
    return element,frequency
",human
759,"def is_decimal(num):
    import re
    dnumre = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
    result = dnumre.search(num)
    return bool(result)",human
713,"def Check_Tuple(test_tup):
  res = all(isinstance(ele, int) for ele in test_tup)
  return (res)",lm
14,"def triangular_prism_volume(base_area, height):
  return (1 / 2) * base_area * height",lm
733,"def find_index(arr, n):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == n:
            return mid
        elif arr[mid] < n:
            low = mid + 1
        else:
            high = mid - 1
    return -1",lm
322,"def position_min(list1):
    min_val = min(list1)
    min_result = [i for i, j in enumerate(list1) if j == min_val]
    return min_result",human
324,"def sum_of_alternates(test_tuple):
  sum1 = 0
  sum2 = 0
  for idx, ele in enumerate(test_tuple):
    if idx % 2:
      sum1 += ele
    else:
      sum2 += ele
  return ((sum1),(sum2)) ",human
91,"def substring_present(str_list, substring):
    for strs in str_list:
        if substring in strs:
            return True
    return False",lm
155,"def toggle_even_bits(n):
    return n^(1<<1)|(1<<3)|(1<<5)|(1<<7)|(1<<9)|(1<<11)|(1<<13)|(1<<15)|(1<<17)|(1<<19)|(1<<21)|(1<<23)|(1<<25)|(1<<27)|(1<<29)|(1<<31)",lm
61,"from collections import defaultdict
def count_Substrings(s,n):
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count",human
92,"def is_undulating(n): 
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True",human
80,"def tetrahedral(n):
     return int(n*(n+1)*(n+2)/6)",lm
273,"def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) ",human
645,"def get_product(val) : 
	res = 1
	for ele in val: 
		res *= ele 
	return res 
def find_k_product(test_list, K):
  res = get_product([sub[K] for sub in test_list])
  return (res) ",human
766,"def pair_wise(l1):
    temp = []
    for i in range(len(l1) - 1):
        current_element, next_element = l1[i], l1[i + 1]
        x = (current_element, next_element)
        temp.append(x)
    return temp",human
663,"3
def find_largest_value_of_k(x, y):
    k = y
    while k % x != y:
        k += x
    return k",lm
699,"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) : 
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") ",human
721,"M = 100
def maxAverageOfPath(cost, N): 
	dp = [[0 for i in range(N + 1)] for j in range(N + 1)] 
	dp[0][0] = cost[0][0] 
	for i in range(1, N): 
		dp[i][0] = dp[i - 1][0] + cost[i][0] 
	for j in range(1, N): 
		dp[0][j] = dp[0][j - 1] + cost[0][j] 
	for i in range(1, N): 
		for j in range(1, N): 
			dp[i][j] = max(dp[i - 1][j], 
						dp[i][j - 1]) + cost[i][j] 
	return dp[N - 1][N - 1] / (2 * N - 1)",human
765,"import math 
def is_polite(n): 
	n = n + 1
	return (int)(n+(math.log((n + math.log(n, 2)), 2))) ",human
902,"from collections import Counter
def add_dict(d1,d2):
   add_dict = Counter(d1) + Counter(d2)
   return add_dict",human
693,"import re
def remove_multiple_spaces(text1):
  return (re.sub(' +',' ',text1))",human
545,"def toggle_first_last(n): 
    first_bit = (1<<31) 
    last_bit = 1
    if (n&first_bit) == 0: 
        n = n|first_bit 
    else: 
        n = n&(~first_bit) 
    if (n&last_bit) == 0: 
        n = n|last_bit 
    else: 
        n = n&(~last_bit) 
    return n",lm
895,"def max_sum_subseq(A):
    n = len(A)
    if n == 1:
        return A[0]
    look_up = [None] * n
    look_up[0] = A[0]
    look_up[1] = max(A[0], A[1])
    for i in range(2, n):
        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])
        look_up[i] = max(look_up[i], A[i])
    return look_up[n - 1]",human
156,"def tuple_int_str(tuple_str):
    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)
    return result",human
455,"def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False",human
969,"def join_tuples(test_list):
  res = []
  for sub in test_list:
    if res and res[-1][0] == sub[0]:
      res[-1].extend(sub[1:])
    else:
      res.append([ele for ele in sub])
  res = list(map(tuple, res))
  return (res) ",human
449,"def check_valid_triangle(points):
  """"""
  Check whether the triangle is valid or not if 3 points are given.

  Args:
    points: A list of 3 points, each point is a tuple of two numbers.

  Returns:
    True if the triangle is valid, False otherwise.
  """"""

  # Check if the three points are distinct.
  if len(set(points)) != 3:
    return False

  # Check if the three points are collinear.
  if (points[1][0] - points[0][0]) * (points[2][1] - points[0][1]) == (
      points[1][1] - points[0][1]) * (points[2][0] - points[0][0]):
    return False

  # Check if the triangle is valid by checking the sum of the lengths of two sides is greater than the length of the third side.
  for i in range(3):
    j = (i + 1) % 3
    k = (i + 2) % 3
    if distance(points[i], points[j]) + distance(points[j], points[k]) <= distance(points[i], points[k]):
      return False

  return True


def distance(point1, point2):
  """"""
  Calculate the distance between two points.

  Args:
    point1: A tuple of two numbers.
    point2: A tuple of two numbers.

  Returns:
    The distance between the two points.
  """"""

  return ((point2[0] - point1[0])**2 + (point2[1] - point1[1])**2)**0.5",lm
859,"def sublists(list1):
    sublists = [[]]
    for i in range(len(list1)):
        for sublist in sublists:
            sublists.append(sublist + [list1[i]])
    return sublists",lm
820,"def check_days(month_number):
  if month_number == 2:
    return True
  else:
    return False",lm
954,"def profit_amount(actual_cost,sale_amount): 
 if(actual_cost > sale_amount):
    amount = actual_cost - sale_amount
    return amount
 else:
    return None",human
587,"def convert(list1): 
    tuple1 = tuple(list1) 
    return(tuple1)",lm
546,"def last_occurence_char(string,char):
 flag = -1
 for i in range(len(string)):
     if(string[i] == char):
         flag = i
 if(flag == -1):
    return None
 else:
    return flag + 1",human
941,"def count_until_tuple(list1): 
    count = 0
    for element in list1: 
        if isinstance(element, tuple): 
            break
        count += 1
    return count",lm
929,"def count_tuplex(tuplex,value):  
  count = tuplex.count(value)
  return count",human
730,"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] ",human
433,"def check_greater(arr, number):
  arr.sort()
  if number > arr[-1]:
    return ('Yes, the entered number is greater than those in the array')
  else:
    return ('No, entered number is less than those in the array')",human
785,"def tuple_str_int(test_str):
  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))
  return (res) ",human
498,"def gcd(a, b):
  while b:
    a, b = b, a % b
  return a",lm
100,"import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i",human
848,"def area_trapezium(base1,base2,height):
 area = 0.5 * (base1 + base2) * height
 return area",human
212,"def sum_fourth_power(n): 
    sum = 0
    for i in range(1, n+1): 
        sum = sum + i**4
    return sum",lm
112,"def peri_cylinder(r, h):
    """"""Returns the perimeter of a cylinder.""""""
    from math import pi
    return 2 * pi * r + 2 * h",lm
748,"import re

def word_spacing(text): 
    return re.sub(r""([a-z])([A-Z])"", r""\1 \2"", text)",lm
163,"from math import tan, pi
def area_polygon(s,l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area",human
501,"def ngcd(x,y):
    i=1
    while(i<=x and i<=y):
        if(x%i==0 and y%i == 0):
            gcd=i;
        i+=1
    return gcd;
def num_comm_div(x,y):
  n = ngcd(x,y)
  result = 0
  z = int(n**0.5)
  i = 1
  while(i <= z):
    if(n % i == 0):
      result += 2 
      if(i == n/i):
        result-=1
    i+=1
  return result",human
939,"def sorted_models(models):
 sorted_models = sorted(models, key = lambda x: x['color'])
 return sorted_models",human
734,"def sum_Of_Subarray_Prod(arr,n):
    ans = 0
    res = 0
    i = n - 1
    while (i >= 0):
        incr = arr[i]*(1 + res)
        ans += incr
        res = incr
        i -= 1
    return (ans)",human
199,"def highest_Power_of_2(n): 
    res = 0; 
    for i in range(n, 0, -1):  
        if ((i & (i - 1)) == 0): 
            res = i; 
            break;      
    return res; ",human
660,"def choose_points(range1, range2):
  """"""Choose points from two ranges such that no point lies in both the ranges.""""""

  # Check if the ranges overlap.
  if range1[1] < range2[0] or range2[1] < range1[0]:
    # Choose any point from the first range.
    return range1[0]

  # Choose any point from the second range.
  return range2[0]",lm
157,"from itertools import groupby
def encode_list(list1):
    return [[len(list(group)), key] for key, group in groupby(list1)]",human
378,"def shift_last_element_to_first(list1):
    last_element = list1[-1]
    for i in range(len(list1)-1, 0, -1):
        list1[i] = list1[i-1]
    list1[0] = last_element
    return list1",lm
644,"def reverse_Array_Upto_K(input, k): 
  return (input[k-1::-1] + input[k:]) ",human
892,"def remove_multiple_spaces(string): 
    return "" "".join(string.split())",lm
351,"def findKthOccurence(array, k):
    occurences = {}
    for element in array:
        if element not in occurences:
            occurences[element] = 0
        occurences[element] += 1
        if occurences[element] == k:
            return element",lm
331,"def count_unset_bits(n): 
    count = 0
    x = 1
    while(x < n + 1): 
        if ((x & n) == 0): 
            count += 1
        x = x << 1
    return count  ",human
8,"squares = list(map(lambda x: x*x, numbers))",lm
601,"class Pair(object): 
	def __init__(self, a, b): 
		self.a = a 
		self.b = b 
def max_chain_length(arr, n): 
	max = 0
	mcl = [1 for i in range(n)] 
	for i in range(1, n): 
		for j in range(0, i): 
			if (arr[i].a > arr[j].b and
				mcl[i] < mcl[j] + 1): 
				mcl[i] = mcl[j] + 1
	for i in range(n): 
		if (max < mcl[i]): 
			max = mcl[i] 
	return max",human
539,"def pow_bases(number, powers):
    return list(map(lambda x: pow(number, x), powers))",lm
343,"def dig_let(s):
 d=l=0
 for c in s:
    if c.isdigit():
        d=d+1
    elif c.isalpha():
        l=l+1
    else:
        pass
 return (l,d)",human
505,"def move_zeros(arr): 
    count = 0
    for i in range(len(arr)): 
        if arr[i] != 0: 
            arr[count] = arr[i] 
            count += 1
    while count < len(arr): 
        arr[count] = 0
        count += 1
    return arr",lm
129,"def generate_magic_square(n):
    if n % 2 != 1:
        raise ValueError(""n must be an odd number"")
    magic_square = [[0 for _ in range(n)] for _ in range(n)]
    i, j, num = n//2, n-1, 1
    while num <= n*n:
        if i == -1 and j == n:
            j -= 2
            i += 1
        elif i < 0:
            i += n
        elif j == n:
            j -= n
        elif magic_square[i][j]:  
            j -= 2
            i += 1
        magic_square[i][j] = num
        num += 1
        i -= 1
        j += 1
    return magic_square",lm
188,"def prod_Square(n):
    for i in range(2,(n) + 1):
        if (i*i < (n+1)):
            for j in range(2,n + 1):
                if ((i*i*j*j) == n):
                    return True;
    return False;",human
835,"def find_slope(x1, y1, x2, y2):
  """"""Finds the slope of the line passing through the points (x1, y1) and (x2, y2).""""""
  if(x2-x1==0): return float('inf')
  return (y2 - y1) / (x2 - x1)",lm
664,"def average_Even(n) : 
    if (n% 2!= 0) : 
        return (""Invalid Input"") 
        return -1  
    sm = 0
    count = 0
    while (n>= 2) : 
        count = count+1
        sm = sm+n 
        n = n-2
    return sm // count ",human
871,"def areRotations(string1, string2):
    size1 = len(string1)
    size2 = len(string2)
    temp = ''
    if size1 != size2:
        return False
    temp = string1 + string1
    if (temp.count(string2) > 0):
        return True
    else:
        return False",lm
71,"def comb_sort(arr: list) -> list:
    """"""Sort a list of elements using comb sort.""""""
    n = len(arr)
    gap = n
    swapped = True
    while gap > 1 or swapped:
        gap = int(gap / 1.3)
        if gap < 1:
            gap = 1
        swapped = False
        for i in range(n - gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap] = arr[i + gap], arr[i]
                swapped = True
    return arr",lm
610,"def remove_kth_element(list1, L):
    return  list1[:L-1] + list1[L:]",human
89,"def prevSmaller(arr,n): 
     
    s = [] 
    ans = [] 
      
    for i in range(n): 
          
        while (len(s) > 0 and 
                arr[s[-1]] >= arr[i]): 
            s.pop() 
          
        if (len(s) == 0): 
            ans.append(-1) 
        else: 
            ans.append(arr[s[-1]]) 
          
        s.append(i) 
          
    return ans",lm
284,"def check_all_equal(list1, str1):
    for ele in list1:
        if ele != str1:
            return False
    return True",lm
548,"def longest_increasing_subsequence(arr): 
	n = len(arr) 
	longest_increasing_subsequence = [1]*n 
	for i in range (1 , n): 
		for j in range(0 , i): 
			if arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : 
				longest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1
	maximum = 0
	for i in range(n): 
		maximum = max(maximum , longest_increasing_subsequence[i]) 
	return maximum",human
137,"def zeroes(arr):
  count = 0 
  for x in arr:
    if x == 0:
      count += 1
  return count / len(arr)",lm
153,"def find_vertex(a, b, c):
    """"""
    Find the vertex of a parabola.

    Args:
        a (float): The coefficient of the x^2 term.
        b (float): The coefficient of the x term.
        c (float): The constant term.

    Returns:
        (float, float): The x and y coordinates of the vertex.
    """"""

    x_vertex = -b / (2 * a)
    y_vertex = a * x_vertex ** 2 + b * x_vertex + c
    return x_vertex, y_vertex",lm
643,"3
import re
def check_word (word):
  pattern = re.compile(r'.*z.*')
  return pattern.match(word)",lm
263,"def merge_two_dictionaries(x, y):
    z = x.copy()   # start with keys and values of x
    z.update(y)    # modifies z with keys and values of y
    return z",lm
644,"def reverse_array_upto_pos(arr, p):
    for i in range(p // 2):
        arr[i], arr[p - i - 1] = arr[p - i - 1], arr[i]
    print(arr)",lm
502,"def rem(a,b):
    return a%b",lm
347,"def count_squares(length, width):
    """"""
    Counts the number of squares in a rectangle.

    Args:
        length: The length of the rectangle.
        width: The width of the rectangle.

    Returns:
        The number of squares in the rectangle.
    """"""
    return length * width - (length + width - 1)",lm
529,"def jacobsthal_lucas(n): 
	dp=[0] * (n + 1) 
	dp[0] = 2
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2]; 
	return dp[n]",human
744,"def check_none(test_tup):
  res = any(map(lambda ele: ele is None, test_tup))
  return (res) ",human
653,"from collections import defaultdict
def grouping_dictionary(l):
    d = defaultdict(list)
    for k, v in l:
        d[k].append(v)
    return d",human
878,"3
def check_tuple_size(tup, k):
  return len(tup) == k",lm
770,"def odd_Num_Sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n + 1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j)   
    return sm ",human
707,"def countSetBits(n):
    binaryStr = ''
    setCount = 0

    for i in range(1, n+1):
        binaryStr = bin(i)[2:]
        setCount += binaryStr.count('1')

    return setCount",lm
469,"3
def max_profit_k_transactions(prices, k):
    if not prices or k <= 0:
        return 0

    n = len(prices)
    dp = [[[0 for _ in range(2)] for _ in range(k + 1)] for _ in range(n)]

    # Base case: no transactions
    for i in range(n):
        dp[i][0][0] = 0
        dp[i][0][1] = float('-inf')

    # Base case: unlimited transactions
    for i in range(n):
        dp[i][k][0] = 0
        dp[i][k][1] = float('-inf')

    for i in range(1, n):
        for j in range(1, k + 1):
            dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j][1] + prices[i])
            dp[i][j][1] = max(dp[i - 1][j][1], dp[i - 1][j - 1][0] - prices[i])

    return dp[n - 1][k][0]",lm
590,"import cmath
def polar_rect(x,y):
 cn = complex(x,y)
 cn=cmath.polar(cn)
 cn1 = cmath.rect(2, cmath.pi)
 return (cn,cn1)",human
223,"def is_majority(arr, n, x): 
    i = first(arr, n, x) 
    if i == -1: 
        return False
    j = last(arr, n, x) 
    if (j - i + 1) > n / 2: 
        return True
    return False
def first(arr, low, high, x): 
    if high >= low: 
        mid = (low + high) // 2
        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x: 
            return mid 
        elif x > arr[mid]: 
            return first(arr, (mid + 1), high, x) 
        else: 
            return first(arr, low, (mid - 1), x) 
    return -1
def last(arr, low, high, x): 
    if high >= low: 
        mid = (low + high) // 2
        if (mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x: 
            return mid 
        elif x < arr[mid]: 
            return last(arr, low, (mid - 1), x) 
        else: 
            return last(arr, (mid + 1), high, x) 
    return -1",lm
54,"def counting_sort(arr, exp1): 
    n = len(arr) 
    output = [0] * n 
    count = [0] * 10 
    for i in range(n): 
        index = arr[i] // exp1 
        count[index % 10] += 1
    for i in range(1, 10): 
        count[i] += count[i - 1] 
    i = n - 1
    while i >= 0: 
        index = arr[i] // exp1 
        output[count[index % 10] - 1] = arr[i] 
        count[index % 10] -= 1
        i -= 1
    for i in range(n): 
        arr[i] = output[i]",lm
396,"import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ",human
551,"def extract_column(list1, n):
   result = [i.pop(n) for i in list1]
   return result ",human
813,"3
def string_length(string):
    return len(string)",lm
828,"def count_characters(string):
    alphabet_count = 0
    digit_count = 0
    special_char_count = 0

    for char in string:
        if char.isalpha():
            alphabet_count += 1
        elif char.isdigit():
            digit_count += 1
        else:
            special_char_count += 1

    return alphabet_count, digit_count, special_char_count",lm
825,"def fetch_multiple_elements(list1, indexes): 
      result = [list1[i] for i in indexes] 
      return result",lm
618,"def divide_lists_map_lambda(list1, list2):
    result = map(lambda x, y: x / y, list1, list2)
    return list(result)",lm
805,"def max_sum_list(lists):
 return max(lists, key=sum)",human
648,"from itertools import zip_longest, chain, tee
def exchange_elements(lst):
    lst1, lst2 = tee(iter(lst), 2)
    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))",human
4,"import heapq as hq
def heap_queue_largest(nums,n):
  largest_nums = hq.nlargest(n, nums)
  return largest_nums",human
670,"def decreasing_trend(nums):
    if len(nums) < 2:
        return False
    for i in range(1, len(nums)):
        if nums[i] >= nums[i - 1]:
            return False
    return True",lm
787,"import re
def text_match_three(text):
        patterns = 'ab{3}?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
291,"def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]",human
250,"def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ",human
425,"def sublist_counter(nums, target):
    count = 0
    for sublist in nums:
        count += target in sublist
    return count",lm
193,"def remove_duplicates(test_tup):
  res = tuple(set(test_tup))
  return (res)",lm
227,"def minimum_of_three(a, b, c):
    return min(a, b, c)",lm
201,"def chkList(lst): 
    return len(set(lst)) == 1",human
664,"def avg_even(n):
    sum_even, cnt = 0, 0
    for i in range(2, n + 1, 2):
        sum_even += i
        cnt += 1
    return sum_even / cnt",lm
624,"def is_upper(string):
  return (string.upper())",human
39,"import heapq
from collections import Counter
def rearange_string(S):
    ctr = Counter(S)
    heap = [(-value, key) for key, value in ctr.items()]
    heapq.heapify(heap)
    if (-heap[0][0]) * 2 > len(S) + 1: 
        return """"
    ans = []
    while len(heap) >= 2:
        nct1, char1 = heapq.heappop(heap)
        nct2, char2 = heapq.heappop(heap)
        ans.extend([char1, char2])
        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))
        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))
    return """".join(ans) + (heap[0][1] if heap else """")",human
833,"def get_key(dict): 
    list = [] 
    for key in dict.keys(): 
        list.append(key)           
    return list",human
105,"def count(lst):   
    return sum(lst) ",human
402,"def ncrModp(n:int, r:int, p:int) -> int:  
  fac=[1]  
  for i in range(1,n+1):  
    fac.append((fac[-1]*i)%p)  
  return (fac[n]*(pow(fac[r],p-2,p)*pow(fac[n-r],p-2,p))%p)%p",lm
457,"def find_min_length_sublist(arr):
    min_len = len(arr)
    sublist = []
    for i in range(len(arr)):
        for j in range(i + 1, len(arr) + 1):
            if len(arr[i:j]) < min_len:
                min_len = len(arr[i:j])
                sublist = arr[i:j]
    return sublist",lm
259,"3
def maximize_tuples(t1, t2):
  """"""
  Maximize the given two tuples.

  Args:
    t1: The first tuple.
    t2: The second tuple.

  Returns:
    A tuple containing the maximum value of each element in the given two tuples.
  """"""
  return tuple(max(t1[i], t2[i]) for i in range(len(t1)))",lm
40,"from collections import Counter
from itertools import chain
def freq_element(nums):
  result = Counter(chain.from_iterable(nums))
  return result",human
555,"def difference(n) :  
    S = (n*(n + 1))//2;  
    res = S*(S-1);  
    return res;  ",human
328,"def rotate_left(list1,m,n):
  result =  list1[m:]+list1[:n]
  return result",human
934,"def dealnnoy_num(n, m): 
	if (m == 0 or n == 0) : 
		return 1
	return dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)",human
338,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n):
        for j in range(1,n-i+1): 
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ",human
235,"def set_even_bits(n):
    i = 0
    while 2 ** i <= n:
        n |= 2 ** i
        i += 2
    return n",lm
506,"def permutation_coefficient(n, k): 
	P = [[0 for i in range(k + 1)] 
			for j in range(n + 1)] 
	for i in range(n + 1): 
		for j in range(min(i, k) + 1): 
			if (j == 0): 
				P[i][j] = 1
			else: 
				P[i][j] = P[i - 1][j] + ( 
						j * P[i - 1][j - 1]) 
			if (j < k): 
				P[i][j + 1] = 0
	return P[n][k] ",human
99,"def decimalToBinary(num):
    if num > 1:
        decimalToBinary(num // 2)
    print(num % 2, end = '')",lm
50,"def min_length_list(input_list):
    min_length = min(len(x) for x in input_list )  
    min_list = min(input_list, key = lambda i: len(i))
    return(min_length, min_list)",human
885,"def is_Isomorphic(str1,str2):          
    dict_str1 = {}
    dict_str2 = {}
    for i, value in enumerate(str1):
        dict_str1[value] = dict_str1.get(value,[]) + [i]        
    for j, value in enumerate(str2):
        dict_str2[value] = dict_str2.get(value,[]) + [j]
    if sorted(dict_str1.values()) == sorted(dict_str2.values()):
        return True
    else:
        return False",human
931,"import math 
def sum_series(number):
 total = 0
 total = math.pow((number * (number + 1)) /2, 2)
 return total",human
79,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False",human
718,"def alternate_elements(list1):
    result=[]
    for item in list1[::2]:
        result.append(item)
    return result ",human
914,"def is_Two_Alter(s):  
    for i in range (len( s) - 2) : 
        if (s[i] != s[i + 2]) : 
            return False
    if (s[0] == s[1]): 
        return False
    return True",human
225,"def find_Min(arr,low,high): 
    while (low < high): 
        mid = low + (high - low) // 2;   
        if (arr[mid] == arr[high]): 
            high -= 1; 
        elif (arr[mid] > arr[high]): 
            low = mid + 1; 
        else: 
            high = mid; 
    return arr[high]; ",human
974,"def min_sum_path(A): 
	memo = [None] * len(A) 
	n = len(A) - 1
	for i in range(len(A[n])): 
		memo[i] = A[n][i] 
	for i in range(len(A) - 2, -1,-1): 
		for j in range( len(A[i])): 
			memo[j] = A[i][j] + min(memo[j], 
									memo[j + 1]) 
	return memo[0]",human
863,"def longest_consecutive_subsequence(nums):
    if not nums:
        return 0

    nums.sort()
    longest_subsequence = 1
    current_subsequence = 1

    for i in range(1, len(nums)):
        if nums[i] == nums[i - 1] + 1:
            current_subsequence += 1
        else:
            if current_subsequence > longest_subsequence:
                longest_subsequence = current_subsequence
            current_subsequence = 1

    if current_subsequence > longest_subsequence:
        longest_subsequence = current_subsequence

    return longest_subsequence",lm
104,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result",human
955,"def is_abundant(n):
    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])
    return fctrsum > n",human
370,"def float_sort(price):
  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)
  return float_sort",human
820,"def check_monthnum_number(monthnum1):
  if monthnum1 == 2:
    return True
  else:
    return False",human
357,"def find_max(test_list):
  res = max(int(j) for i in test_list for j in i)
  return (res) ",human
247,"def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]",human
690,"def mul_consecutive(nums): 
    res = [] 
    prod = 1
    for num in nums: 
        prod *= num 
        res.append(prod) 
    return res",lm
527,"def get_pairs_count(arr, n, sum):
    count = 0 
    for i in range(0, n):
        for j in range(i + 1, n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count",human
276,"def cylinder_volume(radius, height):
    from math import pi
    return pi * radius ** 2 * height",lm
897,"def check_word_in_sentence(sentence, word):
    return word in sentence.split()",lm
160,"def solution (a, b, n): 
	i = 0
	while i * a <= n: 
		if (n - (i * a)) % b == 0: 
			return (""x = "",i ,"", y = "", 
			int((n - (i * a)) / b)) 
			return 0
		i = i + 1
	return (""No solution"") ",human
530,"from array import array
def negative_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x < 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",human
382,"def find_num_rotations(arr):
    for i in range(1, len(arr)):
        if arr[i] < arr[i - 1]:
            return i
    return 0",lm
593,"import re
def removezero_ip(ip):
 string = re.sub('\.[0]*', '.', ip)
 return string",human
451,"import re
def remove_whitespace(text):
    pattern = r'\s+'
    text = re.sub(pattern, '', text)
    return text",lm
752,"def jacobsthal(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return jacobsthal(n - 1) + jacobsthal(n - 2)",lm
520,"def find_lcm(num1, num2): 
	if(num1>num2): 
		num = num1 
		den = num2 
	else: 
		num = num2 
		den = num1 
	rem = num % den 
	while (rem != 0): 
		num = den 
		den = rem 
		rem = num % den 
	gcd = den 
	lcm = int(int(num1 * num2)/int(gcd)) 
	return lcm 
def get_lcm(l):
  num1 = l[0]
  num2 = l[1]
  lcm = find_lcm(num1, num2)
  for i in range(2, len(l)):
    lcm = find_lcm(lcm, l[i])
  return lcm ",human
852,"def remove_negative(list1):
   list2 = [x for x in list1 if x >= 0]
   return list2",lm
309,"def max_of_two(a, b):
  if a > b:
    return a
  else:
    return b",lm
669,"import re

def is_valid_ip(ip_address: str) -> bool:
   pattern = r""^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$""
   return re.match(pattern, ip_address)",lm
786,"def locate_insertion_point(nums, value):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == value:
            return mid
        elif nums[mid] > value:
            right = mid - 1
        else:
            left = mid + 1
    return left",lm
544,"def flatten_tuple(test_list):
  res = ' '.join([idx for tup in test_list for idx in tup])
  return (res) ",human
930,"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return ('Found a match!')
        else:
                return ('Not matched!')",human
68,"def is_monotonic(arr):
    return (all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) or
            all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1)))",lm
58,"def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ",human
460,"def Extract(lst): 
    return [item[0] for item in lst] ",human
710,"def front_and_rear(test_tup):
  res = (test_tup[0], test_tup[-1])
  return (res) ",human
101,"def kth_element(arr, n, k):
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]",human
677,"def validity_triangle(a,b,c):
 total = a + b + c
 if total == 180:
    return True
 else:
    return False",human
310,"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",human
189,"def find_missing_positive_number(nums):
  if len(nums) == 0:
    return 1
  nums.sort()
  for i in range(0, len(nums)):
    if i + 1 != nums[i]:
      return i + 1
  return len(nums) + 1",lm
698,"def sort_dict_item(test_dict):
  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}
  return  (res) 
",human
402,"def ncr_modp(n, r, p): 
    C = [0 for i in range(r+1)]   
    C[0] = 1
    for i in range(1, n+1): 
        for j in range(min(i, r), 0, -1): 
            C[j] = (C[j] + C[j-1]) % p   
    return C[r] ",human
538,"def convert(lst):
  return tuple(lst)",lm
581,"def surface_Area(b,s): 
    return 2 * b * s + pow(b,2) ",human
480,"def get_max_occuring_char(str1):
  ASCII_SIZE = 256
  ctr = [0] * ASCII_SIZE
  max = -1
  ch = ''
  for i in str1:
    ctr[ord(i)]+=1;
  for i in str1:
    if max < ctr[ord(i)]:
      max = ctr[ord(i)]
      ch = i
  return ch",human
833,"def get_dict_keys(dict):
    """"""Get dictionary keys as a list.""""""
    return list(dict.keys())",lm
847,"def copy_list_from_singleton_tuple(tuple1):
    return tuple1[0][:]",lm
228,"def check_bits_unset_range(n, m, i, j):
    x = (1 << (j + 1)) - 1
    y = (1 << i) - 1
    mask = x ^ y
    return (n & mask) == 0",lm
329,"def neg_count(list):
  neg_count= 0
  for num in list: 
    if num <= 0: 
      neg_count += 1
  return neg_count ",human
49,"def extract_first_n(two_dimensional_list, n=1):
    return [row[::n] for row in two_dimensional_list]",lm
383,"def even_bit_toggle_number(n) : 
    res = 0; count = 0; temp = n    
    while(temp > 0 ) : 
        if (count % 2 == 0) : 
            res = res | (1 << count)      
        count = count + 1
        temp >>= 1 
    return n ^ res ",human
337,"import re
def text_match_word(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'",human
548,"def LIS(arr):
    n = len(arr) 
    lis = [1]*n 

    for i in range (1 , n): 
        for j in range(0 , i): 
            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : 
                lis[i] = lis[j]+1
    
    maximum = 0

    for i in range(n): 
        maximum = max(maximum , lis[i]) 
    
    return maximum",lm
889,"def reverse_each_list(lists):
    return [[item for item in sublist[::-1]] for sublist in lists]",lm
324,"def alternate_chain_sum(test_tup):
  res = 0
  for idx in range(0, len(test_tup), 2):
    res = res + test_tup[idx][1]
  return res",lm
413,"def extract(tup, n):  
    result = [element[n] for element in tup]  
    return result",lm
880,"def check_quadratic_solutions(a, b, c):
    """"""
    Finds the number of solutions to a quadratic equation.

    Args:
        a: The coefficient of the x^2 term.
        b: The coefficient of the x term.
        c: The constant term.

    Returns:
        The number of solutions to the quadratic equation.
    """"""
    # Calculate the discriminant.
    discriminant = b**2 - 4*a*c

    # Check the discriminant to determine the number of solutions.
    if discriminant > 0:
        # Two real solutions.
        return 2
    elif discriminant == 0:
        # One real solution (a.k.a. a double root).
        return 1
    else:
        # No real solutions.
        return 0",lm
539,"def basesnum_coresspondingnum(bases_num,index):
  result = list(map(pow, bases_num, index))
  return result",human
887,"def is_odd(n) : 
    if (n^1 == n-1) :
        return True; 
    else :
        return False; ",human
389,"def find_n_th_lucas_num(n):
    luc = [2, 1]
    while len(luc) < n + 1:
        luc.append(luc[-2] + luc[-1])
    return luc[n]",lm
135,"def hexagonal_num(n): 
	return n*(2*n - 1) ",human
926,"def rencontres(n):
    if n==0:
        return 0
    elif n==1:
        return 1
    else:
        return rencontres(n-1)+rencontres(n-2)",lm
579,"3
def find_dissimilar_elements(tuple1, tuple2):
    dissimilar_elements = []
    for element1 in tuple1:
        if element1 not in tuple2:
            dissimilar_elements.append(element1)

    for element2 in tuple2:
        if element2 not in tuple1:
            dissimilar_elements.append(element2)

    return dissimilar_elements",lm
10,"def get_n_smallest(n, dataset):
    """"""
    Get the n smallest items from a dataset.

    Args:
        n: The number of items to get.
        dataset: The dataset to get the items from.

    Returns:
        A list of the n smallest items in the dataset.
    """"""

    # Sort the dataset in ascending order.
    sorted_dataset = sorted(dataset)

    # Return the first n items in the sorted dataset.
    return sorted_dataset[:n]",lm
194,"def octal_To_Decimal(n):  
    num = n; 
    dec_value = 0; 
    base = 1; 
    temp = num; 
    while (temp): 
        last_digit = temp % 10; 
        temp = int(temp / 10); 
        dec_value += last_digit*base; 
        base = base * 8; 
    return dec_value; ",human
941,"def count_elim(num):
  count_elim = 0
  for n in num:
    if isinstance(n, tuple):
        break
    count_elim += 1
  return count_elim",human
262,"def Split_List(nums, n):
    return nums[:n], nums[n:]",lm
173,"def remove_special_characters(text):
    import re
    pattern = r'[^a-zA-z0-9 ]'
    text = re.sub(pattern, '', text)
    return text",lm
26,"3
def check_tuple(test_tup, K):
  res = all([len(ele) == K for ele in test_tup])
  return (res)",lm
538,"def string_list_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",human
409,"def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min",human
723,"from operator import eq
def count_same_pair(nums1, nums2):
    result = sum(map(eq, nums1, nums2))
    return result",human
642,"def remove_similar_rows(matrix):
    unique_rows = set()
    result = []
    for row in matrix:
        row_string = ', '.join(map(str, row))
        if row_string not in unique_rows:
            unique_rows.add(row_string)
            result.append(row)
    return result",lm
654,"def rectangle_perimeter(l,b):
  perimeter=2*(l+b)
  return perimeter",human
387,"def check_hex_even_odd(hex_num):
  """"""
  Checks if the given hexadecimal number is even or odd.

  Args:
    hex_num: The hexadecimal number to check.

  Returns:
    True if the number is even, False if it is odd.
  """"""

  # Convert the hexadecimal number to an integer.
  int_num = int(hex_num, 16)

  return int_num % 2 == 0",lm
634,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n + 1): 
        j = 2*i; 
        sum = sum + (j*j*j*j); 
    return sum; ",human
533,"def remove_dataType(test_tup, datatype): 
  res = tuple(filter(lambda ele: not isinstance(ele, datatype), test_tup)) 
  return (res)",lm
749,"def sort_numeric_strings(nums_str):
    result = [int(x) for x in nums_str]
    result.sort()
    return result",human
487,"def sort_tuple(tup): 
	lst = len(tup) 
	for i in range(0, lst): 
		for j in range(0, lst-i-1): 
			if (tup[j][-1] > tup[j + 1][-1]): 
				temp = tup[j] 
				tup[j]= tup[j + 1] 
				tup[j + 1]= temp 
	return tup",human
62,"def smallest_num(xs):
  return min(xs)
",human
519,"def calculate_volume_tetrahedron(side):
    return (side**3 * (3**0.5)) / 6",lm
567,"def is_sorted(list1):
    return sorted(list1) == list1",lm
483,"def first_Factorial_Divisible_Number(x): 
    i = 1;
    fact = 1; 
    for i in range(1,x): 
        fact = fact * i 
        if (fact % x == 0): 
            break
    return i ",human
384,"def count_smallest(arr):
    smallest = min(arr)
    return arr.count(smallest)",lm
342,"3
def smallest_range(nums):
    import heapq
    heap = []
    max_range = float('-inf')
    for i, arr in enumerate(nums):
        heapq.heappush(heap, (arr[0], i))
        max_range = max(max_range, arr[0])
    L, R = heap[0][0], max_range
    while heap:
        val, idx = heapq.heappop(heap)
        if max_range - val < R - L:
            L, R = val, max_range
        if len(nums[idx]) == 1:
            break
        heapq.heappush(heap, (nums[idx][1], idx))
        max_range = max(max_range, nums[idx][1])
    return [L, R]",lm
619,"def move_num(test_str):
  res = ''
  dig = ''
  for ele in test_str:
    if ele.isdigit():
      dig += ele
    else:
      res += ele
  res += dig
  return (res) ",human
851,"def sum_of_inverse_divisors(n):
    sm = 0
    for i in range(1, int(n ** 0.5) + 1):
        if n % i == 0:
            sm += 1 / i
            if n // i != i:
                sm += 1 / (n // i)
    return sm",lm
59,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ",human
281,"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True",human
691,"from itertools import groupby 
def group_element(test_list):
  res = dict()
  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):
    res[key] = [ele[0] for ele in val] 
  return (res)
",human
236,"def No_of_Triangle(N,K):
    if (N < K):
        return -1;
    else:
        Tri_up = 0;
        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;
        Tri_down = 0;
        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;
        return Tri_up + Tri_down;",human
214,"import math
def radians_to_degrees(radians):
  return math.degrees(radians)",lm
37,"def sort_mixed_list(list1):
    num_list = []
    str_list = []
    for item in list1:
        if isinstance(item, int):
            num_list.append(item)
        else:
            str_list.append(item)
    num_list.sort()
    str_list.sort()
    return num_list + str_list",lm
763,"def find_min_diff(arr):
    arr.sort()
    min_diff = float('inf')
    for i in range(1, len(arr)):
        min_diff = min(min_diff, arr[i] - arr[i-1])
    return min_diff",lm
17,"def square_perimeter(side):
    return 4 * side",lm
607,"3
import re

def find_literals_regex(string, pattern):
  """"""Search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.""""""

  # Escape special characters in the pattern to make it a literal string.
  pattern = re.escape(pattern)

  # Create a regular expression pattern to find the literal string in the string.
  regex_pattern = r'(?i)' + pattern

  # Use the regular expression to find all occurrences of the pattern in the string.
  matches = re.finditer(regex_pattern, string)

  # Create a list to store the locations of the matches.
  locations = []

  # Iterate over the matches and add the start and end positions of each match to the list of locations.
  for match in matches:
    locations.append((match.start(), match.end()))

  # Return the list of locations.
  return locations",lm
758,"def countUniqueLists(list1): 
    unique_lists = [] 
    for x in list1: 
        if x not in unique_lists: 
            unique_lists.append(x) 
    return len(unique_lists)",lm
650,"def areEqual(arr1, arr2):
    if len(arr1) != len(arr2):
        return False
    for i in range(len(arr1)):
        if arr1[i] != arr2[i]:
            return False
    return True",lm
782,"3
def sum_odd_length_subarrays(arr):
    """"""
    Finds the sum of all odd length subarrays in a given array.

    Args:
    arr: A list of integers.

    Returns:
    The sum of all odd length subarrays in the given array.
    """"""
    sum = 0
    n = len(arr)

    for i in range(n):
        for j in range(i, n):
            if (j - i + 1) % 2 == 1:
                for k in range(i, j + 1):
                    sum += arr[k]

    return sum",lm
288,"def ModularInverseDivisibility(arr, n, p):
    count = 0
    for i in range(n):
        x = arr[i]
        for j in range(2, int(p ** 0.5) + 1):
            while (x % j == 0 and p % j != 0):
                x /= j
        if x == 1:
            count += 1
    return count",lm
967,"def check(string): 
  if len(set(string).intersection(""AEIOUaeiou""))>=5: 
    return ('accepted') 
  else: 
    return (""not accepted"") ",human
890,"def find_Extra(arr1,arr2,n) : 
    for i in range(0, n) : 
        if (arr1[i] != arr2[i]) : 
            return i 
    return n ",human
629,"def Split(list): 
    ev_li = [] 
    for i in list: 
        if (i % 2 == 0): 
            ev_li.append(i)  
    return ev_li",human
885,"def isomorph(str1, str2):
    if len(str1) != len(str2):
        return False

    char_map = {}

    for i in range(len(str1)):
        if str1[i] not in char_map:
            if str2[i] in char_map.values():
                return False
            char_map[str1[i]] = str2[i]
        elif char_map[str1[i]] != str2[i]:
            return False

    return True",lm
486,"def binom(n, k, p):
    """"""
    Compute binomial probability for the given number.
    """"""
    return scipy.special.binom(n, k) * p**k * (1-p)**(n-k)",lm
203,"def hammingDistance(x: int, y: int) -> int:
    xor = x ^ y
    count = 0
    while xor:
        count += xor & 1
        xor >>= 1
    return count",lm
509,"def average_Odd(n) : 
    if (n%2==0) : 
        return (""Invalid Input"") 
        return -1 
    sm =0
    count =0
    while (n>=1) : 
        count=count+1
        sm = sm + n 
        n = n-2
    return sm//count ",human
628,"3
def urlify(str1, length):
    str1 = str1[0 : length]
    new_str = ''
    for char in str1:
        if char == ' ':
            new_str += '%20'
        else:
            new_str += char
    return new_str",lm
40,"import collections

def frequency(list_of_lists):
  counter = collections.Counter()
  for lst in list_of_lists:
    counter.update(lst)
  return counter",lm
603,"def get_ludic(n):
	ludics = []
	for i in range(1, n + 1):
		ludics.append(i)
	index = 1
	while(index != len(ludics)):
		first_ludic = ludics[index]
		remove_index = index + first_ludic
		while(remove_index < len(ludics)):
			ludics.remove(ludics[remove_index])
			remove_index = remove_index + first_ludic - 1
		index += 1
	return ludics",human
759,"3
def check_decimal(num):
  if round(num, 2) == num:
    return True
  else:
    return False",lm
476,"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum",human
945,"3
def tuple_to_set(test_tuple):
  res = set(map(tuple, test_tuple))
  return (res)",lm
494,"def get_int_from_binary_tuple(tup):
    """""" Converts the given binary tuple to integer. """"""
    binary_string = ''.join(map(str, tup))
    return int(binary_string, base = 2)",lm
546,"def find_last(string, char):
    index = -1

    for i in range(len(string)):
        if string[i] == char:
            index = i

    return index",lm
245,"3
def max_bi_tonic_subsequence(arr):
    n = len(arr)

    # dp[i][0] stores the maximum sum of the increasing sequence ending with arr[i]
    # dp[i][1] stores the maximum sum of the decreasing sequence starting with arr[i]
    dp = [[0] * 2 for _ in range(n)]

    dp[0][0] = arr[0]

    for i in range(1, n):
        # The maximum sum of the increasing sequence ending with arr[i] is either the maximum sum ending with arr[i - 1]
        # or the sum of arr[i] and the maximum sum ending with arr[j] where j < i and arr[j] < arr[i]
        dp[i][0] = max(dp[i - 1][0], max([dp[j][0] + arr[i] for j in range(i) if arr[j] < arr[i]]))

        # The maximum sum of the decreasing sequence starting with arr[i] is either the maximum sum starting with arr[i + 1]
        # or the sum of arr[i] and the maximum sum starting with arr[j] where j > i and arr[j] > arr[i]
        dp[i][1] = max(dp[i + 1][1], max([dp[j][1] + arr[i] for j in range(i + 1, n) if arr[j] > arr[i]]))

    # The maximum sum of the bi-tonic subsequence is the maximum sum of the increasing sequence ending with arr[i]
    # plus the maximum sum of the decreasing sequence starting with arr[i + 1]
    max_sum = max([dp[i][0] + dp[i + 1][1] for i in range(n - 1)])

    return max_sum",lm
578,"def interleave_lists(list1,list2,list3):
    result = [el for pair in zip(list1, list2, list3) for el in pair]
    return result",human
475,"def sort_counter_value(dict):
  return sorted(dict.items(), key=lambda x: x[1], reverse=True)",lm
369,"def lateral_surface_area_cuboid(length, breadth, height):
    """"""Returns the lateral surface area of a cuboid.""""""
    return 2 * (length + breadth) * height",lm
32,"def largest_prime_factor(n):
    """"""Finds the largest prime factor of a given number.

    Args:
        n: The number to find the largest prime factor of.

    Returns:
        The largest prime factor of n.
    """"""

    if n < 2:
        return None

    largest_prime_factor = 1
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            while n % i == 0:
                n //= i
            largest_prime_factor = i

    if n > 1:
        largest_prime_factor = n

    return largest_prime_factor",lm
711,"def product_Equal(n): 
    if n < 10: 
        return False
    prodOdd = 1; prodEven = 1
    while n > 0: 
        digit = n % 10
        prodOdd *= digit 
        n = n//10
        if n == 0: 
            break; 
        digit = n % 10
        prodEven *= digit 
        n = n//10
    if prodOdd == prodEven: 
        return True
    return False",human
419,"def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum",human
464,"def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result",human
615,"def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result",human
948,"def get_item(tup, index):
    return tup[index]",lm
907,"def print_lucky_numbers(n):
    """"""
    Prints the first n lucky numbers.
    """"""
    output = []
    lucky = []
    count = 0
    i = 1
    while count < n:
        if count % 2 == 0:
            if i not in lucky:
                output.append(i)
                lucky.append(i)
                count += 1
            else:
                lucky.append(i) 
        i += 1
    print(output)",lm
641,"def is_nonagonal(n): 
	return int(n * (7 * n - 5) / 2) ",human
159,"def month_season(month,days):
 if month in ('January', 'February', 'March'):
	 season = 'winter'
 elif month in ('April', 'May', 'June'):
	 season = 'spring'
 elif month in ('July', 'August', 'September'):
	 season = 'summer'
 else:
	 season = 'autumn'
 if (month == 'March') and (days > 19):
	 season = 'spring'
 elif (month == 'June') and (days > 20):
	 season = 'summer'
 elif (month == 'September') and (days > 21):
	 season = 'autumn'
 elif (month == 'October') and (days > 21):
	 season = 'autumn'
 elif (month == 'November') and (days > 21):
	 season = 'autumn'
 elif (month == 'December') and (days > 20):
	 season = 'winter'
 return season",human
175,"def valid_parentheses(str1):
    stack, pchar = [], {""("": "")"", ""{"": ""}"", ""["": ""]""}
    for parenthese in str1:
        if parenthese in pchar: stack.append(parenthese)
        elif len(stack) > 0 and parenthese == pchar[stack[-1]]: stack.pop()
        else: return False
    return len(stack) == 0",lm
107,"def count_Hexadecimal(L,R) :  
    count = 0;  
    for i in range(L,R + 1) : 
        if (i >= 10 and i <= 15) : 
            count += 1;  
        elif (i > 15) : 
            k = i;  
            while (k != 0) :  
                if (k % 16 >= 10) : 
                    count += 1;  
                k = k // 16;  
    return count;  ",human
162,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)",human
340,"def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])",human
338,"def count_substrings_same_ends(s):
    """"""Counts the number of substrings with same first and last characters.""""""
    n = len(s)
    count = 0
    for i in range(n):
        for j in range(i+1, n+1):
            if s[i] == s[j-1]:
                count += 1
    return count",lm
85,"def surface_area_sphere(radius):
    """"""Calculates the surface area of a sphere.

    Args:
        radius: The radius of the sphere in meters.

    Returns:
        The surface area of the sphere in square meters.
    """"""

    from math import pi
    return 4 * pi * radius ** 2",lm
556,"def count_odd_xor(arr, n): 
    count = 0 
    for i in range(0, n): 
        for j in range(i + 1, n): 
            if (arr[i] ^ arr[j]) & 1: 
                count += 1
    return count",lm
858,"def square_list_count(list_of_lists):
    if not isinstance(list_of_lists, list):
        return 0
    return len(list_of_lists) ** 2",lm
477,"def convert_to_lower_case(text):
    return text.lower()",lm
687,"def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)",lm
176,"def perimeter_triangle(a,b,c):
  perimeter=a+b+c
  return perimeter",human
757,"def count_reverse_pairs(s):
    s = set([i[::-1] for i in s])
    return sum(1 for i in s if i in s and i != i[::-1])",lm
754,"def extract_index_list(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result",human
283,"def digit_freq_less(num):
    num_str = str(num)
    num_len = len(num_str)

    freq = [0] * 10

    for digit in num_str:
        index = int(digit)
        freq[index] += 1

    for i in range(1, 10):
        if freq[i] > i:
            return False

    return True",lm
334,"def check_Validity(a,b,c):  
    if (a + b <= c) or (a + c <= b) or (b + c <= a) : 
        return False
    else: 
        return True        ",human
208,"3
import re

def check_decimal(decimal):
  pattern = r""^(\d*\.\d{2})$""
  if re.match(pattern, decimal):
    return True
  else:
    return False",lm
397,"def find_median(num1, num2, num3):
    """"""Finds the median of three numbers.

    Args:
        num1: First number.
        num2: Second number.
        num3: Third number.

    Returns:
        Median of the three numbers.
    """"""

    return sorted([num1, num2, num3])[1]",lm
861,"find_anagrams = lambda string, list_of_strings: list(filter(lambda x: sorted(x) == sorted(string), list_of_strings))",lm
56,"def one_less_than_twice_its_reverse(n):
    """"""Checks if a given number is one less than twice its reverse.""""""

    # Convert the number to a string.
    n_str = str(n)

    # Reverse the string.
    reversed_n_str = n_str[::-1]

    # Convert the reversed string back to a number.
    reversed_n = int(reversed_n_str)

    # Multiply the reversed number by 2.
    twice_reversed_n = 2 * reversed_n

    # Check if the original number is one less than twice its reverse.
    return n == twice_reversed_n - 1",lm
850,"def is_triangleexists(a,b,c): 
    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): 
        if((a + b)>= c or (b + c)>= a or (a + c)>= b): 
            return True 
        else:
            return False
    else:
        return False",human
463,"def maxProduct(nums):
    if not nums:
        return 0
    max_prod, min_prod, result = 1, 1, float('-inf')
    for num in nums:
        if num < 0:
            max_prod, min_prod = min_prod, max_prod
        max_prod = max(num, max_prod * num)
        min_prod = min(num, min_prod * num)
        result = max(result, max_prod)
    return result",lm
629,"def find_even(lst):
    even_nums = []
    for num in lst:
        if num % 2 == 0:
            even_nums.append(num)
    return even_nums",lm
418,"def sublist_max_length(arr):
    max_len = 0
    start = 0
    end = 0
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[j] >= arr[j - 1]:
                if j - i + 1 > max_len:
                    max_len = j - i + 1
                    start = i
                    end = j
            else:
                break
    return arr[start:end + 1]",lm
459,"3
import re

def remove_uppercase_substrings(text):
  pattern = r'[A-Z]+'
  return re.sub(pattern, '', text)",lm
103,"def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",human
778,"from itertools import groupby
def pack_consecutive_duplicates(list1):
    return [list(group) for key, group in groupby(list1)]",human
840,"def check_opp_sign_roots(coeff):
    a, b, c = coeff
    D = b**2 - 4*a*c
    if D == 0:
        return True
    else:
        return False",lm
244,"import math

def next_perfect_square(n):
    """"""
    Returns the next perfect square greater than a given number.

    Args:
    n: The given number.

    Returns:
    The next perfect square greater than n.
    """"""

    # Find the square root of n.
    sqrt_n = math.sqrt(n)

    # Round the square root up to the next integer.
    next_sqrt = math.ceil(sqrt_n)

    # Square the next square root to get the next perfect square.
    next_perfect_square = next_sqrt ** 2

    # Return the next perfect square.
    return next_perfect_square",lm
28,"def binomialCoeff(n, k): 
    if (k == 0 or k == n): 
        return 1
    
    return binomialCoeff(n - 1, k - 1) + binomialCoeff(n - 1, k)",lm
108,"import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)",human
854,"import heapq as hq
def raw_heap(rawheap):
  hq.heapify(rawheap)
  return rawheap",human
392,"def f(n):
    if n <= 4:
        return n
    else:
        return max((f(int(n / 2)) + f(int(n / 3)) + f(int(n / 4)) + f(int(n / 5))), n)",lm
828,"def count_alpha_dig_spl(string):
  alphabets=digits = special = 0
  for i in range(len(string)):
    if(string[i].isalpha()):
        alphabets = alphabets + 1
    elif(string[i].isdigit()):
        digits = digits + 1
    else:
        special = special + 1
  return (alphabets,digits,special)   ",human
121,"def find_triplet(arr, n, target):
    arr.sort()
    for i in range(0, n-2):
        l, r = i+1, n-1
        while l < r:
            if arr[i] + arr[l] + arr[r] == target:
                print(arr[i], arr[l], arr[r])
                return True
            elif arr[i] + arr[l] + arr[r] < target:
                l += 1
            else:
                r -= 1
    return False",lm
62,"def min_num(arr):
   min = arr[0]
   for i in range(1, len(arr)):
       if arr[i] < min:
           min = arr[i]
   return min",lm
127,"def multiply(a, b):
    if b == 0:
        return 0

    if b < 0:
        return -multiply(a, -b)

    smaller = a if a < b else b
    bigger = b if a < b else a

    product = 0

    while smaller > 0:
        if smaller % 2 == 1:
            product += bigger

        smaller //= 2
        bigger *= 2

    return product",lm
626,"import math

def largest_inscribed_triangle(r):
    """"""
    Finds the largest triangle that can be inscribed in the semicircle.

    Parameters:
    r: The radius of the semicircle.

    Returns:
    The area of the largest triangle that can be inscribed in the semicircle.
    """"""

    # Calculate the side length of the triangle.
    s = 2 * r * math.sin(math.pi / 3)

    # Calculate the area of the triangle.
    A = (math.sqrt(3) / 4) * s**2

    return A",lm
566,"def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))",human
303,"def is_inversion_count_equal(arr, n):
    inv_count1 = 0
    for i in range(n):
        for j in range(i + 1, n):
            if (arr[i] > arr[j]):
                inv_count1 += 1
    arr.sort()
    inv_count2 = 0
    for i in range(n):
        for j in range(i + 1, n):
            if (arr[i] > arr[j]):
                inv_count2 += 1
    return inv_count1 == inv_count2",lm
342,"from heapq import heappop, heappush
class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index
    def __lt__(self, other):
        return self.value < other.value
def find_minimum_range(list):
    high = float('-inf')
    p = (0, float('inf'))
    pq = []
    for i in range(len(list)):
        heappush(pq, Node(list[i][0], i, 0))
        high = max(high, list[i][0])
    while True:
        top = heappop(pq)
        low = top.value
        i = top.list_num
        j = top.index
        if high - low < p[1] - p[0]:
            p = (low, high)
        if j == len(list[i]) - 1:
            return p
        heappush(pq, Node(list[i][j + 1], i, j + 1))
        high = max(high, list[i][j + 1])",human
279,"def nth_decagonal_number(n):
    return n * (3 * n - 2)",lm
82,"import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume",human
922,"def maxProduct(arr):
    if len(arr) < 2:
        return 0
    max1 = max2 = float('-inf')
    min1 = min2 = float('inf')
    for i in arr:
        if i > max1:
            max2 = max1
            max1 = i
        elif i > max2:
            max2 = i
        if i < min1:
            min2 = min1
            min1 = i
        elif i < min2:
            min2 = i
    return max(max1 * max2, min1 * min2)",lm
517,"def largest_pos(list1): 
    max = list1[0] 
    for x in list1: 
        if x > max : 
             max = x  
    return max",human
525,"def is_parallel(line1, line2):
    """"""
    Check whether two given lines are parallel or not.

    Args:
    line1: A list of two points, representing a line.
    line2: A list of two points, representing a line.

    Returns:
    True if the lines are parallel, False otherwise.
    """"""
    x1, y1 = line1[0]
    x2, y2 = line1[1]
    x3, y3 = line2[0]
    x4, y4 = line2[1]
    
    if (y2 - y1) * (x4 - x3) == (y4 - y3) * (x2 - x1):
        return True
    else:
        return False",lm
76,"def square_in_rectangle(length, width):
    count = 0
    while length >= width:
        count += 1
        length -= width
    while width >= length:
        count += 1
        width -= length
    return count",lm
970,"def min_of_two(a, b):
  if a < b:
    return a
  else:
    return b",lm
147,"def max_path_sum(tri, m, n): 
	for i in range(m-1, -1, -1): 
		for j in range(i+1): 
			if (tri[i+1][j] > tri[i+1][j+1]): 
				tri[i][j] += tri[i+1][j] 
			else: 
				tri[i][j] += tri[i+1][j+1] 
	return tri[0][0]",human
965,"def camel_to_snake(text):
        import re
        str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()",human
465,"def drop_empty_items(dict_in):
    return dict((k, v) for k, v in dict_in.items() if v)",lm
216,"def is_subset(list1, list2): 
    return all(item in list2 for item in list1)",lm
946,"from collections import Counter 
def most_common_elem(s,a):
  most_common_elem=Counter(s).most_common(a)
  return most_common_elem",human
701,"def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum=0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1",human
479,"def first_Digit(n) :  
    while n >= 10:  
        n = n / 10; 
    return int(n) ",human
814,"def rombus_area(p,q):
  area=(p*q)/2
  return area",human
708,"def Convert(string): 
    li = list(string.split("" "")) 
    return li ",human
348,"3
def count_sequences(nums: list, length: int, target: int) -> int:
    """"""Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.""""""
    dp = [0] * (target + 1)
    dp[0] = 1
    for num in nums:
        for j in range(target, num - 1, -1):
            dp[j] += dp[j - num]
    return dp[target]",lm
410,"def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val",human
627,"def find_First_Missing(array,start,end): 
    if (start > end): 
        return end + 1
    if (start != array[start]): 
        return start; 
    mid = int((start + end) / 2) 
    if (array[mid] == mid): 
        return find_First_Missing(array,mid+1,end) 
    return find_First_Missing(array,start,mid) ",human
313,"def pos_nos(list1):
  for num in list1: 
    if num >= 0: 
       return num ",human
279,"def is_num_decagonal(n): 
	return 4 * n * n - 3 * n ",human
492,"def binary_search(item_list,item):
	first = 0
	last = len(item_list)-1
	found = False
	while( first<=last and not found):
		mid = (first + last)//2
		if item_list[mid] == item :
			found = True
		else:
			if item < item_list[mid]:
				last = mid - 1
			else:
				first = mid + 1	
	return found",human
63,"def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ",human
242,"def count_characters(string):
    return len(string)",lm
692,"def last_Two_Digits(N): 
    if (N >= 10): 
        return
    fac = 1
    for i in range(1,N + 1): 
        fac = (fac * i) % 100
    return (fac) ",human
112,"def perimeter(diameter,height) : 
    return 2*(diameter+height)  ",human
911,"def maximum_product(nums):
    import heapq
    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)
    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])",human
445,"def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",human
32,"import math 
def max_Prime_Factors (n): 
    maxPrime = -1 
    while n%2 == 0: 
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)",human
559,"def max_sub_array_sum(a, size):
  max_so_far = 0
  max_ending_here = 0
  for i in range(0, size):
    max_ending_here = max_ending_here + a[i]
    if max_ending_here < 0:
      max_ending_here = 0
    elif (max_so_far < max_ending_here):
      max_so_far = max_ending_here
  return max_so_far",human
540,"def diff_highest_lowest(arr):
    min_count = arr.count(min(arr))
    max_count = arr.count(max(arr))
    return abs(max_count - min_count)",lm
98,"def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ",human
904,"def even_num(x):
  if x%2==0:
     return True
  else:
    return False",human
140,"def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) ",human
192,"import re

def check_letter_and_number(text):
  pattern = re.compile(""[a-zA-Z]+[0-9]+|[0-9]+[a-zA-Z]+"")
  return bool(pattern.search(text))",lm
464,"3
def check_same(dictionary):
    """"""checks if all values are same in a dictionary""""""
    return all(value == dictionary[next(iter(dictionary))] for value in dictionary.values())",lm
407,"def next_permutation(n): 
    n = str(n) 
    l = len(n) 
    i = l - 2
    while i >= 0 and n[i] >= n[i+1]: 
        i -= 1
    if i >= 0: 
        j = l - 1
        while n[j] <= n[i]: 
            j -= 1
        n = n[:i] + n[j] + n[i+1:j] + n[i] + n[j+1:] 
    n = list(n) 
    n[i+1:] = reversed(n[i+1:]) 
    return int(''.join(n))",lm
864,"list(filter(lambda x:x==x[::-1],l))",lm
850,"def possible_triangle(a,b,c):
  return (a+b>c) and (b+c>a) and (c+a>b)",lm
133,"sum_negative = lambda numbers: sum(filter(lambda num: num < 0, numbers))",lm
777,"def sum_non_repeated(arr): 
  sum = 0
  unique_ele = set()
  count = dict()
  for ele in arr: 
    count[ele] = count.get(ele, 0) + 1
  for ele in arr: 
    if count[ele] == 1:
      unique_ele.add(ele)
  for ele in unique_ele: 
    sum += ele 
  return sum",lm
823,"import re 
def check_substring(string, sample) : 
  if (sample in string): 
      y = ""\A"" + sample 
      x = re.search(y, string) 
      if x : 
          return (""string starts with the given substring"") 
      else : 
          return (""string doesnt start with the given substring"") 
  else : 
      return (""entered string isnt a substring"")",human
920,"def remove_tuple(test_list):
  res = [sub for sub in test_list if not all(ele == None for ele in sub)]
  return (str(res)) ",human
627,"def findMissingNumber(nums):
    nums.sort()
    for i in range(1, len(nums)):
        if nums[i] - nums[i - 1] > 1:
            return nums[i] - 1
    return nums[0] - 1 if nums[0] > 0 else nums[-1] + 1",lm
919,"def multiply_list(nums):
    result = 1
    for num in nums:
        result *= num
    return result",lm
429,"def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",human
251,"def insert_before(lst, element):
    newlst = []
    for item in lst:
        newlst.append(element)
        newlst.append(item)
    return newlst",lm
202,"def remove_even(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 != 0):
        str2 = str2 + str1[i - 1]
 return str2",human
184,"def greater_specificnum(list,num):
 greater_specificnum=all(x >= num for x in list)
 return greater_specificnum",human
782,"def Odd_Length_Sum(arr):
    Sum = 0
    l = len(arr)
    for i in range(l):
        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])
    return Sum",human
632,"def move_zeros_to_end(nums):
    non_zero = []
    zero = []

    for num in nums:
        if num != 0:
            non_zero.append(num)
        else:
            zero.append(num)

    result = non_zero + zero
    return result",lm
322,"def find_min_index(list1):
    min_val = min(list1)
    min_index = []
    for i in range(0, len(list1)):
        if list1[i] == min_val:
            min_index.append(i)
    return min_index",lm
514,"def tuple_sum(test_tup):
  res = sum(sum(ele) for ele in test_tup)
  return (res)",lm
584,"import re
def find_adverbs(text):
  for m in re.finditer(r""\w+ly"", text):
    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))",human
434,"import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')
",human
49,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result
    ",human
58,"def check_sign(n1: int, n2: int) -> bool:
    if (n1 > 0 and n2 < 0) or (n1 < 0 and n2 > 0): 
        return True
    else: 
        return False",lm
108,"import heapq
def merge_sorted_inputs(*iterables):
  h = []
  for it in iterables:
    try:
      next_val = next(it)
      heapq.heappush(h, (next_val, it))
    except StopIteration:
      pass
  while h:
    val, it = heapq.heappop(h)
    yield val
    try:
      next_val = next(it)
      heapq.heappush(h, (next_val, it))
    except StopIteration:
      pass",lm
90,"def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max",human
343,"def count_digits_letters(string):
    digits = 0
    letters = 0
    for char in string:
        if char.isdigit():
            digits += 1
        elif char.isalpha():
            letters += 1
    return digits, letters",lm
175,"def is_valid_parenthese( str1):
        stack, pchar = [], {""("": "")"", ""{"": ""}"", ""["": ""]""}
        for parenthese in str1:
            if parenthese in pchar:
                stack.append(parenthese)
            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:
                return False
        return len(stack) == 0",human
762,"def check_monthnumber_number(monthnum3):
  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):
    return True
  else:
    return False",human
393,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)",human
773,"import re
def occurance_substring(text,pattern):
 for match in re.finditer(pattern, text):
    s = match.start()
    e = match.end()
    return (text[s:e], s, e)",human
918,"def coin_change(S, m, n): 
    table = [[0 for x in range(m)] for x in range(n+1)] 
    for i in range(m): 
        table[0][i] = 1
    for i in range(1, n+1): 
        for j in range(m): 
            x = table[i - S[j]][j] if i-S[j] >= 0 else 0
            y = table[i][j-1] if j >= 1 else 0 
            table[i][j] = x + y   
    return table[n][m-1] ",human
229,"def rearrange(arr):
    i = -1
    for j in range(len(arr)):
        if arr[j] < 0:
            i += 1
            arr[i],arr[j] = arr[j],arr[i]
    return arr",lm
72,"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False",human
655,"def fifth_Power_Sum(n) : 
    sm = 0 
    for i in range(1,n+1) : 
        sm = sm + (i*i*i*i*i) 
    return sm ",human
802,"def count_Rotation(arr,n):   
    for i in range (1,n): 
        if (arr[i] < arr[i - 1]): 
            return i  
    return 0",human
124,"import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle",human
368,"def repeat_tuples(test_tup, N):
  res = ((test_tup, ) * N)
  return (res) ",human
846,"3
def find_platforms(arrival, departure):
    """"""
    Finds the minimum number of platforms required for a railway/bus station.

    Parameters:
    arrival: list of arrival times of trains/buses
    departure: list of departure times of trains/buses

    Returns:
    minimum number of platforms required
    """"""

    arrival.sort()
    departure.sort()

    platforms = 0
    max_platforms = 0
    i = 0
    j = 0

    while i < len(arrival) and j < len(departure):

        if arrival[i] <= departure[j]:

            platforms += 1
            max_platforms = max(max_platforms, platforms)
            i += 1

        else:

            platforms -= 1
            j += 1

    return max_platforms",lm
146,"def ascii_value(string):
    ascii_sum = 0
    for char in string:
        ascii_sum += ord(char)
    return ascii_sum",lm
762,"def check_30_days(month_number):
    """"""
    This function checks whether the given month number contains 30 days or not.

    Args:
    month_number: The month number to check.

    Returns:
    True if the month number contains 30 days, False otherwise.
    """"""

    if month_number in [4, 6, 9, 11]:
        return True
    else:
        return False",lm
798,"def _sum(arr):  
    sum=0
    for i in arr: 
        sum = sum + i      
    return(sum)  ",human
624,"def to_upper(s):
    """"""Converts the given string to upper case.

    Args:
    s: The string to convert to upper case.

    Returns:
    The string in upper case.
    """"""

    return s.upper()",lm
162,"def summation(n):
    sum = 0
    while n>0:
        sum += n
        n -= 2
    return sum",lm
6,"def is_Power_Of_Two (x): 
    return x and (not(x & (x - 1))) 
def differ_At_One_Bit_Pos(a,b): 
    return is_Power_Of_Two(a ^ b)",human
55,"import math
def tn_gp(a,n,r):
  tn = a * (math.pow(r, n - 1))
  return tn",human
600,"def check_even(n):
    return (n&1) == 0",lm
739,"def triangular_number(n):
    low = 1
    high = int(1e14)
    ans = -1
    while low <= high:
        mid = (low + high) // 2
        t = mid * (mid + 1) // 2
        len_t = len(str(t))
        if len_t == n:
            ans = mid
            high = mid - 1
        elif len_t < n:
            low = mid + 1
        else:
            high = mid - 1
    return ans",lm
804,"def is_Product_Even(arr,n): 
    for i in range(0,n): 
        if ((arr[i] & 1) == 0): 
            return True
    return False",human
454,"import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
670,"def decreasing_trend(nums):
    if (sorted(nums)== nums):
        return True
    else:
        return False",human
115,"def check_empty_dicts(list_of_dicts):
    return all(not bool(d) for d in list_of_dicts)",lm
588,"def big_diff(nums):
     diff= max(nums)-min(nums)
     return diff",human
616,"def modulo_tuple_elements(tuple1, tuple2):
     result_tuple = tuple(x % y for x, y in zip(tuple1, tuple2))
     return result_tuple",lm
376,"def remove_replica(test_tup):
  temp = set()
  res = tuple(ele if ele not in temp and not temp.add(ele) 
				else 'MSP' for ele in test_tup)
  return (res)",human
238,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ",human
613,"def maximum_value(test_list):
  res = [(key, max(lst)) for key, lst in test_list]
  return (res) ",human
312,"import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume",human
579,"def find_dissimilar(test_tup1, test_tup2):
  res = tuple(set(test_tup1) ^ set(test_tup2))
  return (res) ",human
330,"3
import re

def find_words(string):
    pattern = r""\b[a-zA-Z]{3,5}\b""
    matches = re.findall(pattern, string)
    return matches",lm
241,"def array_3d(m,n,o):
 array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]
 return array_3d",human
336,"def check_monthnum(monthname1):
  if monthname1 == ""February"":
    return True
  else:
    return False",human
763,"def find_Min_Diff(arr,n): 
    arr = sorted(arr) 
    diff = 10**20 
    for i in range(n-1): 
        if arr[i+1] - arr[i] < diff: 
            diff = arr[i+1] - arr[i]  
    return diff ",human
282,"def SubtractLists(list1, list2): 
      result = map(lambda x, y: x - y, list1, list2) 
      return list(result)",lm
468,"def max_product(arr, n ): 
	mpis =[0] * (n) 
	for i in range(n): 
		mpis[i] = arr[i] 
	for i in range(1, n): 
		for j in range(i): 
			if (arr[i] > arr[j] and
					mpis[i] < (mpis[j] * arr[i])): 
						mpis[i] = mpis[j] * arr[i] 
	return max(mpis)",human
159,"def print_season(month, day):
    seasons = [(""Spring"", (3, 20), (6, 20)),
               (""Summer"", (6, 21), (9, 22)),
               (""Autumn"", (9, 23), (12, 20)),
               (""Winter"", (12, 21), (3, 19))]
    for name, start, end in seasons:
        if start <= (month, day) <= end:
            print(name)
            break",lm
513,"def add_str(test_tup, K):
  res = [ele for sub in test_tup for ele in (sub, K)]
  return (res) ",human
971,"def max_segments(n, a, b, c):
    """"""
    Find the maximum number of segments of lengths a, b and c that can be formed from n.
    """"""
    dp = [[-1] * (n + 1) for _ in range(4)]
    dp[0][0] = 0

    for i in range(1, 4):
        for j in range(n + 1):
            dp[i][j] = dp[i - 1][j]
            if j - a >= 0:
                dp[i][j] = max(dp[i][j], dp[i][j - a] + 1)
            if j - b >= 0:
                dp[i][j] = max(dp[i][j], dp[i][j - b] + 1)
            if j - c >= 0:
                dp[i][j] = max(dp[i][j], dp[i][j - c] + 1)

    return dp[3][n]",lm
316,"def l_bin_search(arr, x):
    low, high = 0, len(arr) - 1
    last = -1
    while low <= high:
        mid = low + (high - low) // 2
        if arr[mid] == x:
            last = mid
            low = mid + 1
        elif arr[mid] > x:
            high = mid - 1
        else:
            low = mid + 1
    return last",lm
474,"def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2",human
806,"def find_max_run_of_uppercase(s: str) -> int:
    count = 0
    ma = 0
    for i in range(len(s)):
        if s[i].isupper():
            count += 1
        else:
            ma = max(ma, count)
            count = 0
    return max(ma, count)",lm
490,"3
def find_symmetric_pairs(tuple_list): 
    result = [] 
    for i in range(len(tuple_list)): 
        for j in range(i+1, len(tuple_list)): 
            if tuple_list[i] == tuple(reversed(tuple_list[j])): 
                result.append((tuple_list[i], tuple_list[j])) 
    return result",lm
689,"def min_jumps(arr, n):
	jumps = [0 for i in range(n)]
	if (n == 0) or (arr[0] == 0):
		return float('inf')
	jumps[0] = 0
	for i in range(1, n):
		jumps[i] = float('inf')
		for j in range(i):
			if (i <= j + arr[j]) and (jumps[j] != float('inf')):
				jumps[i] = min(jumps[i], jumps[j] + 1)
				break
	return jumps[n-1]",human
718,"def alternative_list(list1):  
  list2 = []  
  for i in range(0, len(list1), 2):  
      list2.append(list1[i])  
  return list2",lm
661,"def max_sum_excluding_consecutive(arr):
      if not arr:
              return 0
      dp = [ [0] * 3 for _ in range(len(arr) + 1) ]
      dp[1][0] = arr[0]
      dp[1][1] = 0
      dp[1][2] = 0
      for i in range(2, len(arr) + 1):
              dp[i][0] = max(dp[i - 1][0], dp[i - 1][1], dp[i - 1][2])
              dp[i][1] = max(dp[i - 1][0], dp[i - 1][2]) + arr[i - 1]
              dp[i][2] = dp[i - 1][1] + arr[i - 1]
      return max(dp[len(arr)][0], dp[len(arr)][1], dp[len(arr)][2])",lm
431,"def check_common_element(list1, list2):
    result = False
    for x in list1:
        if x in list2:
            result = True
            break
    return result",lm
576,"def is_Sub_Array(A,B,n,m): 
    i = 0; j = 0; 
    while (i < n and j < m):  
        if (A[i] == B[j]): 
            i += 1; 
            j += 1; 
            if (j == m): 
                return True;  
        else: 
            i = i - j + 1; 
            j = 0;       
    return False; ",human
361,"def remove_empty(list1):
  remove_empty = [x for x in list1 if x]
  return remove_empty",human
133,"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)",human
284,"def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element",human
299,"from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])",human
889,"def reverse_list_lists(lists):
    for l in lists:
        l.sort(reverse = True)
    return lists ",human
151,"def gcd(p,q):
    while q != 0:
        p, q = q,p%q
    return p
def is_coprime(x,y):
    return gcd(x,y) == 1",human
521,"def check_isosceles(x,y,z):
  if x!=y & y!=z & z!=x:
	   return True
  else:
     return False",human
691,"def group_by_second(list1): 
  dict1 = {} 
  for (key, value) in list1: 
    if value not in dict1: 
      dict1[value] = [key] 
    else: 
      dict1[value].append(key) 
  return dict1",lm
137,"from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",human
131,"def reverse_vowels(s):
        vowels = [ch for ch in s if ch in 'AEIOUaeiou']
        res = """"
        j = len(vowels) - 1
        for i in range(len(s)):
                if s[i] in 'AEIOUaeiou':
                        res += vowels[j]
                        j -= 1
                else:
                        res += s[i]
        return res",lm
881,"def sum_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even+first_odd)",human
3,"def is_not_prime(n):
    if n <= 1:
        return True
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return True
    return False",lm
594,"def diff_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even-first_odd)",human
205,"def invert_tuple_list(test_list):
  res = [] 
  for sub in test_list: 
    res.append(tuple(sub[::-1])) 
  return res",lm
7,"import re
def find_char_long(text):
  return (re.findall(r""\b\w{4,}\b"", text))",human
215,"def decode_rle(rle_list):
    decoded_list = []
    i = 0
    while i < len(rle_list):
        count = rle_list[i]
        value = rle_list[i + 1]
        decoded_list.extend([value] * count)
        i += 2
    return decoded_list",lm
594,"def diff_even_odd(lst): 
    even = 0
    odd = 0
    for num in lst:
        if num % 2 == 0:
            even = num
            break
    for num in lst:
        if num % 2 != 0:
            odd = num
            break
    return even - odd",lm
573,"def findProduct(a): 
    a.sort() 
    n = len(a) 
    product = 1
    for i in range(0, n): 
        if (i == 0 or a[i] != a[i - 1]): 
            product *= a[i] 
    return product",lm
339,"def find_Divisor(x,y):  
    if (x==y): 
        return y 
    return 2",human
647,"import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))",human
138,"def isPowerOfTwo(n):
  if (int(n) <= 0):
      return False
  while (n % 2 == 0):
      n = int(n / 2)
  return (n == 1)",lm
369,"def lateralsurface_cuboid(l,w,h):
  LSA = 2*h*(l+w)
  return LSA",human
612,"def merge(lst):  
    return [list(ele) for ele in list(zip(*lst))] ",human
534,"import re
def search_literal(pattern,text):
 match = re.search(pattern, text)
 s = match.start()
 e = match.end()
 return (s, e)",human
821,"def merge_dict(dict1, dict2):
    """""" Merge two dictionaries into a single expression. """"""
    return {**dict1, **dict2}",lm
109,"def countOddRotations(n):
    count = 0
    for i in range(len(n)):
        temp = ''
        for j in range(i, len(n)):
            temp += n[j]
        for j in range(0, i):
            temp += n[j]
        sum = 0
        for j in temp:
            sum += int(j)
        if sum % 2 != 0:
            count += 1
    return count",lm
270,"def even_sum_even_pos(n: int) -> int:
    """"""Write a python function to find the sum of even numbers at even positions.""""""
    sum = 0
    for i in range(2, n + 1, 2):
        if i % 2 == 0:
            sum += i
    return sum",lm
86,"def hex_total(n): 
    return (n*(2*n - 1))",lm
429,"def extract_elements_and_tuples(tuple1, tuple2):
    result = []
    for i, j in zip(tuple1, tuple2):
        result.append((i, j))
    return result",lm
190,"def count_Intgral_Points(x1,y1,x2,y2): 
    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",human
674,"from collections import OrderedDict
def remove_duplicate(string):
  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())
  return result",human
769,"def Diff(li1,li2):
    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))
 ",human
848,"def trapezium_area(b1, b2, h):
    return 0.5 * (b1 + b2) * h",lm
847,"def lcopy(xs):
  return xs[:]
",human
401,"def add_nested_tuples(tuple1, tuple2):
    result = tuple(a + b for a, b in zip(tuple1, tuple2))
    return result",lm
882,"def parallelogram_perimeter(b,h):
  perimeter=2*(b*h)
  return perimeter",human
96,"def num_divisors(n):
    divisors = 0
    for i in range(1, int(n**.5)+1):
        if n % i == 0:
            divisors += 2
            if i * i == n:
                divisors -= 1
    return divisors",lm
176,"def find_perimeter(a,b,c):
    return int(a+b+c)",lm
457,"def Find_Min(lst): 
    minList = min((x) for x in lst) 
    return minList",human
383,"def toggle_odd_bits(n):
    return ((1<<1)-1) ^ n",lm
164,"def sum_divisors_same(nums):
    return all(sum(1 for j in range(1, i // 2 + 1) if i % j == 0) == sum(1 for j in range(1, (i + 1) // 2 + 1) if (i + 1) % j == 0) for i in nums)",lm
368,"def repeat_tuple(test_tuple, n): 
  res = tuple(test_tuple * n) 
  return (res)",lm
283,"def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True",human
236,"def maxEquilateralTriangles(n):
    if n < 3:
        return 0
    return int((n * (n - 1) * (n - 2)) / 6)",lm
436,"def negative_numbers(list1):
    neg_nums = [num for num in list1 if num < 0]
    print(""Negative numbers in the list: "", neg_nums)",lm
862,"from collections import Counter
import re
def n_common_words(text,n):
  words = re.findall('\w+',text)
  n_common_words= Counter(words).most_common(n)
  return list(n_common_words)",human
50,"lambda x: sorted(x, key=len)[0]",lm
841,"def count_inversions(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                count += 1
    return count",lm
452,"def calculate_loss(amount: float) -> float:
    """"""Calculates the loss amount if the given amount has a loss, else returns None.""""""
    if amount < 0:
        return abs(amount)
    else:
        return None",lm
119,"def search(arr,n) :
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)",human
4,"import heapq

def find_largest_integers(nums, k):
  """"""Find the k largest integers from a given list of numbers using heap queue algorithm.""""""

  # Initialize a heap with the first k elements of the list.
  heap = nums[:k]
  heapq.heapify(heap)

  # For the remaining elements of the list, if an element is larger than the smallest element in the heap,
  # remove the smallest element and add the larger element to the heap.
  for i in range(k, len(nums)):
    if nums[i] > heap[0]:
      heapq.heappushpop(heap, nums[i])

  # The heap now contains the k largest elements of the list.
  return heap",lm
65,"def sumList(lst):
    if not lst:
        return 0
    else:
        return lst[0] + sumList(lst[1:])",lm
826,"def check_Type_Of_Triangle(a,b,c): 
    sqa = pow(a,2) 
    sqb = pow(b,2) 
    sqc = pow(c,2) 
    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): 
        return (""Right-angled Triangle"") 
    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): 
        return (""Obtuse-angled Triangle"") 
    else: 
        return (""Acute-angled Triangle"") ",human
617,"def find_vertical_jumps(d):
  if d == 0:
    return 0
  if d < 0 or d % 2 == 1:
    return -1
  left, right = 0, d
  while left <= right:
    mid = left + (right - left) // 2
    if (d - mid) % 2 == 0 and (d - mid) // 2 >= mid:
      return mid
    elif (d - mid) % 2 == 0 and (d - mid) // 2 < mid:
      right = mid - 1
    else:
      left = mid + 1
  return -1",lm
657,"import math 
def first_Digit(n) : 
    fact = 1
    for i in range(2,n + 1) : 
        fact = fact * i 
        while (fact % 10 == 0) :  
            fact = int(fact / 10) 
    while (fact >= 10) : 
        fact = int(fact / 10) 
    return math.floor(fact) ",human
950,"def getzodiac(year):
    zodiac = [""Rat"", ""Ox"", ""Tiger"", ""Rabbit"", ""Dragon"", ""Snake"", ""Horse"", ""Goat"", ""Monkey"", ""Rooster"", ""Dog"", ""Pig""]
    return zodiac[year % 12]",lm
812,"def abbreviate_road(text):
    text = text.replace('road', 'rd.')
    return text",lm
446,"def count_occurrences(list_in_tuple):
    """"""Counts the occurrence of all elements of list in a tuple.""""""
    result = {}
    for element in list_in_tuple:
        if element in result:
            result[element] += 1
        else:
            result[element] = 1
    return result",lm
875,"3
def find_min_difference(tuples):
    minDiff = float('inf')
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            diff = abs(tuples[i][0] - tuples[j][0])
            if diff < minDiff:
                minDiff = diff
    return minDiff",lm
522,"def lbs(arr): 
	n = len(arr) 
	lis = [1 for i in range(n+1)] 
	for i in range(1 , n): 
		for j in range(0 , i): 
			if ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): 
				lis[i] = lis[j] + 1
	lds = [1 for i in range(n+1)] 
	for i in reversed(range(n-1)): 
		for j in reversed(range(i-1 ,n)): 
			if(arr[i] > arr[j] and lds[i] < lds[j] + 1): 
				lds[i] = lds[j] + 1
	maximum = lis[0] + lds[0] - 1
	for i in range(1 , n): 
		maximum = max((lis[i] + lds[i]-1), maximum) 
	return maximum",human
705,"def sort_by_length_and_value(input_list):
    return sorted(input_list, key=lambda x: (len(x), x[0]))",lm
786,"import bisect
def right_insertion(a, x):
    i = bisect.bisect_right(a, x)
    return i",human
35,"def find_rect_num(n):
  return n*(n + 1) ",human
783,"def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v",human
438,"def count_bidirectional_tuple_pairs(edges):
    graph = {}
    for edge in edges:
        if edge[0] not in graph:
            graph[edge[0]] = set()
        graph[edge[0]].add(edge[1])
        if edge[1] not in graph:
            graph[edge[1]] = set()
        graph[edge[1]].add(edge[0])

    count = 0
    for node in graph:
        for neighbor in graph[node]:
            if neighbor in graph and node in graph[neighbor]:
                count += 1

    return count // 2",lm
197,"def power_tuple(base_tup, exp_tup): 
    """""" 
    Perform the exponentiation of the given two tuples. 
    """""" 
    res = [] 
    for i in range(len(base_tup)): 
        res.append(base_tup[i] ** exp_tup[i]) 
    return tuple(res)",lm
844,"def kth_element(arr, k):
    odd, even = [], []
    for num in arr:
        if num % 2 == 1:
            odd.append(num)
        else:
            even.append(num)
    if k <= len(odd):
        return odd[k - 1]
    return even[k - len(odd) - 1]",lm
200,"def position_max(list1):
    max_val = max(list1)
    max_result = [i for i, j in enumerate(list1) if j == max_val]
    return max_result",human
12,"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result",human
606,"import math
def radian_degree(degree):
 radian = degree*(math.pi/180)
 return radian",human
214,"import math
def degree_radian(radian):
 degree = radian*(180/math.pi)
 return degree",human
953,"def subset(ar, n): 
    res = 0
    ar.sort() 
    for i in range(0, n) : 
        count = 1
        for i in range(n - 1): 
            if ar[i] == ar[i + 1]: 
                count+=1
            else: 
                break 
        res = max(res, count)  
    return res ",human
166,"def count_pairs(nums):
    XOR = 0
    freq = {}
    ans = 0
    for el in nums:
        XOR ^= el
        if XOR in freq:
            ans += freq[XOR]
        freq[XOR] = freq.get(XOR, 0) + 1
    return ans",lm
414,"def overlapping(list1,list2):  
    c=0
    d=0
    for i in list1: 
        c+=1
    for i in list2: 
        d+=1
    for i in range(0,c): 
        for j in range(0,d): 
            if(list1[i]==list2[j]): 
                return 1
    return 0",human
326,"from collections import defaultdict 

def most_occurrences(test_list):
  temp = defaultdict(int)
  for sub in test_list:
    for wrd in sub.split():
      temp[wrd] += 1
  res = max(temp, key=temp.get)
  return (str(res)) ",human
405,"def check_element_in_tuple(test_tup, ele): 
  res = ele in test_tup 
  return (res)",lm
140,"def find_singles(test_tup):
  res = [] 
  for ele in test_tup: 
    if test_tup.count(ele) == 1: 
      res.append(ele) 
  return (res)",lm
910,"import datetime
def check_date(m, d, y):
    try:
        m, d, y = map(int, (m, d, y))
        datetime.date(y, m, d)
        return True
    except ValueError:
        return False",human
922,"def max_product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return None     
    x = arr[0]; y = arr[1]    
    for i in range(0, arr_len): 
        for j in range(i + 1, arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y   ",human
891,"def check_digits(x, y):
    x = str(x)
    y = str(y)
    if len(x) == len(y):
        return True
    else:
        return False",lm
934,"def delannoy(n):
    dp=[[0 for i in range(n+1)]for j in range(n+1)]
    dp[0][0]=1
    for i in range(1,n+1):
        for j in range(i+1):
            dp[i][j]+=dp[i-1][j]
            if j>0:
               dp[i][j]+=dp[i][j-1]
    return dp[n][n]",lm
237,"3
def check_occurrences(lst):
    new_lst = sorted(lst, key = lambda x:x[1])
    res = []
    for i in range(len(new_lst)-1):
        if new_lst[i][1] == new_lst[i+1][1]:
            res.append(new_lst[i])
    return res",lm
136,"def calculate_electricity_bill(units_consumed):
  """"""Calculates the electricity bill based on the units consumed.

  Args:
    units_consumed: The number of units of electricity consumed.

  Returns:
    The total electricity bill amount in rupees.
  """"""

  # Define the electricity tariff slabs and their corresponding rates.
  tariff_slabs = [
      (0, 100, 4.5),
      (101, 200, 5.5),
      (201, 300, 6.5),
      (301, 400, 7.5),
      (401, 500, 8.5),
      (501, 600, 9.5),
      (601, 700, 10.5),
      (701, 800, 11.5),
      (801, 900, 12.5),
      (901, 1000, 13.5),
      (1001, 1100, 14.5),
      (1101, 1200, 15.5),
      (1201, 1300, 16.5),
      (1301, 1400, 17.5),
      (1401, 1500, 18.5),
      (1501, 1600, 19.5),
      (1601, 1700, 20.5),
      (1701, 1800, 21.5),
      (1801, 1900, 22.5),
      (1901, 2000, 23.5),
      (2001, 2100, 24.5),
      (2101, 2200, 25.5),
      (2201, 2300, 26.5),
      (2301, 2400, 27.5),
      (2401, 2500, 28.5),
      (2501, 2600, 29.5),
      (2601, 2700, 30.5),
      (2701, 2800, 31.5),
      (2801, 2900, 32.5),
      (2901, 3000, 33.5),
      (3001, 3100, 34.5),
      (3101, 3200, 35.5),
      (3201, 3300, 36.5),
      (3301, 3400, 37.5),
      (3401, 3500, 38.5),
      (3501, 3600, 39.5),
      (3601, 3700, 40.5),
      (3701, 3800, 41.5),
      (3801, 3900, 42.5),
      (3901, 4000, 43.5),
      (4001, 4100, 44.5),
      (4101, 4200, 45.5),
      (4201, 4300, 46.5),
      (4301, 4400, 47.5),
      (4401, 4500, 48.5),
      (4501, 4600, 49.5),
      (4601, 4700, 50.5),
      (4701, 4800, 51.5),
      (4801, 4900, 52.5),
      (4901, 5000, 53.5)
  ]

  # Initialize the total bill amount.
  total_bill_amount = 0

  # Iterate through the tariff slabs to calculate the bill amount for each slab.
  for slab in tariff_slabs:
    # Get the lower and upper limits of the current slab.
    lower_limit, upper_limit, rate = slab

    # Calculate the units consumed in the current slab.
    units_in_slab = min(units_consumed, upper_limit) - lower_limit

    # If units are consumed in the current slab, calculate the bill amount for the slab.
    if units_in_slab > 0:
      bill_amount_for_slab = units_in_slab * rate

      # Add the bill amount for the current slab to the total bill amount.
      total_bill_amount += bill_amount_for_slab

    # Decrement the units consumed by the units consumed in the current slab.
    units_consumed -= units_in_slab

    # If all units are consumed, break out of the loop.
    if units_consumed == 0:
      break

  # Add the fixed charges to the total bill amount.
  total_bill_amount += 100

  # Return the total electricity bill amount.
  return total_bill_amount",lm
960,"def tiling(n): 
    if n == 0 or n == 1: 
        return 1
    return tiling(n - 1) + tiling(n - 2)",lm
808,"def check_K(test_tup, K):
  res = False
  for ele in test_tup:
    if ele == K:
      res = True
      break
  return (res) ",human
482,"3
import re

def find_sequences(string):
  """"""
  Find sequences of one upper case letter followed by lower case letters in the
  given string by using regex.

  Args:
    string: The string to search.

  Returns:
    A list of the sequences found.
  """"""

  pattern = r'[A-Z][a-z]+'
  matches = re.findall(pattern, string)
  return matches",lm
54,"def counting_sort(my_list):
    max_value = 0
    for i in range(len(my_list)):
        if my_list[i] > max_value:
            max_value = my_list[i]
    buckets = [0] * (max_value + 1)
    for i in my_list:
        buckets[i] += 1
    i = 0
    for j in range(max_value + 1):
         for a in range(buckets[j]):
             my_list[i] = j
             i += 1
    return my_list",human
182,"import re

def find_regex(text):
  result = re.findall(r""([A-Z]+)"", text)
  print(""Uppercase letters:"", result)

  result = re.findall(r""([a-z]+)"", text)
  print(""Lowercase letters:"", result)

  result = re.findall(r""([^a-zA-Z0-9])"", text)
  print(""Special characters:"", result)

  result = re.findall(r""([0-9]+)"", text)
  print(""Numeric values:"", result)",lm
635,"import heapq as hq
def heap_sort(iterable):
    h = []
    for value in iterable:
        hq.heappush(h, value)
    return [hq.heappop(h) for i in range(len(h))]",human
771,"from collections import deque
def check_expression(exp):
    if len(exp) & 1:
        return False
    stack = deque()
    for ch in exp:
        if ch == '(' or ch == '{' or ch == '[':
            stack.append(ch)
        if ch == ')' or ch == '}' or ch == ']':
            if not stack:
                return False
            top = stack.pop()
            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):
                return False
    return not stack",human
800,"def remove_whitespaces(string):
  return ''.join(string.split())",lm
38,"def division_even_odd(lst):
    even = []
    odd = []
    for num in lst:
        if num % 2 == 0:
            even.append(num)
        else:
            odd.append(num)
    if len(even) == 0 or len(odd) == 0:
        return 0 
    else:
        return even[0] / odd[0]",lm
796,"def return_sum(dict):
  sum = 0
  for i in dict.values():
    sum = sum + i
  return sum",human
638,"import math
def wind_chill(v,t):
 windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)
 return int(round(windchill, 0))",human
56,"def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ",human
634,"def sum_of_fourth_power_even(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i)**4
    return sum",lm
233,"def lateral_surface_area(radius, height):
    """"""Returns the lateral surface area of a cylinder.""""""
    return 2 * 3.14 * radius * height",lm
831,"def count_equal_element_pairs(nums): 
  """"""Count equal element pairs from the given array.""""""
  count = 0
  dict = {}
  for num in nums:
    dict[num] = dict.get(num, 0) + 1
  for num in dict:
    count += dict[num] * (dict[num] - 1) // 2
  return count",lm
286,"def max_subarray_sum_k_times(arr, k):
    largest_sum = float('-inf')
    current_sum = 0
    for i in range(k):
        for j in range(len(arr)):
            current_sum += arr[j]
            largest_sum = max(largest_sum, current_sum)
            if current_sum < 0:
                current_sum = 0
    return largest_sum",lm
894,"def float_to_tuple(test_str):
  res = tuple(map(float, test_str.split(', ')))
  return (res) ",human
211,"def count_n_both_bits(n, m):
    count = 0
    for i in range(n):
        if (i >> m) & 1 and (i >> 0) & 1:
            count += 1
    return count",lm
626,"def triangle_area(r) :  
    if r < 0 : 
        return -1
    return r * r ",human
274,"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ",human
185,"def find_focus(a, b, c):
    """"""Find the focus of a parabola.""""""
    if a == 0:
        raise ValueError(""Coefficient 'a' cannot be zero."")
    x = -b / (2 * a)
    y = a * x ** 2 + b * x + c + b ** 2 / (4 * a)
    return (x, y)",lm
470,"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",human
700,"def count_in_range(lst, min, max):
  count = 0
  for element in lst:
    if element >= min and element <= max:
      count += 1
  return count",lm
292,"def find_quotient(numerator, denominator):
    quotient = numerator // denominator
    return quotient",lm
641,"def nonagonal_number(n):
    return n * (7 * n - 5)",lm
227,"def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest ",human
63,"def max_diff_pair(test_tup):
  res = max([abs(i - j) for i in test_tup for j in test_tup])
  return (res)",lm
305,"def find_matching_words_starting_with_p(words):
    return [word for word in words if word[0] == 'p' and len(word) > 1]",lm
968,"def find_max_periodic_function(function, period, x_range):
    """"""Finds maximum possible value for the given periodic function.

    Args:
        function: The periodic function to be evaluated.
        period: The period of the function.
        x_range: The range of x values to be evaluated.

    Returns:
        The maximum possible value of the function.
    """"""

    # Find the maximum value of the function in the given range.
    max_value = max(function(x) for x in x_range)

    # Find the next period of the function.
    next_period = max_value + period

    # Find the maximum value of the function in the next period.
    next_max_value = max(function(x) for x in range(max_value + 1, next_period))

    # Return the maximum of the two values.
    return max(max_value, next_max_value)",lm
479,"def first_digit(n):
    while n >= 10:
        n //= 10
    return n",lm
321,"def find_demlo(s): 
	l = len(s) 
	res = """" 
	for i in range(1,l+1): 
		res = res + str(i) 
	for i in range(l-1,0,-1): 
		res = res + str(i) 
	return res 	",human
704,"def harmonic_sum(n):
    """"""
    Calculate the harmonic sum of n-1.

    Args:
    n: The number to calculate the harmonic sum of.

    Returns:
    The harmonic sum of n-1.
    """"""

    harmonic_sum = 0.0
    for i in range(1, n):
        harmonic_sum += 1.0 / i
    return harmonic_sum",lm
960,"def get_noOfways(n):
    if (n == 0):
        return 0;
    if (n == 1):
        return 1; 
    return get_noOfways(n - 1) + get_noOfways(n - 2);",human
725,"import re

def extract_values_between_quotation_marks(text):
    """"""Extract values between quotation marks of the given string by using regex.""""""

    # Compile the regex pattern
    pattern = r'""([^""]*)""'

    # Find all matches of the pattern in the text
    matches = re.findall(pattern, text)

    # Remove quotation marks from the matches
    return [match[1:-1] for match in matches]",lm
154,"def specified_element(nums, N):
    result = [i[N] for i in nums]
    return result",human
379,"def surface_area_cuboid(l, w, h):
    return 2 * (l * w + w * h + h * l)",lm
666,"def count_char(string,char):
 count = 0
 for i in range(len(string)):
    if(string[i] == char):
        count = count + 1
 return count",human
432,"import math

def median_trapezium(a, b, c, d):
  """"""
  Calculate the median of a trapezoid.

  Args:
    a: The length of the first parallel side.
    b: The length of the second parallel side.
    c: The length of the third side.
    d: The length of the fourth side.

  Returns:
    The median of the trapezoid.
  """"""

  # Calculate the area of the trapezoid.
  area = (a + b) / 2 * math.sqrt(c ** 2 - ((b - a) / 2) ** 2)

  # Calculate the length of the median.
  median = 2 * area / (a + b)

  return median",lm
574,"def surfacearea_cylinder(r,h):
  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))
  return surfacearea",human
301,"def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0",human
385,"def get_perrin(n):
  if (n == 0):
    return 3
  if (n == 1):
    return 0
  if (n == 2):
    return 2 
  return get_perrin(n - 2) + get_perrin(n - 3)",human
115,"def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit",human
665,"def shift_to_end(lst):
    return lst[1:] + [lst[0]]",lm
75,"def find_tuples_divisible_by_k(lst, k):
    result = []
    for tup in lst:
        if all(x % k == 0 for x in tup):
            result.append(tup)
    return result",lm
295,"def sum_of_divisors(n): 
    sum = 0
    # Find all divisors and add them
    i = 1
    while i * i <= n:
        if n % i == 0:
            sum += i
            if n // i != i:
                sum += n // i
        i += 1
    return sum",lm
940,"def heap_sort(arr):
    heapify(arr)  
    end = len(arr) - 1
    while end > 0:
        arr[end], arr[0] = arr[0], arr[end]
        shift_down(arr, 0, end - 1)
        end -= 1
    return arr

def heapify(arr):
    start = len(arr) // 2
    while start >= 0:
        shift_down(arr, start, len(arr) - 1)
        start -= 1
def shift_down(arr, start, end):
    root = start
    while root * 2 + 1 <= end:
        child = root * 2 + 1
        if child + 1 <= end and arr[child] < arr[child + 1]:
            child += 1
        if child <= end and arr[root] < arr[child]:
            arr[root], arr[child] = arr[child], arr[root]
            root = child
        else:
            return
",human
811,"def check_identical(test_list1, test_list2):
  res = test_list1 == test_list2
  return (res) ",human
289,"def num_odd_days(year):
    start_day = 1
    for month in range(1, 13):
        if month in [1, 3, 5, 7, 8, 10, 12]:
            start_day += 31
        elif month == 2:
            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
                start_day += 29
            else:
                start_day += 28
        else:
            start_day += 30
    odd_days = start_day % 7
    return odd_days",lm
719,"import re
def text_match(text):
        patterns = 'ab*?'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
111,"def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result",human
567,"def issort_list(list1):
    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))
    return result",human
660,"def find_Points(l1,r1,l2,r2): 
    x = min(l1,l2) if (l1 != l2) else -1
    y = max(r1,r2) if (r1 != r2) else -1
    return (x,y)",human
131,"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string",human
770,"def sum_fourth_power_odd(n): 
    return n*(n+1)*(2*n+1)*(3*n*n+3*n-1)//30",lm
857,"def list_strings_individually(input_list):
    return list(map(lambda string: string, input_list))",lm
59,"def oct_num(n): 
    return (n*(3*n - 2))
 
print(oct_num(7))",lm
700,"def count_range_in_list(li, min, max):
	ctr = 0
	for x in li:
		if min <= x <= max:
			ctr += 1
	return ctr",human
88,"def get_frequency(list1):
    dict1 = {}
    for ele in list1:
        if ele in dict1:
            dict1[ele] += 1
        else:
            dict1[ele] = 1
    return dict1",lm
466,"def find_peak_util(arr, low, high, n): 
	mid = low + (high - low)/2
	mid = int(mid) 
	if ((mid == 0 or arr[mid - 1] <= arr[mid]) and
		(mid == n - 1 or arr[mid + 1] <= arr[mid])): 
		return mid 
	elif (mid > 0 and arr[mid - 1] > arr[mid]): 
		return find_peak_util(arr, low, (mid - 1), n) 
	else: 
		return find_peak_util(arr, (mid + 1), high, n) 
def find_peak(arr, n): 
	return find_peak_util(arr, 0, n - 1, n) ",human
494,"def binary_to_integer(test_tup):
  res = int("""".join(str(ele) for ele in test_tup), 2)
  return (str(res)) ",human
751,"def is_heap(arr):
    for i in range(1, len(arr)):
        parent = (i-1)//2
        if arr[i] < arr[parent]:
            return False
    return True",lm
583,"def catalan_number(num):
    if num <=1:
         return 1   
    res_num = 0
    for i in range(num):
        res_num += catalan_number(i) * catalan_number(num-i-1)
    return res_num",human
672,"def max_of_three(num1,num2,num3): 
    if (num1 >= num2) and (num1 >= num3):
       lnum = num1
    elif (num2 >= num1) and (num2 >= num3):
       lnum = num2
    else:
       lnum = num3
    return lnum",human
173,"import re
def remove_splchar(text): 
 pattern = re.compile('[\W_]+')
 return (pattern.sub('', text))",human
364,"def make_flip(ch): 
	return '1' if (ch == '0') else '0'
def get_flip_with_starting_charcter(str, expected): 
	flip_count = 0
	for i in range(len( str)): 
		if (str[i] != expected): 
			flip_count += 1
		expected = make_flip(expected) 
	return flip_count 
def min_flip_to_make_string_alternate(str): 
	return min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",human
22,"def find_first_duplicate(nums):
    num_set = set()
    no_duplicate = -1

    for i in range(len(nums)):

        if nums[i] in num_set:
            return nums[i]
        else:
            num_set.add(nums[i])

    return no_duplicate",human
274,"def sum_binomial_even_index(n):
    """"""Find sum of even index binomial coefficients.""""""
    sum = 0
    for i in range(0, n + 1, 2):
        sum += binomial_coeff(n, i)
    return sum


def binomial_coeff(n, k):
    """"""Find binomial coefficient.""""""
    if k < 0 or k > n:
        return 0
    if k == 0 or k == n:
        return 1
    return binomial_coeff(n - 1, k - 1) + binomial_coeff(n - 1, k)",lm
30,"def countSubstringSameEnds(s: str) -> int:
    cnt = 0
    for i in range(len(s)):
        for j in range(i, len(s)):
            if s[i] == s[j]:
                cnt += 1
    return cnt",lm
268,"def star_number(n):
    return n**2 - n + 1",lm
290,"def find_max_length_list(l):
  max_len = 0
  result = []
  for i in l:
    if type(i) == list:
      if len(i) > max_len:
        max_len = len(i)
  for i in l:
    if type(i) == list:
      if len(i) == max_len:
        result.append(i)
  return result",lm
256,"def count_primes(n):
  if n < 2:
    return 0
  primes = [True] * (n + 1)
  primes[0] = primes[1] = False
  for i in range(2, int(n ** 0.5) + 1):
    if primes[i]:
      for j in range(i * i, n + 1, i):
        primes[j] = False
  return sum(primes)",lm
967,"def check_vowels(input):
    vowels = 'aeiou'
    return all([ch.lower() in vowels for ch in input])",lm
130,"def max_frequency(list1):
    dict1 = {}
    count = 0
    item = """"
    for item in list1:
        if item in dict1:
            dict1[item] += 1
        else:
            dict1[item] = 1
    for key, value in dict1.items():
        if value > count:
            count = value
            item = key
    return (item, count)",lm
621,"def increment_numerics(test_list, K):
  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]
  return res ",human
221,"def find_first_even(numbers):
    for num in numbers:
        if num % 2 == 0:
            return num
    return None",lm
737,"import re
def check_vowel(string):
  pattern = r""^[aeiouAEIOU]""
  if re.match(pattern, string):
    return True
  else:
    return False",lm
605,"def prime_num(num):
  if num >=1:
   for i in range(2, num//2):
     if (num % i) == 0:
                return False
     else:
                return True
  else:
          return False",human
952,"def nCrModp(n: int, r: int, p: int) -> int:
    if r > n:
        return 0
    fac = [1] * (n + 1)
    for i in range(2, n + 1):
        fac[i] = i * fac[i - 1]
    power = pow(10, 9 + len(str(fac[n])), p)
    return (fac[n] * pow(fac[r] * fac[n - r], power - 2, p)) % p",lm
654,"def rectangle_perimeter(length, width):
    return 2 * (length + width)",lm
397,"def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median",human
732,"import re
def replace_specialchar(text):
 return (re.sub(""[ ,.]"", "":"", text))",human
591,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp  
    return newList ",human
144,"def sum_Pairs(arr,n): 
    sum = 0
    for i in range(n - 1,-1,-1): 
        sum += i*arr[i] - (n-1-i) * arr[i] 
    return sum",human
643,"import re
def text_match_wordz_middle(text):
        patterns = '\Bz\B'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')",human
776,"def count_neighbors(string):
      '''Counts the number of characters in a string that have vowels as their neighbors.'''

      vowels = ""aeiouAEIOU""
      count = 0

      for i in range(1, len(string) - 1):
            if string[i-1] in vowels or string[i+1] in vowels:
                  count += 1

      return count",lm
803,"def is_Perfect_Square(n) :
    i = 1
    while (i * i<= n):
        if ((n % i == 0) and (n / i == i)):
            return True     
        i = i + 1
    return False",human
491,"import math
def sum_gp(a,n,r):
 total = (a * (1 - math.pow(r, n ))) / (1- r)
 return total",human
835,"def slope(x1,y1,x2,y2): 
    return (float)(y2-y1)/(x2-x1)  ",human
806,"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)",human
502,"def find(n,m):
  r = n%m
  return (r)",human
187,"def lcs(sequence1, sequence2):
    len1, len2 = len(sequence1), len(sequence2)
    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]
    for i in range(1, len1 + 1):
        for j in range(1, len2 + 1):
            if sequence1[i - 1] == sequence2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    return dp[len1][len2]",lm
353,"3
def remove_column(nested_list, column_index):
    new_list = []
    for lst in nested_list:
        new_lst = []
        for index, item in enumerate(lst):
            if index != column_index:
                new_lst.append(item)
        new_list.append(new_lst)
    return new_list",lm
549,"def sum_fifth_power_odd_natural_numbers(n):
    """"""
    Calculates the sum of fifth power of first n odd natural numbers.

    Args:
    n: The number of odd natural numbers to consider.

    Returns:
    The sum of fifth power of first n odd natural numbers.
    """"""
    sum = 0
    for i in range(1, n + 1):
        sum += (2 * i - 1) ** 5
    return sum",lm
451,"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))",human
616,"def tuple_modulo(test_tup1, test_tup2):
  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) 
  return (res) ",human
224,"def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count ",human
968,"def floor_Max(A,B,N):
    x = min(B - 1,N)
    return (A*x) // B",human
268,"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ",human
340,"def sum_of_three_lowest_positive(nums):
    """"""
    This function finds the sum of the three lowest positive numbers from a given list of numbers.

    Args:
        nums: A list of numbers.

    Returns:
        The sum of the three lowest positive numbers from the given list.
    """"""

    # Check if the list is empty.

    if not nums:
        return 0

    # Find the three lowest positive numbers in the list.

    lowest_positive_numbers = sorted(filter(lambda x: x > 0, nums))[:3]

    # Return the sum of the three lowest positive numbers.

    return sum(lowest_positive_numbers)",lm
39,"def checkRearrange(input):
  if not input:
    return False
  counts = {}
  for c in input:
    if c not in counts:
      counts[c] = 0
    counts[c] += 1
  
  maxCount = 0
  for c in counts:
    maxCount = max(maxCount, counts[c])
  
  return maxCount <= (len(input) + 1) / 2",lm
888,"def substract_elements(test_tup1, test_tup2):
  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",human
523,"def check_string(str1):
    messg = [
    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',
    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',
    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',
    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]
    result = [x for x in [i(str1) for i in messg] if x != True]
    if not result:
        result.append('Valid string.')
    return result  ",human
365,"def count_digits(n):
    count = 0
    if n == 0:
        return 1
    while n > 0:
        n //= 10
        count += 1
    return count",lm
94,"from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ",human
461,"def count_upper_case(string):
  count = 0
  for char in string:
    if char.isupper():
      count += 1
  return count",lm
258,"lambda_odd_count = lambda a: len(list(filter(lambda x: x % 2 != 0, a)))",lm
485,"def is_palindrome(n) : 
	divisor = 1
	while (n / divisor >= 10) : 
		divisor *= 10
	while (n != 0) : 
		leading = n // divisor 
		trailing = n % 10
		if (leading != trailing) : 
			return False
		n = (n % divisor) // 10
		divisor = divisor // 100
	return True
def largest_palindrome(A, n) : 
	A.sort() 
	for i in range(n - 1, -1, -1) : 
		if (is_palindrome(A[i])) : 
			return A[i] 
	return -1",human
472,"def is_consecutive(nums):
    """"""Check if the given list contains consecutive numbers or not.""""""
    if len(nums) <= 1:
        return True

    nums.sort()
    for i in range(1, len(nums)):
        if nums[i] - nums[i-1] != 1:
            return False

    return True",lm
194,"def octal_to_decimal(octal_num):
    decimal_num = 0
    i = 0
    while octal_num != 0:
        decimal_num += (octal_num % 10) * (8 ** i)
        octal_num //= 10
        i += 1
    return decimal_num",lm
78,"def count_With_Odd_SetBits(n): 
    if (n % 2 != 0): 
        return (n + 1) / 2
    count = bin(n).count('1') 
    ans = n / 2
    if (count % 2 != 0): 
        ans += 1
    return ans ",human
417,"3
def find_common_first_element(list_of_tuples):
  if not list_of_tuples:
    return ""Input list is empty""

  first_elements = [item[0] for item in list_of_tuples]
  common_element = first_elements[0]
  for element in first_elements[1:]:
    if element != common_element:
      return ""No common first element found""

  return common_element",lm
959,"def avg(lst):
  return sum(lst)/len(lst)",lm
339,"def max_divisor_in_interval(start, end, num):
    mxm = 0
    ans = 0
    for i in range(start, end+1):
        if i%num==0:
            mxm = max(mxm, i)
    return mxm",lm
602,"def first_repeating_char(string):
    char_dict = {} 
    for char in string: 
        if char in char_dict: 
            return char 
        else: 
            char_dict[char] = True 
    return False",lm
706,"def is_subset(arr1, m, arr2, n): 
	hashset = set() 
	for i in range(0, m): 
		hashset.add(arr1[i]) 
	for i in range(0, n): 
		if arr2[i] in hashset: 
			continue
		else: 
			return False
	return True		",human
454,"def word_match_z(text):
  pattern = r""\w*[z]\w*""
  result = re.findall(pattern, text)
  return result",lm
940,"def heap_sort(array):
    build_max_heap(array)
    for i in range(len(array)-1, 0, -1):
        array[0], array[i] = array[i], array[0]
        heapify(array, 0, i)

def build_max_heap(array):
    for i in range(len(array)//2, -1, -1):
        heapify(array, i, len(array))

def heapify(array, i, n):
    largest = i
    left = 2 * i + 1
    right = 2 * i + 2
    if left < n and array[left] > array[largest]:
        largest = left
    if right < n and array[right] > array[largest]:
        largest = right
    if largest != i:
        array[i], array[largest] = array[largest], array[i]
        heapify(array, largest, n)",lm
75,"def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return (str(res)) ",human
927,"def height_of_binary_tree(root):
    if root is None:
        return 0
    left_height = height_of_binary_tree(root.left)
    right_height = height_of_binary_tree(root.right)
    return 1 + max(left_height, right_height)",lm
576,"def isSubArray(arr, brr): 
    for i in range(len(arr)): 
        j = 0
        while j < len(brr) and arr[i] <= brr[j]: 
            if arr[i] == brr[j]: 
                startIndex = i 
                for k in range(i, len(arr)): 
                    if arr[k] != brr[j]: 
                        break
                    j += 1
                    if j == len(brr): 
                        return True
            i += 1
    return False",lm
480,"def max_occur_char(str1):
    dict1 = {}
    for char in str1:
        if char not in dict1:
            dict1[char] = 0
        dict1[char] += 1
    max_char = max(dict1, key=dict1.get)
    return max_char",lm
249,"def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result",human
779,"def unique_sublists(list1):
    result ={}
    for l in list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result",human
45,"def find_gcd(x, y): 
	while(y): 
		x, y = y, x % y 
	return x 
def get_gcd(l):
  num1 = l[0]
  num2 = l[1]
  gcd = find_gcd(num1, num2)
  for i in range(2, len(l)):
    gcd = find_gcd(gcd, l[i])
  return gcd",human
477,"def is_lower(string):
  return (string.lower())",human
497,"def surface_area_cone(radius, height):
  import math
  side = math.sqrt(radius**2 + height**2)
  return math.pi * radius * (radius + side)",lm
797,"def sum_Odd(n): 
    terms = (n + 1)//2
    sum1 = terms * terms 
    return sum1  
def sum_in_Range(l,r): 
    return sum_Odd(r) - sum_Odd(l - 1)",human
103,"def calculate_eulerian_number(n: int, m: int) -> int:
    """"""
    Write a function to find eulerian number a(n, m).
    """"""
    if m == 0:
        return 1
    if n == 0:
        return 0
    return (m - 1) * (calculate_eulerian_number(n - 1, m - 1) + calculate_eulerian_number(n - 1, m))",lm
841,"def get_inv_count(arr, n): 
	inv_count = 0
	for i in range(n): 
		for j in range(i + 1, n): 
			if (arr[i] > arr[j]): 
				inv_count += 1
	return inv_count ",human
415,"3
def max_product(lst):
    max_prod = lst[0] * lst[1]
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            max_prod = max(max_prod, lst[i] * lst[j])
    return max_prod",lm
80,"def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6",human
779,"def count_unique_lists(list1):
  unique_lists = []
  for list2 in list1:
    if list2 not in unique_lists:
      unique_lists.append(list2)
  return len(unique_lists)",lm
768,"def odd_parity(num):
    cnt = 0
    while int(num) > 0:
        if int(num) % 2:
            cnt += 1
        num = int(int(num)/2) 
    if cnt % 2:
        return True
    else:
        return False",lm
557,"def toggle_string(string):
 string1 = string.swapcase()
 return string1",human
420,"def cube_sum_even(num):
   sum = 0
   for i in range(2, num*2+2, 2):
      sum = sum + i**3
   return sum",lm
119,"def findSingle(arr, n):
	for i in range(1, n, 2):
		if (arr[i] != arr[i-1] and arr[i] != arr[i+1]):
			return arr[i]
	return arr[0]",lm
73,"import re
def multiple_split(text):
  return (re.split('; |, |\*|\n',text))",human
472,"def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) ",human
595,"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) :  
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") ",human
17,"def square_perimeter(a):
  perimeter=4*a
  return perimeter",human
305,"import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()",human
535,"def topbottom_surfacearea(r):
  toporbottomarea=3.1415*r*r
  return toporbottomarea",human
728,"def sum_list(lst1,lst2):
  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] 
  return res_list",human
134,"def check_last (arr,n,p): 
    _sum = 0
    for i in range(n): 
        _sum = _sum + arr[i] 
    if p == 1: 
        if _sum % 2 == 0: 
            return ""ODD""
        else: 
            return ""EVEN""
    return ""EVEN""
      ",human
269,"def ascii_value(k):
  ch=k
  return ord(ch)",human
410,"def find_min(list1):
  min_value = list1[0]
  for i in range(1, len(list1)):
    if type(list1[i]) == int or type(list1[i]) == float:
      if list1[i] < min_value:
        min_value = list1[i]
  return min_value",lm
565,"def split(word): 
    return [char for char in word] ",human
761,"def arc_length(d,a):
    pi=22/7
    if a >= 360:
        return None
    arclength = (pi*d) * (a/360)
    return arclength",human
83,"def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)",human
815,"def sort_array_without_sorting(nums):
  count0 = 0
  count1 = 0
  count2 = 0
  for num in nums:
    if num == 0:
      count0 += 1
    elif num == 1:
      count1 += 1
    elif num == 2:
      count2 += 1

  # Create a new array to store the sorted elements.
  sorted_nums = []
  # Append the 0s to the new array.
  for i in range(count0):
    sorted_nums.append(0)
  # Append the 1s to the new array.
  for i in range(count1):
    sorted_nums.append(1)
  # Append the 2s to the new array.
  for i in range(count2):
    sorted_nums.append(2)

  return sorted_nums",lm
932,"3
def remove_duplicate_words(list_of_strings):
    unique_words = []
    for string in list_of_strings:
        words = string.split()
        unique_words.extend([word for word in words if word not in unique_words])
    return unique_words",lm
867,"def min_Num(arr,n):  
    odd = 0
    for i in range(n): 
        if (arr[i] % 2): 
            odd += 1 
    if (odd % 2): 
        return 1
    return 2",human
