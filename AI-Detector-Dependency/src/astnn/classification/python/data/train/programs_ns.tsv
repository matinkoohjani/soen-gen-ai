,id,code,label
1812,530,,2
107,687,module functiondef find_smallest_frequency arguments arg if unaryop not arr load return none assign min_val store method_call_start min load arr load method_call_end min load arr load return method_call_start attribute_access count arr load load min_val load method_call_end attribute_access count arr load load min_val load End,1
1914,89,,1
1734,478,,2
267,472,module functiondef find_first_position arguments arg arg assign low store 0 assign high store binop method_call_start len load arr load method_call_end len load arr load sub 1 assign result store unaryop usub 1 while compare low load lte high load assign mid store binop binop low load add high load floordiv 2 if compare subscript arr load mid load load eq target load assign result store mid load assign high store binop mid load sub 1 if compare subscript arr load mid load load lt target load assign low store binop mid load add 1 assign high store binop mid load sub 1 return result load End,2
1555,256,,2
989,361,module functiondef merge_sort arguments arg if compare method_call_start len load arr load method_call_end len load arr load lte 1 return arr load assign middle store binop method_call_start len load arr load method_call_end len load arr load floordiv 2 assign left_half store subscript arr load slice middle load load assign right_half store subscript arr load slice middle load load assign left_half store method_call_start merge_sort load left_half load method_call_end merge_sort load left_half load assign right_half store method_call_start merge_sort load right_half load method_call_end merge_sort load right_half load return method_call_start merge load left_half load right_half load method_call_end merge load left_half load right_half load End functiondef merge arguments arg arg assign merged store list load assign left_index store right_index store 0 while boolop and compare left_index load lt method_call_start len load left load method_call_end len load left load compare right_index load lt method_call_start len load right load method_call_end len load right load if compare subscript left load left_index load load lte subscript right load right_index load load expr method_call_start attribute_access append merged load load subscript left load left_index load load method_call_end attribute_access append merged load load subscript left load left_index load load augassign left_index store add 1 expr method_call_start attribute_access append merged load load subscript right load right_index load load method_call_end attribute_access append merged load load subscript right load right_index load load augassign right_index store add 1 expr method_call_start attribute_access extend merged load load subscript left load slice left_index load load method_call_end attribute_access extend merged load load subscript left load slice left_index load load expr method_call_start attribute_access extend merged load load subscript right load slice right_index load load method_call_end attribute_access extend merged load load subscript right load slice right_index load load return merged load End,2
239,765,"module functiondef find_product arguments arg expr 
    find the product of first even and odd numbers in a given list.

    args:
    list (list): the input list of numbers.

    returns:
    int: the product of the first even and odd numbers.
     assign even_product store 1 assign odd_product store 1 for num store list load if compare binop num load mod 2 eq 0 augassign even_product store mult num load augassign odd_product store mult num load return binop even_product load mult odd_product load End",2
33,783,module functiondef long_words arguments arg arg assign word_len store list load assign txt store method_call_start attribute_access split str load load   method_call_end attribute_access split str load load   for x store txt load if compare method_call_start len load x load method_call_end len load x load gt n load expr method_call_start attribute_access append word_len load load x load method_call_end attribute_access append word_len load load x load return word_len load End,2
214,838,"module import re alias functiondef find_words arguments arg assign pattern store \b\w{3,5}\b assign words store method_call_start attribute_access findall re load load pattern load text load method_call_end attribute_access findall re load load pattern load text load return words load End",2
1740,795,,1
1228,882,,1
164,477,module functiondef unique_characters arguments arg for i store method_call_start range load method_call_start len load str load method_call_end len load str load method_call_end range load method_call_start len load str load method_call_end len load str load for j store method_call_start range load binop i load add 1 method_call_start len load str load method_call_end len load str load method_call_end range load binop i load add 1 method_call_start len load str load method_call_end len load str load if compare subscript str load i load load eq subscript str load j load load return false return true End,2
847,241,module functiondef count_substrings_with_sum_equal_length arguments arg str load assign count store 0 for i store method_call_start range load method_call_start len load s load method_call_end len load s load method_call_end range load method_call_start len load s load method_call_end len load s load for j store method_call_start range load binop i load add 1 binop method_call_start len load s load method_call_end len load s load add 1 method_call_end range load binop i load add 1 binop method_call_start len load s load method_call_end len load s load add 1 assign substring store subscript s load slice i load j load load if compare method_call_start sum load generatorexp_start method_call_start int load digit load method_call_end int load digit load comprehension digit store substring load generatorexp_end method_call_start int load digit load method_call_end int load digit load comprehension digit store substring load method_call_end sum load generatorexp_start method_call_start int load digit load method_call_end int load digit load comprehension digit store substring load generatorexp_end method_call_start int load digit load method_call_end int load digit load comprehension digit store substring load eq method_call_start len load substring load method_call_end len load substring load augassign count store add 1 return count load int load End,2
1299,781,,1
791,964,module functiondef count_chars arguments arg assign alphabets store 0 assign digits store 0 assign special_chars store 0 for char store string load if method_call_start attribute_access isalpha char load load method_call_end attribute_access isalpha char load load augassign alphabets store add 1 if method_call_start attribute_access isdigit char load load method_call_end attribute_access isdigit char load load augassign digits store add 1 augassign special_chars store add 1 return tuple alphabets load digits load special_chars load load End,2
1679,879,,2
555,677,module functiondef find_peak_util arguments arg arg arg arg assign mid store binop low load add binop binop high load sub low load div 2 assign mid store method_call_start int load mid load method_call_end int load mid load if boolop and boolop or compare mid load eq 0 compare subscript arr load binop mid load sub 1 load lte subscript arr load mid load load boolop or compare mid load eq binop n load sub 1 compare subscript arr load binop mid load add 1 load lte subscript arr load mid load load return mid load if boolop and compare mid load gt 0 compare subscript arr load binop mid load sub 1 load gt subscript arr load mid load load return method_call_start find_peak_util load arr load low load binop mid load sub 1 n load method_call_end find_peak_util load arr load low load binop mid load sub 1 n load return method_call_start find_peak_util load arr load binop mid load add 1 high load n load method_call_end find_peak_util load arr load binop mid load add 1 high load n load End functiondef find_peak arguments arg arg return method_call_start find_peak_util load arr load 0 binop n load sub 1 n load method_call_end find_peak_util load arr load 0 binop n load sub 1 n load End,1
1485,674,,2
349,857,module functiondef chinese_zodiac arguments arg assign zodiac_signs store list rat ox tiger rabbit dragon snake horse goat monkey rooster dog pig load return subscript zodiac_signs load binop binop year load sub 1900 mod 12 load End,1
696,698,module functiondef max_diff arguments arg assign max_diff store 0 assign count_0 store 0 assign count_1 store 0 for char store binary_string load if compare char load eq 0 augassign count_0 store add 1 augassign count_1 store add 1 assign diff store binop count_0 load sub count_1 load assign max_diff store method_call_start max load max_diff load diff load method_call_end max load max_diff load diff load return max_diff load End,2
1184,257,,1
440,519,module import re alias functiondef end_num arguments arg assign text store method_call_start attribute_access compile re load load .*[0-9]$ method_call_end attribute_access compile re load load .*[0-9]$ if method_call_start attribute_access match text load load string load method_call_end attribute_access match text load load string load return true return false End,2
381,342,module functiondef find_largest_products arguments arg arg arg assign products store list load for num1 store list1 load for num2 store list2 load expr method_call_start attribute_access append products load load binop num1 load mult num2 load method_call_end attribute_access append products load load binop num1 load mult num2 load expr method_call_start attribute_access sort products load load method_call_end attribute_access sort products load load keyword true return subscript products load slice count load load End,2
227,684,module import heapq alias from collections import counter alias functiondef rearange_string arguments arg assign ctr store method_call_start counter load s load method_call_end counter load s load assign heap store listcomp_start tuple unaryop usub value load key load load comprehension tuple key store value store store method_call_start attribute_access items ctr load load method_call_end attribute_access items ctr load load listcomp_end tuple unaryop usub value load key load load comprehension tuple key store value store store method_call_start attribute_access items ctr load load method_call_end attribute_access items ctr load load expr method_call_start attribute_access heapify heapq load load heap load method_call_end attribute_access heapify heapq load load heap load if compare binop unaryop usub subscript subscript heap load 0 load 0 load mult 2 gt binop method_call_start len load s load method_call_end len load s load add 1 return  assign ans store list load while compare method_call_start len load heap load method_call_end len load heap load gte 2 assign tuple nct1 store char1 store store method_call_start attribute_access heappop heapq load load heap load method_call_end attribute_access heappop heapq load load heap load assign tuple nct2 store char2 store store method_call_start attribute_access heappop heapq load load heap load method_call_end attribute_access heappop heapq load load heap load expr method_call_start attribute_access extend ans load load list char1 load char2 load load method_call_end attribute_access extend ans load load list char1 load char2 load load if binop nct1 load add 1 expr method_call_start attribute_access heappush heapq load load heap load tuple binop nct1 load add 1 char1 load load method_call_end attribute_access heappush heapq load load heap load tuple binop nct1 load add 1 char1 load load if binop nct2 load add 1 expr method_call_start attribute_access heappush heapq load load heap load tuple binop nct2 load add 1 char2 load load method_call_end attribute_access heappush heapq load load heap load tuple binop nct2 load add 1 char2 load load return binop method_call_start attribute_access join  load ans load method_call_end attribute_access join  load ans load add ifexp heap load subscript subscript heap load 0 load 1 load  End,1
1234,336,,1
1166,164,,2
1932,953,,2
1661,527,,1
1724,783,,1
598,747,module functiondef check_monthnumber_number arguments arg if boolop or compare monthnum3 load eq 4 compare monthnum3 load eq 6 compare monthnum3 load eq 9 compare monthnum3 load eq 11 return true return false End,1
748,93,"module functiondef find_triplet arguments arg arg expr 
    finds if there is a triplet in the array whose sum is equal to the given target.
    
    parameters:
    arr (list): a list of integers.
    target (int): the target sum value.

    returns:
    bool: true if a triplet with the given target sum exists, false otherwise.
     expr method_call_start attribute_access sort arr load load method_call_end attribute_access sort arr load load for i store method_call_start range load binop method_call_start len load arr load method_call_end len load arr load sub 2 method_call_end range load binop method_call_start len load arr load method_call_end len load arr load sub 2 assign left store binop i load add 1 assign right store binop method_call_start len load arr load method_call_end len load arr load sub 1 while compare left load lt right load assign current_sum store binop binop subscript arr load i load load add subscript arr load left load load add subscript arr load right load load if compare current_sum load eq target load return true if compare current_sum load lt target load augassign left store add 1 augassign right store sub 1 return false End",2
786,320,module functiondef largest_neg arguments arg assign max store subscript list1 load 0 load for x store list1 load if compare x load lt max load assign max store x load return max load End,2
1859,128,,1
385,279,module functiondef arc_length arguments arg arg assign pi store binop 22 div 7 if compare a load gte 360 return none assign arclength store binop binop pi load mult d load mult binop a load div 360 return arclength load End,2
485,741,module functiondef sum_odd_numbers arguments arg arg assign total store 0 for num store method_call_start range load l load binop r load add 1 method_call_end range load l load binop r load add 1 if compare binop num load mod 2 noteq 0 augassign total store add num load return total load End,2
1796,130,,1
1738,353,,2
291,233,module functiondef check_tuple_list arguments arg arg return method_call_start all load generatorexp_start compare method_call_start len load t load method_call_end len load t load eq k load comprehension t store tuple_list load generatorexp_end compare method_call_start len load t load method_call_end len load t load eq k load comprehension t store tuple_list load method_call_end all load generatorexp_start compare method_call_start len load t load method_call_end len load t load eq k load comprehension t store tuple_list load generatorexp_end compare method_call_start len load t load method_call_end len load t load eq k load comprehension t store tuple_list load End,2
110,295,module functiondef count_numeric_values arguments arg assign count store 0 for char store string load if method_call_start attribute_access isdigit char load load method_call_end attribute_access isdigit char load load augassign count store add 1 return count load End,2
1488,653,,1
456,969,module functiondef check_equality arguments arg if compare subscript str load 0 load eq subscript str load unaryop usub 1 load return equal return not equal End,1
1811,43,,2
61,762,module functiondef count_rotations arguments arg assign count store 0 while compare binop method_call_start int load binary_string load 2 method_call_end int load binary_string load 2 mod 2 noteq 0 assign binary_string store binop subscript binary_string load slice 1 load add subscript binary_string load 0 load augassign count store add 1 return count load End,2
1066,350,module functiondef check_equality arguments arg return compare method_call_start ord load subscript s load 0 load method_call_end ord load subscript s load 0 load eq method_call_start ord load subscript s load binop method_call_start len load s load method_call_end len load s load sub 1 load method_call_end ord load subscript s load binop method_call_start len load s load method_call_end len load s load sub 1 load End functiondef count_substring_with_equal_ends arguments arg assign result store 0 assign n store method_call_start len load s load method_call_end len load s load for i store method_call_start range load n load method_call_end range load n load for j store method_call_start range load 1 binop binop n load sub i load add 1 method_call_end range load 1 binop binop n load sub i load add 1 if method_call_start check_equality load subscript s load slice i load binop i load add j load load method_call_end check_equality load subscript s load slice i load binop i load add j load load augassign result store add 1 return result load End,1
731,907,module functiondef max_sum_rectangular_grid arguments arg arg assign incl store method_call_start max load subscript subscript grid load 0 load 0 load subscript subscript grid load 1 load 0 load method_call_end max load subscript subscript grid load 0 load 0 load subscript subscript grid load 1 load 0 load assign excl store 0 for i store method_call_start range load 1 n load method_call_end range load 1 n load assign excl_new store method_call_start max load excl load incl load method_call_end max load excl load incl load assign incl store binop excl load add method_call_start max load subscript subscript grid load 0 load i load load subscript subscript grid load 1 load i load load method_call_end max load subscript subscript grid load 0 load i load load subscript subscript grid load 1 load i load load assign excl store excl_new load return method_call_start max load excl load incl load method_call_end max load excl load incl load End,1
1025,140,module functiondef left_rotate arguments arg arg assign tmp store binop subscript s load slice d load load add subscript s load slice 0 d load load return tmp load End,2
1203,423,,2
284,451,module functiondef find_lcm arguments arg arg if compare num1 load gt num2 load assign num store num1 load assign den store num2 load assign num store num2 load assign den store num1 load assign rem store binop num load mod den load while compare rem load noteq 0 assign num store den load assign den store rem load assign rem store binop num load mod den load assign gcd store den load assign lcm store method_call_start int load binop method_call_start int load binop num1 load mult num2 load method_call_end int load binop num1 load mult num2 load div method_call_start int load gcd load method_call_end int load gcd load method_call_end int load binop method_call_start int load binop num1 load mult num2 load method_call_end int load binop num1 load mult num2 load div method_call_start int load gcd load method_call_end int load gcd load return lcm load End functiondef get_lcm arguments arg assign num1 store subscript l load 0 load assign num2 store subscript l load 1 load assign lcm store method_call_start find_lcm load num1 load num2 load method_call_end find_lcm load num1 load num2 load for i store method_call_start range load 2 method_call_start len load l load method_call_end len load l load method_call_end range load 2 method_call_start len load l load method_call_end len load l load assign lcm store method_call_start find_lcm load lcm load subscript l load i load load method_call_end find_lcm load lcm load subscript l load i load load return lcm load End,1
996,86,module functiondef longest_increasing_subsequence arguments arg assign n store method_call_start len load arr load method_call_end len load arr load assign longest_increasing_subsequence store binop list 1 load mult n load for i store method_call_start range load 1 n load method_call_end range load 1 n load for j store method_call_start range load 0 i load method_call_end range load 0 i load if boolop and compare subscript arr load i load load gt subscript arr load j load load compare subscript longest_increasing_subsequence load i load load lt binop subscript longest_increasing_subsequence load j load load add 1 assign subscript longest_increasing_subsequence load i load store binop subscript longest_increasing_subsequence load j load load add 1 assign maximum store 0 for i store method_call_start range load n load method_call_end range load n load assign maximum store method_call_start max load maximum load subscript longest_increasing_subsequence load i load load method_call_end max load maximum load subscript longest_increasing_subsequence load i load load return maximum load End,1
329,326,module functiondef find_longest_chain arguments arg expr method_call_start attribute_access sort pairs load load method_call_end attribute_access sort pairs load load keyword lambda arguments arg subscript x load 1 load assign longest store list load assign current_end store method_call_start float load -inf method_call_end float load -inf for pair store pairs load if compare subscript pair load 0 load gt current_end load expr method_call_start attribute_access append longest load load pair load method_call_end attribute_access append longest load load pair load assign current_end store subscript pair load 1 load return longest load End,1
1152,428,module from copy import deepcopy alias functiondef colon_tuplex arguments arg arg arg assign tuplex_colon store method_call_start deepcopy load tuplex load method_call_end deepcopy load tuplex load expr method_call_start attribute_access append subscript tuplex_colon load m load load load n load method_call_end attribute_access append subscript tuplex_colon load m load load load n load return tuplex_colon load End,1
1388,94,,2
1777,423,,1
770,53,module import collections alias functiondef freq_count arguments arg assign freq_count store method_call_start attribute_access counter collections load load list1 load method_call_end attribute_access counter collections load load list1 load return freq_count load End,2
718,229,module functiondef group_tuples arguments arg assign out store dict for elem store input load try_start expr method_call_start attribute_access extend subscript out load subscript elem load 0 load load load subscript elem load slice 1 load method_call_end attribute_access extend subscript out load subscript elem load 0 load load load subscript elem load slice 1 load try_end except_start keyerror assign subscript out load subscript elem load 0 load store method_call_start list load elem load method_call_end list load elem load except_end expr method_call_start attribute_access extend subscript out load subscript elem load 0 load load load subscript elem load slice 1 load method_call_end attribute_access extend subscript out load subscript elem load 0 load load load subscript elem load slice 1 load excepthandler keyerror load assign subscript out load subscript elem load 0 load store method_call_start list load elem load method_call_end list load elem load return listcomp_start method_call_start tuple load values load method_call_end tuple load values load comprehension values store method_call_start attribute_access values out load load method_call_end attribute_access values out load load listcomp_end method_call_start tuple load values load method_call_end tuple load values load comprehension values store method_call_start attribute_access values out load load method_call_end attribute_access values out load load End,1
1656,265,,1
266,767,module import re alias functiondef capital_words_spaces arguments arg return method_call_start attribute_access sub re load load (\w)([a-z]) \1 \2 str1 load method_call_end attribute_access sub re load load (\w)([a-z]) \1 \2 str1 load End,1
1270,820,,1
458,492,module import re alias functiondef match arguments arg assign pattern store [a-z]+[a-z]+$ if method_call_start attribute_access search re load load pattern load text load method_call_end attribute_access search re load load pattern load text load return yes return no End,1
1483,866,,1
778,109,module functiondef count_set_bits arguments arg assign count store 0 while n load augassign count store add binop n load bitand 1 augassign n store rshift 1 return count load End,2
1654,622,,1
1218,596,,1
1093,677,module functiondef pancake_sort arguments arg assign arr_len store method_call_start len load nums load method_call_end len load nums load while compare arr_len load gt 1 assign mi store method_call_start attribute_access index nums load load method_call_start max load subscript nums load slice 0 arr_len load load method_call_end max load subscript nums load slice 0 arr_len load load method_call_end attribute_access index nums load load method_call_start max load subscript nums load slice 0 arr_len load load method_call_end max load subscript nums load slice 0 arr_len load load assign nums store binop subscript nums load slice mi load unaryop usub 1 load add subscript nums load slice binop mi load add 1 method_call_start len load nums load method_call_end len load nums load load assign nums store binop subscript nums load slice binop arr_len load sub 1 unaryop usub 1 load add subscript nums load slice arr_len load method_call_start len load nums load method_call_end len load nums load load augassign arr_len store sub 1 return nums load End,2
315,771,"module functiondef find_max_indices arguments arg arg expr 
    find the maximum of similar indices in two lists of tuples.

    args:
        list1 (list): first list of tuples.
        list2 (list): second list of tuples.

    returns:
        int: maximum of similar indices in the two lists.
     assign max_index store unaryop usub 1 for i store method_call_start range load method_call_start len load list1 load method_call_end len load list1 load method_call_end range load method_call_start len load list1 load method_call_end len load list1 load if compare subscript subscript list1 load i load load 0 load eq subscript subscript list2 load i load load 0 load assign max_index store method_call_start max load max_index load i load method_call_end max load max_index load i load return max_index load End",2
1030,691,module functiondef first_repeated_word arguments arg assign temp store method_call_start set load method_call_end set load for word store method_call_start attribute_access split str1 load load method_call_end attribute_access split str1 load load if compare word load in temp load return word load expr method_call_start attribute_access add temp load load word load method_call_end attribute_access add temp load load word load return none End,1
615,512,module functiondef rectangle_perimeter arguments arg arg assign perimeter store binop 2 mult binop l load add b load return perimeter load End,2
472,578,module functiondef find_odd_number arguments arg assign occurrences store dict for num store arr load if compare num load in occurrences load augassign subscript occurrences load num load store add 1 assign subscript occurrences load num load store 1 for tuple num store count store store method_call_start attribute_access items occurrences load load method_call_end attribute_access items occurrences load load if compare binop count load mod 2 noteq 0 return num load End,1
408,233,module functiondef access_elements arguments arg arg assign result store listcomp_start subscript nums load i load load comprehension i store list_index load listcomp_end subscript nums load i load load comprehension i store list_index load return result load End,1
495,867,module functiondef super_seq arguments arg arg arg arg if unaryop not m load return n load if unaryop not n load return m load if compare subscript x load binop m load sub 1 load eq subscript y load binop n load sub 1 load return binop 1 add method_call_start super_seq load x load y load binop m load sub 1 binop n load sub 1 method_call_end super_seq load x load y load binop m load sub 1 binop n load sub 1 return binop 1 add method_call_start min load method_call_start super_seq load x load y load binop m load sub 1 n load method_call_end super_seq load x load y load binop m load sub 1 n load method_call_start super_seq load x load y load m load binop n load sub 1 method_call_end super_seq load x load y load m load binop n load sub 1 method_call_end min load method_call_start super_seq load x load y load binop m load sub 1 n load method_call_end super_seq load x load y load binop m load sub 1 n load method_call_start super_seq load x load y load m load binop n load sub 1 method_call_end super_seq load x load y load m load binop n load sub 1 End,2
1335,28,,1
533,639,module functiondef square_sum arguments arg return method_call_start int load binop binop binop binop 2 mult n load mult binop n load add 1 mult binop binop 2 mult n load add 1 div 3 method_call_end int load binop binop binop binop 2 mult n load mult binop n load add 1 mult binop binop 2 mult n load add 1 div 3 End,1
825,408,module functiondef check_element arguments arg arg assign check_element store method_call_start all load generatorexp_start compare v load eq element load comprehension v store list load generatorexp_end compare v load eq element load comprehension v store list load method_call_end all load generatorexp_start compare v load eq element load comprehension v store list load generatorexp_end compare v load eq element load comprehension v store list load return check_element load End,1
216,389,module import math alias functiondef divsum arguments arg assign sum store 1 assign i store 2 while compare binop i load mult i load lte n load if compare binop n load mod i load eq 0 assign sum store binop binop sum load add i load add method_call_start attribute_access floor math load load binop n load div i load method_call_end attribute_access floor math load load binop n load div i load augassign i store add 1 return sum load End functiondef areequivalent arguments arg arg return compare method_call_start divsum load num1 load method_call_end divsum load num1 load eq method_call_start divsum load num2 load method_call_end divsum load num2 load End,1
897,605,module functiondef partition_bell_numbers arguments arg if compare n load eq 0 return 1 assign dp store binop list 0 load mult binop n load add 1 assign subscript dp load 0 store 1 for i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 for j store method_call_start range load i load method_call_end range load i load augassign subscript dp load i load store add binop subscript dp load j load load mult subscript dp load binop binop i load sub j load sub 1 load return subscript dp load n load load End,1
818,410,module functiondef find_nested_elements arguments arg arg assign result store list load for sublist store nested_list load for element store sublist load if compare element load in search_list load expr method_call_start attribute_access append result load load element load method_call_end attribute_access append result load load element load return result load End,2
611,57,module from itertools import zip_longest from itertools import chain from itertools import tee alias alias alias functiondef exchange_elements arguments arg assign tuple lst1 store lst2 store store method_call_start tee load method_call_start iter load lst load method_call_end iter load lst load 2 method_call_end tee load method_call_start iter load lst load method_call_end iter load lst load 2 return method_call_start list load method_call_start attribute_access from_iterable chain load load method_call_start zip_longest load subscript lst load slice 1 2 load subscript lst load slice 2 load method_call_end zip_longest load subscript lst load slice 1 2 load subscript lst load slice 2 load method_call_end attribute_access from_iterable chain load load method_call_start zip_longest load subscript lst load slice 1 2 load subscript lst load slice 2 load method_call_end zip_longest load subscript lst load slice 1 2 load subscript lst load slice 2 load method_call_end list load method_call_start attribute_access from_iterable chain load load method_call_start zip_longest load subscript lst load slice 1 2 load subscript lst load slice 2 load method_call_end zip_longest load subscript lst load slice 1 2 load subscript lst load slice 2 load method_call_end attribute_access from_iterable chain load load method_call_start zip_longest load subscript lst load slice 1 2 load subscript lst load slice 2 load method_call_end zip_longest load subscript lst load slice 1 2 load subscript lst load slice 2 load End,2
292,823,module functiondef find_max arguments arg assign maxlist store method_call_start max load generatorexp_start x load comprehension x store lst load generatorexp_end x load comprehension x store lst load method_call_end max load generatorexp_start x load comprehension x store lst load generatorexp_end x load comprehension x store lst load return maxlist load End,2
314,746,"module functiondef sum_even_numbers_even_positions arguments arg expr 
    function to find the sum of even numbers at even positions in a list.

    parameters:
    lst (list): a list of integers.

    returns:
    int: the sum of even numbers at even positions.

    examples:
    >>> sum_even_numbers_even_positions([1, 2, 3, 4, 5, 6])
    6
    >>> sum_even_numbers_even_positions([2, 4, 6, 8])
    10
     return method_call_start sum load subscript lst load slice 1 2 load method_call_end sum load subscript lst load slice 1 2 load End",2
418,461,module from math import radians from math import sin from math import cos from math import acos alias alias alias alias functiondef distance_lat_long arguments arg arg arg arg assign dist store binop 6371.01 mult method_call_start acos load binop binop method_call_start sin load slat load method_call_end sin load slat load mult method_call_start sin load elat load method_call_end sin load elat load add binop binop method_call_start cos load slat load method_call_end cos load slat load mult method_call_start cos load elat load method_call_end cos load elat load mult method_call_start cos load binop slon load sub elon load method_call_end cos load binop slon load sub elon load method_call_end acos load binop binop method_call_start sin load slat load method_call_end sin load slat load mult method_call_start sin load elat load method_call_end sin load elat load add binop binop method_call_start cos load slat load method_call_end cos load slat load mult method_call_start cos load elat load method_call_end cos load elat load mult method_call_start cos load binop slon load sub elon load method_call_end cos load binop slon load sub elon load return dist load End,1
1059,191,module functiondef longest_common_subsequence arguments arg arg arg arg if boolop or compare m load eq 0 compare n load eq 0 return 0 if compare subscript x load binop m load sub 1 load eq subscript y load binop n load sub 1 load return binop 1 add method_call_start longest_common_subsequence load x load y load binop m load sub 1 binop n load sub 1 method_call_end longest_common_subsequence load x load y load binop m load sub 1 binop n load sub 1 return method_call_start max load method_call_start longest_common_subsequence load x load y load m load binop n load sub 1 method_call_end longest_common_subsequence load x load y load m load binop n load sub 1 method_call_start longest_common_subsequence load x load y load binop m load sub 1 n load method_call_end longest_common_subsequence load x load y load binop m load sub 1 n load method_call_end max load method_call_start longest_common_subsequence load x load y load m load binop n load sub 1 method_call_end longest_common_subsequence load x load y load m load binop n load sub 1 method_call_start longest_common_subsequence load x load y load binop m load sub 1 n load method_call_end longest_common_subsequence load x load y load binop m load sub 1 n load End,2
839,417,module functiondef abbreviate_road arguments arg return method_call_start attribute_access replace string load load road rd. method_call_end attribute_access replace string load load road rd. End,2
506,591,module functiondef zip_list arguments arg arg assign result store method_call_start list load method_call_start map load attribute_access __add__ list load load list1 load list2 load method_call_end map load attribute_access __add__ list load load list1 load list2 load method_call_end list load method_call_start map load attribute_access __add__ list load load list1 load list2 load method_call_end map load attribute_access __add__ list load load list1 load list2 load return result load End,2
603,680,module functiondef extract_sum_of_alternate_chains arguments arg assign result store 0 for tuple i store chain store store method_call_start enumerate load tuples load method_call_end enumerate load tuples load if compare binop i load mod 2 eq 0 augassign result store add method_call_start sum load chain load method_call_end sum load chain load return result load End,1
1571,742,,2
1846,187,,2
98,367,module functiondef check_odd_parity arguments arg return compare binop method_call_start attribute_access count method_call_start bin load number load method_call_end bin load number load load 1 method_call_end attribute_access count method_call_start bin load number load method_call_end bin load number load load 1 mod 2 noteq 0 End,2
1204,442,,2
1894,902,,2
1748,11,,2
1537,255,,2
289,802,module functiondef sort_list arguments arg return method_call_start sorted load lst load method_call_end sorted load lst load keyword lambda arguments arg method_call_start attribute_access count lst load load subscript x load 0 load method_call_end attribute_access count lst load load subscript x load 0 load End,2
1870,863,,2
128,83,"module functiondef flatten_matrix arguments arg expr 
    flattens the given tuple matrix into the tuple list with each tuple representing each column.

    args:
        matrix (tuple(tuple)): the tuple matrix to be flattened.

    returns:
        list(tuple): the flattened tuple matrix.
     assign flattened_matrix store list load assign num_rows store method_call_start len load matrix load method_call_end len load matrix load assign num_columns store method_call_start len load subscript matrix load 0 load method_call_end len load subscript matrix load 0 load for column store method_call_start range load num_columns load method_call_end range load num_columns load assign column_values store list load for row store method_call_start range load num_rows load method_call_end range load num_rows load expr method_call_start attribute_access append column_values load load subscript subscript matrix load row load load column load load method_call_end attribute_access append column_values load load subscript subscript matrix load row load load column load load expr method_call_start attribute_access append flattened_matrix load load method_call_start tuple load column_values load method_call_end tuple load column_values load method_call_end attribute_access append flattened_matrix load load method_call_start tuple load column_values load method_call_end tuple load column_values load return flattened_matrix load End",2
562,606,module functiondef is_even arguments arg if compare binop n load bitxor 1 eq binop n load add 1 return true return false End,2
612,556,module functiondef find_largest_palindromic_number arguments arg assign largest_palindrome store none for num store arr load if compare method_call_start str load num load method_call_end str load num load eq subscript method_call_start str load num load method_call_end str load num load slice unaryop usub 1 load if boolop or compare largest_palindrome load is none compare num load gt largest_palindrome load assign largest_palindrome store num load return largest_palindrome load End,2
319,140,"module functiondef pairwise_addition arguments arg expr 
    computes the pairwise addition of the elements of the given tuples.

    args:
    - tuples: a list of tuples containing elements to be added pairwise.

    returns:
    - result: a tuple containing the pairwise addition of the elements.
     assign result store method_call_start tuple load generatorexp_start method_call_start sum load pair load method_call_end sum load pair load comprehension pair store method_call_start zip load starred tuples load load method_call_end zip load starred tuples load load generatorexp_end method_call_start sum load pair load method_call_end sum load pair load comprehension pair store method_call_start zip load starred tuples load load method_call_end zip load starred tuples load load method_call_end tuple load generatorexp_start method_call_start sum load pair load method_call_end sum load pair load comprehension pair store method_call_start zip load starred tuples load load method_call_end zip load starred tuples load load generatorexp_end method_call_start sum load pair load method_call_end sum load pair load comprehension pair store method_call_start zip load starred tuples load load method_call_end zip load starred tuples load load return result load End",1
255,768,module functiondef check_sequence arguments arg arg return compare patterns load eq sequence load End,2
1944,957,,2
497,107,module functiondef find_kth_element arguments arg arg assign sorted_array store method_call_start sorted load array load method_call_end sorted load array load return subscript sorted_array load binop k load sub 1 load End,2
938,609,module functiondef count_samepair arguments arg arg arg assign result store method_call_start sum load generatorexp_start compare m load eq eq n load o load comprehension tuple m store n store o store store method_call_start zip load list1 load list2 load list3 load method_call_end zip load list1 load list2 load list3 load generatorexp_end compare m load eq eq n load o load comprehension tuple m store n store o store store method_call_start zip load list1 load list2 load list3 load method_call_end zip load list1 load list2 load list3 load method_call_end sum load generatorexp_start compare m load eq eq n load o load comprehension tuple m store n store o store store method_call_start zip load list1 load list2 load list3 load method_call_end zip load list1 load list2 load list3 load generatorexp_end compare m load eq eq n load o load comprehension tuple m store n store o store store method_call_start zip load list1 load list2 load list3 load method_call_end zip load list1 load list2 load list3 load return result load End,2
609,640,module from collections import counter alias from itertools import chain alias functiondef freq_element arguments arg assign result store method_call_start counter load method_call_start attribute_access from_iterable chain load load nums load method_call_end attribute_access from_iterable chain load load nums load method_call_end counter load method_call_start attribute_access from_iterable chain load load nums load method_call_end attribute_access from_iterable chain load load nums load return result load End,2
58,519,module functiondef check_monthnum_number arguments arg if compare monthnum1 load eq 2 return true return false End,1
1327,375,,1
1562,10,,1
149,369,module functiondef find_number_of_divisors arguments arg assign count store 0 for i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 if compare binop n load mod i load eq 0 augassign count store add 1 return count load End,2
1189,384,,2
1568,690,,1
1754,698,,1
1508,764,,2
1371,898,,1
67,884,module functiondef count_element_frequency arguments arg assign result store dict for item store nested_tuple load if method_call_start isinstance load item load tuple load method_call_end isinstance load item load tuple load assign sub_result store method_call_start count_element_frequency load item load method_call_end count_element_frequency load item load for tuple key store value store store method_call_start attribute_access items sub_result load load method_call_end attribute_access items sub_result load load assign subscript result load key load store binop method_call_start attribute_access get result load load key load 0 method_call_end attribute_access get result load load key load 0 add value load assign subscript result load item load store binop method_call_start attribute_access get result load load item load 0 method_call_end attribute_access get result load load item load 0 add 1 return result load End,1
1531,171,,1
837,92,module import math alias functiondef get_first_set_bit_pos arguments arg return binop method_call_start attribute_access log2 math load load binop n load bitand unaryop usub n load method_call_end attribute_access log2 math load load binop n load bitand unaryop usub n load add 1 End,2
1167,710,,1
1722,488,,2
1774,268,,1
1854,671,,1
992,450,module functiondef max_sum_list arguments arg return method_call_start max load lists load method_call_end max load lists load keyword sum load End,1
1757,544,,2
87,327,module functiondef isbalanced arguments arg functiondef getheight arguments arg if compare node load is none return 0 assign left_height store method_call_start getheight load attribute_access left node load load method_call_end getheight load attribute_access left node load load assign right_height store method_call_start getheight load attribute_access right node load load method_call_end getheight load attribute_access right node load load return binop method_call_start max load left_height load right_height load method_call_end max load left_height load right_height load add 1 End if compare root load is none return true assign left_height store method_call_start getheight load attribute_access left root load load method_call_end getheight load attribute_access left root load load assign right_height store method_call_start getheight load attribute_access right root load load method_call_end getheight load attribute_access right root load load if compare method_call_start abs load binop left_height load sub right_height load method_call_end abs load binop left_height load sub right_height load gt 1 return false return boolop and method_call_start isbalanced load attribute_access left root load load method_call_end isbalanced load attribute_access left root load load method_call_start isbalanced load attribute_access right root load load method_call_end isbalanced load attribute_access right root load load End,2
1361,844,,2
40,87,module from collections import defaultdict alias functiondef grouping_dictionary arguments arg assign d store method_call_start defaultdict load list load method_call_end defaultdict load list load for tuple k store v store store l load expr method_call_start attribute_access append subscript d load k load load load v load method_call_end attribute_access append subscript d load k load load load v load return d load End,2
740,785,module functiondef harmonic_sum arguments arg if compare n load lt 2 return 1 return binop binop 1 div n load add method_call_start harmonic_sum load binop n load sub 1 method_call_end harmonic_sum load binop n load sub 1 End,2
1410,166,,1
1237,887,,1
578,848,module functiondef find_volume arguments arg arg arg return binop binop binop l load mult b load mult h load div 2 End,1
1351,652,,2
1645,250,,1
187,14,module functiondef is_nonagonal arguments arg return method_call_start int load binop binop n load mult binop binop 7 mult n load sub 5 div 2 method_call_end int load binop binop n load mult binop binop 7 mult n load sub 5 div 2 End,2
850,228,module functiondef max_volume_of_cuboid arguments arg assign side store binop sum_of_sides load div 4 assign volume store binop side load pow 3 return volume load End,2
1250,201,,2
1325,858,,2
777,835,module functiondef cal_sum arguments arg assign a store 3 assign b store 0 assign c store 2 if compare n load eq 0 return 3 if compare n load eq 1 return 3 if compare n load eq 2 return 5 assign sum store 5 while compare n load gt 2 assign d store binop a load add b load assign sum store binop sum load add d load assign a store b load assign b store c load assign c store d load assign n store binop n load sub 1 return sum load End,1
923,120,"module import math alias functiondef inscribe_largest_triangle arguments arg expr 
    find the largest triangle that can be inscribed in a semicircle.

    parameters:
    semicircle_radius (float): the radius of the semicircle.

    returns:
    float: the maximum area of the inscribed triangle.

     assign base store semicircle_radius load assign height store semicircle_radius load assign area store binop binop base load mult height load div 2 return area load End",2
1563,21,,1
1269,525,,1
600,88,module functiondef set_middle_bits arguments arg augassign n store bitor binop n load rshift 1 augassign n store bitor binop n load rshift 2 augassign n store bitor binop n load rshift 4 augassign n store bitor binop n load rshift 8 augassign n store bitor binop n load rshift 16 return binop binop n load rshift 1 bitxor 1 End functiondef toggle_middle_bits arguments arg if compare n load eq 1 return 1 return binop n load bitxor method_call_start set_middle_bits load n load method_call_end set_middle_bits load n load End,2
977,635,module functiondef sort_sublists arguments arg assign result store method_call_start list load method_call_start map load sorted load list1 load method_call_end map load sorted load list1 load method_call_end list load method_call_start map load sorted load list1 load method_call_end map load sorted load list1 load return result load End,1
1054,286,module functiondef cumulative_sum arguments arg assign result store 0 for tuple_val store tuple_list load augassign result store add method_call_start sum load tuple_val load method_call_end sum load tuple_val load return result load End,2
694,454,module functiondef sort_mixed_list arguments arg return method_call_start sorted load lst load method_call_end sorted load lst load keyword lambda arguments arg tuple method_call_start isinstance load x load str load method_call_end isinstance load x load str load x load load End,2
1519,76,,1
1544,109,,1
1157,316,"module functiondef is_concatenation arguments arg arg expr 
    check if a string is a concatenation of another string.

    parameters:
    string1 (str): the string to be checked.
    string2 (str): the possible concatenation.

    returns:
    bool: true if string1 is a concatenation of string2, false otherwise.
     if compare string1 load eq binop string2 load add string2 load return true return false End",2
645,614,module functiondef check_value arguments arg arg assign result store method_call_start all load generatorexp_start compare x load eq n load comprehension x store method_call_start attribute_access values dict load load method_call_end attribute_access values dict load load generatorexp_end compare x load eq n load comprehension x store method_call_start attribute_access values dict load load method_call_end attribute_access values dict load load method_call_end all load generatorexp_start compare x load eq n load comprehension x store method_call_start attribute_access values dict load load method_call_end attribute_access values dict load load generatorexp_end compare x load eq n load comprehension x store method_call_start attribute_access values dict load load method_call_end attribute_access values dict load load return result load End,1
1589,588,,2
1201,61,,1
605,854,module functiondef find_average arguments arg if compare method_call_start len load lst load method_call_end len load lst load eq 0 return 0 assign total store method_call_start sum load lst load method_call_end sum load lst load return binop total load div method_call_start len load lst load method_call_end len load lst load End,1
1807,96,,2
1114,695,module functiondef lower_ctr arguments arg assign lower_ctr store 0 for i store method_call_start range load method_call_start len load str load method_call_end len load str load method_call_end range load method_call_start len load str load method_call_end len load str load if boolop and compare subscript str load i load load gte a compare subscript str load i load load lte z augassign lower_ctr store add 1 return lower_ctr load End,1
1667,546,,1
421,911,module functiondef add_list arguments arg arg assign result store method_call_start map load lambda arguments arg arg binop x load add y load nums1 load nums2 load method_call_end map load lambda arguments arg arg binop x load add y load nums1 load nums2 load return method_call_start list load result load method_call_end list load result load End,2
573,867,module functiondef neg_nos arguments arg for num store list1 load if compare num load lt 0 return num load End,1
29,431,module functiondef rgb_to_hsv arguments arg arg arg assign tuple r store g store b store store tuple binop r load div 255.0 binop g load div 255.0 binop b load div 255.0 load assign mx store method_call_start max load r load g load b load method_call_end max load r load g load b load assign mn store method_call_start min load r load g load b load method_call_end min load r load g load b load assign df store binop mx load sub mn load if compare mx load eq mn load assign h store 0 if compare mx load eq r load assign h store binop binop binop 60 mult binop binop g load sub b load div df load add 360 mod 360 if compare mx load eq g load assign h store binop binop binop 60 mult binop binop b load sub r load div df load add 120 mod 360 if compare mx load eq b load assign h store binop binop binop 60 mult binop binop r load sub g load div df load add 240 mod 360 if compare mx load eq 0 assign s store 0 assign s store binop binop df load div mx load mult 100 assign v store binop mx load mult 100 return tuple h load s load v load load End,2
1247,86,,2
15,706,module functiondef is_even_length arguments arg return compare binop method_call_start len load word load method_call_end len load word load mod 2 eq 0 End,2
242,156,module functiondef average_of_cubes arguments arg if compare n load lt 1 return none assign sum_of_cubes store 0 for num store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 augassign sum_of_cubes store add binop num load pow 3 assign average store binop sum_of_cubes load div n load return average load End,2
148,855,module import heapq alias functiondef raw_heap arguments arg expr method_call_start attribute_access heapify hq load load rawheap load method_call_end attribute_access heapify hq load load rawheap load return rawheap load End,2
1311,166,,2
1764,491,,2
1717,550,,2
883,624,module functiondef check_monthnumber arguments arg if boolop or compare monthname3 load eq april compare monthname3 load eq june compare monthname3 load eq september compare monthname3 load eq november return true return false End,1
280,934,module functiondef find_max_positions arguments arg assign max_val store method_call_start max load lst load method_call_end max load lst load assign positions store listcomp_start i load comprehension tuple i store val store store method_call_start enumerate load lst load method_call_end enumerate load lst load compare val load eq max_val load listcomp_end i load comprehension tuple i store val store store method_call_start enumerate load lst load method_call_end enumerate load lst load compare val load eq max_val load return positions load End,1
1632,352,,1
556,199,module from collections import counter alias functiondef most_common_elem arguments arg arg assign most_common_elem store method_call_start attribute_access most_common method_call_start counter load s load method_call_end counter load s load load a load method_call_end attribute_access most_common method_call_start counter load s load method_call_end counter load s load load a load return most_common_elem load End,1
1658,948,,2
356,46,module functiondef find_greater_values arguments arg arg assign result store list load for value store lst load if compare value load gt number load expr method_call_start attribute_access append result load load value load method_call_end attribute_access append result load load value load return result load End,2
89,927,module functiondef combine_dictionaries arguments arg arg assign combined_dict store dict for key store dict1 load if compare key load in dict2 load assign subscript combined_dict load key load store binop subscript dict1 load key load load add subscript dict2 load key load load return combined_dict load End,2
322,80,module functiondef numsubsequences arguments arg arg assign n store method_call_start len load arr load method_call_end len load arr load assign dp store listcomp_start binop list 0 load mult binop k load add 1 comprehension _ store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end binop list 0 load mult binop k load add 1 comprehension _ store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 for i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 for j store method_call_start range load 1 binop k load add 1 method_call_end range load 1 binop k load add 1 assign subscript subscript dp load i load load j load store subscript subscript dp load binop i load sub 1 load j load load if compare subscript arr load binop i load sub 1 load lte j load augassign subscript subscript dp load i load load j load store add binop subscript subscript dp load binop i load sub 1 load binop j load floordiv subscript arr load binop i load sub 1 load load add 1 return subscript subscript dp load n load load k load load End,1
1472,563,,1
981,560,module functiondef search_string arguments arg arg import re alias assign match store method_call_start attribute_access search re load load pattern load string load method_call_end attribute_access search re load load pattern load string load if match load return method_call_start attribute_access start match load load method_call_end attribute_access start match load load return unaryop usub 1 End,2
276,808,module functiondef max_length arguments arg assign max_length store method_call_start max load generatorexp_start method_call_start len load x load method_call_end len load x load comprehension x store list1 load generatorexp_end method_call_start len load x load method_call_end len load x load comprehension x store list1 load method_call_end max load generatorexp_start method_call_start len load x load method_call_end len load x load comprehension x store list1 load generatorexp_end method_call_start len load x load method_call_end len load x load comprehension x store list1 load assign max_list store method_call_start max load generatorexp_start x load comprehension x store list1 load generatorexp_end x load comprehension x store list1 load method_call_end max load generatorexp_start x load comprehension x store list1 load generatorexp_end x load comprehension x store list1 load return tuple max_length load max_list load load End,2
424,196,module functiondef count_inversions arguments arg assign count store 0 for i store method_call_start range load method_call_start len load arr load method_call_end len load arr load method_call_end range load method_call_start len load arr load method_call_end len load arr load for j store method_call_start range load binop i load add 1 method_call_start len load arr load method_call_end len load arr load method_call_end range load binop i load add 1 method_call_start len load arr load method_call_end len load arr load if compare subscript arr load i load load gt subscript arr load j load load augassign count store add 1 return count load End,1
538,100,module functiondef max_sum_pair_diff_lessthan_k arguments arg arg arg expr method_call_start attribute_access sort arr load load method_call_end attribute_access sort arr load load assign dp store binop list 0 load mult n load assign subscript dp load 0 store 0 for i store method_call_start range load 1 n load method_call_end range load 1 n load assign subscript dp load i load store subscript dp load binop i load sub 1 load if compare binop subscript arr load i load load sub subscript arr load binop i load sub 1 load lt k load if compare i load gte 2 assign subscript dp load i load store method_call_start max load subscript dp load i load load binop binop subscript dp load binop i load sub 2 load add subscript arr load i load load add subscript arr load binop i load sub 1 load method_call_end max load subscript dp load i load load binop binop subscript dp load binop i load sub 2 load add subscript arr load i load load add subscript arr load binop i load sub 1 load assign subscript dp load i load store method_call_start max load subscript dp load i load load binop subscript arr load i load load add subscript arr load binop i load sub 1 load method_call_end max load subscript dp load i load load binop subscript arr load i load load add subscript arr load binop i load sub 1 load return subscript dp load binop n load sub 1 load End,2
1039,824,module import math alias functiondef largest_triangle arguments arg arg if boolop or compare a load lt 0 compare b load lt 0 return unaryop usub 1 assign area store binop binop binop 3 mult method_call_start attribute_access sqrt math load load 3 method_call_end attribute_access sqrt math load load 3 mult method_call_start pow load a load 2 method_call_end pow load a load 2 div binop 4 mult b load return area load End,2
1113,239,module functiondef repeat_tuples arguments arg arg assign res store binop tuple test_tup load load mult n load return res load End,2
1154,954,module functiondef mul_list arguments arg arg assign result store method_call_start map load lambda arguments arg arg binop x load mult y load nums1 load nums2 load method_call_end map load lambda arguments arg arg binop x load mult y load nums1 load nums2 load return method_call_start list load result load method_call_end list load result load End,2
734,309,module functiondef validate_date arguments arg try_start assign tuple year store month store day store store method_call_start map load int load method_call_start attribute_access split date load load - method_call_end attribute_access split date load load - method_call_end map load int load method_call_start attribute_access split date load load - method_call_end attribute_access split date load load - if boolop or compare year load lt 1 compare month load lt 1 compare month load gt 12 compare day load lt 1 return false if compare month load eq 2 if method_call_start is_leap load year load method_call_end is_leap load year load if compare day load gt 29 return false if compare day load gt 28 return false if boolop or compare month load eq 4 compare month load eq 6 compare month load eq 9 compare month load eq 11 if compare day load gt 30 return false if compare day load gt 31 return false return true try_end except_start valueerror return false except_end assign tuple year store month store day store store method_call_start map load int load method_call_start attribute_access split date load load - method_call_end attribute_access split date load load - method_call_end map load int load method_call_start attribute_access split date load load - method_call_end attribute_access split date load load - if boolop or compare year load lt 1 compare month load lt 1 compare month load gt 12 compare day load lt 1 return false if compare month load eq 2 if method_call_start is_leap load year load method_call_end is_leap load year load if compare day load gt 29 return false if compare day load gt 28 return false if boolop or compare month load eq 4 compare month load eq 6 compare month load eq 9 compare month load eq 11 if compare day load gt 30 return false if compare day load gt 31 return false return true excepthandler valueerror load return false End functiondef is_leap arguments arg if compare binop year load mod 4 noteq 0 return false if compare binop year load mod 100 noteq 0 return true if compare binop year load mod 400 noteq 0 return false return true End,2
293,966,module functiondef roman_to_integer arguments arg assign roman_dict store dict i v x l c d m 1 5 10 50 100 500 1000 assign integer store 0 for i store method_call_start range load method_call_start len load roman load method_call_end len load roman load method_call_end range load method_call_start len load roman load method_call_end len load roman load if boolop and compare i load gt 0 compare subscript roman_dict load subscript roman load i load load load gt subscript roman_dict load subscript roman load binop i load sub 1 load load augassign integer store add binop subscript roman_dict load subscript roman load i load load load sub binop 2 mult subscript roman_dict load subscript roman load binop i load sub 1 load load augassign integer store add subscript roman_dict load subscript roman load i load load load return integer load End,2
1601,351,,1
453,583,"module functiondef shift_first_to_end arguments arg expr 
    shifts the first element to the end of the given list.

    args:
    - lst: a list of elements.

    returns:
    - the original list with the first element shifted to the end.
     return binop subscript lst load slice 1 load add list subscript lst load 0 load load End",1
1659,673,,2
1156,170,module import re alias functiondef is_allowed_specific_char arguments arg assign get_char store method_call_start attribute_access compile re load load [^a-za-z0-9.] method_call_end attribute_access compile re load load [^a-za-z0-9.] assign string store method_call_start attribute_access search get_char load load string load method_call_end attribute_access search get_char load load string load return unaryop not method_call_start bool load string load method_call_end bool load string load End,2
90,1,module functiondef remove_first_last_occurrence arguments arg arg assign string store method_call_start list load string load method_call_end list load string load if compare char load in string load expr method_call_start attribute_access remove string load load char load method_call_end attribute_access remove string load load char load if compare char load in subscript string load slice unaryop usub 1 load expr method_call_start attribute_access remove string load load char load method_call_end attribute_access remove string load load char load return method_call_start attribute_access join  load string load method_call_end attribute_access join  load string load End,1
1079,700,module functiondef floor_min arguments arg arg arg assign x store method_call_start max load binop b load sub 1 n load method_call_end max load binop b load sub 1 n load return binop binop a load mult x load floordiv b load End,2
160,463,module functiondef sum_of_geometric_progression arguments arg arg arg if compare r load eq 1 return binop a load mult n load return binop binop a load mult binop 1 sub binop r load pow n load div binop 1 sub r load End,1
1815,641,,1
824,560,module functiondef zip_lists arguments arg arg return method_call_start list load method_call_start zip load list1 load list2 load method_call_end zip load list1 load list2 load method_call_end list load method_call_start zip load list1 load list2 load method_call_end zip load list1 load list2 load End,1
220,518,module functiondef count_bits arguments arg arg assign count store 0 for i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 if boolop and binop i load bitand binop 1 lshift o load binop i load bitand binop 1 lshift n load augassign count store add 1 return count load End,2
782,452,module functiondef shift_last_to_first arguments arg if lst load assign last_element store method_call_start attribute_access pop lst load load method_call_end attribute_access pop lst load load expr method_call_start attribute_access insert lst load load 0 last_element load method_call_end attribute_access insert lst load load 0 last_element load return lst load End,1
1338,68,,1
1711,209,,1
901,599,module functiondef check_sublist arguments arg arg if compare sublist load in lst load return true return false End,2
1625,358,,1
1063,51,module functiondef sum_three_smallest_nums arguments arg return method_call_start sum load subscript method_call_start sorted load listcomp_start x load comprehension x store lst load compare x load gt 0 listcomp_end x load comprehension x store lst load compare x load gt 0 method_call_end sorted load listcomp_start x load comprehension x store lst load compare x load gt 0 listcomp_end x load comprehension x store lst load compare x load gt 0 slice 3 load method_call_end sum load subscript method_call_start sorted load listcomp_start x load comprehension x store lst load compare x load gt 0 listcomp_end x load comprehension x store lst load compare x load gt 0 method_call_end sorted load listcomp_start x load comprehension x store lst load compare x load gt 0 listcomp_end x load comprehension x store lst load compare x load gt 0 slice 3 load End,2
550,160,module functiondef unique_sublists arguments arg assign result store dict for l store list1 load expr method_call_start attribute_access append method_call_start attribute_access setdefault result load load method_call_start tuple load l load method_call_end tuple load l load method_call_start list load method_call_end list load method_call_end attribute_access setdefault result load load method_call_start tuple load l load method_call_end tuple load l load method_call_start list load method_call_end list load load 1 method_call_end attribute_access append method_call_start attribute_access setdefault result load load method_call_start tuple load l load method_call_end tuple load l load method_call_start list load method_call_end list load method_call_end attribute_access setdefault result load load method_call_start tuple load l load method_call_end tuple load l load method_call_start list load method_call_end list load load 1 for tuple a store b store store method_call_start attribute_access items result load load method_call_end attribute_access items result load load assign subscript result load a load store method_call_start sum load b load method_call_end sum load b load return result load End,1
237,312,module functiondef check_list_items arguments arg arg return method_call_start all load generatorexp_start compare item load eq string load comprehension item store lst load generatorexp_end compare item load eq string load comprehension item store lst load method_call_end all load generatorexp_start compare item load eq string load comprehension item store lst load generatorexp_end compare item load eq string load comprehension item store lst load End,2
975,367,module functiondef find_previous_palindrome arguments arg augassign number store sub 1 while true if compare method_call_start str load number load method_call_end str load number load eq subscript method_call_start str load number load method_call_end str load number load slice unaryop usub 1 load return number load augassign number store sub 1 End,1
697,206,module functiondef is_woodall arguments arg if compare binop x load mod 2 eq 0 return false if compare x load eq 1 return true assign x store binop x load add 1 assign p store 0 while compare binop x load mod 2 eq 0 assign x store binop x load div 2 assign p store binop p load add 1 if compare p load eq x load return true return false End,2
1915,566,,1
1891,815,,1
1288,343,,2
1395,916,,1
334,719,module functiondef ascii_value arguments arg assign ch store k load return method_call_start ord load ch load method_call_end ord load ch load End,2
728,400,module functiondef average_tuple arguments arg assign result store listcomp_start binop method_call_start sum load x load method_call_end sum load x load div method_call_start len load x load method_call_end len load x load comprehension x store method_call_start zip load starred nums load load method_call_end zip load starred nums load load listcomp_end binop method_call_start sum load x load method_call_end sum load x load div method_call_start len load x load method_call_end len load x load comprehension x store method_call_start zip load starred nums load load method_call_end zip load starred nums load load return result load End,2
940,365,module functiondef find_remainder arguments arg arg arg assign mul store 1 for i store method_call_start range load lens load method_call_end range load lens load assign mul store binop binop mul load mult binop subscript arr load i load load mod n load mod n load return binop mul load mod n load End,1
320,91,module functiondef diff arguments arg arg return method_call_start list load binop method_call_start list load binop method_call_start set load li1 load method_call_end set load li1 load sub method_call_start set load li2 load method_call_end set load li2 load method_call_end list load binop method_call_start set load li1 load method_call_end set load li1 load sub method_call_start set load li2 load method_call_end set load li2 load add method_call_start list load binop method_call_start set load li2 load method_call_end set load li2 load sub method_call_start set load li1 load method_call_end set load li1 load method_call_end list load binop method_call_start set load li2 load method_call_end set load li2 load sub method_call_start set load li1 load method_call_end set load li1 load method_call_end list load binop method_call_start list load binop method_call_start set load li1 load method_call_end set load li1 load sub method_call_start set load li2 load method_call_end set load li2 load method_call_end list load binop method_call_start set load li1 load method_call_end set load li1 load sub method_call_start set load li2 load method_call_end set load li2 load add method_call_start list load binop method_call_start set load li2 load method_call_end set load li2 load sub method_call_start set load li1 load method_call_end set load li1 load method_call_end list load binop method_call_start set load li2 load method_call_end set load li2 load sub method_call_start set load li1 load method_call_end set load li1 load End,2
582,557,module functiondef octal_to_decimal arguments arg assign num store n load assign dec_value store 0 assign base store 1 assign temp store num load while temp load assign last_digit store binop temp load mod 10 assign temp store method_call_start int load binop temp load div 10 method_call_end int load binop temp load div 10 augassign dec_value store add binop last_digit load mult base load assign base store binop base load mult 8 return dec_value load End,1
1652,837,,2
517,860,module functiondef word_len arguments arg assign s store method_call_start attribute_access split s load load   method_call_end attribute_access split s load load   for word store s load if compare binop method_call_start len load word load method_call_end len load word load mod 2 noteq 0 return true return false End,1
1745,751,,2
1917,443,,2
1049,745,module functiondef find_max_sum arguments arg if compare n load eq 0 return 0 if compare n load lt 6 return n load assign max_sum store method_call_start max load method_call_start find_max_sum load binop n load floordiv 2 method_call_end find_max_sum load binop n load floordiv 2 method_call_start find_max_sum load binop n load floordiv 3 method_call_end find_max_sum load binop n load floordiv 3 method_call_start find_max_sum load binop n load floordiv 4 method_call_end find_max_sum load binop n load floordiv 4 method_call_start find_max_sum load binop n load floordiv 5 method_call_end find_max_sum load binop n load floordiv 5 n load method_call_end max load method_call_start find_max_sum load binop n load floordiv 2 method_call_end find_max_sum load binop n load floordiv 2 method_call_start find_max_sum load binop n load floordiv 3 method_call_end find_max_sum load binop n load floordiv 3 method_call_start find_max_sum load binop n load floordiv 4 method_call_end find_max_sum load binop n load floordiv 4 method_call_start find_max_sum load binop n load floordiv 5 method_call_end find_max_sum load binop n load floordiv 5 n load return max_sum load End,1
487,330,module assign m store 100 functiondef maxaverageofpath arguments arg arg assign dp store listcomp_start listcomp_start 0 comprehension i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end 0 comprehension i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 comprehension j store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end listcomp_start 0 comprehension i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end 0 comprehension i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 comprehension j store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 assign subscript subscript dp load 0 load 0 store subscript subscript cost load 0 load 0 load for i store method_call_start range load 1 n load method_call_end range load 1 n load assign subscript subscript dp load i load load 0 store binop subscript subscript dp load binop i load sub 1 load 0 load add subscript subscript cost load i load load 0 load for j store method_call_start range load 1 n load method_call_end range load 1 n load assign subscript subscript dp load 0 load j load store binop subscript subscript dp load 0 load binop j load sub 1 load add subscript subscript cost load 0 load j load load for i store method_call_start range load 1 n load method_call_end range load 1 n load for j store method_call_start range load 1 n load method_call_end range load 1 n load assign subscript subscript dp load i load load j load store binop method_call_start max load subscript subscript dp load binop i load sub 1 load j load load subscript subscript dp load i load load binop j load sub 1 load method_call_end max load subscript subscript dp load binop i load sub 1 load j load load subscript subscript dp load i load load binop j load sub 1 load add subscript subscript cost load i load load j load load return binop subscript subscript dp load binop n load sub 1 load binop n load sub 1 load div binop binop 2 mult n load sub 1 End,2
1080,512,"module functiondef get_angle arguments arg expr 
    returns the angle of a complex number.

    parameters:
    complex_num (complex): the complex number.

    returns:
    float: the angle of the complex number in radians.
     return method_call_start attribute_access phase cmath load load complex_num load method_call_end attribute_access phase cmath load load complex_num load End",1
1584,164,,1
1053,780,module functiondef pell_number arguments arg if compare n load lte 0 return none if compare n load eq 1 return 0 if compare n load eq 2 return 1 assign pell_1 store 0 assign pell_2 store 1 for _ store method_call_start range load binop n load sub 2 method_call_end range load binop n load sub 2 assign tuple pell_1 store pell_2 store store tuple pell_2 load binop binop 2 mult pell_2 load add pell_1 load load return pell_2 load End,1
674,334,module functiondef sorted_dict arguments arg assign sorted_dict store dictcomp_start x load method_call_start sorted load y load method_call_end sorted load y load comprehension tuple x store y store store method_call_start attribute_access items dict1 load load method_call_end attribute_access items dict1 load load dictcomp_end x load method_call_start sorted load y load method_call_end sorted load y load comprehension tuple x store y store store method_call_start attribute_access items dict1 load load method_call_end attribute_access items dict1 load load return sorted_dict load End,1
199,476,module functiondef adjacent_element_concatenation arguments arg assign result store list load for i store method_call_start range load binop method_call_start len load tuples load method_call_end len load tuples load sub 1 method_call_end range load binop method_call_start len load tuples load method_call_end len load tuples load sub 1 expr method_call_start attribute_access append result load load binop subscript tuples load i load load add subscript tuples load binop i load add 1 load method_call_end attribute_access append result load load binop subscript tuples load i load load add subscript tuples load binop i load add 1 load return result load End,2
136,211,module functiondef multiples_of_num arguments arg arg assign multiples_of_num store method_call_start list load method_call_start range load n load binop binop m load add 1 mult n load n load method_call_end range load n load binop binop m load add 1 mult n load n load method_call_end list load method_call_start range load n load binop binop m load add 1 mult n load n load method_call_end range load n load binop binop m load add 1 mult n load n load return method_call_start list load multiples_of_num load method_call_end list load multiples_of_num load End,2
1923,434,,2
1239,459,,1
935,582,"module import re alias assign regex store ^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$ functiondef check_email arguments arg if method_call_start attribute_access search re load load regex load email load method_call_end attribute_access search re load load regex load email load return valid email return invalid email End",1
209,483,module functiondef cube_sum_of_odd_natural_numbers arguments arg assign sum store 0 for i store method_call_start range load 1 binop n load mult 2 2 method_call_end range load 1 binop n load mult 2 2 augassign sum store add binop i load pow 3 return sum load End,1
222,647,module import re alias functiondef remove_uppercase arguments arg assign remove_upper store lambda arguments arg method_call_start attribute_access sub re load load [a-z]  text load method_call_end attribute_access sub re load load [a-z]  text load assign result store method_call_start remove_upper load str1 load method_call_end remove_upper load str1 load return result load End,1
768,898,module functiondef previous_palindrome arguments arg for x store method_call_start range load binop num load sub 1 0 unaryop usub 1 method_call_end range load binop num load sub 1 0 unaryop usub 1 if compare method_call_start str load x load method_call_end str load x load eq subscript method_call_start str load x load method_call_end str load x load slice unaryop usub 1 load return x load End,2
1510,39,,1
475,402,"module functiondef set_even_bits arguments arg expr 
    function to set all even bits of a given number.

    parameters:
    num (int): the number to modify.

    returns:
    int: the modified number with all even bits set.
     return binop num load bitor 2863311530 End",1
1147,11,module functiondef volume_cube arguments arg assign volume store binop binop l load mult l load mult l load return volume load End,1
1390,467,,2
1587,433,,1
483,792,module functiondef decimal_to_binary arguments arg return method_call_start attribute_access replace method_call_start bin load n load method_call_end bin load n load load 0b  method_call_end attribute_access replace method_call_start bin load n load method_call_end bin load n load load 0b  End,2
261,615,module functiondef sum_div arguments arg assign divisors store list 1 load for i store method_call_start range load 2 number load method_call_end range load 2 number load if compare binop number load mod i load eq 0 expr method_call_start attribute_access append divisors load load i load method_call_end attribute_access append divisors load load i load return method_call_start sum load divisors load method_call_end sum load divisors load End,2
260,868,module functiondef min_swaps arguments arg arg assign count store 0 for i store method_call_start range load method_call_start len load str1 load method_call_end len load str1 load method_call_end range load method_call_start len load str1 load method_call_end len load str1 load if compare subscript str1 load i load load noteq subscript str2 load i load load augassign count store add 1 if compare binop count load mod 2 eq 0 return binop count load floordiv 2 return not possible End,2
790,767,module functiondef calculate_sum_of_series arguments arg assign result store 0 for i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 augassign result store add binop i load pow 3 return result load End,2
758,895,module functiondef add_consecutive_numbers arguments arg assign result store 0 for i store method_call_start range load binop method_call_start len load nums load method_call_end len load nums load sub 1 method_call_end range load binop method_call_start len load nums load method_call_end len load nums load sub 1 augassign result store add binop subscript nums load i load load add subscript nums load binop i load add 1 load return result load End,1
290,284,module functiondef count_occurrence arguments arg arg assign count store 0 for c store string load if compare c load eq char load augassign count store add 1 return count load End,2
997,798,module import math alias functiondef area_pentagon arguments arg assign area store binop binop method_call_start attribute_access sqrt math load load binop 5 mult binop 5 add binop 2 mult method_call_start attribute_access sqrt math load load 5 method_call_end attribute_access sqrt math load load 5 method_call_end attribute_access sqrt math load load binop 5 mult binop 5 add binop 2 mult method_call_start attribute_access sqrt math load load 5 method_call_end attribute_access sqrt math load load 5 mult method_call_start pow load a load 2 method_call_end pow load a load 2 div 4.0 return area load End,1
13,784,"module functiondef generate_3d_array arguments expr 
    generates a 3d array filled with asterisks.
    
    returns:
    - a 3d array with dimensions 3x3x3, where each element is '*'.
     return binop listcomp_start listcomp_start * comprehension _ store method_call_start range load 3 method_call_end range load 3 listcomp_end * comprehension _ store method_call_start range load 3 method_call_end range load 3 comprehension _ store method_call_start range load 3 method_call_end range load 3 listcomp_end listcomp_start * comprehension _ store method_call_start range load 3 method_call_end range load 3 listcomp_end * comprehension _ store method_call_start range load 3 method_call_end range load 3 comprehension _ store method_call_start range load 3 method_call_end range load 3 mult 3 End",2
44,780,module functiondef minimum_length arguments arg assign maxocc store 0 assign n store method_call_start len load s load method_call_end len load s load assign arr store binop list 0 load mult 26 for i store method_call_start range load n load method_call_end range load n load augassign subscript arr load binop method_call_start ord load subscript s load i load load method_call_end ord load subscript s load i load load sub method_call_start ord load a method_call_end ord load a store add 1 for i store method_call_start range load 26 method_call_end range load 26 if compare subscript arr load i load load gt maxocc load assign maxocc store subscript arr load i load load return binop n load sub maxocc load End,2
1457,185,,1
1818,422,,2
1326,94,,1
1164,751,,1
288,613,module functiondef add_tuple arguments arg arg augassign test_list store add test_tup load return test_list load End,1
1111,487,module functiondef split_two_parts arguments arg arg return tuple subscript list1 load slice l load load subscript list1 load slice l load load load End,2
1720,252,,2
1420,70,,1
1701,487,,1
1606,236,,1
886,261,module from collections import counter alias functiondef count_occurrence arguments arg arg assign count store 0 for item store tup load if compare item load in lst load augassign count store add 1 return count load End,2
346,63,module import re alias functiondef extract_max_numeric_value arguments arg assign numeric_values store method_call_start attribute_access findall re load load \d+ string load method_call_end attribute_access findall re load load \d+ string load if numeric_values load assign max_value store method_call_start max load method_call_start map load int load numeric_values load method_call_end map load int load numeric_values load method_call_end max load method_call_start map load int load numeric_values load method_call_end map load int load numeric_values load return max_value load return none End,1
1305,460,,2
1916,195,,1
1753,74,,2
1538,811,,1
527,903,module functiondef div_of_nums arguments arg arg arg assign result store method_call_start list load method_call_start filter load lambda arguments arg boolop or compare binop x load mod m load eq 0 compare binop x load mod n load eq 0 nums load method_call_end filter load lambda arguments arg boolop or compare binop x load mod m load eq 0 compare binop x load mod n load eq 0 nums load method_call_end list load method_call_start filter load lambda arguments arg boolop or compare binop x load mod m load eq 0 compare binop x load mod n load eq 0 nums load method_call_end filter load lambda arguments arg boolop or compare binop x load mod m load eq 0 compare binop x load mod n load eq 0 nums load return result load End,2
466,823,module functiondef find_common_elements arguments arg assign common_elements store method_call_start set load subscript nested_lists load 0 load method_call_end set load subscript nested_lists load 0 load for lst store subscript nested_lists load slice 1 load expr method_call_start attribute_access intersection_update common_elements load load lst load method_call_end attribute_access intersection_update common_elements load load lst load return method_call_start list load common_elements load method_call_end list load common_elements load End,1
1148,843,module from collections import counter alias functiondef add_dict arguments arg arg assign add_dict store binop method_call_start counter load d1 load method_call_end counter load d1 load add method_call_start counter load d2 load method_call_end counter load d2 load return add_dict load End,1
1456,699,,1
601,295,module functiondef noprofit_noloss arguments arg arg if compare sale_amount load eq actual_cost load return true return false End,1
845,590,module functiondef find_sequences arguments arg import re alias assign pattern store [a-z]+_[a-z]+ assign sequences store method_call_start attribute_access findall re load load pattern load text load method_call_end attribute_access findall re load load pattern load text load return sequences load End,1
1644,604,,1
988,626,module functiondef even_bit_toggle_number arguments arg assign res store 0 assign count store 0 assign temp store n load while compare temp load gt 0 if compare binop count load mod 2 eq 1 assign res store binop res load bitor binop 1 lshift count load assign count store binop count load add 1 augassign temp store rshift 1 return binop n load bitxor res load End,1
1561,651,,2
1507,748,,1
49,195,module functiondef centered_hexagonal_number arguments arg return binop binop binop 3 mult n load mult binop n load sub 1 add 1 End,2
258,150,module import re alias functiondef check_substring arguments arg arg if compare sample load in string load assign y store binop \a add sample load assign x store method_call_start attribute_access search re load load y load string load method_call_end attribute_access search re load load y load string load if x load return string starts with the given substring return string doesnt start with the given substring return entered string isnt a substring End,1
649,860,module functiondef rombus_area arguments arg arg assign area store binop binop p load mult q load div 2 return area load End,2
438,732,module functiondef add_lists arguments arg arg assign res store method_call_start tuple load binop method_call_start list load test_tup load method_call_end list load test_tup load add test_list load method_call_end tuple load binop method_call_start list load test_tup load method_call_end list load test_tup load add test_list load return res load End,1
1516,212,,1
1312,553,,2
352,873,module import datetime alias functiondef check_date arguments arg arg arg try_start assign tuple m store d store y store store method_call_start map load int load tuple m load d load y load load method_call_end map load int load tuple m load d load y load load expr method_call_start attribute_access date datetime load load y load m load d load method_call_end attribute_access date datetime load load y load m load d load return true try_end except_start valueerror return false except_end assign tuple m store d store y store store method_call_start map load int load tuple m load d load y load load method_call_end map load int load tuple m load d load y load load expr method_call_start attribute_access date datetime load load y load m load d load method_call_end attribute_access date datetime load load y load m load d load return true excepthandler valueerror load return false End,2
1253,545,,2
1274,285,,1
1938,290,,1
1192,438,,2
112,973,module functiondef all_bits_set_in_the_given_range arguments arg arg arg assign num store binop binop binop 1 lshift r load sub 1 bitxor binop binop 1 lshift binop l load sub 1 sub 1 assign new_num store binop n load bitand num load if compare num load eq new_num load return true return false End,2
707,347,"module functiondef filter_students arguments arg expr 
    filter the height and width of students stored in a dictionary.

    parameters:
    students (dict): a dictionary containing student names as keys and their height and width as values.

    returns:
    dict: a dictionary with the same structure as the input dictionary, but only containing the height and width values.
     assign filtered_students store dict for tuple student store tuple height store width store store store method_call_start attribute_access items students load load method_call_end attribute_access items students load load assign subscript filtered_students load student load store tuple height load width load load return filtered_students load End",2
85,200,module import math alias functiondef calculate_tetrahedron_area arguments arg return binop method_call_start attribute_access sqrt math load load 3 method_call_end attribute_access sqrt math load load 3 mult binop side_length load pow 2 End,2
501,126,module functiondef is_num_keith arguments arg assign terms store list load assign temp store x load assign n store 0 while compare temp load gt 0 expr method_call_start attribute_access append terms load load binop temp load mod 10 method_call_end attribute_access append terms load load binop temp load mod 10 assign temp store method_call_start int load binop temp load div 10 method_call_end int load binop temp load div 10 augassign n store add 1 expr method_call_start attribute_access reverse terms load load method_call_end attribute_access reverse terms load load assign next_term store 0 assign i store n load while compare next_term load lt x load assign next_term store 0 for j store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 augassign next_term store add subscript terms load binop i load sub j load load expr method_call_start attribute_access append terms load load next_term load method_call_end attribute_access append terms load load next_term load augassign i store add 1 return compare next_term load eq x load End,2
1806,558,,2
1149,787,module functiondef return_sum arguments arg assign sum store 0 for i store method_call_start attribute_access values dict load load method_call_end attribute_access values dict load load assign sum store binop sum load add i load return sum load End,1
759,520,module functiondef radians_to_degrees arguments arg assign degrees store binop radians load mult binop 180 div 3.14159 return degrees load End,1
1803,667,,1
129,831,module functiondef count_x arguments arg arg assign count store 0 for ele store tup load if compare ele load eq x load assign count store binop count load add 1 return count load End,2
1,669,module functiondef recur_gcd arguments arg arg assign low store method_call_start min load a load b load method_call_end min load a load b load assign high store method_call_start max load a load b load method_call_end max load a load b load if compare low load eq 0 return high load if compare low load eq 1 return 1 return method_call_start recur_gcd load low load binop high load mod low load method_call_end recur_gcd load low load binop high load mod low load End,2
1015,750,module functiondef jacobsthal_lucas arguments arg if compare n load eq 0 return 2 if compare n load eq 1 return 1 return binop method_call_start jacobsthal_lucas load binop n load sub 1 method_call_end jacobsthal_lucas load binop n load sub 1 add binop 2 mult method_call_start jacobsthal_lucas load binop n load sub 2 method_call_end jacobsthal_lucas load binop n load sub 2 End,1
1565,243,,2
1455,666,,2
272,26,module functiondef convert_to_float arguments arg tuple load return method_call_start float load t load method_call_end float load t load float load End,2
771,418,module functiondef find_odd_pair arguments arg arg assign oddpair store 0 for i store method_call_start range load 0 n load method_call_end range load 0 n load for j store method_call_start range load binop i load add 1 n load method_call_end range load binop i load add 1 n load if compare binop binop subscript a load i load load bitxor subscript a load j load load mod 2 noteq 0 augassign oddpair store add 1 return oddpair load End,1
1619,961,,2
507,620,module functiondef calculate_magic_square arguments arg assign magic_square store listcomp_start binop list 0 load mult n load comprehension _ store method_call_start range load n load method_call_end range load n load listcomp_end binop list 0 load mult n load comprehension _ store method_call_start range load n load method_call_end range load n load assign magic_constant store binop binop n load mult binop binop n load pow 2 add 1 floordiv 2 assign center store binop n load floordiv 2 assign row store center load assign col store binop center load add 1 for num store method_call_start range load 1 binop binop n load pow 2 add 1 method_call_end range load 1 binop binop n load pow 2 add 1 assign subscript subscript magic_square load row load load col load store num load augassign row store sub 1 augassign col store add 1 if compare row load lt 0 assign row store binop n load sub 1 if compare col load eq n load assign col store 0 if compare subscript subscript magic_square load row load load col load load noteq 0 augassign row store add 1 augassign col store sub 1 return magic_square load End,2
902,739,module functiondef remove_tuples_with_length_k arguments arg arg return listcomp_start tup load comprehension tup store lst load compare method_call_start len load tup load method_call_end len load tup load noteq k load listcomp_end tup load comprehension tup store lst load compare method_call_start len load tup load method_call_end len load tup load noteq k load End,2
1900,605,,2
1550,932,,2
1609,415,,1
1465,19,,2
1297,544,,1
1530,369,,1
722,215,"module import re alias functiondef find_character arguments arg assign uppercase_characters store method_call_start attribute_access findall re load load [a-z] string load method_call_end attribute_access findall re load load [a-z] string load assign lowercase_characters store method_call_start attribute_access findall re load load [a-z] string load method_call_end attribute_access findall re load load [a-z] string load assign numerical_characters store method_call_start attribute_access findall re load load [0-9] string load method_call_end attribute_access findall re load load [0-9] string load assign special_characters store method_call_start attribute_access findall re load load [, .!?] string load method_call_end attribute_access findall re load load [, .!?] string load return tuple uppercase_characters load lowercase_characters load numerical_characters load special_characters load load End",2
602,139,module functiondef check_tuple arguments arg return method_call_start all load generatorexp_start boolop or method_call_start isinstance load value load bool load method_call_end isinstance load value load bool load method_call_start isinstance load value load int load method_call_end isinstance load value load int load method_call_start isinstance load value load float load method_call_end isinstance load value load float load method_call_start isinstance load value load str load method_call_end isinstance load value load str load comprehension value store tuple_ load generatorexp_end boolop or method_call_start isinstance load value load bool load method_call_end isinstance load value load bool load method_call_start isinstance load value load int load method_call_end isinstance load value load int load method_call_start isinstance load value load float load method_call_end isinstance load value load float load method_call_start isinstance load value load str load method_call_end isinstance load value load str load comprehension value store tuple_ load method_call_end all load generatorexp_start boolop or method_call_start isinstance load value load bool load method_call_end isinstance load value load bool load method_call_start isinstance load value load int load method_call_end isinstance load value load int load method_call_start isinstance load value load float load method_call_end isinstance load value load float load method_call_start isinstance load value load str load method_call_end isinstance load value load str load comprehension value store tuple_ load generatorexp_end boolop or method_call_start isinstance load value load bool load method_call_end isinstance load value load bool load method_call_start isinstance load value load int load method_call_end isinstance load value load int load method_call_start isinstance load value load float load method_call_end isinstance load value load float load method_call_start isinstance load value load str load method_call_end isinstance load value load str load comprehension value store tuple_ load End,1
863,858,module functiondef find_exponentio arguments arg arg assign res store method_call_start tuple load generatorexp_start binop ele1 load pow ele2 load comprehension tuple ele1 store ele2 store store method_call_start zip load test_tup1 load test_tup2 load method_call_end zip load test_tup1 load test_tup2 load generatorexp_end binop ele1 load pow ele2 load comprehension tuple ele1 store ele2 store store method_call_start zip load test_tup1 load test_tup2 load method_call_end zip load test_tup1 load test_tup2 load method_call_end tuple load generatorexp_start binop ele1 load pow ele2 load comprehension tuple ele1 store ele2 store store method_call_start zip load test_tup1 load test_tup2 load method_call_end zip load test_tup1 load test_tup2 load generatorexp_end binop ele1 load pow ele2 load comprehension tuple ele1 store ele2 store store method_call_start zip load test_tup1 load test_tup2 load method_call_end zip load test_tup1 load test_tup2 load return res load End,1
1191,161,,2
35,117,module functiondef check_same_characters arguments arg return compare method_call_start len load method_call_start set load s load method_call_end set load s load method_call_end len load method_call_start set load s load method_call_end set load s load eq 1 End,1
1103,728,module functiondef count_positive_numbers arguments arg assign count store 0 for num store lst load if compare num load gt 0 augassign count store add 1 return count load End,1
1196,420,,1
630,144,module functiondef sum_square arguments arg assign i store 1 while compare binop i load mult i load lte n load assign j store 1 while compare binop j load mult j load lte n load if compare binop binop i load mult i load add binop j load mult j load eq n load return true assign j store binop j load add 1 assign i store binop i load add 1 return false End,2
279,381,"module functiondef count_squares arguments arg arg expr 
    counts the number of squares in a rectangle.

    parameters:
    rectangle_length (int): the length of the rectangle.
    rectangle_width (int): the width of the rectangle.

    returns:
    int: the number of squares in the rectangle.
     assign smaller_side store method_call_start min load rectangle_length load rectangle_width load method_call_end min load rectangle_length load rectangle_width load return binop smaller_side load pow 2 End",1
1243,275,,2
1558,103,,2
97,342,module functiondef extract_singly arguments arg assign res store list load assign temp store method_call_start set load method_call_end set load for inner store test_list load for ele store inner load if unaryop not compare ele load in temp load expr method_call_start attribute_access add temp load load ele load method_call_end attribute_access add temp load load ele load expr method_call_start attribute_access append res load load ele load method_call_end attribute_access append res load load ele load return res load End,1
1620,270,,2
725,951,module functiondef remove_matching_tuples arguments arg arg return method_call_start tuple load generatorexp_start t load comprehension t store tuple1 load compare t load notin tuple2 load generatorexp_end t load comprehension t store tuple1 load compare t load notin tuple2 load method_call_end tuple load generatorexp_start t load comprehension t store tuple1 load compare t load notin tuple2 load generatorexp_end t load comprehension t store tuple1 load compare t load notin tuple2 load End,2
1458,390,,1
358,885,"module functiondef count_vowels arguments arg expr 
    this function counts the number of vowels in a given string.
    
    parameters:
    string (str): the input string.
    
    returns:
    int: the number of vowels in the string.
     assign vowels store aeiouaeiou assign count store 0 for char store string load if compare char load in vowels load augassign count store add 1 return count load End",2
1763,881,,1
745,470,module functiondef sum_of_prime_divisors arguments arg functiondef is_prime arguments arg if compare n load lte 1 return false for i store method_call_start range load 2 binop method_call_start int load binop n load pow 0.5 method_call_end int load binop n load pow 0.5 add 1 method_call_end range load 2 binop method_call_start int load binop n load pow 0.5 method_call_end int load binop n load pow 0.5 add 1 if compare binop n load mod i load eq 0 return false return true End functiondef get_prime_divisors arguments arg assign prime_divisors store list load for i store method_call_start range load 2 binop method_call_start int load binop n load pow 0.5 method_call_end int load binop n load pow 0.5 add 1 method_call_end range load 2 binop method_call_start int load binop n load pow 0.5 method_call_end int load binop n load pow 0.5 add 1 if boolop and compare binop n load mod i load eq 0 method_call_start is_prime load i load method_call_end is_prime load i load expr method_call_start attribute_access append prime_divisors load load i load method_call_end attribute_access append prime_divisors load load i load return prime_divisors load End assign prime_divisors store method_call_start get_prime_divisors load num load method_call_end get_prime_divisors load num load assign sum_of_divisors store method_call_start sum load prime_divisors load method_call_end sum load prime_divisors load return sum_of_divisors load End,2
1500,769,,1
1329,631,,1
1460,510,,2
1596,543,,1
946,952,module functiondef find_min_length arguments arg assign minlength store method_call_start min load generatorexp_start method_call_start len load x load method_call_end len load x load comprehension x store lst load generatorexp_end method_call_start len load x load method_call_end len load x load comprehension x store lst load method_call_end min load generatorexp_start method_call_start len load x load method_call_end len load x load comprehension x store lst load generatorexp_end method_call_start len load x load method_call_end len load x load comprehension x store lst load return minlength load End,2
1280,638,,2
1429,579,,1
1172,616,,2
1052,750,module import re alias functiondef camel_to_snake arguments arg assign snake_string store method_call_start attribute_access lower method_call_start attribute_access sub re load load (?<!^)(?=[a-z]) _ string load method_call_end attribute_access sub re load load (?<!^)(?=[a-z]) _ string load load method_call_end attribute_access lower method_call_start attribute_access sub re load load (?<!^)(?=[a-z]) _ string load method_call_end attribute_access sub re load load (?<!^)(?=[a-z]) _ string load load return snake_string load End,2
1136,601,module functiondef compute_ncr_mod_p arguments arg arg arg assign fact_n store 1 assign fact_r store 1 assign fact_nr store 1 for i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 assign fact_n store binop binop fact_n load mult i load mod p load for i store method_call_start range load 1 binop r load add 1 method_call_end range load 1 binop r load add 1 assign fact_r store binop binop fact_r load mult i load mod p load for i store method_call_start range load 1 binop binop n load sub r load add 1 method_call_end range load 1 binop binop n load sub r load add 1 assign fact_nr store binop binop fact_nr load mult i load mod p load assign ncr store binop binop fact_n load floordiv binop fact_r load mult fact_nr load mod p load return ncr load End,2
1360,834,,2
581,559,module import re alias functiondef remove_multiple_spaces arguments arg return method_call_start attribute_access sub re load load \s+   string load method_call_end attribute_access sub re load load \s+   string load End,1
553,251,module functiondef find_min_sum arguments arg assign sum store 0 assign i store 2 while compare binop i load mult i load lte num load while compare binop num load mod i load eq 0 augassign sum store add i load augassign num store div i load augassign i store add 1 augassign sum store add num load return sum load End,2
1924,897,,1
1317,269,,1
411,133,module functiondef find_divisible_numbers arguments arg arg arg assign divisible_numbers store method_call_start list load method_call_start filter load lambda arguments arg boolop or compare binop x load mod m load eq 0 compare binop x load mod n load eq 0 numbers load method_call_end filter load lambda arguments arg boolop or compare binop x load mod m load eq 0 compare binop x load mod n load eq 0 numbers load method_call_end list load method_call_start filter load lambda arguments arg boolop or compare binop x load mod m load eq 0 compare binop x load mod n load eq 0 numbers load method_call_end filter load lambda arguments arg boolop or compare binop x load mod m load eq 0 compare binop x load mod n load eq 0 numbers load return divisible_numbers load End,1
929,89,module functiondef odd_values_string arguments arg assign result store  for i store method_call_start range load method_call_start len load str load method_call_end len load str load method_call_end range load method_call_start len load str load method_call_end len load str load if compare binop i load mod 2 eq 0 assign result store binop result load add subscript str load i load load return result load End,2
1056,852,module functiondef remove_words arguments arg arg return listcomp_start word load comprehension word store words_list load compare word load notin remove_list load listcomp_end word load comprehension word store words_list load compare word load notin remove_list load End,1
62,240,module functiondef get_median arguments arg arg arg assign i store 0 assign j store 0 assign m1 store unaryop usub 1 assign m2 store unaryop usub 1 assign count store 0 while compare count load lt binop n load add 1 augassign count store add 1 if compare i load eq n load assign m1 store m2 load assign m2 store subscript arr2 load 0 load break if compare j load eq n load assign m1 store m2 load assign m2 store subscript arr1 load 0 load break if compare subscript arr1 load i load load lte subscript arr2 load j load load assign m1 store m2 load assign m2 store subscript arr1 load i load load augassign i store add 1 assign m1 store m2 load assign m2 store subscript arr2 load j load load augassign j store add 1 return binop binop m1 load add m2 load div 2 End,1
117,877,module functiondef find_star_num arguments arg return binop binop binop 6 mult n load mult binop n load sub 1 add 1 End,2
1055,110,module functiondef calculate_dog_age arguments arg return binop human_age load mult 7 End,2
1375,531,,1
1392,894,,1
337,322,module functiondef remove_negs arguments arg for item store num_list load if compare item load lt 0 expr method_call_start attribute_access remove num_list load load item load method_call_end attribute_access remove num_list load load item load return num_list load End,2
1638,362,,2
1418,596,,2
1592,832,,2
26,253,module functiondef check_sum_of_divisors arguments arg assign sum_of_divisors store 0 for i store method_call_start range load 1 binop binop n load floordiv 2 add 1 method_call_end range load 1 binop binop n load floordiv 2 add 1 if compare binop n load mod i load eq 0 augassign sum_of_divisors store add i load if compare sum_of_divisors load eq n load return true return false End,1
307,517,module functiondef sum_list arguments arg arg assign res_list store listcomp_start binop subscript lst1 load i load load add subscript lst2 load i load load comprehension i store method_call_start range load method_call_start len load lst1 load method_call_end len load lst1 load method_call_end range load method_call_start len load lst1 load method_call_end len load lst1 load listcomp_end binop subscript lst1 load i load load add subscript lst2 load i load load comprehension i store method_call_start range load method_call_start len load lst1 load method_call_end len load lst1 load method_call_end range load method_call_start len load lst1 load method_call_end len load lst1 load return res_list load End,2
1302,950,,2
1155,507,module functiondef find_depth arguments arg if unaryop not method_call_start isinstance load dictionary load dict load method_call_end isinstance load dictionary load dict load return 0 assign max_depth store 1 for key store dictionary load if method_call_start isinstance load subscript dictionary load key load load dict load method_call_end isinstance load subscript dictionary load key load load dict load assign depth store binop method_call_start find_depth load subscript dictionary load key load load method_call_end find_depth load subscript dictionary load key load load add 1 if compare depth load gt max_depth load assign max_depth store depth load return max_depth load End,1
116,482,module functiondef find_area_of_pentagon arguments arg import math alias return binop binop binop 1 div 4 mult method_call_start attribute_access sqrt math load load binop 5 mult binop 5 add binop 2 mult method_call_start attribute_access sqrt math load load 5 method_call_end attribute_access sqrt math load load 5 method_call_end attribute_access sqrt math load load binop 5 mult binop 5 add binop 2 mult method_call_start attribute_access sqrt math load load 5 method_call_end attribute_access sqrt math load load 5 mult binop side_length load pow 2 End,2
1028,910,"module functiondef count_occurrences arguments arg arg expr 
    count the occurrences of an element in a tuple.
    
    parameters:
        element (object): the element to be counted.
        my_tuple (tuple): the tuple to search for occurrences.
        
    returns:
        int: the number of occurrences of the element in the tuple.
     return method_call_start attribute_access count my_tuple load load element load method_call_end attribute_access count my_tuple load load element load End",1
1424,966,,1
235,20,module functiondef count_pairs arguments arg arg assign count store 0 assign unique_numbers store method_call_start set load numbers load method_call_end set load numbers load for num store unique_numbers load assign complement store binop sum load sub num load if compare complement load in unique_numbers load augassign count store add 1 return count load End,2
1626,649,,2
599,184,module functiondef nth_lucas_number arguments arg if compare n load eq 1 return 2 if compare n load eq 2 return 1 return binop method_call_start nth_lucas_number load binop n load sub 1 method_call_end nth_lucas_number load binop n load sub 1 add method_call_start nth_lucas_number load binop n load sub 2 method_call_end nth_lucas_number load binop n load sub 2 End,2
1251,357,,1
105,667,module import heapq alias functiondef small_nnum arguments arg arg assign smallest store method_call_start attribute_access nsmallest heapq load load n load list1 load method_call_end attribute_access nsmallest heapq load load n load list1 load return smallest load End,2
655,884,module functiondef re_arrange_tuples arguments arg arg assign temp store method_call_start dict load test_list load method_call_end dict load test_list load assign res store listcomp_start tuple key load subscript temp load key load load load comprehension key store ord_list load listcomp_end tuple key load subscript temp load key load load load comprehension key store ord_list load return res load End,2
773,855,module functiondef find_lcm arguments arg arg if compare a load gt b load assign greater store a load assign greater store b load while true if boolop and compare binop greater load mod a load eq 0 compare binop greater load mod b load eq 0 assign lcm store greater load break augassign greater store add 1 return lcm load End,1
1636,75,,2
711,98,module functiondef find_frequency_count arguments arg assign frequency_count store dict for sublist store list_of_lists load for element store sublist load if compare element load in frequency_count load augassign subscript frequency_count load element load store add 1 assign subscript frequency_count load element load store 1 return frequency_count load End,1
200,603,module functiondef sum_digits arguments arg if compare n load eq 0 return 0 return binop binop n load mod 10 add method_call_start sum_digits load method_call_start int load binop n load div 10 method_call_end int load binop n load div 10 method_call_end sum_digits load method_call_start int load binop n load div 10 method_call_end int load binop n load div 10 End,2
409,662,module functiondef maximize_tuples arguments arg arg return method_call_start max load t1 load t2 load method_call_end max load t1 load t2 load End,2
799,328,module functiondef move_zero arguments arg assign a store listcomp_start 0 comprehension i store method_call_start range load method_call_start attribute_access count num_list load load 0 method_call_end attribute_access count num_list load load 0 method_call_end range load method_call_start attribute_access count num_list load load 0 method_call_end attribute_access count num_list load load 0 listcomp_end 0 comprehension i store method_call_start range load method_call_start attribute_access count num_list load load 0 method_call_end attribute_access count num_list load load 0 method_call_end range load method_call_start attribute_access count num_list load load 0 method_call_end attribute_access count num_list load load 0 assign x store listcomp_start i load comprehension i store num_list load compare i load noteq 0 listcomp_end i load comprehension i store num_list load compare i load noteq 0 expr method_call_start attribute_access extend x load load a load method_call_end attribute_access extend x load load a load return x load End,2
1708,229,,2
1884,790,,1
425,769,module functiondef assign_elements arguments arg assign res store method_call_start dict load method_call_end dict load for tuple key store val store store test_list load expr method_call_start attribute_access setdefault res load load val load list load method_call_end attribute_access setdefault res load load val load list load expr method_call_start attribute_access append method_call_start attribute_access setdefault res load load key load list load method_call_end attribute_access setdefault res load load key load list load load val load method_call_end attribute_access append method_call_start attribute_access setdefault res load load key load list load method_call_end attribute_access setdefault res load load key load list load load val load return res load End,2
512,137,module functiondef concatenate_tuples arguments arg arg return tuple t1 load t2 load load End,1
1183,622,,2
1372,329,,2
627,581,module functiondef max_sum_subsequence arguments arg if unaryop not arr load return 0 assign n store method_call_start len load arr load method_call_end len load arr load if compare n load eq 1 return subscript arr load 0 load assign dp store binop list 0 load mult n load assign subscript dp load 0 store subscript arr load 0 load assign subscript dp load 1 store method_call_start max load subscript arr load 0 load subscript arr load 1 load method_call_end max load subscript arr load 0 load subscript arr load 1 load for i store method_call_start range load 2 n load method_call_end range load 2 n load assign subscript dp load i load store method_call_start max load subscript dp load binop i load sub 1 load binop subscript dp load binop i load sub 2 load add subscript arr load i load load method_call_end max load subscript dp load binop i load sub 1 load binop subscript dp load binop i load sub 2 load add subscript arr load i load load return subscript dp load binop n load sub 1 load End,1
190,156,module functiondef loss_amount arguments arg arg if compare sale_amount load gt actual_cost load assign amount store binop sale_amount load sub actual_cost load return amount load return none End,1
1443,712,,1
1869,24,,2
37,496,module functiondef remove_column arguments arg arg for row store nested_list load delete subscript row load column_index load del return nested_list load End,1
796,680,"module functiondef is_binary_string arguments arg expr 
    check whether the given string is a binary string or not.

    args:
        string (str): the string to be checked.

    returns:
        bool: true if the string is a binary string, false otherwise.
     for char store string load if boolop and compare char load noteq 0 compare char load noteq 1 return false return true End",2
1400,469,,1
979,503,module functiondef find_missing arguments arg arg assign l store 0 assign r store binop n load sub 1 while compare l load lte r load assign mid store binop binop l load add r load div 2 assign mid store method_call_start int load mid load method_call_end int load mid load if boolop and compare subscript ar load mid load load noteq binop mid load add 1 compare subscript ar load binop mid load sub 1 load eq mid load return binop mid load add 1 if compare subscript ar load mid load load noteq binop mid load add 1 assign r store binop mid load sub 1 assign l store binop mid load add 1 return unaryop usub 1 End,1
166,433,module functiondef get_tuple_item arguments arg tuple load arg int load return subscript tup load index load load End,2
876,308,module functiondef count_charac arguments arg assign total store 0 for i store str1 load assign total store binop total load add 1 return total load End,2
1231,207,,1
867,413,module functiondef has_decreasing_trend arguments arg for i store method_call_start range load binop method_call_start len load numbers load method_call_end len load numbers load sub 1 method_call_end range load binop method_call_start len load numbers load method_call_end len load numbers load sub 1 if compare subscript numbers load i load load lte subscript numbers load binop i load add 1 load return false return true End,1
505,644,"module functiondef harmonic_sum arguments arg expr 
    calculate the harmonic sum of n-1.

    parameters:
    n (int): a positive integer.

    returns:
    float: the harmonic sum of n-1.

     assign sum store 0 for i store method_call_start range load 1 n load method_call_end range load 1 n load augassign sum store add binop 1 div i load return sum load End",1
161,761,module functiondef find_max_element arguments arg assign left store 0 assign right store binop method_call_start len load arr load method_call_end len load arr load sub 1 while compare left load lte right load assign mid store binop left load add binop binop right load sub left load floordiv 2 if compare subscript arr load mid load load gt subscript arr load binop mid load add 1 load return subscript arr load mid load load if compare subscript arr load left load load lte subscript arr load mid load load assign left store binop mid load add 1 assign right store binop mid load sub 1 return subscript arr load left load load End,1
437,574,module functiondef div_list arguments arg arg assign result store method_call_start map load lambda arguments arg arg binop x load div y load nums1 load nums2 load method_call_end map load lambda arguments arg arg binop x load div y load nums1 load nums2 load return method_call_start list load result load method_call_end list load result load End,2
875,247,module functiondef count_until_tuple arguments arg assign count store 0 for elem store lst load if method_call_start isinstance load elem load tuple load method_call_end isinstance load elem load tuple load break augassign count store add 1 return count load End,2
50,364,module from collections import defaultdict alias functiondef most_occurrences arguments arg assign temp store method_call_start defaultdict load int load method_call_end defaultdict load int load for sub store test_list load for wrd store method_call_start attribute_access split sub load load method_call_end attribute_access split sub load load augassign subscript temp load wrd load store add 1 assign res store method_call_start max load temp load method_call_end max load temp load keyword attribute_access get temp load load return method_call_start str load res load method_call_end str load res load End,2
1744,29,,2
949,739,module functiondef max_val arguments arg assign max_val store method_call_start max load generatorexp_start i load comprehension i store listval load method_call_start isinstance load i load int load method_call_end isinstance load i load int load generatorexp_end i load comprehension i store listval load method_call_start isinstance load i load int load method_call_end isinstance load i load int load method_call_end max load generatorexp_start i load comprehension i store listval load method_call_start isinstance load i load int load method_call_end isinstance load i load int load generatorexp_end i load comprehension i store listval load method_call_start isinstance load i load int load method_call_end isinstance load i load int load return max_val load End,1
665,516,module functiondef get_n_largest arguments arg arg return subscript method_call_start sorted load dataset load method_call_end sorted load dataset load keyword true slice n load load End,1
1567,946,,2
1861,758,,2
1575,778,,1
959,57,module functiondef sort_strings arguments arg return method_call_start sorted load strings load method_call_end sorted load strings load keyword lambda arguments arg method_call_start int load x load method_call_end int load x load End,1
531,703,"module functiondef radix_sort arguments arg expr 
    sorts a list of elements using radix sort.
    
    args:
        lst (list): the list to be sorted.
    
    returns:
        list: the sorted list.
     assign max_val store method_call_start max load lst load method_call_end max load lst load assign num_digits store method_call_start len load method_call_start str load max_val load method_call_end str load max_val load method_call_end len load method_call_start str load max_val load method_call_end str load max_val load for digit_place store method_call_start range load num_digits load method_call_end range load num_digits load assign buckets store listcomp_start list load comprehension _ store method_call_start range load 10 method_call_end range load 10 listcomp_end list load comprehension _ store method_call_start range load 10 method_call_end range load 10 for num store lst load assign digit store binop binop num load floordiv binop 10 pow digit_place load mod 10 expr method_call_start attribute_access append subscript buckets load digit load load load num load method_call_end attribute_access append subscript buckets load digit load load load num load assign lst store listcomp_start num load comprehension bucket store buckets load comprehension num store bucket load listcomp_end num load comprehension bucket store buckets load comprehension num store bucket load return lst load End",2
1809,245,,2
1602,954,,1
652,335,module import math alias functiondef is_not_prime arguments arg assign result store false for i store method_call_start range load 2 binop method_call_start int load method_call_start attribute_access sqrt math load load n load method_call_end attribute_access sqrt math load load n load method_call_end int load method_call_start attribute_access sqrt math load load n load method_call_end attribute_access sqrt math load load n load add 1 method_call_end range load 2 binop method_call_start int load method_call_start attribute_access sqrt math load load n load method_call_end attribute_access sqrt math load load n load method_call_end int load method_call_start attribute_access sqrt math load load n load method_call_end attribute_access sqrt math load load n load add 1 if compare binop n load mod i load eq 0 assign result store true return result load End,2
1462,261,,1
816,361,module functiondef is_num_decagonal arguments arg return binop binop binop 4 mult n load mult n load sub binop 3 mult n load End,1
1579,359,,2
1135,60,module functiondef find_pairs arguments arg arg assign pairs store list load for i store method_call_start range load method_call_start len load arr load method_call_end len load arr load method_call_end range load method_call_start len load arr load method_call_end len load arr load for j store method_call_start range load binop i load add 1 method_call_start len load arr load method_call_end len load arr load method_call_end range load binop i load add 1 method_call_start len load arr load method_call_end len load arr load if compare binop subscript arr load i load load add subscript arr load j load load eq target load expr method_call_start attribute_access append pairs load load tuple subscript arr load i load load subscript arr load j load load load method_call_end attribute_access append pairs load load tuple subscript arr load i load load subscript arr load j load load load return pairs load End,1
1175,340,,2
853,38,module functiondef string_to_list arguments arg assign lst store method_call_start list load method_call_start attribute_access split string load load   method_call_end attribute_access split string load load   method_call_end list load method_call_start attribute_access split string load load   method_call_end attribute_access split string load load   return lst load End,2
252,888,module functiondef max_difference arguments arg assign temp store listcomp_start method_call_start abs load binop b load sub a load method_call_end abs load binop b load sub a load comprehension tuple a store b store store test_list load listcomp_end method_call_start abs load binop b load sub a load method_call_end abs load binop b load sub a load comprehension tuple a store b store store test_list load assign res store method_call_start max load temp load method_call_end max load temp load return res load End,2
1594,856,,2
943,825,module functiondef match_word arguments arg arg return method_call_start attribute_access startswith string load load word load method_call_end attribute_access startswith string load load word load End,1
1600,259,,2
1705,849,,1
808,817,module functiondef min_val arguments arg assign min_val store method_call_start min load generatorexp_start i load comprehension i store listval load method_call_start isinstance load i load int load method_call_end isinstance load i load int load generatorexp_end i load comprehension i store listval load method_call_start isinstance load i load int load method_call_end isinstance load i load int load method_call_end min load generatorexp_start i load comprehension i store listval load method_call_start isinstance load i load int load method_call_end isinstance load i load int load generatorexp_end i load comprehension i store listval load method_call_start isinstance load i load int load method_call_end isinstance load i load int load return min_val load End,2
1881,650,,1
68,579,module functiondef interleave_lists arguments arg arg arg assign result store listcomp_start el load comprehension pair store method_call_start zip load list1 load list2 load list3 load method_call_end zip load list1 load list2 load list3 load comprehension el store pair load listcomp_end el load comprehension pair store method_call_start zip load list1 load list2 load list3 load method_call_end zip load list1 load list2 load list3 load comprehension el store pair load return result load End,2
299,656,module functiondef contains_duplicate arguments arg return compare method_call_start len load nums load method_call_end len load nums load noteq method_call_start len load method_call_start set load nums load method_call_end set load nums load method_call_end len load method_call_start set load nums load method_call_end set load nums load End,1
1229,727,,1
766,393,module functiondef check_month_contains_31_days arguments arg assign thirty_one_days store list january march may july august october december load if compare month_name load in thirty_one_days load return true return false End,2
840,918,module functiondef max_abs_diff arguments arg arg assign minele store subscript arr load 0 load assign maxele store subscript arr load 0 load for i store method_call_start range load 1 n load method_call_end range load 1 n load assign minele store method_call_start min load minele load subscript arr load i load load method_call_end min load minele load subscript arr load i load load assign maxele store method_call_start max load maxele load subscript arr load i load load method_call_end max load maxele load subscript arr load i load load return binop maxele load sub minele load End,2
1436,180,,1
1368,718,,1
1323,549,,2
654,729,module functiondef find_demlo arguments arg assign l store method_call_start len load s load method_call_end len load s load assign res store  for i store method_call_start range load 1 binop l load add 1 method_call_end range load 1 binop l load add 1 assign res store binop res load add method_call_start str load i load method_call_end str load i load for i store method_call_start range load binop l load sub 1 0 unaryop usub 1 method_call_end range load binop l load sub 1 0 unaryop usub 1 assign res store binop res load add method_call_start str load i load method_call_end str load i load return res load End,1
1256,327,,1
820,422,module functiondef select_nth_item arguments arg arg return subscript lst load binop n load sub 1 load End,1
797,296,module functiondef find_angle arguments arg arg assign c store binop 180 sub binop a load add b load return c load End,2
793,561,module functiondef max_product arguments arg assign arr_len store method_call_start len load arr load method_call_end len load arr load if compare arr_len load lt 2 return none assign x store subscript arr load 0 load assign y store subscript arr load 1 load for i store method_call_start range load 0 arr_len load method_call_end range load 0 arr_len load for j store method_call_start range load binop i load add 1 arr_len load method_call_end range load binop i load add 1 arr_len load if compare binop subscript arr load i load load mult subscript arr load j load load gt binop x load mult y load assign x store subscript arr load i load load assign y store subscript arr load j load load return tuple x load y load load End,1
75,171,module functiondef prime_num arguments arg if compare num load gte 1 for i store method_call_start range load 2 binop num load floordiv 2 method_call_end range load 2 binop num load floordiv 2 if compare binop num load mod i load eq 0 return false return true return false End,2
1134,181,module functiondef remove_elements arguments arg arg return method_call_start tuple load generatorexp_start element load comprehension element store data_tuple load compare method_call_start type load element load method_call_end type load element load noteq data_type load generatorexp_end element load comprehension element store data_tuple load compare method_call_start type load element load method_call_end type load element load noteq data_type load method_call_end tuple load generatorexp_start element load comprehension element store data_tuple load compare method_call_start type load element load method_call_end type load element load noteq data_type load generatorexp_end element load comprehension element store data_tuple load compare method_call_start type load element load method_call_end type load element load noteq data_type load End,2
588,484,module functiondef tuple_modulo arguments arg arg assign res store method_call_start tuple load generatorexp_start binop ele1 load mod ele2 load comprehension tuple ele1 store ele2 store store method_call_start zip load test_tup1 load test_tup2 load method_call_end zip load test_tup1 load test_tup2 load generatorexp_end binop ele1 load mod ele2 load comprehension tuple ele1 store ele2 store store method_call_start zip load test_tup1 load test_tup2 load method_call_end zip load test_tup1 load test_tup2 load method_call_end tuple load generatorexp_start binop ele1 load mod ele2 load comprehension tuple ele1 store ele2 store store method_call_start zip load test_tup1 load test_tup2 load method_call_end zip load test_tup1 load test_tup2 load generatorexp_end binop ele1 load mod ele2 load comprehension tuple ele1 store ele2 store store method_call_start zip load test_tup1 load test_tup2 load method_call_end zip load test_tup1 load test_tup2 load return res load End,1
476,938,module import re alias functiondef split_lowerstring arguments arg return method_call_start attribute_access findall re load load [a-z][^a-z]* text load method_call_end attribute_access findall re load load [a-z][^a-z]* text load End,2
631,655,module functiondef find_last_occurrence arguments arg arg assign tuple left store right store store tuple 0 binop method_call_start len load a load method_call_end len load a load sub 1 load assign result store unaryop usub 1 while compare left load lte right load assign mid store binop binop left load add right load floordiv 2 if compare x load eq subscript a load mid load load assign result store mid load assign left store binop mid load add 1 if compare x load lt subscript a load mid load load assign right store binop mid load sub 1 assign left store binop mid load add 1 return result load End,2
1695,447,,2
622,766,module functiondef filter_evennumbers arguments arg assign even_nums store method_call_start list load method_call_start filter load lambda arguments arg compare binop x load mod 2 eq 0 nums load method_call_end filter load lambda arguments arg compare binop x load mod 2 eq 0 nums load method_call_end list load method_call_start filter load lambda arguments arg compare binop x load mod 2 eq 0 nums load method_call_end filter load lambda arguments arg compare binop x load mod 2 eq 0 nums load return even_nums load End,2
614,134,module functiondef sum_range_list arguments arg arg arg assign sum_range store 0 for i store method_call_start range load m load binop n load add 1 1 method_call_end range load m load binop n load add 1 1 augassign sum_range store add subscript nums load i load load return sum_range load End,2
207,819,module functiondef is_substring_present arguments arg arg for s store string_list load if compare substring load in s load return true return false End,1
1604,222,,1
831,289,module functiondef calculate_rhombus_perimeter arguments arg return binop 4 mult a load End,1
1333,618,,1
228,106,module functiondef ncr_modp arguments arg arg arg assign c store listcomp_start 0 comprehension i store method_call_start range load binop r load add 1 method_call_end range load binop r load add 1 listcomp_end 0 comprehension i store method_call_start range load binop r load add 1 method_call_end range load binop r load add 1 assign subscript c load 0 store 1 for i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 for j store method_call_start range load method_call_start min load i load r load method_call_end min load i load r load 0 unaryop usub 1 method_call_end range load method_call_start min load i load r load method_call_end min load i load r load 0 unaryop usub 1 assign subscript c load j load store binop binop subscript c load j load load add subscript c load binop j load sub 1 load mod p load return subscript c load r load load End,1
1770,23,,2
1422,913,,1
1685,174,,1
140,41,module functiondef find_largest_sum arguments arg arg assign modified_arr store binop arr load mult k load assign current_sum store max_sum store subscript modified_arr load 0 load for i store method_call_start range load 1 method_call_start len load modified_arr load method_call_end len load modified_arr load method_call_end range load 1 method_call_start len load modified_arr load method_call_end len load modified_arr load assign current_sum store method_call_start max load subscript modified_arr load i load load binop current_sum load add subscript modified_arr load i load load method_call_end max load subscript modified_arr load i load load binop current_sum load add subscript modified_arr load i load load assign max_sum store method_call_start max load max_sum load current_sum load method_call_end max load max_sum load current_sum load return max_sum load End,2
1397,900,,2
405,697,module functiondef find_division arguments arg assign even_num store none assign odd_num store none for num store lst load if boolop and compare binop num load mod 2 eq 0 compare even_num load is none assign even_num store num load if boolop and compare binop num load mod 2 noteq 0 compare odd_num load is none assign odd_num store num load if boolop and compare even_num load isnot none compare odd_num load isnot none break if boolop and compare even_num load isnot none compare odd_num load isnot none return binop even_num load div odd_num load return none End,2
985,632,module functiondef remove_column arguments arg arg for i store list1 load delete subscript i load n load del return list1 load End,2
464,271,module functiondef is_alternating_string arguments arg str load if compare method_call_start len load string load method_call_end len load string load lt 2 return false assign char1 store subscript string load 0 load assign char2 store subscript string load 1 load for i store method_call_start range load 2 method_call_start len load string load method_call_end len load string load method_call_end range load 2 method_call_start len load string load method_call_end len load string load if boolop and compare subscript string load i load load noteq char1 load compare subscript string load i load load noteq char2 load return false if compare subscript string load i load load eq subscript string load binop i load sub 1 load return false return true bool load End,1
66,659,module from itertools import groupby alias functiondef group_element arguments arg assign res store method_call_start dict load method_call_end dict load for tuple key store val store store method_call_start groupby load method_call_start sorted load test_list load method_call_end sorted load test_list load keyword lambda arguments arg subscript ele load 1 load method_call_end groupby load method_call_start sorted load test_list load method_call_end sorted load test_list load keyword lambda arguments arg subscript ele load 1 load keyword lambda arguments arg subscript ele load 1 load assign subscript res load key load store listcomp_start subscript ele load 0 load comprehension ele store val load listcomp_end subscript ele load 0 load comprehension ele store val load return res load End,1
303,364,module functiondef circle_circumference arguments arg assign perimeter store binop binop 2 mult 3.1415 mult r load return perimeter load End,1
1672,953,,1
1405,763,,2
1607,911,,1
998,238,module from collections import counter alias functiondef max_char arguments arg assign temp store method_call_start counter load str1 load method_call_end counter load str1 load assign max_char store method_call_start max load temp load method_call_end max load temp load keyword attribute_access get temp load load return max_char load End,1
708,665,module functiondef string_list_to_tuple arguments arg assign result store method_call_start tuple load generatorexp_start x load comprehension x store str1 load unaryop not method_call_start attribute_access isspace x load load method_call_end attribute_access isspace x load load generatorexp_end x load comprehension x store str1 load unaryop not method_call_start attribute_access isspace x load load method_call_end attribute_access isspace x load load method_call_end tuple load generatorexp_start x load comprehension x store str1 load unaryop not method_call_start attribute_access isspace x load load method_call_end attribute_access isspace x load load generatorexp_end x load comprehension x store str1 load unaryop not method_call_start attribute_access isspace x load load method_call_end attribute_access isspace x load load return result load End,2
154,65,module functiondef have_common_element arguments arg arg for element store list1 load if compare element load in list2 load return true return false End,1
939,607,module import re alias functiondef search_literal arguments arg arg assign match store method_call_start attribute_access search re load load pattern load text load method_call_end attribute_access search re load load pattern load text load assign s store method_call_start attribute_access start match load load method_call_end attribute_access start match load load assign e store method_call_start attribute_access end match load load method_call_end attribute_access end match load load return tuple s load e load load End,1
1171,53,,1
971,841,"module functiondef find_string_length arguments arg expr 
    returns the length of the given string.

    parameters:
    string (str): the input string.

    returns:
    int: the length of the string.
     return method_call_start len load string load method_call_end len load string load End",2
1794,482,,1
269,168,module import re alias functiondef check_ending_with_alphanumeric arguments arg str load assign pattern store ^\w+$ assign match store method_call_start attribute_access search re load load pattern load string load method_call_end attribute_access search re load load pattern load string load return method_call_start bool load match load method_call_end bool load match load bool load End,2
1524,619,,2
583,81,module functiondef count_pairs arguments arg arg arg assign count store 0 for i store method_call_start range load 0 n load method_call_end range load 0 n load for j store method_call_start range load binop i load add 1 n load method_call_end range load binop i load add 1 n load if boolop or compare binop subscript arr load i load load sub subscript arr load j load load eq k load compare binop subscript arr load j load load sub subscript arr load i load load eq k load augassign count store add 1 return count load End,2
225,538,module import re alias functiondef split_upperstring arguments arg return method_call_start attribute_access findall re load load [a-z][^a-z]* text load method_call_end attribute_access findall re load load [a-z][^a-z]* text load End,2
749,882,module functiondef ncr arguments arg arg if compare r load gt binop n load div 2 assign r store binop n load sub r load assign answer store 1 for i store method_call_start range load 1 binop r load add 1 method_call_end range load 1 binop r load add 1 augassign answer store mult binop binop n load sub r load add i load augassign answer store div i load return answer load End functiondef binomial_probability arguments arg arg arg return binop binop method_call_start ncr load n load k load method_call_end ncr load n load k load mult method_call_start pow load p load k load method_call_end pow load p load k load mult method_call_start pow load binop 1 sub p load binop n load sub k load method_call_end pow load binop 1 sub p load binop n load sub k load End,2
1448,914,,2
834,956,module functiondef counting_sort arguments arg assign max_value store 0 for i store method_call_start range load method_call_start len load my_list load method_call_end len load my_list load method_call_end range load method_call_start len load my_list load method_call_end len load my_list load if compare subscript my_list load i load load gt max_value load assign max_value store subscript my_list load i load load assign buckets store binop list 0 load mult binop max_value load add 1 for i store my_list load augassign subscript buckets load i load store add 1 assign i store 0 for j store method_call_start range load binop max_value load add 1 method_call_end range load binop max_value load add 1 for a store method_call_start range load subscript buckets load j load load method_call_end range load subscript buckets load j load load assign subscript my_list load i load store j load augassign i store add 1 return my_list load End,1
232,111,module functiondef count_lists arguments arg assign count store 0 for item store lists load if method_call_start isinstance load item load list load method_call_end isinstance load item load list load augassign count store add 1 return count load End,2
540,599,module functiondef split_list arguments arg arg return tuple subscript lst load slice length load load subscript lst load slice length load load load End,1
618,376,module functiondef repeat_elements arguments arg assign repeated_elements store list load for tuple element store count store store method_call_start attribute_access items elements load load method_call_end attribute_access items elements load load expr method_call_start attribute_access extend repeated_elements load load binop list element load load mult count load method_call_end attribute_access extend repeated_elements load load binop list element load load mult count load return repeated_elements load End,1
1219,354,,2
1873,967,,1
406,12,module functiondef subtract_nested_tuples arguments arg assign result store subscript nested_tuples load 0 load for tup store subscript nested_tuples load slice 1 load assign result store method_call_start tuple load generatorexp_start binop a load sub b load comprehension tuple a store b store store method_call_start zip load result load tup load method_call_end zip load result load tup load generatorexp_end binop a load sub b load comprehension tuple a store b store store method_call_start zip load result load tup load method_call_end zip load result load tup load method_call_end tuple load generatorexp_start binop a load sub b load comprehension tuple a store b store store method_call_start zip load result load tup load method_call_end zip load result load tup load generatorexp_end binop a load sub b load comprehension tuple a store b store store method_call_start zip load result load tup load method_call_end zip load result load tup load return result load End,2
1497,842,,2
776,731,module functiondef find_largest_integers arguments arg import heapq alias return method_call_start attribute_access nlargest heapq load load method_call_start len load numbers load method_call_end len load numbers load numbers load method_call_end attribute_access nlargest heapq load load method_call_start len load numbers load method_call_end len load numbers load numbers load End,1
388,203,module functiondef count_flips arguments arg assign flips store 0 for i store method_call_start range load 1 method_call_start len load binary_string load method_call_end len load binary_string load method_call_end range load 1 method_call_start len load binary_string load method_call_end len load binary_string load if compare subscript binary_string load i load load eq subscript binary_string load binop i load sub 1 load augassign flips store add 1 return flips load End,1
634,235,module functiondef convert_to_float arguments arg for i store method_call_start range load method_call_start len load lst load method_call_end len load lst load method_call_end range load method_call_start len load lst load method_call_end len load lst load try_start assign subscript lst load i load store method_call_start float load subscript lst load i load load method_call_end float load subscript lst load i load load try_end except_start valueerror pass except_end assign subscript lst load i load store method_call_start float load subscript lst load i load load method_call_end float load subscript lst load i load load excepthandler valueerror load pass return lst load End,2
1186,15,,1
1899,840,,2
535,135,module import re alias functiondef remove_extra_char arguments arg assign pattern store method_call_start attribute_access compile re load load [\w_]+ method_call_end attribute_access compile re load load [\w_]+ return method_call_start attribute_access sub pattern load load  text1 load method_call_end attribute_access sub pattern load load  text1 load End,2
1902,120,,1
870,348,module functiondef string_to_tuple arguments arg assign result store method_call_start tuple load generatorexp_start x load comprehension x store str1 load unaryop not method_call_start attribute_access isspace x load load method_call_end attribute_access isspace x load load generatorexp_end x load comprehension x store str1 load unaryop not method_call_start attribute_access isspace x load load method_call_end attribute_access isspace x load load method_call_end tuple load generatorexp_start x load comprehension x store str1 load unaryop not method_call_start attribute_access isspace x load load method_call_end attribute_access isspace x load load generatorexp_end x load comprehension x store str1 load unaryop not method_call_start attribute_access isspace x load load method_call_end attribute_access isspace x load load return result load End,2
680,584,module functiondef product_equal arguments arg if compare n load lt 10 return false assign prododd store 1 assign prodeven store 1 while compare n load gt 0 assign digit store binop n load mod 10 augassign prododd store mult digit load assign n store binop n load floordiv 10 if compare n load eq 0 break assign digit store binop n load mod 10 augassign prodeven store mult digit load assign n store binop n load floordiv 10 if compare prododd load eq prodeven load return true return false End,2
1822,625,,2
1363,99,,1
1385,330,,1
133,797,"module functiondef count_and_square arguments arg expr 
    write a function to count number of lists in a given list of lists and square the count.
    
    args:
    - lists: a list of lists
    
    returns:
    - count_squared: the square of the count of lists in the given list of lists
     assign count store 0 for item store lists load if method_call_start isinstance load item load list load method_call_end isinstance load item load list load augassign count store add 1 assign count_squared store binop count load pow 2 return count_squared load End",2
1024,293,module functiondef count_intgral_points arguments arg arg arg arg return binop binop binop y2 load sub y1 load sub 1 mult binop binop x2 load sub x1 load sub 1 End,1
229,721,module functiondef remove_occ arguments arg arg for i store method_call_start range load method_call_start len load s load method_call_end len load s load method_call_end range load method_call_start len load s load method_call_end len load s load if compare subscript s load i load load eq ch load assign s store binop subscript s load slice 0 i load load add subscript s load slice binop i load add 1 load break for i store method_call_start range load binop method_call_start len load s load method_call_end len load s load sub 1 unaryop usub 1 unaryop usub 1 method_call_end range load binop method_call_start len load s load method_call_end len load s load sub 1 unaryop usub 1 unaryop usub 1 if compare subscript s load i load load eq ch load assign s store binop subscript s load slice 0 i load load add subscript s load slice binop i load add 1 load break return s load End,1
1289,188,,1
55,338,module functiondef re_arrange_array arguments arg arg assign j store 0 for i store method_call_start range load 0 n load method_call_end range load 0 n load if compare subscript arr load i load load lt 0 assign temp store subscript arr load i load load assign subscript arr load i load store subscript arr load j load load assign subscript arr load j load store temp load assign j store binop j load add 1 return arr load End,2
348,645,module functiondef find_largest_positive arguments arg assign positive_nums store listcomp_start num load comprehension num store lst load compare num load gt 0 listcomp_end num load comprehension num store lst load compare num load gt 0 if unaryop not positive_nums load return none return method_call_start max load positive_nums load method_call_end max load positive_nums load End,2
1290,810,,1
821,448,module functiondef sum_even_and_even_index arguments arg arg assign i store 0 assign sum store 0 for i store method_call_start range load 0 n load 2 method_call_end range load 0 n load 2 if compare binop subscript arr load i load load mod 2 eq 0 augassign sum store add subscript arr load i load load return sum load End,2
568,163,module import math alias functiondef area_tetrahedron arguments arg assign area store binop method_call_start attribute_access sqrt math load load 3 method_call_end attribute_access sqrt math load load 3 mult binop side load mult side load return area load End,1
1682,386,,1
1085,923,module from sys import maxsize alias functiondef max_sub_array_sum arguments arg arg assign max_so_far store binop unaryop usub maxsize load sub 1 assign max_ending_here store 0 assign start store 0 assign end store 0 assign s store 0 for i store method_call_start range load 0 size load method_call_end range load 0 size load augassign max_ending_here store add subscript a load i load load if compare max_so_far load lt max_ending_here load assign max_so_far store max_ending_here load assign start store s load assign end store i load if compare max_ending_here load lt 0 assign max_ending_here store 0 assign s store binop i load add 1 return binop binop end load sub start load add 1 End,1
1095,949,module functiondef find_max_product_pair arguments arg assign max1 store method_call_start max load subscript arr load 0 load subscript arr load 1 load method_call_end max load subscript arr load 0 load subscript arr load 1 load assign max2 store method_call_start min load subscript arr load 0 load subscript arr load 1 load method_call_end min load subscript arr load 0 load subscript arr load 1 load for i store method_call_start range load 2 method_call_start len load arr load method_call_end len load arr load method_call_end range load 2 method_call_start len load arr load method_call_end len load arr load if compare subscript arr load i load load gt max1 load assign max2 store max1 load assign max1 store subscript arr load i load load if compare subscript arr load i load load gt max2 load assign max2 store subscript arr load i load load return binop max1 load mult max2 load End,1
1016,101,module import re alias functiondef snake_to_camel arguments arg assign camel_case_string store method_call_start attribute_access sub re load load _([a-z]) lambda arguments arg method_call_start attribute_access upper method_call_start attribute_access group match load load 1 method_call_end attribute_access group match load load 1 load method_call_end attribute_access upper method_call_start attribute_access group match load load 1 method_call_end attribute_access group match load load 1 load snake_case_string load method_call_end attribute_access sub re load load _([a-z]) lambda arguments arg method_call_start attribute_access upper method_call_start attribute_access group match load load 1 method_call_end attribute_access group match load load 1 load method_call_end attribute_access upper method_call_start attribute_access group match load load 1 method_call_end attribute_access group match load load 1 load snake_case_string load return camel_case_string load End,2
1408,748,,2
1067,550,module functiondef search arguments arg arg assign xor store 0 for i store method_call_start range load n load method_call_end range load n load assign xor store binop xor load bitxor subscript arr load i load load return xor load End,1
1188,880,,1
0,179,module functiondef find_negative_ratio arguments arg assign negative_count store 0 assign total_count store method_call_start len load arr load method_call_end len load arr load for num store arr load if compare num load lt 0 augassign negative_count store add 1 return binop negative_count load div total_count load End,1
823,814,module functiondef count_no arguments arg arg arg arg assign count store 0 for i store method_call_start range load l load binop r load add 1 method_call_end range load l load binop r load add 1 if compare binop i load mod a load noteq 0 augassign count store add 1 if compare count load eq n load break return i load End,2
1263,172,,1
333,193,module functiondef is_word_present arguments arg arg assign s store method_call_start attribute_access split sentence load load   method_call_end attribute_access split sentence load load   for i store s load if compare i load eq word load return true return false End,2
441,704,module functiondef group_keyvalue arguments arg assign result store dict for tuple k store v store store l load expr method_call_start attribute_access append method_call_start attribute_access setdefault result load load k load list load method_call_end attribute_access setdefault result load load k load list load load v load method_call_end attribute_access append method_call_start attribute_access setdefault result load load k load list load method_call_end attribute_access setdefault result load load k load list load load v load return result load End,2
563,696,module functiondef reverse_list_lists arguments arg for l store lists load expr method_call_start attribute_access sort l load load method_call_end attribute_access sort l load load keyword true return lists load End,1
510,129,module functiondef tuple_to_dict arguments arg assign res store method_call_start dict load generatorexp_start subscript test_tup load slice idx load binop idx load add 2 load comprehension idx store method_call_start range load 0 method_call_start len load test_tup load method_call_end len load test_tup load 2 method_call_end range load 0 method_call_start len load test_tup load method_call_end len load test_tup load 2 generatorexp_end subscript test_tup load slice idx load binop idx load add 2 load comprehension idx store method_call_start range load 0 method_call_start len load test_tup load method_call_end len load test_tup load 2 method_call_end range load 0 method_call_start len load test_tup load method_call_end len load test_tup load 2 method_call_end dict load generatorexp_start subscript test_tup load slice idx load binop idx load add 2 load comprehension idx store method_call_start range load 0 method_call_start len load test_tup load method_call_end len load test_tup load 2 method_call_end range load 0 method_call_start len load test_tup load method_call_end len load test_tup load 2 generatorexp_end subscript test_tup load slice idx load binop idx load add 2 load comprehension idx store method_call_start range load 0 method_call_start len load test_tup load method_call_end len load test_tup load 2 method_call_end range load 0 method_call_start len load test_tup load method_call_end len load test_tup load 2 return res load End,2
1017,968,module functiondef count_distinct_power_of_prime_factor arguments arg assign prime_factors store list load assign i store 2 while compare binop i load mult i load lte num load while compare binop num load mod i load eq 0 expr method_call_start attribute_access append prime_factors load load i load method_call_end attribute_access append prime_factors load load i load assign num store binop num load floordiv i load augassign i store add 1 if compare num load gt 1 expr method_call_start attribute_access append prime_factors load load num load method_call_end attribute_access append prime_factors load load num load assign distinct_powers store method_call_start set load method_call_end set load for prime_factor store prime_factors load assign factor_power store 1 while compare binop prime_factor load pow factor_power load lte num load if compare binop num load mod binop prime_factor load pow factor_power load eq 0 expr method_call_start attribute_access add distinct_powers load load binop prime_factor load pow factor_power load method_call_end attribute_access add distinct_powers load load binop prime_factor load pow factor_power load augassign factor_power store add 1 return method_call_start len load distinct_powers load method_call_end len load distinct_powers load End,2
682,687,module functiondef find_quotient arguments arg arg return binop num1 load div num2 load End,2
186,740,module functiondef max_subarray_product arguments arg assign n store method_call_start len load arr load method_call_end len load arr load assign max_ending_here store 1 assign min_ending_here store 1 assign max_so_far store 0 assign flag store 0 for i store method_call_start range load 0 n load method_call_end range load 0 n load if compare subscript arr load i load load gt 0 assign max_ending_here store binop max_ending_here load mult subscript arr load i load load assign min_ending_here store method_call_start min load binop min_ending_here load mult subscript arr load i load load 1 method_call_end min load binop min_ending_here load mult subscript arr load i load load 1 assign flag store 1 if compare subscript arr load i load load eq 0 assign max_ending_here store 1 assign min_ending_here store 1 assign temp store max_ending_here load assign max_ending_here store method_call_start max load binop min_ending_here load mult subscript arr load i load load 1 method_call_end max load binop min_ending_here load mult subscript arr load i load load 1 assign min_ending_here store binop temp load mult subscript arr load i load load if compare max_so_far load lt max_ending_here load assign max_so_far store max_ending_here load if boolop and compare flag load eq 0 compare max_so_far load eq 0 return 0 return max_so_far load End,1
215,634,module functiondef flatten arguments arg for tup store test_tuple load if method_call_start isinstance load tup load tuple load method_call_end isinstance load tup load tuple load expr yieldfrom method_call_start flatten load tup load method_call_end flatten load tup load expr yield tup load End functiondef count_element_freq arguments arg assign res store dict for ele store method_call_start flatten load test_tuple load method_call_end flatten load test_tuple load if compare ele load notin res load assign subscript res load ele load store 0 augassign subscript res load ele load store add 1 return res load End,2
463,972,module functiondef calculate_parallelogram_perimeter arguments arg arg return binop 2 mult binop base load add side load End,2
805,170,"module import re alias functiondef is_decimal arguments arg assign num_fetch store method_call_start attribute_access compile re load load ^[0-9]+(\.[0-9]{1,2})?$ method_call_end attribute_access compile re load load ^[0-9]+(\.[0-9]{1,2})?$ assign result store method_call_start attribute_access search num_fetch load load num load method_call_end attribute_access search num_fetch load load num load return method_call_start bool load result load method_call_end bool load result load End",1
638,694,module functiondef comb_sort arguments arg assign gap store method_call_start len load arr load method_call_end len load arr load assign shrink store 1.3 assign sorted_list store false while unaryop not sorted_list load assign gap store method_call_start int load binop gap load div shrink load method_call_end int load binop gap load div shrink load if compare gap load lte 1 assign gap store 1 assign sorted_list store true assign sorted_list store true assign i store 0 while compare binop i load add gap load lt method_call_start len load arr load method_call_end len load arr load if compare subscript arr load i load load gt subscript arr load binop i load add gap load load assign tuple subscript arr load i load store subscript arr load binop i load add gap load store store tuple subscript arr load binop i load add gap load load subscript arr load i load load load assign sorted_list store false augassign i store add 1 return arr load End,1
1673,839,,1
350,930,module functiondef remove_words arguments arg arg for word store method_call_start list load list1 load method_call_end list load list1 load if compare word load in removewords load expr method_call_start attribute_access remove list1 load load word load method_call_end attribute_access remove list1 load load word load return list1 load End,1
1655,79,,1
391,598,module functiondef radix_sort arguments arg assign radix store 10 assign placement store 1 assign max_digit store method_call_start max load nums load method_call_end max load nums load while compare placement load lt max_digit load assign buckets store listcomp_start method_call_start list load method_call_end list load comprehension _ store method_call_start range load radix load method_call_end range load radix load listcomp_end method_call_start list load method_call_end list load comprehension _ store method_call_start range load radix load method_call_end range load radix load for i store nums load assign tmp store method_call_start int load binop binop i load div placement load mod radix load method_call_end int load binop binop i load div placement load mod radix load expr method_call_start attribute_access append subscript buckets load tmp load load load i load method_call_end attribute_access append subscript buckets load tmp load load load i load assign a store 0 for b store method_call_start range load radix load method_call_end range load radix load assign buck store subscript buckets load b load load for i store buck load assign subscript nums load a load store i load augassign a store add 1 augassign placement store mult radix load return nums load End,1
841,38,module functiondef capitalize_first_last_letters arguments arg assign str1 store result store method_call_start attribute_access title str1 load load method_call_end attribute_access title str1 load load assign result store  for word store method_call_start attribute_access split str1 load load method_call_end attribute_access split str1 load load augassign result store add binop binop subscript word load slice unaryop usub 1 load add method_call_start attribute_access upper subscript word load unaryop usub 1 load load method_call_end attribute_access upper subscript word load unaryop usub 1 load load add   return subscript result load slice unaryop usub 1 load End,1
1083,920,module functiondef babylonian_squareroot arguments arg if compare number load eq 0 return 0 assign g store binop number load div 2.0 assign g2 store binop g load add 1 while compare g load noteq g2 load assign n store binop number load div g load assign g2 store g load assign g store binop binop g load add n load div 2 return g load End,1
1035,640,module functiondef count_pairs arguments arg arg assign cnt store 0 for i store method_call_start range load n load method_call_end range load n load for j store method_call_start range load binop i load add 1 n load method_call_end range load binop i load add 1 n load if compare subscript arr load i load load eq subscript arr load j load load augassign cnt store add 1 return cnt load End,1
1612,611,,2
1444,149,,1
332,522,module functiondef insert_before_each_element arguments arg arg assign result store list load for item store lst load expr method_call_start attribute_access append result load load element load method_call_end attribute_access append result load load element load expr method_call_start attribute_access append result load load item load method_call_end attribute_access append result load load item load return result load End,1
80,277,module functiondef upper_ctr arguments arg assign upper_ctr store 0 for i store method_call_start range load method_call_start len load str load method_call_end len load str load method_call_end range load method_call_start len load str load method_call_end len load str load if boolop and compare subscript str load i load load gte a compare subscript str load i load load lte z augassign upper_ctr store add 1 return upper_ctr load End,1
119,642,module functiondef extract_string arguments arg arg assign result store listcomp_start e load comprehension e store str load compare method_call_start len load e load method_call_end len load e load eq l load listcomp_end e load comprehension e store str load compare method_call_start len load e load method_call_end len load e load eq l load return result load End,1
844,817,module functiondef find_min_diff arguments arg arg assign arr store method_call_start sorted load arr load method_call_end sorted load arr load assign diff store binop 10 pow 20 for i store method_call_start range load binop n load sub 1 method_call_end range load binop n load sub 1 if compare binop subscript arr load binop i load add 1 load sub subscript arr load i load load lt diff load assign diff store binop subscript arr load binop i load add 1 load sub subscript arr load i load load return diff load End,1
1258,438,,1
1940,235,,1
236,83,module functiondef max_sum_subseq arguments arg assign n store method_call_start len load a load method_call_end len load a load if compare n load eq 1 return subscript a load 0 load assign look_up store binop list none load mult n load assign subscript look_up load 0 store subscript a load 0 load assign subscript look_up load 1 store method_call_start max load subscript a load 0 load subscript a load 1 load method_call_end max load subscript a load 0 load subscript a load 1 load for i store method_call_start range load 2 n load method_call_end range load 2 n load assign subscript look_up load i load store method_call_start max load subscript look_up load binop i load sub 1 load binop subscript look_up load binop i load sub 2 load add subscript a load i load load method_call_end max load subscript look_up load binop i load sub 1 load binop subscript look_up load binop i load sub 2 load add subscript a load i load load assign subscript look_up load i load store method_call_start max load subscript look_up load i load load subscript a load i load load method_call_end max load subscript look_up load i load load subscript a load i load load return subscript look_up load binop n load sub 1 load End,1
1032,516,module import re alias functiondef match_string arguments arg assign pattern store method_call_start attribute_access compile re load load ab? method_call_end attribute_access compile re load load ab? return method_call_start bool load method_call_start attribute_access match pattern load load string load method_call_end attribute_access match pattern load load string load method_call_end bool load method_call_start attribute_access match pattern load load string load method_call_end attribute_access match pattern load load string load End,2
486,339,module import math alias functiondef otherside_rightangle arguments arg arg assign s store method_call_start attribute_access sqrt math load load binop binop w load mult w load add binop h load mult h load method_call_end attribute_access sqrt math load load binop binop w load mult w load add binop h load mult h load return s load End,1
1131,287,module functiondef empty_list arguments arg assign empty_list store listcomp_start dict comprehension _ store method_call_start range load length load method_call_end range load length load listcomp_end dict comprehension _ store method_call_start range load length load method_call_end range load length load return empty_list load End,1
1760,132,,1
661,676,module from collections import counter alias functiondef anagram_lambda arguments arg arg assign result store method_call_start list load method_call_start filter load lambda arguments arg compare method_call_start counter load str load method_call_end counter load str load eq method_call_start counter load x load method_call_end counter load x load texts load method_call_end filter load lambda arguments arg compare method_call_start counter load str load method_call_end counter load str load eq method_call_start counter load x load method_call_end counter load x load texts load method_call_end list load method_call_start filter load lambda arguments arg compare method_call_start counter load str load method_call_end counter load str load eq method_call_start counter load x load method_call_end counter load x load texts load method_call_end filter load lambda arguments arg compare method_call_start counter load str load method_call_end counter load str load eq method_call_start counter load x load method_call_end counter load x load texts load return result load End,1
338,461,module functiondef replace_list arguments arg arg assign subscript list1 load slice unaryop usub 1 store list2 load assign replace_list store list1 load return replace_list load End,2
1776,912,,1
93,571,module functiondef find_longest_consecutive_subsequence_length arguments arg assign max_length store 0 assign num_set store method_call_start set load arr load method_call_end set load arr load for num store num_set load if compare binop num load sub 1 notin num_set load assign current_num store num load assign current_length store 1 while compare binop current_num load add 1 in num_set load augassign current_num store add 1 augassign current_length store add 1 assign max_length store method_call_start max load max_length load current_length load method_call_end max load max_length load current_length load return max_length load End,1
1660,567,,2
757,262,module from collections import counter alias functiondef second_frequent arguments arg assign dict store method_call_start counter load input load method_call_end counter load input load assign value store method_call_start sorted load method_call_start attribute_access values dict load load method_call_end attribute_access values dict load load method_call_end sorted load method_call_start attribute_access values dict load load method_call_end attribute_access values dict load load keyword true assign second_large store subscript value load 1 load for tuple key store val store store method_call_start attribute_access items dict load load method_call_end attribute_access items dict load load if compare val load eq second_large load return key load End,2
387,939,module functiondef longest_palindromic_subsequence arguments arg functiondef helper arguments arg arg if compare start load eq end load return 1 if boolop and compare subscript string load start load load eq subscript string load end load load compare binop start load add 1 eq end load return 2 if compare subscript string load start load load eq subscript string load end load load return binop method_call_start helper load binop start load add 1 binop end load sub 1 method_call_end helper load binop start load add 1 binop end load sub 1 add 2 return method_call_start max load method_call_start helper load binop start load add 1 end load method_call_end helper load binop start load add 1 end load method_call_start helper load start load binop end load sub 1 method_call_end helper load start load binop end load sub 1 method_call_end max load method_call_start helper load binop start load add 1 end load method_call_end helper load binop start load add 1 end load method_call_start helper load start load binop end load sub 1 method_call_end helper load start load binop end load sub 1 End return method_call_start helper load 0 binop method_call_start len load string load method_call_end len load string load sub 1 method_call_end helper load 0 binop method_call_start len load string load method_call_end len load string load sub 1 End,2
197,177,"module functiondef cone_volume arguments arg arg expr calculate the volume of a cone.
    
    parameters:
    radius (float): the radius of the cone.
    height (float): the height of the cone.
    
    returns:
    float: the volume of the cone.
     return binop binop binop binop 1 div 3 mult 3.14159 mult binop radius load pow 2 mult height load End",1
102,351,module functiondef remove_parenthesis_area arguments arg assign result store  assign flag store true for char store string load if compare char load eq ( assign flag store false if compare char load eq ) assign flag store true if flag load assign result store binop result load add char load return result load End,2
1629,925,,2
270,335,"module import re alias functiondef replace_specialchar arguments arg return method_call_start attribute_access sub re load load [ ,.] : text load method_call_end attribute_access sub re load load [ ,.] : text load End",1
868,246,"module functiondef subtract_tuples arguments arg arg expr 
    subtract the contents of one tuple with corresponding index of other tuple.

    args:
        tuple1 (tuple): the first tuple.
        tuple2 (tuple): the second tuple.

    returns:
        tuple: a new tuple with the resulting subtractions.

    examples:
        >>> subtract_tuples((1, 2, 3), (4, 5, 6))
        (-3, -3, -3)
        >>> subtract_tuples((7, 8, 9), (4, 5, 3))
        (3, 3, 6)
     return method_call_start tuple load generatorexp_start binop t1 load sub t2 load comprehension tuple t1 store t2 store store method_call_start zip load tuple1 load tuple2 load method_call_end zip load tuple1 load tuple2 load generatorexp_end binop t1 load sub t2 load comprehension tuple t1 store t2 store store method_call_start zip load tuple1 load tuple2 load method_call_end zip load tuple1 load tuple2 load method_call_end tuple load generatorexp_start binop t1 load sub t2 load comprehension tuple t1 store t2 store store method_call_start zip load tuple1 load tuple2 load method_call_end zip load tuple1 load tuple2 load generatorexp_end binop t1 load sub t2 load comprehension tuple t1 store t2 store store method_call_start zip load tuple1 load tuple2 load method_call_end zip load tuple1 load tuple2 load End",2
1402,870,,2
1139,329,module functiondef check_equality arguments arg return compare method_call_start ord load subscript s load 0 load method_call_end ord load subscript s load 0 load eq method_call_start ord load subscript s load binop method_call_start len load s load method_call_end len load s load sub 1 load method_call_end ord load subscript s load binop method_call_start len load s load method_call_end len load s load sub 1 load End functiondef count_substring_with_equal_ends arguments arg assign result store 0 assign n store method_call_start len load s load method_call_end len load s load for i store method_call_start range load n load method_call_end range load n load for j store method_call_start range load 1 binop binop n load sub i load add 1 method_call_end range load 1 binop binop n load sub i load add 1 if method_call_start check_equality load subscript s load slice i load binop i load add j load load method_call_end check_equality load subscript s load slice i load binop i load add j load load augassign result store add 1 return result load End,1
455,115,module import re alias assign pattern store fox assign text store the quick brown fox jumps over the lazy dog. functiondef find_literals arguments arg arg assign match store method_call_start attribute_access search re load load pattern load text load method_call_end attribute_access search re load load pattern load text load assign s store method_call_start attribute_access start match load load method_call_end attribute_access start match load load assign e store method_call_start attribute_access end match load load method_call_end attribute_access end match load load return tuple attribute_access pattern attribute_access re match load load load s load e load load End,1
785,779,module functiondef rearrange_tuples arguments arg arg return method_call_start sorted load tuples load method_call_end sorted load tuples load keyword lambda arguments arg method_call_start attribute_access index order load load subscript x load 0 load method_call_end attribute_access index order load load subscript x load 0 load End,1
1144,444,module functiondef multiply_lists arguments arg arg return method_call_start list load method_call_start map load lambda arguments arg arg binop x load mult y load list1 load list2 load method_call_end map load lambda arguments arg arg binop x load mult y load list1 load list2 load method_call_end list load method_call_start map load lambda arguments arg arg binop x load mult y load list1 load list2 load method_call_end map load lambda arguments arg arg binop x load mult y load list1 load list2 load End,2
167,198,module functiondef all_numbers_are_different arguments arg return compare method_call_start len load numbers load method_call_end len load numbers load eq method_call_start len load method_call_start set load numbers load method_call_end set load numbers load method_call_end len load method_call_start set load numbers load method_call_end set load numbers load End,2
180,511,module functiondef first_element arguments arg arg arg assign count_map store dict for i store method_call_start range load 0 n load method_call_end range load 0 n load if compare subscript arr load i load load in method_call_start attribute_access keys count_map load load method_call_end attribute_access keys count_map load load augassign subscript count_map load subscript arr load i load load store add 1 assign subscript count_map load subscript arr load i load load store 1 augassign i store add 1 for i store method_call_start range load 0 n load method_call_end range load 0 n load if compare subscript count_map load subscript arr load i load load load eq k load return subscript arr load i load load augassign i store add 1 return unaryop usub 1 End,1
254,692,module functiondef first arguments arg arg arg assign low store 0 assign high store binop n load sub 1 assign res store unaryop usub 1 while compare low load lte high load assign mid store binop binop low load add high load floordiv 2 if compare subscript arr load mid load load gt x load assign high store binop mid load sub 1 if compare subscript arr load mid load load lt x load assign low store binop mid load add 1 assign res store mid load assign high store binop mid load sub 1 return res load End,2
1399,466,,1
1023,946,module functiondef replace_multiple_occurrence arguments arg return method_call_start attribute_access join  load generatorexp_start ch load comprehension tuple i store ch store store method_call_start enumerate load string load method_call_end enumerate load string load boolop or compare ch load noteq subscript string load binop i load sub 1 load compare i load eq 0 generatorexp_end ch load comprehension tuple i store ch store store method_call_start enumerate load string load method_call_end enumerate load string load boolop or compare ch load noteq subscript string load binop i load sub 1 load compare i load eq 0 method_call_end attribute_access join  load generatorexp_start ch load comprehension tuple i store ch store store method_call_start enumerate load string load method_call_end enumerate load string load boolop or compare ch load noteq subscript string load binop i load sub 1 load compare i load eq 0 generatorexp_end ch load comprehension tuple i store ch store store method_call_start enumerate load string load method_call_end enumerate load string load boolop or compare ch load noteq subscript string load binop i load sub 1 load compare i load eq 0 End,1
763,708,"module functiondef is_unique_string arguments arg expr 
    function to check whether all the characters in a given string are unique.
    
    parameters:
    string (str): the input string to check.
    
    returns:
    bool: true if all characters are unique, false otherwise.
     return compare method_call_start len load method_call_start set load string load method_call_end set load string load method_call_end len load method_call_start set load string load method_call_end set load string load eq method_call_start len load string load method_call_end len load string load End",1
1608,646,,1
1042,939,module functiondef find_lcs arguments arg arg arg assign m store method_call_start len load str1 load method_call_end len load str1 load assign n store method_call_start len load str2 load method_call_end len load str2 load assign o store method_call_start len load str3 load method_call_end len load str3 load assign dp store listcomp_start listcomp_start listcomp_start 0 comprehension _ store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 listcomp_end 0 comprehension _ store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 comprehension _ store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end listcomp_start 0 comprehension _ store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 listcomp_end 0 comprehension _ store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 comprehension _ store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 comprehension _ store method_call_start range load binop m load add 1 method_call_end range load binop m load add 1 listcomp_end listcomp_start listcomp_start 0 comprehension _ store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 listcomp_end 0 comprehension _ store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 comprehension _ store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end listcomp_start 0 comprehension _ store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 listcomp_end 0 comprehension _ store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 comprehension _ store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 comprehension _ store method_call_start range load binop m load add 1 method_call_end range load binop m load add 1 for i store method_call_start range load binop m load add 1 method_call_end range load binop m load add 1 for j store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 for k store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 if boolop or compare i load eq 0 compare j load eq 0 compare k load eq 0 assign subscript subscript subscript dp load i load load j load load k load store 0 if compare subscript str1 load binop i load sub 1 load eq eq subscript str2 load binop j load sub 1 load subscript str3 load binop k load sub 1 load assign subscript subscript subscript dp load i load load j load load k load store binop subscript subscript subscript dp load binop i load sub 1 load binop j load sub 1 load binop k load sub 1 load add 1 assign subscript subscript subscript dp load i load load j load load k load store method_call_start max load subscript subscript subscript dp load binop i load sub 1 load j load load k load load subscript subscript subscript dp load i load load binop j load sub 1 load k load load subscript subscript subscript dp load i load load j load load binop k load sub 1 load method_call_end max load subscript subscript subscript dp load binop i load sub 1 load j load load k load load subscript subscript subscript dp load i load load binop j load sub 1 load k load load subscript subscript subscript dp load i load load j load load binop k load sub 1 load assign lcs_length store subscript subscript subscript dp load m load load n load load o load load assign lcs store binop list  load mult lcs_length load assign i store m load assign j store n load assign k store o load while boolop and compare i load gt 0 compare j load gt 0 compare k load gt 0 if compare subscript str1 load binop i load sub 1 load eq eq subscript str2 load binop j load sub 1 load subscript str3 load binop k load sub 1 load assign subscript lcs load binop lcs_length load sub 1 store subscript str1 load binop i load sub 1 load augassign i store sub 1 augassign j store sub 1 augassign k store sub 1 augassign lcs_length store sub 1 if boolop and compare subscript subscript subscript dp load binop i load sub 1 load j load load k load load gt subscript subscript subscript dp load i load load binop j load sub 1 load k load load compare subscript subscript subscript dp load binop i load sub 1 load j load load k load load gt subscript subscript subscript dp load i load load j load load binop k load sub 1 load augassign i store sub 1 if compare subscript subscript subscript dp load i load load binop j load sub 1 load k load load gt subscript subscript subscript dp load i load load j load load binop k load sub 1 load augassign j store sub 1 augassign k store sub 1 return method_call_start attribute_access join  load lcs load method_call_end attribute_access join  load lcs load End,1
1033,644,module functiondef min_operations arguments arg arg assign count store 0 while compare num1 load noteq num2 load if compare binop num1 load mod 2 noteq 0 augassign num1 store sub 1 augassign count store add 1 if compare num1 load gt num2 load augassign num1 store floordiv 2 augassign count store add 1 augassign num1 store mult 2 augassign count store add 1 return count load End,2
88,688,"module functiondef positive_ratio arguments arg expr 
    calculate the ratio of positive numbers in an array of integers.
    
    args:
    - arr: a list of integers
    
    returns:
    - the ratio of positive numbers in the array as a float, rounded to 2 decimal places
    
     assign positive_count store 0 for num store arr load if compare num load gt 0 augassign positive_count store add 1 if compare method_call_start len load arr load method_call_end len load arr load eq 0 return 0.0 return method_call_start round load binop positive_count load div method_call_start len load arr load method_call_end len load arr load 2 method_call_end round load binop positive_count load div method_call_start len load arr load method_call_end len load arr load 2 End",1
753,600,module functiondef large_product arguments arg arg arg assign result store subscript method_call_start sorted load listcomp_start binop x load mult y load comprehension x store nums1 load comprehension y store nums2 load listcomp_end binop x load mult y load comprehension x store nums1 load comprehension y store nums2 load method_call_end sorted load listcomp_start binop x load mult y load comprehension x store nums1 load comprehension y store nums2 load listcomp_end binop x load mult y load comprehension x store nums1 load comprehension y store nums2 load keyword true slice n load load return result load End,1
1582,889,,1
178,820,"module functiondef find_max arguments arg arg expr 
    finds the maximum of two numbers.

    args:
        num1 (int): the first number.
        num2 (int): the second number.

    returns:
        int: the maximum of the two numbers.
     return method_call_start max load num1 load num2 load method_call_end max load num1 load num2 load End",2
1939,105,,2
400,181,module functiondef division_elements arguments arg arg assign res store method_call_start tuple load generatorexp_start binop ele1 load floordiv ele2 load comprehension tuple ele1 store ele2 store store method_call_start zip load test_tup1 load test_tup2 load method_call_end zip load test_tup1 load test_tup2 load generatorexp_end binop ele1 load floordiv ele2 load comprehension tuple ele1 store ele2 store store method_call_start zip load test_tup1 load test_tup2 load method_call_end zip load test_tup1 load test_tup2 load method_call_end tuple load generatorexp_start binop ele1 load floordiv ele2 load comprehension tuple ele1 store ele2 store store method_call_start zip load test_tup1 load test_tup2 load method_call_end zip load test_tup1 load test_tup2 load generatorexp_end binop ele1 load floordiv ele2 load comprehension tuple ele1 store ele2 store store method_call_start zip load test_tup1 load test_tup2 load method_call_end zip load test_tup1 load test_tup2 load return res load End,1
420,383,module functiondef sum_odd_fifth_powers arguments arg return method_call_start sum load listcomp_start binop binop binop 2 mult i load sub 1 pow 5 comprehension i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 listcomp_end binop binop binop 2 mult i load sub 1 pow 5 comprehension i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 method_call_end sum load listcomp_start binop binop binop 2 mult i load sub 1 pow 5 comprehension i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 listcomp_end binop binop binop 2 mult i load sub 1 pow 5 comprehension i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 End,1
872,742,module functiondef count_most_common_character arguments arg assign char_count store dict for char store string load if compare char load in char_count load augassign subscript char_count load char load store add 1 assign subscript char_count load char load store 1 assign most_common_char store method_call_start max load char_count load method_call_end max load char_count load keyword attribute_access get char_count load load return most_common_char load End,1
446,633,module functiondef even_power_sum arguments arg assign sum store 0 for i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 assign j store binop 2 mult i load assign sum store binop sum load add binop binop binop binop j load mult j load mult j load mult j load mult j load return sum load End,1
1213,451,,2
1621,816,,1
1132,587,module functiondef multiply_consecutive_numbers arguments arg assign result store 1 for i store method_call_start range load binop method_call_start len load lst load method_call_end len load lst load sub 1 method_call_end range load binop method_call_start len load lst load method_call_end len load lst load sub 1 augassign result store mult binop subscript lst load i load load mult subscript lst load binop i load add 1 load return result load End,1
1078,436,module functiondef count_chars_same_position arguments arg assign count store 0 for tuple i store char store store method_call_start enumerate load string load method_call_end enumerate load string load if boolop or compare method_call_start attribute_access lower char load load method_call_end attribute_access lower char load load eq method_call_start chr load binop 97 add i load method_call_end chr load binop 97 add i load compare method_call_start attribute_access upper char load load method_call_end attribute_access upper char load load eq method_call_start chr load binop 97 add i load method_call_end chr load binop 97 add i load augassign count store add 1 return count load End,1
86,432,module functiondef longest_common_subsequence arguments arg arg assign m store method_call_start len load seq1 load method_call_end len load seq1 load assign n store method_call_start len load seq2 load method_call_end len load seq2 load assign dp store listcomp_start binop list 0 load mult binop n load add 1 comprehension _ store method_call_start range load binop m load add 1 method_call_end range load binop m load add 1 listcomp_end binop list 0 load mult binop n load add 1 comprehension _ store method_call_start range load binop m load add 1 method_call_end range load binop m load add 1 for i store method_call_start range load 1 binop m load add 1 method_call_end range load 1 binop m load add 1 for j store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 if compare subscript seq1 load binop i load sub 1 load eq subscript seq2 load binop j load sub 1 load assign subscript subscript dp load i load load j load store binop subscript subscript dp load binop i load sub 1 load binop j load sub 1 load add 1 assign subscript subscript dp load i load load j load store method_call_start max load subscript subscript dp load binop i load sub 1 load j load load subscript subscript dp load i load load binop j load sub 1 load method_call_end max load subscript subscript dp load binop i load sub 1 load j load load subscript subscript dp load i load load binop j load sub 1 load assign lcs store list load assign i store m load assign j store n load while boolop and compare i load gt 0 compare j load gt 0 if compare subscript seq1 load binop i load sub 1 load eq subscript seq2 load binop j load sub 1 load expr method_call_start attribute_access insert lcs load load 0 subscript seq1 load binop i load sub 1 load method_call_end attribute_access insert lcs load load 0 subscript seq1 load binop i load sub 1 load augassign i store sub 1 augassign j store sub 1 if compare subscript subscript dp load binop i load sub 1 load j load load gt subscript subscript dp load i load load binop j load sub 1 load augassign i store sub 1 augassign j store sub 1 return lcs load End,2
1073,908,"module functiondef has_28_days arguments arg expr 
    returns true if the given month name contains 28 days, false otherwise.
    
    parameters:
    month_name (str): the name of the month.
    
    returns:
    bool: true if the month has 28 days, false otherwise.
     assign thirty_days_months store list april june september november load if compare month_name load in thirty_days_months load return false return true End",1
1226,219,,1
1008,244,"module import re alias functiondef extract_quotation arguments arg return method_call_start attribute_access findall re load load ""(.*?)"" text1 load method_call_end attribute_access findall re load load ""(.*?)"" text1 load End",1
1876,14,,1
917,497,module functiondef geometric_sum arguments arg if compare n load lt 0 return 0 return binop binop 1 div method_call_start pow load 2 n load method_call_end pow load 2 n load add method_call_start geometric_sum load binop n load sub 1 method_call_end geometric_sum load binop n load sub 1 End,2
1453,26,,1
1927,693,,2
1396,194,,1
445,183,"module functiondef move_zeroes arguments arg expr 
    move all zeroes to the end of the given list.

    parameters:
    lst (list): the input list.

    returns:
    list: the modified list with all zeroes moved to the end.
     return method_call_start sorted load lst load method_call_end sorted load lst load keyword lambda arguments arg compare x load eq 0 End",1
1817,815,,2
695,535,module from collections import counter alias functiondef count_common arguments arg assign word_counts store method_call_start counter load words load method_call_end counter load words load assign top_four store method_call_start attribute_access most_common word_counts load load 4 method_call_end attribute_access most_common word_counts load load 4 return top_four load End,1
7,965,module functiondef nth_polite_number arguments arg assign count store 0 assign num store 1 while compare count load lt n load if method_call_start is_polite load num load method_call_end is_polite load num load augassign count store add 1 augassign num store add 1 return binop num load sub 1 End functiondef is_polite arguments arg assign factors store method_call_start set load method_call_end set load for i store method_call_start range load 1 binop method_call_start int load binop num load pow 0.5 method_call_end int load binop num load pow 0.5 add 1 method_call_end range load 1 binop method_call_start int load binop num load pow 0.5 method_call_end int load binop num load pow 0.5 add 1 if compare binop num load mod i load eq 0 expr method_call_start attribute_access add factors load load i load method_call_end attribute_access add factors load load i load expr method_call_start attribute_access add factors load load binop num load floordiv i load method_call_end attribute_access add factors load load binop num load floordiv i load return compare binop method_call_start len load factors load method_call_end len load factors load mod 2 eq 1 End,2
273,643,module functiondef fibonacci arguments arg if compare n load lte 0 return 0 if compare n load eq 1 return 1 return binop method_call_start fibonacci load binop n load sub 1 method_call_end fibonacci load binop n load sub 1 add method_call_start fibonacci load binop n load sub 2 method_call_end fibonacci load binop n load sub 2 End,2
151,616,module functiondef last_occurence_char arguments arg arg assign flag store unaryop usub 1 for i store method_call_start range load method_call_start len load string load method_call_end len load string load method_call_end range load method_call_start len load string load method_call_end len load string load if compare subscript string load i load load eq char load assign flag store i load if compare flag load eq unaryop usub 1 return none return binop flag load add 1 End,1
1481,431,,1
1668,869,,1
1533,656,,2
1439,821,,2
1348,317,,2
1347,384,,1
1277,399,,2
1825,580,,1
1618,149,,2
1921,762,,1
1118,389,module functiondef count_cubes arguments arg arg return binop binop n load floordiv k load pow 3 End,2
281,735,module functiondef sum_common_divisors arguments arg arg assign common_divisors store method_call_start set load method_call_end set load for i store method_call_start range load 1 binop method_call_start min load a load b load method_call_end min load a load b load add 1 method_call_end range load 1 binop method_call_start min load a load b load method_call_end min load a load b load add 1 if boolop and compare binop a load mod i load eq 0 compare binop b load mod i load eq 0 expr method_call_start attribute_access add common_divisors load load i load method_call_end attribute_access add common_divisors load load i load return method_call_start sum load common_divisors load method_call_end sum load common_divisors load End,1
856,637,module functiondef digit_distance_nums arguments arg arg return method_call_start sum load method_call_start map load int load method_call_start str load method_call_start abs load binop n1 load sub n2 load method_call_end abs load binop n1 load sub n2 load method_call_end str load method_call_start abs load binop n1 load sub n2 load method_call_end abs load binop n1 load sub n2 load method_call_end map load int load method_call_start str load method_call_start abs load binop n1 load sub n2 load method_call_end abs load binop n1 load sub n2 load method_call_end str load method_call_start abs load binop n1 load sub n2 load method_call_end abs load binop n1 load sub n2 load method_call_end sum load method_call_start map load int load method_call_start str load method_call_start abs load binop n1 load sub n2 load method_call_end abs load binop n1 load sub n2 load method_call_end str load method_call_start abs load binop n1 load sub n2 load method_call_end abs load binop n1 load sub n2 load method_call_end map load int load method_call_start str load method_call_start abs load binop n1 load sub n2 load method_call_end abs load binop n1 load sub n2 load method_call_end str load method_call_start abs load binop n1 load sub n2 load method_call_end abs load binop n1 load sub n2 load End,1
1805,713,,2
1137,324,"module functiondef first_repeated_char arguments arg assign h store dict for ch store str load if compare ch load in h load return ch load assign subscript h load ch load store 0 return   End",2
1468,630,,2
490,959,module functiondef find_product arguments arg arg assign product store 1 for tup store tuples load augassign product store mult subscript tup load k load load return product load End,2
246,67,module functiondef sort_tuples arguments arg return method_call_start sorted load lst load method_call_end sorted load lst load keyword lambda arguments arg subscript x load unaryop usub 1 load End,1
1127,134,module functiondef find_element arguments arg arg arg arg for i store method_call_start range load binop rotations load sub 1 unaryop usub 1 unaryop usub 1 method_call_end range load binop rotations load sub 1 unaryop usub 1 unaryop usub 1 assign left store subscript subscript ranges load i load load 0 load assign right store subscript subscript ranges load i load load 1 load if boolop and compare left load lte index load compare right load gte index load if compare index load eq left load assign index store right load assign index store binop index load sub 1 return subscript arr load index load load End,1
1911,958,,1
878,40,module functiondef check_values_same arguments arg assign values store method_call_start list load method_call_start set load method_call_start attribute_access values dictionary load load method_call_end attribute_access values dictionary load load method_call_end set load method_call_start attribute_access values dictionary load load method_call_end attribute_access values dictionary load load method_call_end list load method_call_start set load method_call_start attribute_access values dictionary load load method_call_end attribute_access values dictionary load load method_call_end set load method_call_start attribute_access values dictionary load load method_call_end attribute_access values dictionary load load return compare method_call_start len load values load method_call_end len load values load eq 1 End,1
1002,514,module functiondef bell_number arguments arg assign bell store listcomp_start listcomp_start 0 comprehension i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end 0 comprehension i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 comprehension j store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end listcomp_start 0 comprehension i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end 0 comprehension i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 comprehension j store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 assign subscript subscript bell load 0 load 0 store 1 for i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 assign subscript subscript bell load i load load 0 store subscript subscript bell load binop i load sub 1 load binop i load sub 1 load for j store method_call_start range load 1 binop i load add 1 method_call_end range load 1 binop i load add 1 assign subscript subscript bell load i load load j load store binop subscript subscript bell load binop i load sub 1 load binop j load sub 1 load add subscript subscript bell load i load load binop j load sub 1 load return subscript subscript bell load n load load 0 load End,1
1778,648,,1
1898,485,,2
1040,580,module functiondef ascii_value_string arguments arg for i store method_call_start range load method_call_start len load str1 load method_call_end len load str1 load method_call_end range load method_call_start len load str1 load method_call_end len load str1 load return method_call_start ord load subscript str1 load i load load method_call_end ord load subscript str1 load i load load End,2
894,649,module functiondef check_solution arguments arg arg arg if compare binop binop 2 mult b load mult b load eq binop binop 9 mult a load mult c load return yes return no End,1
1878,654,,1
1495,601,,1
1353,705,,1
174,810,module functiondef find_next_palindrome arguments arg augassign number store add 1 while compare method_call_start str load number load method_call_end str load number load noteq subscript method_call_start str load number load method_call_end str load number load slice unaryop usub 1 load augassign number store add 1 return number load End,2
1492,155,,2
1062,416,"module functiondef find_min_length_lists arguments arg expr 
    finds the list of lists with minimum length.
    
    parameters:
        - lst (list): a list of lists.
    
    returns:
        - list: the list(s) with the minimum length.
     assign min_length store method_call_start float load inf method_call_end float load inf assign min_length_lists store list load for sublist store lst load assign sublist_length store method_call_start len load sublist load method_call_end len load sublist load if compare sublist_length load lt min_length load assign min_length store sublist_length load assign min_length_lists store list sublist load load if compare sublist_length load eq min_length load expr method_call_start attribute_access append min_length_lists load load sublist load method_call_end attribute_access append min_length_lists load load sublist load return min_length_lists load End",1
1308,914,,1
1314,41,,1
1260,617,,2
561,883,module import cmath alias functiondef len_complex arguments arg arg assign cn store method_call_start complex load a load b load method_call_end complex load a load b load assign length store method_call_start abs load cn load method_call_end abs load cn load return length load End,1
461,122,module functiondef zip_tuples arguments arg arg return method_call_start list load method_call_start zip load tuple1 load tuple2 load method_call_end zip load tuple1 load tuple2 load method_call_end list load method_call_start zip load tuple1 load tuple2 load method_call_end zip load tuple1 load tuple2 load End,2
1800,660,,2
1262,895,,2
1703,116,,1
1476,92,,1
810,683,module functiondef count_pairs arguments arg arg assign cnt store 0 for i store method_call_start range load n load method_call_end range load n load for j store method_call_start range load binop i load add 1 n load method_call_end range load binop i load add 1 n load if compare subscript arr load i load load noteq subscript arr load j load load augassign cnt store add 1 return cnt load End,1
526,316,module functiondef remove_similar_row arguments arg assign res store method_call_start set load method_call_start sorted load listcomp_start method_call_start tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load method_call_end tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load comprehension sub store test_list load listcomp_end method_call_start tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load method_call_end tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load comprehension sub store test_list load method_call_end sorted load listcomp_start method_call_start tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load method_call_end tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load comprehension sub store test_list load listcomp_end method_call_start tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load method_call_end tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load comprehension sub store test_list load method_call_end set load method_call_start sorted load listcomp_start method_call_start tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load method_call_end tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load comprehension sub store test_list load listcomp_end method_call_start tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load method_call_end tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load comprehension sub store test_list load method_call_end sorted load listcomp_start method_call_start tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load method_call_end tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load comprehension sub store test_list load listcomp_end method_call_start tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load method_call_end tuple load method_call_start sorted load method_call_start set load sub load method_call_end set load sub load method_call_end sorted load method_call_start set load sub load method_call_end set load sub load comprehension sub store test_list load return res load End,1
1380,661,,2
1442,48,,1
1573,117,,2
569,530,module functiondef pair_or_sum arguments arg arg assign ans store 0 for i store method_call_start range load 0 n load method_call_end range load 0 n load for j store method_call_start range load binop i load add 1 n load method_call_end range load binop i load add 1 n load assign ans store binop ans load add binop subscript arr load i load load bitxor subscript arr load j load load return ans load End,1
256,746,module functiondef check_identical arguments arg arg assign res store compare test_list1 load eq test_list2 load return res load End,1
1241,126,,1
1451,71,,2
699,627,module functiondef find_rect_num arguments arg return binop n load mult binop n load add 1 End,2
544,752,module functiondef calculate_product arguments arg assign product store 1 for num store numbers load augassign product store mult num load return product load End,1
1855,693,,1
205,621,module functiondef extract_frequency arguments arg assign frequency store dict for item store data load assign tuple_key store method_call_start tuple load item load method_call_end tuple load item load assign subscript frequency load tuple_key load store binop method_call_start attribute_access get frequency load load tuple_key load 0 method_call_end attribute_access get frequency load load tuple_key load 0 add 1 return frequency load End,2
217,965,module from itertools import combinations alias functiondef find_combinations arguments arg assign res store listcomp_start tuple binop b1 load add a1 load binop b2 load add a2 load load comprehension tuple tuple a1 store a2 store store tuple b1 store b2 store store store method_call_start combinations load test_list load 2 method_call_end combinations load test_list load 2 listcomp_end tuple binop b1 load add a1 load binop b2 load add a2 load load comprehension tuple tuple a1 store a2 store store tuple b1 store b2 store store store method_call_start combinations load test_list load 2 method_call_end combinations load test_list load 2 return res load End,1
435,643,module functiondef check_type arguments arg assign res store true for ele store test_tuple load if unaryop not method_call_start isinstance load ele load method_call_start type load subscript test_tuple load 0 load method_call_end type load subscript test_tuple load 0 load method_call_end isinstance load ele load method_call_start type load subscript test_tuple load 0 load method_call_end type load subscript test_tuple load 0 load assign res store false break return res load End,1
932,464,module functiondef is_array_distinct arguments arg return compare method_call_start len load method_call_start set load arr load method_call_end set load arr load method_call_end len load method_call_start set load arr load method_call_end set load arr load eq 1 End,1
626,522,module functiondef choose_points arguments arg arg assign points store list load for i store range1 load if compare i load notin range2 load expr method_call_start attribute_access append points load load i load method_call_end attribute_access append points load load i load for j store range2 load if compare j load notin range1 load expr method_call_start attribute_access append points load load j load method_call_end attribute_access append points load load j load return points load End,2
830,594,"module functiondef find_insertion_point arguments arg arg expr 
    find the right insertion point for a specified value in sorted order.

    parameters:
    arr (list): the sorted list of values.
    value (int/float/str): the value to be inserted.

    returns:
    int: the index at which the value should be inserted.
     if boolop or compare method_call_start len load arr load method_call_end len load arr load eq 0 compare value load gt subscript arr load unaryop usub 1 load return method_call_start len load arr load method_call_end len load arr load assign low store 0 assign high store binop method_call_start len load arr load method_call_end len load arr load sub 1 while compare low load lte high load assign mid store binop binop low load add high load floordiv 2 if compare subscript arr load mid load load eq value load return mid load if compare subscript arr load mid load load lt value load assign low store binop mid load add 1 assign high store binop mid load sub 1 return low load End",2
1129,645,module functiondef find_max_length_sublist arguments arg assign max_length store 0 assign current_length store 0 for item store lst load if compare item load eq 1 augassign current_length store add 1 assign max_length store method_call_start max load max_length load current_length load method_call_end max load max_length load current_length load assign current_length store 0 return method_call_start max load max_length load current_length load method_call_end max load max_length load current_length load End,1
879,814,module functiondef highest_power_of_2 arguments arg assign res store 0 for i store method_call_start range load n load 0 unaryop usub 1 method_call_end range load n load 0 unaryop usub 1 if compare binop i load bitand binop i load sub 1 eq 0 assign res store i load break return res load End,1
313,534,module from heapq import heappop from heapq import heappush alias alias classdef node functiondef __init__ arguments arg arg arg arg assign attribute_access value self load store value load assign attribute_access list_num self load store list_num load assign attribute_access index self load store index load End functiondef __lt__ arguments arg arg return compare attribute_access value self load load lt attribute_access value other load load End End functiondef find_minimum_range arguments arg assign high store method_call_start float load -inf method_call_end float load -inf assign p store tuple 0 method_call_start float load inf method_call_end float load inf load assign pq store list load for i store method_call_start range load method_call_start len load list load method_call_end len load list load method_call_end range load method_call_start len load list load method_call_end len load list load expr method_call_start heappush load pq load method_call_start node load subscript subscript list load i load load 0 load i load 0 method_call_end node load subscript subscript list load i load load 0 load i load 0 method_call_end heappush load pq load method_call_start node load subscript subscript list load i load load 0 load i load 0 method_call_end node load subscript subscript list load i load load 0 load i load 0 assign high store method_call_start max load high load subscript subscript list load i load load 0 load method_call_end max load high load subscript subscript list load i load load 0 load while true assign top store method_call_start heappop load pq load method_call_end heappop load pq load assign low store attribute_access value top load load assign i store attribute_access list_num top load load assign j store attribute_access index top load load if compare binop high load sub low load lt binop subscript p load 1 load sub subscript p load 0 load assign p store tuple low load high load load if compare j load eq binop method_call_start len load subscript list load i load load method_call_end len load subscript list load i load load sub 1 return p load expr method_call_start heappush load pq load method_call_start node load subscript subscript list load i load load binop j load add 1 load i load binop j load add 1 method_call_end node load subscript subscript list load i load load binop j load add 1 load i load binop j load add 1 method_call_end heappush load pq load method_call_start node load subscript subscript list load i load load binop j load add 1 load i load binop j load add 1 method_call_end node load subscript subscript list load i load load binop j load add 1 load i load binop j load add 1 assign high store method_call_start max load high load subscript subscript list load i load load binop j load add 1 load method_call_end max load high load subscript subscript list load i load load binop j load add 1 load End,2
1005,169,module import re alias functiondef remove_splchar arguments arg assign pattern store method_call_start attribute_access compile re load load [\w_]+ method_call_end attribute_access compile re load load [\w_]+ return method_call_start attribute_access sub pattern load load  text load method_call_end attribute_access sub pattern load load  text load End,1
968,3,module functiondef get_inv_count arguments arg arg assign inv_count store 0 for i store method_call_start range load n load method_call_end range load n load for j store method_call_start range load binop i load add 1 n load method_call_end range load binop i load add 1 n load if compare subscript arr load i load load gt subscript arr load j load load augassign inv_count store add 1 return inv_count load End,1
1373,850,,2
390,321,module import math alias functiondef find_index arguments arg assign x store method_call_start attribute_access sqrt math load load binop 2 mult method_call_start attribute_access pow math load load 10 binop n load sub 1 method_call_end attribute_access pow math load load 10 binop n load sub 1 method_call_end attribute_access sqrt math load load binop 2 mult method_call_start attribute_access pow math load load 10 binop n load sub 1 method_call_end attribute_access pow math load load 10 binop n load sub 1 return method_call_start round load x load method_call_end round load x load End,1
360,936,module functiondef check_even_parity arguments arg assign parity store 0 while compare x load noteq 0 assign x store binop x load bitand binop x load sub 1 augassign parity store add 1 if compare binop parity load mod 2 eq 0 return true return false End,1
1583,577,,1
1432,917,,2
774,475,module functiondef remove_even arguments arg for i store l load if compare binop i load mod 2 eq 0 expr method_call_start attribute_access remove l load load i load method_call_end attribute_access remove l load load i load return l load End,2
1133,249,module functiondef frequency arguments arg arg assign count store 0 for i store a load if compare i load eq x load augassign count store add 1 return count load End,1
145,559,module functiondef cummulative_sum arguments arg assign res store method_call_start sum load method_call_start map load sum load test_list load method_call_end map load sum load test_list load method_call_end sum load method_call_start map load sum load test_list load method_call_end map load sum load test_list load return res load End,2
762,861,module functiondef find_n_cheapest_items arguments arg arg import heapq alias expr method_call_start attribute_access heapify heapq load load dataset load method_call_end attribute_access heapify heapq load load dataset load return method_call_start attribute_access nsmallest heapq load load n load dataset load method_call_end attribute_access nsmallest heapq load load n load dataset load End,1
1742,853,,2
1336,923,,2
484,502,"module import re alias functiondef find_char arguments arg return method_call_start attribute_access findall re load load \b\w{3,5}\b text load method_call_end attribute_access findall re load load \b\w{3,5}\b text load End",2
767,232,module functiondef chunk_tuples arguments arg arg assign res store listcomp_start subscript test_tup load slice i load binop i load add n load load comprehension i store method_call_start range load 0 method_call_start len load test_tup load method_call_end len load test_tup load n load method_call_end range load 0 method_call_start len load test_tup load method_call_end len load test_tup load n load listcomp_end subscript test_tup load slice i load binop i load add n load load comprehension i store method_call_start range load 0 method_call_start len load test_tup load method_call_end len load test_tup load n load method_call_end range load 0 method_call_start len load test_tup load method_call_end len load test_tup load n load return res load End,2
489,657,module functiondef count_substrings arguments arg str load assign count store 0 for i store method_call_start range load method_call_start len load s load method_call_end len load s load method_call_end range load method_call_start len load s load method_call_end len load s load for j store method_call_start range load i load method_call_start len load s load method_call_end len load s load method_call_end range load i load method_call_start len load s load method_call_end len load s load if compare subscript s load i load load eq subscript s load j load load augassign count store add 1 return count load int load End,2
1153,497,module import re alias functiondef string_literals arguments arg arg for pattern store patterns load if method_call_start attribute_access search re load load pattern load text load method_call_end attribute_access search re load load pattern load text load return matched! return not matched! End,1
1310,300,,1
1342,266,,2
1480,749,,1
783,276,module functiondef check_element_exists arguments arg arg return compare element load in my_tuple load End,2
1454,489,,2
1346,344,,2
1712,662,,1
1291,66,,1
887,260,"module functiondef count_character_frequency arguments arg expr 
    function to count character frequency of a given string.
    
    parameters:
    string (str): the string to count character frequency for.
    
    returns:
    dict: a dictionary containing the frequency of each character in the string.
     assign frequency store dict for char store string load if compare char load in frequency load augassign subscript frequency load char load store add 1 assign subscript frequency load char load store 1 return frequency load End",1
496,653,module functiondef count_digs arguments arg return method_call_start sum load listcomp_start method_call_start len load method_call_start str load ele load method_call_end str load ele load method_call_end len load method_call_start str load ele load method_call_end str load ele load comprehension ele store tup load listcomp_end method_call_start len load method_call_start str load ele load method_call_end str load ele load method_call_end len load method_call_start str load ele load method_call_end str load ele load comprehension ele store tup load method_call_end sum load listcomp_start method_call_start len load method_call_start str load ele load method_call_end str load ele load method_call_end len load method_call_start str load ele load method_call_end str load ele load comprehension ele store tup load listcomp_end method_call_start len load method_call_start str load ele load method_call_end str load ele load method_call_end len load method_call_start str load ele load method_call_end str load ele load comprehension ele store tup load End functiondef sort_list arguments arg expr method_call_start attribute_access sort test_list load load method_call_end attribute_access sort test_list load load keyword count_digs load return method_call_start str load test_list load method_call_end str load test_list load End,2
1469,299,,1
1235,847,,2
970,711,module functiondef is_lower arguments arg return method_call_start attribute_access lower string load load method_call_end attribute_access lower string load load End,1
941,371,"module functiondef find_minimum arguments arg arg expr find the minimum of two numbers.

    args:
        a (float): the first number.
        b (float): the second number.

    returns:
        float: the minimum of the two numbers.
     return method_call_start min load a load b load method_call_end min load a load b load End",1
1178,292,,2
1930,118,,2
676,940,module functiondef newman_prime arguments arg if boolop or compare n load eq 0 compare n load eq 1 return 1 return binop binop 2 mult method_call_start newman_prime load binop n load sub 1 method_call_end newman_prime load binop n load sub 1 add method_call_start newman_prime load binop n load sub 2 method_call_end newman_prime load binop n load sub 2 End,2
1513,517,,1
327,254,module functiondef modulo_tuples arguments arg arg assign result store tuple load for i store method_call_start range load method_call_start len load tuple1 load method_call_end len load tuple1 load method_call_end range load method_call_start len load tuple1 load method_call_end len load tuple1 load augassign result store add tuple binop subscript tuple1 load i load load mod subscript tuple2 load i load load load return result load End,2
443,659,module functiondef starts_with_number arguments arg if method_call_start attribute_access isdigit subscript string load 0 load load method_call_end attribute_access isdigit subscript string load 0 load load return true return false End,2
1666,537,,2
1830,708,,2
714,753,module functiondef zigzag arguments arg arg if boolop and compare n load eq 0 compare k load eq 0 return 1 if compare k load eq 0 return 0 return binop method_call_start zigzag load n load binop k load sub 1 method_call_end zigzag load n load binop k load sub 1 add method_call_start zigzag load binop n load sub 1 binop n load sub k load method_call_end zigzag load binop n load sub 1 binop n load sub k load End,2
493,664,module from math import tan from math import pi alias alias functiondef area_polygon arguments arg arg assign area store binop binop s load mult binop l load pow 2 div binop 4 mult method_call_start tan load binop pi load div s load method_call_end tan load binop pi load div s load return area load End,2
908,573,module functiondef get_keys arguments arg return method_call_start list load method_call_start attribute_access keys dictionary load load method_call_end attribute_access keys dictionary load load method_call_end list load method_call_start attribute_access keys dictionary load load method_call_end attribute_access keys dictionary load load End,1
1283,845,,2
1284,37,,2
1931,13,,1
1597,125,,2
1823,20,,1
724,421,"module import re alias functiondef match_string arguments arg return method_call_start attribute_access search re load load ab{2,3} string load method_call_end attribute_access search re load load ab{2,3} string load End",2
1411,35,,1
552,678,module functiondef find_largest_triangle_inscribed_in_ellipse arguments pass End,2
1124,115,module from itertools import combinations alias functiondef sub_lists arguments arg assign subs store list load for i store method_call_start range load 0 binop method_call_start len load my_list load method_call_end len load my_list load add 1 method_call_end range load 0 binop method_call_start len load my_list load method_call_end len load my_list load add 1 assign temp store listcomp_start method_call_start list load x load method_call_end list load x load comprehension x store method_call_start combinations load my_list load i load method_call_end combinations load my_list load i load listcomp_end method_call_start list load x load method_call_end list load x load comprehension x store method_call_start combinations load my_list load i load method_call_end combinations load my_list load i load if compare method_call_start len load temp load method_call_end len load temp load gt 0 expr method_call_start attribute_access extend subs load load temp load method_call_end attribute_access extend subs load load temp load return subs load End,2
1623,320,,1
1105,592,module from collections import counter alias functiondef assign_freq arguments arg assign res store listcomp_start tuple starred key load load val load load comprehension tuple key store val store store method_call_start attribute_access items method_call_start counter load test_list load method_call_end counter load test_list load load method_call_end attribute_access items method_call_start counter load test_list load method_call_end counter load test_list load load listcomp_end tuple starred key load load val load load comprehension tuple key store val store store method_call_start attribute_access items method_call_start counter load test_list load method_call_end counter load test_list load load method_call_end attribute_access items method_call_start counter load test_list load method_call_end counter load test_list load load return method_call_start str load res load method_call_end str load res load End,2
1769,102,,1
1096,299,module from heapq import merge alias functiondef combine_lists arguments arg arg assign combine_lists store method_call_start list load method_call_start merge load num1 load num2 load method_call_end merge load num1 load num2 load method_call_end list load method_call_start merge load num1 load num2 load method_call_end merge load num1 load num2 load return combine_lists load End,2
1865,304,,2
1498,722,,2
226,538,module functiondef extract_elements arguments arg arg if compare num_elements load gt method_call_start len load lst load method_call_end len load lst load return none return subscript lst load slice num_elements load load End,1
1802,773,,2
995,668,"module import heapq alias functiondef merge_sorted arguments arg expr 
    merge multiple sorted inputs into a single sorted iterator.
    
    parameters:
    * iterables (iterables): the sorted inputs to be merged.
    
    returns:
    iterator: a single sorted iterator.
     return method_call_start attribute_access merge heapq load load starred iterables load load method_call_end attribute_access merge heapq load load starred iterables load load End",1
286,97,module functiondef count_equal_pairs arguments arg assign count store 0 for i store method_call_start range load method_call_start len load arr load method_call_end len load arr load method_call_end range load method_call_start len load arr load method_call_end len load arr load for j store method_call_start range load binop i load add 1 method_call_start len load arr load method_call_end len load arr load method_call_end range load binop i load add 1 method_call_start len load arr load method_call_end len load arr load if compare subscript arr load i load load eq subscript arr load j load load augassign count store add 1 return count load End,2
781,926,module functiondef find_triangle_type arguments arg arg arg if compare side1 load eq eq side2 load side3 load return equilateral triangle if boolop or compare side1 load eq side2 load compare side1 load eq side3 load compare side2 load eq side3 load return isosceles triangle return scalene triangle End,1
1475,528,,1
1090,346,module functiondef find_rotation_count arguments arg assign tuple left store right store store tuple 0 binop method_call_start len load a load method_call_end len load a load sub 1 load while compare left load lte right load if compare subscript a load left load load lte subscript a load right load load return left load assign mid store binop binop left load add right load floordiv 2 assign next store binop binop mid load add 1 mod method_call_start len load a load method_call_end len load a load assign prev store binop binop binop mid load sub 1 add method_call_start len load a load method_call_end len load a load mod method_call_start len load a load method_call_end len load a load if boolop and compare subscript a load mid load load lte subscript a load next load load compare subscript a load mid load load lte subscript a load prev load load return mid load if compare subscript a load mid load load lte subscript a load right load load assign right store binop mid load sub 1 if compare subscript a load mid load load gte subscript a load left load load assign left store binop mid load add 1 return unaryop usub 1 End,1
926,34,module functiondef check_product_equal arguments arg assign even_product store 1 assign odd_product store 1 for tuple i store digit store store method_call_start enumerate load method_call_start str load number load method_call_end str load number load method_call_end enumerate load method_call_start str load number load method_call_end str load number load if compare binop i load mod 2 eq 0 augassign even_product store mult method_call_start int load digit load method_call_end int load digit load augassign odd_product store mult method_call_start int load digit load method_call_end int load digit load return compare even_product load eq odd_product load End,2
1816,47,,2
8,974,module functiondef rgb_to_hsv arguments arg arg arg assign max_color store method_call_start max load r load g load b load method_call_end max load r load g load b load assign min_color store method_call_start min load r load g load b load method_call_end min load r load g load b load assign hue store 0.0 assign saturation store 0.0 assign value store binop max_color load div 255.0 if compare max_color load noteq 0 assign saturation store binop binop max_color load sub min_color load div max_color load if compare min_color load eq max_color load assign hue store 0.0 if compare max_color load eq r load assign hue store binop binop binop binop 60 mult binop g load sub b load div binop max_color load sub min_color load add 360 mod 360 if compare max_color load eq g load assign hue store binop binop binop binop 60 mult binop b load sub r load div binop max_color load sub min_color load add 120 mod 360 if compare max_color load eq b load assign hue store binop binop binop binop 60 mult binop r load sub g load div binop max_color load sub min_color load add 240 mod 360 return tuple hue load saturation load value load load End,2
1185,417,,1
1536,948,,1
1110,375,module functiondef square_nums arguments arg assign square_nums store method_call_start list load method_call_start map load lambda arguments arg binop x load pow 2 nums load method_call_end map load lambda arguments arg binop x load pow 2 nums load method_call_end list load method_call_start map load lambda arguments arg binop x load pow 2 nums load method_call_end map load lambda arguments arg binop x load pow 2 nums load return square_nums load End,2
1733,642,,2
560,182,"module functiondef reverse_array arguments arg arg expr 
    reverses an array upto a given position.
    
    args:
        arr (list): the input array.
        position (int): the position upto which the array should be reversed.

    returns:
        list: the reversed array upto the given position.
     return binop subscript subscript arr load slice position load load slice unaryop usub 1 load add subscript arr load slice position load load End",1
1006,789,module functiondef check_tuplex arguments arg arg if compare tuple1 load in tuplex load return true return false End,1
589,285,module functiondef common_element arguments arg arg assign result store false for x store list1 load for y store list2 load if compare x load eq y load assign result store true return result load End,2
963,484,module functiondef tiling_problem arguments pass End,2
1775,474,,2
639,892,module functiondef find_smallest_missing_number arguments arg assign n store method_call_start len load arr load method_call_end len load arr load for i store method_call_start range load n load method_call_end range load n load if compare subscript arr load i load load noteq i load return i load return n load End,1
619,615,module functiondef toggle_even_bits arguments arg return binop num load bitxor method_call_start int load 1010101010101010 2 method_call_end int load 1010101010101010 2 End,1
1158,702,"module import math alias functiondef calculate_arc_length arguments arg arg expr 
    calculates the arc length of an angle.

    parameters:
    angle (float): the angle in radians.
    radius (float): the radius of the circle.

    returns:
    float: the arc length of the angle.
     return binop angle load mult radius load End",2
804,77,module functiondef is_keith_number arguments arg assign digits store listcomp_start method_call_start int load d load method_call_end int load d load comprehension d store method_call_start str load num load method_call_end str load num load listcomp_end method_call_start int load d load method_call_end int load d load comprehension d store method_call_start str load num load method_call_end str load num load assign terms store method_call_start attribute_access copy digits load load method_call_end attribute_access copy digits load load while true assign next_term store method_call_start sum load terms load method_call_end sum load terms load if compare next_term load eq num load return true if compare next_term load gt num load return false expr method_call_start attribute_access append terms load load next_term load method_call_end attribute_access append terms load load next_term load if compare method_call_start len load terms load method_call_end len load terms load gt method_call_start len load digits load method_call_end len load digits load expr method_call_start attribute_access pop terms load load 0 method_call_end attribute_access pop terms load load 0 End,1
1123,314,module functiondef max_profit arguments arg arg if boolop or unaryop not prices load compare k load eq 0 return 0 assign n store method_call_start len load prices load method_call_end len load prices load if compare k load gte binop n load floordiv 2 assign max_profit store 0 for i store method_call_start range load 1 n load method_call_end range load 1 n load augassign max_profit store add method_call_start max load binop subscript prices load i load load sub subscript prices load binop i load sub 1 load 0 method_call_end max load binop subscript prices load i load load sub subscript prices load binop i load sub 1 load 0 return max_profit load assign dp store listcomp_start binop list 0 load mult binop k load add 1 comprehension _ store method_call_start range load n load method_call_end range load n load listcomp_end binop list 0 load mult binop k load add 1 comprehension _ store method_call_start range load n load method_call_end range load n load for t store method_call_start range load 1 binop k load add 1 method_call_end range load 1 binop k load add 1 assign max_diff store unaryop usub subscript prices load 0 load for d store method_call_start range load 1 n load method_call_end range load 1 n load assign subscript subscript dp load d load load t load store method_call_start max load subscript subscript dp load binop d load sub 1 load t load load binop subscript prices load d load load add max_diff load method_call_end max load subscript subscript dp load binop d load sub 1 load t load load binop subscript prices load d load load add max_diff load assign max_diff store method_call_start max load max_diff load binop subscript subscript dp load binop d load sub 1 load binop t load sub 1 load sub subscript prices load d load load method_call_end max load max_diff load binop subscript subscript dp load binop d load sub 1 load binop t load sub 1 load sub subscript prices load d load load return subscript subscript dp load binop n load sub 1 load k load load End,1
893,326,module functiondef parabola_directrix arguments arg arg arg assign directrix store method_call_start int load binop c load sub binop binop binop binop b load mult b load add 1 mult 4 mult a load method_call_end int load binop c load sub binop binop binop binop b load mult b load add 1 mult 4 mult a load return directrix load End,2
457,928,module functiondef count_inversions arguments arg assign count store 0 for i store method_call_start range load method_call_start len load arr load method_call_end len load arr load method_call_end range load method_call_start len load arr load method_call_end len load arr load for j store method_call_start range load binop i load add 1 method_call_start len load arr load method_call_end len load arr load method_call_end range load binop i load add 1 method_call_start len load arr load method_call_end len load arr load if compare subscript arr load i load load gt subscript arr load j load load augassign count store add 1 return count load End,1
257,910,module functiondef count_unset_bits arguments arg assign count store 0 for i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 augassign count store add method_call_start attribute_access count subscript method_call_start bin load i load method_call_end bin load i load slice 2 load load 0 method_call_end attribute_access count subscript method_call_start bin load i load method_call_end bin load i load slice 2 load load 0 return count load End,2
1099,681,module functiondef is_armstrong_number arguments arg assign num_str store method_call_start str load number load method_call_end str load number load assign num_digits store method_call_start len load num_str load method_call_end len load num_str load assign sum store 0 for digit store num_str load augassign sum store add binop method_call_start int load digit load method_call_end int load digit load pow num_digits load return compare number load eq sum load End,1
1702,470,,1
2,288,module functiondef closest_num arguments arg return binop n load sub 1 End,1
211,398,module functiondef is_min_heap arguments arg for i store method_call_start range load binop method_call_start len load arr load method_call_end len load arr load floordiv 2 method_call_end range load binop method_call_start len load arr load method_call_end len load arr load floordiv 2 if compare subscript arr load i load load gt subscript arr load binop binop 2 mult i load add 1 load return false if boolop and compare binop binop 2 mult i load add 2 lt method_call_start len load arr load method_call_end len load arr load compare subscript arr load i load load gt subscript arr load binop binop 2 mult i load add 2 load return false return true End,1
305,374,module functiondef remove_elements arguments arg arg for element store list2 load if compare element load in list1 load expr method_call_start attribute_access remove list1 load load element load method_call_end attribute_access remove list1 load load element load return list1 load End,2
399,248,"module functiondef sum_of_arithmetic_progression arguments arg arg arg expr 
    find the sum of an arithmetic progression.

    parameters:
    first_term (int): the first term of the arithmetic progression.
    common_difference (int): the common difference between consecutive terms.
    num_terms (int): the number of terms in the arithmetic progression.

    returns:
    int: the sum of the arithmetic progression.
     assign last_term store binop first_term load add binop binop num_terms load sub 1 mult common_difference load assign sum_ap store binop binop num_terms load mult binop first_term load add last_term load floordiv 2 return sum_ap load End",1
1547,265,,2
1690,189,,2
1209,944,,1
524,721,module functiondef lbs arguments arg assign n store method_call_start len load arr load method_call_end len load arr load assign lis store listcomp_start 1 comprehension i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end 1 comprehension i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 for i store method_call_start range load 1 n load method_call_end range load 1 n load for j store method_call_start range load 0 i load method_call_end range load 0 i load if boolop and compare subscript arr load i load load gt subscript arr load j load load compare subscript lis load i load load lt binop subscript lis load j load load add 1 assign subscript lis load i load store binop subscript lis load j load load add 1 assign lds store listcomp_start 1 comprehension i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end 1 comprehension i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 for i store method_call_start reversed load method_call_start range load binop n load sub 1 method_call_end range load binop n load sub 1 method_call_end reversed load method_call_start range load binop n load sub 1 method_call_end range load binop n load sub 1 for j store method_call_start reversed load method_call_start range load binop i load sub 1 n load method_call_end range load binop i load sub 1 n load method_call_end reversed load method_call_start range load binop i load sub 1 n load method_call_end range load binop i load sub 1 n load if boolop and compare subscript arr load i load load gt subscript arr load j load load compare subscript lds load i load load lt binop subscript lds load j load load add 1 assign subscript lds load i load store binop subscript lds load j load load add 1 assign maximum store binop binop subscript lis load 0 load add subscript lds load 0 load sub 1 for i store method_call_start range load 1 n load method_call_end range load 1 n load assign maximum store method_call_start max load binop binop subscript lis load i load load add subscript lds load i load load sub 1 maximum load method_call_end max load binop binop subscript lis load i load load add subscript lds load i load load sub 1 maximum load return maximum load End,2
1391,849,,2
1321,493,,2
1046,782,module import re alias functiondef remove_special_characters arguments arg return method_call_start attribute_access sub re load load [^a-za-z0-9]+  input_string load method_call_end attribute_access sub re load load [^a-za-z0-9]+  input_string load End,2
1611,916,,2
653,486,"module functiondef is_triangle_possible arguments arg float load arg float load arg float load expr 
    check if a triangle of positive area is possible with the given angles.
    
    args:
        angle1 (float): the first angle of the triangle in degrees.
        angle2 (float): the second angle of the triangle in degrees.
        angle3 (float): the third angle of the triangle in degrees.
    
    returns:
        bool: true if a triangle is possible, false otherwise.
     if boolop or compare angle1 load lte 0 compare angle2 load lte 0 compare angle3 load lte 0 return false if compare binop binop angle1 load add angle2 load add angle3 load noteq 180 return false return true bool load End",1
1356,162,,2
536,540,module functiondef count_uppercase_characters arguments arg assign count store 0 for char store string load if method_call_start attribute_access isupper char load load method_call_end attribute_access isupper char load load augassign count store add 1 return count load End,2
1000,343,module functiondef frequency_lists arguments arg assign list1 store listcomp_start item load comprehension sublist store list1 load comprehension item store sublist load listcomp_end item load comprehension sublist store list1 load comprehension item store sublist load assign dic_data store dict for num store list1 load if compare num load in method_call_start attribute_access keys dic_data load load method_call_end attribute_access keys dic_data load load augassign subscript dic_data load num load store add 1 assign key store num load assign value store 1 assign subscript dic_data load key load store value load return dic_data load End,1
30,308,module functiondef lcs_of_three arguments arg arg arg arg arg arg assign l store listcomp_start listcomp_start listcomp_start 0 comprehension i store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 listcomp_end 0 comprehension i store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 comprehension j store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end listcomp_start 0 comprehension i store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 listcomp_end 0 comprehension i store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 comprehension j store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 comprehension k store method_call_start range load binop m load add 1 method_call_end range load binop m load add 1 listcomp_end listcomp_start listcomp_start 0 comprehension i store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 listcomp_end 0 comprehension i store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 comprehension j store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end listcomp_start 0 comprehension i store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 listcomp_end 0 comprehension i store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 comprehension j store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 comprehension k store method_call_start range load binop m load add 1 method_call_end range load binop m load add 1 for i store method_call_start range load binop m load add 1 method_call_end range load binop m load add 1 for j store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 for k store method_call_start range load binop o load add 1 method_call_end range load binop o load add 1 if boolop or compare i load eq 0 compare j load eq 0 compare k load eq 0 assign subscript subscript subscript l load i load load j load load k load store 0 if boolop and compare subscript x load binop i load sub 1 load eq subscript y load binop j load sub 1 load compare subscript x load binop i load sub 1 load eq subscript z load binop k load sub 1 load assign subscript subscript subscript l load i load load j load load k load store binop subscript subscript subscript l load binop i load sub 1 load binop j load sub 1 load binop k load sub 1 load add 1 assign subscript subscript subscript l load i load load j load load k load store method_call_start max load method_call_start max load subscript subscript subscript l load binop i load sub 1 load j load load k load load subscript subscript subscript l load i load load binop j load sub 1 load k load load method_call_end max load subscript subscript subscript l load binop i load sub 1 load j load load k load load subscript subscript subscript l load i load load binop j load sub 1 load k load load subscript subscript subscript l load i load load j load load binop k load sub 1 load method_call_end max load method_call_start max load subscript subscript subscript l load binop i load sub 1 load j load load k load load subscript subscript subscript l load i load load binop j load sub 1 load k load load method_call_end max load subscript subscript subscript l load binop i load sub 1 load j load load k load load subscript subscript subscript l load i load load binop j load sub 1 load k load load subscript subscript subscript l load i load load j load load binop k load sub 1 load return subscript subscript subscript l load m load load n load load o load load End,1
1130,956,module functiondef is_majority arguments arg arg arg assign i store method_call_start binary_search load arr load 0 binop n load sub 1 x load method_call_end binary_search load arr load 0 binop n load sub 1 x load if compare i load eq unaryop usub 1 return false if boolop and compare binop i load add binop n load floordiv 2 lte binop n load sub 1 compare subscript arr load binop i load add binop n load floordiv 2 load eq x load return true return false End functiondef binary_search arguments arg arg arg arg if compare high load gte low load assign mid store binop binop low load add high load floordiv 2 if boolop and boolop or compare mid load eq 0 compare x load gt subscript arr load binop mid load sub 1 load compare subscript arr load mid load load eq x load return mid load if compare x load gt subscript arr load mid load load return method_call_start binary_search load arr load binop mid load add 1 high load x load method_call_end binary_search load arr load binop mid load add 1 high load x load return method_call_start binary_search load arr load low load binop mid load sub 1 x load method_call_end binary_search load arr load low load binop mid load sub 1 x load return unaryop usub 1 End,2
1447,712,,2
114,697,"module functiondef is_undulating arguments arg int load expr 
    check whether the given number is undulating or not.
    
    args:
    - number (int): the number to be checked.
    
    returns:
    - bool: true if the number is undulating, false otherwise.
     assign digits store method_call_start str load number load method_call_end str load number load if compare method_call_start len load digits load method_call_end len load digits load lt 3 return false for i store method_call_start range load 1 binop method_call_start len load digits load method_call_end len load digits load sub 1 method_call_end range load 1 binop method_call_start len load digits load method_call_end len load digits load sub 1 if boolop or compare subscript digits load binop i load sub 1 load lt gt subscript digits load i load load subscript digits load binop i load add 1 load compare subscript digits load binop i load sub 1 load gt lt subscript digits load i load load subscript digits load binop i load add 1 load continue return false return true bool load End",1
342,829,"module functiondef float_to_tuple arguments arg assign res store method_call_start tuple load method_call_start map load float load method_call_start attribute_access split test_str load load ,  method_call_end attribute_access split test_str load load ,  method_call_end map load float load method_call_start attribute_access split test_str load load ,  method_call_end attribute_access split test_str load load ,  method_call_end tuple load method_call_start map load float load method_call_start attribute_access split test_str load load ,  method_call_end attribute_access split test_str load load ,  method_call_end map load float load method_call_start attribute_access split test_str load load ,  method_call_end attribute_access split test_str load load ,  return res load End",1
549,503,module functiondef empty_dit arguments arg assign empty_dit store method_call_start all load generatorexp_start unaryop not d load comprehension d store list1 load generatorexp_end unaryop not d load comprehension d store list1 load method_call_end all load generatorexp_start unaryop not d load comprehension d store list1 load generatorexp_end unaryop not d load comprehension d store list1 load return empty_dit load End,2
584,214,module functiondef sort_array arguments arg assign count store list 0 0 0 load for num store arr load augassign subscript count load num load store add 1 assign sorted_arr store list load for i store method_call_start range load 3 method_call_end range load 3 augassign sorted_arr store add binop list i load load mult subscript count load i load load return sorted_arr load End,2
670,403,module functiondef sort_numeric_strings arguments arg assign result store listcomp_start method_call_start int load x load method_call_end int load x load comprehension x store nums_str load listcomp_end method_call_start int load x load method_call_end int load x load comprehension x store nums_str load expr method_call_start attribute_access sort result load load method_call_end attribute_access sort result load load return result load End,1
636,525,module functiondef sector_area arguments arg arg assign pi store binop 22 div 7 if compare a load gte 360 return none assign sectorarea store binop binop pi load mult binop r load pow 2 mult binop a load div 360 return sectorarea load End,2
730,795,module functiondef is_diff arguments arg return compare binop n load mod 11 eq 0 End,2
1943,352,,2
732,890,module functiondef get_most_frequent_word arguments arg assign word_count store dict for string store strings load assign words store method_call_start attribute_access split string load load method_call_end attribute_access split string load load for word store words load if compare word load in word_count load augassign subscript word_count load word load store add 1 assign subscript word_count load word load store 1 assign max_count store 0 assign most_frequent_word store  for tuple word store count store store method_call_start attribute_access items word_count load load method_call_end attribute_access items word_count load load if compare count load gt max_count load assign max_count store count load assign most_frequent_word store word load return most_frequent_word load End,1
1862,475,,1
537,866,module functiondef binomial_coeff arguments arg arg assign c store listcomp_start listcomp_start 0 comprehension j store method_call_start range load binop k load add 1 method_call_end range load binop k load add 1 listcomp_end 0 comprehension j store method_call_start range load binop k load add 1 method_call_end range load binop k load add 1 comprehension i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end listcomp_start 0 comprehension j store method_call_start range load binop k load add 1 method_call_end range load binop k load add 1 listcomp_end 0 comprehension j store method_call_start range load binop k load add 1 method_call_end range load binop k load add 1 comprehension i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 for i store method_call_start range load 0 binop n load add 1 method_call_end range load 0 binop n load add 1 for j store method_call_start range load 0 binop method_call_start min load i load k load method_call_end min load i load k load add 1 method_call_end range load 0 binop method_call_start min load i load k load method_call_end min load i load k load add 1 if boolop or compare j load eq 0 compare j load eq i load assign subscript subscript c load i load load j load store 1 assign subscript subscript c load i load load j load store binop subscript subscript c load binop i load sub 1 load binop j load sub 1 load add subscript subscript c load binop i load sub 1 load j load load return subscript subscript c load n load load k load load End functiondef lobb_num arguments arg arg return binop binop binop binop 2 mult m load add 1 mult method_call_start binomial_coeff load binop 2 mult n load binop m load add n load method_call_end binomial_coeff load binop 2 mult n load binop m load add n load div binop binop m load add n load add 1 End,2
162,921,module functiondef is_upper arguments arg return method_call_start attribute_access upper string load load method_call_end attribute_access upper string load load End,1
189,909,"module functiondef sqrt_perfect_number arguments arg expr 
    find the square root of a perfect number.
    
    parameters:
    n (int): a perfect number.
    
    returns:
    float: the square root of the perfect number.
     return binop n load pow 0.5 End",1
516,374,module import re alias functiondef text_match arguments arg assign patterns store ab*? if method_call_start attribute_access search re load load patterns load text load method_call_end attribute_access search re load load patterns load text load return found a match! return not matched! End,1
1799,88,,1
688,556,module functiondef find_first_repeated_word arguments arg assign words store method_call_start attribute_access split string load load method_call_end attribute_access split string load load assign seen store method_call_start set load method_call_end set load for word store words load if compare word load in seen load return word load expr method_call_start attribute_access add seen load load word load method_call_end attribute_access add seen load load word load return none End,1
936,274,module functiondef reverse_lists arguments arg return listcomp_start method_call_start list load method_call_start reversed load sublist load method_call_end reversed load sublist load method_call_end list load method_call_start reversed load sublist load method_call_end reversed load sublist load comprehension sublist store lst load listcomp_end method_call_start list load method_call_start reversed load sublist load method_call_end reversed load sublist load method_call_end list load method_call_start reversed load sublist load method_call_end reversed load sublist load comprehension sublist store lst load End,2
702,876,module functiondef sum_difference arguments arg assign sumofsquares store 0 assign squareofsum store 0 for num store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 augassign sumofsquares store add binop num load mult num load augassign squareofsum store add num load assign squareofsum store binop squareofsum load pow 2 return binop squareofsum load sub sumofsquares load End,2
43,824,"module functiondef is_30_days_month arguments arg expr 
    check whether the given month number contains 30 days or not.

    parameters:
    month (int): the month number.

    returns:
    bool: true if the month contains 30 days, false otherwise.

     assign thirty_days_months store list 4 6 9 11 load return compare month load in thirty_days_months load End",1
477,502,"module functiondef check_roots arguments arg arg arg expr 
    check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.
    
    arguments:
    a -- coefficient of x^2 term (integer or float)
    b -- coefficient of x term (integer or float)
    c -- constant term (integer or float)
    
    returns:
    true if the roots are numerically equal but opposite in sign, false otherwise
     assign disc store binop binop b load pow 2 sub binop binop 4 mult a load mult c load if compare disc load gte 0 assign root1 store binop binop unaryop usub b load add binop disc load pow 0.5 div binop 2 mult a load assign root2 store binop binop unaryop usub b load sub binop disc load pow 0.5 div binop 2 mult a load if compare root1 load eq unaryop usub root2 load return true return false End",1
1004,4,module functiondef find_nth_tetrahedral_number arguments arg return binop binop binop n load mult binop n load add 1 mult binop n load add 2 floordiv 6 End,2
924,448,module functiondef find_nth_not_multiple arguments arg arg assign count store 0 assign number store 1 while compare count load lt n load if compare binop number load mod given_number load noteq 0 augassign count store add 1 augassign number store add 1 return binop number load sub 1 End,1
899,224,module functiondef count_equal_numbers arguments arg arg arg assign count store 0 if compare num1 load eq eq num2 load num3 load augassign count store add 3 if boolop or compare num1 load eq num2 load compare num1 load eq num3 load compare num2 load eq num3 load augassign count store add 2 return count load End,1
84,430,module functiondef increasing_trend arguments arg if compare method_call_start sorted load nums load method_call_end sorted load nums load eq nums load return true return false End,2
976,585,module functiondef hamming_distance_sum arguments arg if compare n load lte 0 return 0 assign total_sum store 0 assign prev_num store 0 for i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 augassign total_sum store add method_call_start attribute_access count method_call_start bin load binop i load bitxor prev_num load method_call_end bin load binop i load bitxor prev_num load load 1 method_call_end attribute_access count method_call_start bin load binop i load bitxor prev_num load method_call_end bin load binop i load bitxor prev_num load load 1 assign prev_num store i load return total_sum load End,2
1633,826,,2
1225,378,,2
1739,405,,2
283,733,module import re alias functiondef text_match_three arguments arg assign patterns store ab{3}? if method_call_start attribute_access search re load load patterns load text load method_call_end attribute_access search re load load patterns load text load return found a match! return not matched! End,2
1358,936,,2
415,443,module import re alias functiondef remove_char arguments arg assign result store method_call_start attribute_access sub re load load [\w_]+  s load method_call_end attribute_access sub re load load [\w_]+  s load return result load End,1
1903,440,,2
71,449,module functiondef binomial_coeff arguments arg arg if compare k load gt n load return 0 if boolop or compare k load eq 0 compare k load eq n load return 1 return binop method_call_start binomial_coeff load binop n load sub 1 binop k load sub 1 method_call_end binomial_coeff load binop n load sub 1 binop k load sub 1 add method_call_start binomial_coeff load binop n load sub 1 k load method_call_end binomial_coeff load binop n load sub 1 k load End,1
1588,78,,1
659,931,module functiondef intersection_array arguments arg arg assign result store method_call_start list load method_call_start filter load lambda arguments arg compare x load in array_nums1 load array_nums2 load method_call_end filter load lambda arguments arg compare x load in array_nums1 load array_nums2 load method_call_end list load method_call_start filter load lambda arguments arg compare x load in array_nums1 load array_nums2 load method_call_end filter load lambda arguments arg compare x load in array_nums1 load array_nums2 load return result load End,2
1684,828,,2
1731,212,,2
1863,922,,1
651,754,module functiondef get_pell arguments arg if compare n load lte 2 return n load assign a store 1 assign b store 2 for i store method_call_start range load 3 binop n load add 1 method_call_end range load 3 binop n load add 1 assign c store binop binop 2 mult b load add a load assign a store b load assign b store c load return b load End,1
196,768,"module functiondef solution arguments arg arg arg assign i store 0 while compare binop i load mult a load lte n load if compare binop binop n load sub binop i load mult a load mod b load eq 0 return tuple x =  i load , y =  method_call_start int load binop binop n load sub binop i load mult a load div b load method_call_end int load binop binop n load sub binop i load mult a load div b load load return 0 assign i store binop i load add 1 return no solution End",1
1819,349,,2
1674,356,,1
1009,804,module import math alias functiondef polar_to_rectangular arguments arg arg assign x store binop radius load mult method_call_start attribute_access cos math load load angle load method_call_end attribute_access cos math load load angle load assign y store binop radius load mult method_call_start attribute_access sin math load load angle load method_call_end attribute_access sin math load load angle load return tuple x load y load load End,2
64,632,module functiondef check_triangle_validity arguments arg arg arg if boolop and compare binop side1 load add side2 load gt side3 load compare binop side2 load add side3 load gt side1 load compare binop side1 load add side3 load gt side2 load return true return false End,1
1860,42,,2
265,228,module functiondef is_subset arguments arg arg return method_call_start attribute_access issubset method_call_start set load tuple1 load method_call_end set load tuple1 load load method_call_start set load tuple2 load method_call_end set load tuple2 load method_call_end attribute_access issubset method_call_start set load tuple1 load method_call_end set load tuple1 load load method_call_start set load tuple2 load method_call_end set load tuple2 load End,1
848,564,module functiondef find_operations arguments arg arg assign target store method_call_start max load nums load method_call_end max load nums load assign operations store 0 while compare target load gt method_call_start min load nums load method_call_end min load nums load assign max_index store method_call_start attribute_access index nums load load target load method_call_end attribute_access index nums load load target load for i store method_call_start range load method_call_start len load nums load method_call_end len load nums load method_call_end range load method_call_start len load nums load method_call_end len load nums load if compare i load noteq max_index load augassign subscript nums load i load store add k load augassign operations store add 1 assign target store method_call_start max load nums load method_call_end max load nums load return operations load End,2
94,360,module functiondef find_character arguments arg return method_call_start chr load method_call_start sum load generatorexp_start method_call_start ord load c load method_call_end ord load c load comprehension c store string load generatorexp_end method_call_start ord load c load method_call_end ord load c load comprehension c store string load method_call_end sum load generatorexp_start method_call_start ord load c load method_call_end ord load c load comprehension c store string load generatorexp_end method_call_start ord load c load method_call_end ord load c load comprehension c store string load method_call_end chr load method_call_start sum load generatorexp_start method_call_start ord load c load method_call_end ord load c load comprehension c store string load generatorexp_end method_call_start ord load c load method_call_end ord load c load comprehension c store string load method_call_end sum load generatorexp_start method_call_start ord load c load method_call_end ord load c load comprehension c store string load generatorexp_end method_call_start ord load c load method_call_end ord load c load comprehension c store string load End,2
1514,179,,2
608,208,module functiondef int_to_roman arguments arg assign val store list 1000 900 500 400 100 90 50 40 10 9 5 4 1 load assign syb store list m cm d cd c xc l xl x ix v iv i load assign roman_num store  assign i store 0 while compare num load gt 0 for _ store method_call_start range load binop num load floordiv subscript val load i load load method_call_end range load binop num load floordiv subscript val load i load load augassign roman_num store add subscript syb load i load load augassign num store sub subscript val load i load load augassign i store add 1 return roman_num load End,1
675,141,module functiondef pos_count arguments arg assign pos_count store 0 for num store list load if compare num load gte 0 augassign pos_count store add 1 return pos_count load End,2
38,144,module functiondef lateral_surface_area_of_cylinder arguments arg arg return binop binop binop 2 mult 3.14 mult radius load mult height load End,1
153,410,module functiondef min_num arguments arg arg assign odd store 0 for i store method_call_start range load n load method_call_end range load n load if binop subscript arr load i load load mod 2 augassign odd store add 1 if binop odd load mod 2 return 1 return 2 End,1
1532,230,,2
513,564,module functiondef sum_range_list arguments arg arg arg assign sum_range store 0 for i store method_call_start range load m load binop n load add 1 1 method_call_end range load m load binop n load add 1 1 augassign sum_range store add subscript list1 load i load load return sum_range load End,1
822,633,module import math alias functiondef round_up arguments arg arg assign n store binop 10 pow unaryop usub digits load return method_call_start round load binop method_call_start attribute_access ceil math load load binop a load div n load method_call_end attribute_access ceil math load load binop a load div n load mult n load digits load method_call_end round load binop method_call_start attribute_access ceil math load load binop a load div n load method_call_end attribute_access ceil math load load binop a load div n load mult n load digits load End,2
1557,591,,1
1919,931,,1
1904,805,,2
843,105,module import re alias functiondef match_string arguments arg assign pattern store abbb assign match store method_call_start attribute_access match re load load pattern load string load method_call_end attribute_access match re load load pattern load string load if match load return true return false End,1
1393,279,,1
1736,719,,1
1551,298,,2
401,791,module functiondef remove_empty arguments arg assign remove_empty store listcomp_start x load comprehension x store list1 load x load listcomp_end x load comprehension x store list1 load x load return remove_empty load End,1
826,536,module functiondef list_to_tuple arguments arg return method_call_start tuple load lst load method_call_end tuple load lst load End,2
1871,270,,1
986,830,module functiondef find_max_sum_disjoint_pairs arguments arg arg expr method_call_start attribute_access sort arr load load method_call_end attribute_access sort arr load load assign max_sum store 0 assign i store binop method_call_start len load arr load method_call_end len load arr load sub 1 while boolop and compare i load gte 0 compare k load gt 0 augassign max_sum store add subscript arr load i load load augassign i store sub 2 augassign k store sub 1 return max_sum load End,1
1377,575,,1
1699,696,,2
378,284,module functiondef max_profit arguments arg arg assign n store method_call_start len load price load method_call_end len load price load assign final_profit store listcomp_start listcomp_start none comprehension x store method_call_start range load n load method_call_end range load n load listcomp_end none comprehension x store method_call_start range load n load method_call_end range load n load comprehension y store method_call_start range load binop k load add 1 method_call_end range load binop k load add 1 listcomp_end listcomp_start none comprehension x store method_call_start range load n load method_call_end range load n load listcomp_end none comprehension x store method_call_start range load n load method_call_end range load n load comprehension y store method_call_start range load binop k load add 1 method_call_end range load binop k load add 1 for i store method_call_start range load binop k load add 1 method_call_end range load binop k load add 1 for j store method_call_start range load n load method_call_end range load n load if boolop or compare i load eq 0 compare j load eq 0 assign subscript subscript final_profit load i load load j load store 0 assign max_so_far store 0 for x store method_call_start range load j load method_call_end range load j load assign curr_price store binop binop subscript price load j load load sub subscript price load x load load add subscript subscript final_profit load binop i load sub 1 load x load load if compare max_so_far load lt curr_price load assign max_so_far store curr_price load assign subscript subscript final_profit load i load load j load store method_call_start max load subscript subscript final_profit load i load load binop j load sub 1 load max_so_far load method_call_end max load subscript subscript final_profit load i load load binop j load sub 1 load max_so_far load return subscript subscript final_profit load k load load binop n load sub 1 load End,1
1150,587,module functiondef rearrange_array arguments arg assign positive store listcomp_start num load comprehension num store arr load compare num load gte 0 listcomp_end num load comprehension num store arr load compare num load gte 0 assign negative store listcomp_start num load comprehension num store arr load compare num load lt 0 listcomp_end num load comprehension num store arr load compare num load lt 0 assign result store list load assign min_len store method_call_start min load method_call_start len load positive load method_call_end len load positive load method_call_start len load negative load method_call_end len load negative load method_call_end min load method_call_start len load positive load method_call_end len load positive load method_call_start len load negative load method_call_end len load negative load for i store method_call_start range load min_len load method_call_end range load min_len load expr method_call_start attribute_access append result load load subscript positive load i load load method_call_end attribute_access append result load load subscript positive load i load load expr method_call_start attribute_access append result load load subscript negative load i load load method_call_end attribute_access append result load load subscript negative load i load load if compare method_call_start len load positive load method_call_end len load positive load gt method_call_start len load negative load method_call_end len load negative load expr method_call_start attribute_access extend result load load subscript positive load slice min_len load load method_call_end attribute_access extend result load load subscript positive load slice min_len load load if compare method_call_start len load positive load method_call_end len load positive load lt method_call_start len load negative load method_call_end len load negative load expr method_call_start attribute_access extend result load load subscript negative load slice min_len load load method_call_end attribute_access extend result load load subscript negative load slice min_len load load return result load End,2
471,947,module functiondef sort_matrix arguments arg assign sorted_matrix store method_call_start sorted load matrix load method_call_end sorted load matrix load keyword lambda arguments arg method_call_start sum load row load method_call_end sum load row load return sorted_matrix load End,2
571,309,module functiondef clear_tuple arguments arg assign temp store method_call_start list load test_tup load method_call_end list load test_tup load expr method_call_start attribute_access clear temp load load method_call_end attribute_access clear temp load load assign test_tup store method_call_start tuple load temp load method_call_end tuple load temp load return test_tup load End,1
1050,809,module functiondef find_slope arguments arg arg arg arg return binop binop y2 load sub y1 load div binop x2 load sub x1 load End,2
402,786,"module functiondef check_root_difference arguments arg arg arg expr 
    check whether one root of the quadratic equation is twice of the other or not.

    parameters:
    a (float): coefficient of x^2
    b (float): coefficient of x
    c (float): constant term

    returns:
    bool: true if one root is twice of the other, false otherwise

     assign discriminant store binop binop b load pow 2 sub binop binop 4 mult a load mult c load if compare discriminant load lt 0 return false assign root1 store binop binop unaryop usub b load add binop discriminant load pow 0.5 div binop 2 mult a load assign root2 store binop binop unaryop usub b load sub binop discriminant load pow 0.5 div binop 2 mult a load if boolop or compare root1 load eq binop 2 mult root2 load compare root2 load eq binop 2 mult root1 load return true return false End",2
1206,716,,2
1128,206,module functiondef convert arguments arg assign s store listcomp_start method_call_start str load i load method_call_end str load i load comprehension i store list load listcomp_end method_call_start str load i load method_call_end str load i load comprehension i store list load assign res store method_call_start int load method_call_start attribute_access join  load s load method_call_end attribute_access join  load s load method_call_end int load method_call_start attribute_access join  load s load method_call_end attribute_access join  load s load return res load End,1
177,17,"module functiondef calculate_profit arguments arg expr 
    calculate the profit amount.

    args:
        amount (float): amount to calculate the profit.

    returns:
        float: the profit amount if the given amount has profit, otherwise none.
     if compare amount load gt 0 assign profit store binop amount load mult 0.1 return profit load return none End",1
744,54,module functiondef max_average_path arguments arg assign n store method_call_start len load matrix load method_call_end len load matrix load if compare n load eq 0 return none assign max_avg store method_call_start float load -inf method_call_end float load -inf assign max_path store list load functiondef dfs arguments arg arg arg arg nonlocal if boolop or compare i load lt 0 compare i load gte n load compare j load lt 0 compare j load gte n load return expr method_call_start attribute_access append path load load subscript subscript matrix load i load load j load load method_call_end attribute_access append path load load subscript subscript matrix load i load load j load load augassign total store add subscript subscript matrix load i load load j load load if boolop and compare i load eq binop n load sub 1 compare j load eq binop n load sub 1 assign avg store binop total load div method_call_start len load path load method_call_end len load path load if compare avg load gt max_avg load assign max_avg store avg load assign max_path store subscript path load slice load expr method_call_start dfs load binop i load add 1 j load path load total load method_call_end dfs load binop i load add 1 j load path load total load expr method_call_start dfs load i load binop j load add 1 path load total load method_call_end dfs load i load binop j load add 1 path load total load expr method_call_start attribute_access pop path load load method_call_end attribute_access pop path load load End expr method_call_start dfs load 0 0 list load 0 method_call_end dfs load 0 0 list load 0 return max_path load End,1
230,317,module functiondef decimal_to_octal arguments arg assign octal_number store  while compare decimal_number load gt 0 assign remainder store binop decimal_number load mod 8 assign octal_number store binop method_call_start str load remainder load method_call_end str load remainder load add octal_number load assign decimal_number store binop decimal_number load floordiv 8 return method_call_start int load octal_number load method_call_end int load octal_number load End,1
1187,806,,1
1945,957,,1
1202,192,,2
593,812,module functiondef modified_run_length_encoding arguments arg assign output store list load assign count store 1 for i store method_call_start range load 1 method_call_start len load lst load method_call_end len load lst load method_call_end range load 1 method_call_start len load lst load method_call_end len load lst load if compare subscript lst load i load load eq subscript lst load binop i load sub 1 load augassign count store add 1 expr method_call_start attribute_access append output load load tuple subscript lst load binop i load sub 1 load count load load method_call_end attribute_access append output load load tuple subscript lst load binop i load sub 1 load count load load assign count store 1 expr method_call_start attribute_access append output load load tuple subscript lst load unaryop usub 1 load count load load method_call_end attribute_access append output load load tuple subscript lst load unaryop usub 1 load count load load return output load End,2
1885,145,,1
42,526,module import re alias functiondef find_sequences arguments arg assign pattern store [a-z]+_[a-z]+ assign sequences store method_call_start attribute_access findall re load load pattern load text load method_call_end attribute_access findall re load load pattern load text load return sequences load End,1
1743,319,,2
127,787,module functiondef area_trapezium arguments arg arg arg assign area store binop binop 0.5 mult binop base1 load add base2 load mult height load return area load End,2
1300,763,,1
1512,16,,2
1505,158,,1
1566,61,,2
317,158,module functiondef isisomorphic arguments arg str load arg str load if compare method_call_start len load s load method_call_end len load s load noteq method_call_start len load t load method_call_end len load t load return false assign s_map store dict assign t_map store dict for i store method_call_start range load method_call_start len load s load method_call_end len load s load method_call_end range load method_call_start len load s load method_call_end len load s load if compare subscript s load i load load in s_map load if compare subscript s_map load subscript s load i load load load noteq subscript t load i load load return false if compare subscript t load i load load in t_map load if compare subscript t_map load subscript t load i load load load noteq subscript s load i load load return false assign subscript s_map load subscript s load i load load store subscript t load i load load assign subscript t_map load subscript t load i load load store subscript s load i load load return true bool load End,2
1590,563,,2
668,318,module functiondef count_binary_seq arguments arg assign ncr store 1 assign res store 1 for r store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 assign ncr store binop binop ncr load mult binop binop n load add 1 sub r load div r load augassign res store add binop ncr load mult ncr load return res load End,2
1018,972,module functiondef sort_on_occurence arguments arg assign dct store dict for tuple i store j store store lst load expr method_call_start attribute_access append method_call_start attribute_access setdefault dct load load i load list load method_call_end attribute_access setdefault dct load load i load list load load j load method_call_end attribute_access append method_call_start attribute_access setdefault dct load load i load list load method_call_end attribute_access setdefault dct load load i load list load load j load return listcomp_start tuple i load starred method_call_start attribute_access fromkeys dict load load j load method_call_end attribute_access fromkeys dict load load j load load method_call_start len load j load method_call_end len load j load load comprehension tuple i store j store store method_call_start attribute_access items dct load load method_call_end attribute_access items dct load load listcomp_end tuple i load starred method_call_start attribute_access fromkeys dict load load j load method_call_end attribute_access fromkeys dict load load j load load method_call_start len load j load method_call_end len load j load load comprehension tuple i store j store store method_call_start attribute_access items dct load load method_call_end attribute_access items dct load load End,1
895,663,module functiondef is_abundant arguments arg assign factors store list load for i store method_call_start range load 1 number load method_call_end range load 1 number load if compare binop number load mod i load eq 0 expr method_call_start attribute_access append factors load load i load method_call_end attribute_access append factors load load i load if compare method_call_start sum load factors load method_call_end sum load factors load gt number load return true return false End,1
366,118,module functiondef rearrange_array arguments arg assign neg_elements store listcomp_start x load comprehension x store arr load compare x load lt 0 listcomp_end x load comprehension x store arr load compare x load lt 0 assign pos_elements store listcomp_start x load comprehension x store arr load compare x load gte 0 listcomp_end x load comprehension x store arr load compare x load gte 0 return binop neg_elements load add pos_elements load End,1
1143,495,module import re alias functiondef road_rd arguments arg return method_call_start attribute_access sub re load load road$ rd. street load method_call_end attribute_access sub re load load road$ rd. street load End,1
733,873,"module import re alias functiondef change_date_format arguments arg return method_call_start attribute_access sub re load load (\d{4})-(\d{1,2})-(\d{1,2}) \3-\2-\1 dt load method_call_end attribute_access sub re load load (\d{4})-(\d{1,2})-(\d{1,2}) \3-\2-\1 dt load return method_call_start change_date_format load dt load method_call_end change_date_format load dt load End",1
321,558,module import re alias assign text store python exercises functiondef replace_spaces arguments arg assign text store method_call_start attribute_access replace text load load   _ method_call_end attribute_access replace text load load   _ return text load assign text store method_call_start attribute_access replace text load load _   method_call_end attribute_access replace text load load _   return text load End,1
642,341,module functiondef increment_values arguments arg arg assign result store list load for string store strings load assign new_string store  for char store string load if method_call_start attribute_access isdigit char load load method_call_end attribute_access isdigit char load load augassign new_string store add method_call_start str load binop method_call_start int load char load method_call_end int load char load add k load method_call_end str load binop method_call_start int load char load method_call_end int load char load add k load augassign new_string store add char load expr method_call_start attribute_access append result load load new_string load method_call_end attribute_access append result load load new_string load return result load End,1
521,730,module import re alias functiondef remove_parenthesis arguments arg for item store items load return method_call_start attribute_access sub re load load  ?\([^)]+\)  item load method_call_end attribute_access sub re load load  ?\([^)]+\)  item load End,2
1721,908,,2
951,772,module functiondef diff_consecutivenums arguments arg assign result store listcomp_start binop b load sub a load comprehension tuple a store b store store method_call_start zip load subscript nums load slice unaryop usub 1 load subscript nums load slice 1 load method_call_end zip load subscript nums load slice unaryop usub 1 load subscript nums load slice 1 load listcomp_end binop b load sub a load comprehension tuple a store b store store method_call_start zip load subscript nums load slice unaryop usub 1 load subscript nums load slice 1 load method_call_end zip load subscript nums load slice unaryop usub 1 load subscript nums load slice 1 load return result load End,1
874,631,module functiondef swap_numbers arguments arg arg assign temp store a load assign a store b load assign b store temp load return tuple a load b load load End,2
1151,409,module functiondef check_value_exists arguments arg arg return compare value load in sequence load End,2
829,197,module functiondef check_tuples arguments arg arg for i store method_call_start range load method_call_start len load t1 load method_call_end len load t1 load method_call_end range load method_call_start len load t1 load method_call_end len load t1 load if compare subscript t2 load i load load gte i load return false return true End,1
1698,183,,2
1293,691,,2
903,610,module functiondef find_rectangular_number arguments arg return binop binop n load mult binop n load add 1 div 2 End,2
1503,670,,2
1273,273,,2
59,856,module functiondef binary_search arguments arg arg assign first store 0 assign last store binop method_call_start len load item_list load method_call_end len load item_list load sub 1 assign found store false while boolop and compare first load lte last load unaryop not found load assign mid store binop binop first load add last load floordiv 2 if compare subscript item_list load mid load load eq item load assign found store true if compare item load lt subscript item_list load mid load load assign last store binop mid load sub 1 assign first store binop mid load add 1 return found load End,1
1758,310,,1
1340,724,,2
18,937,module from collections import counter alias functiondef remove_duplicate_words arguments arg assign word_count store method_call_start counter load method_call_start attribute_access split string load load method_call_end attribute_access split string load load method_call_end counter load method_call_start attribute_access split string load load method_call_end attribute_access split string load load assign no_duplicates store listcomp_start word load comprehension tuple word store count store store method_call_start attribute_access items word_count load load method_call_end attribute_access items word_count load load compare count load eq 1 listcomp_end word load comprehension tuple word store count store store method_call_start attribute_access items word_count load load method_call_end attribute_access items word_count load load compare count load eq 1 return method_call_start attribute_access join   load no_duplicates load method_call_end attribute_access join   load no_duplicates load End,2
1248,706,,1
1614,257,,2
1168,941,,2
181,242,module functiondef catalan_number arguments arg if compare num load lte 1 return 1 assign res_num store 0 for i store method_call_start range load num load method_call_end range load num load augassign res_num store add binop method_call_start catalan_number load i load method_call_end catalan_number load i load mult method_call_start catalan_number load binop binop num load sub i load sub 1 method_call_end catalan_number load binop binop num load sub i load sub 1 return res_num load End,1
355,578,"module functiondef calculate_sum_within_range arguments arg arg arg expr 
    calculate the sum of the numbers in a list between the indices of a specified range.
    
    :param nums_list: list of numbers
    :type nums_list: list
    :param start_index: starting index of the range
    :type start_index: int
    :param end_index: ending index of the range
    :type end_index: int
    :return: sum of the numbers within the specified range
    :rtype: int or float
     assign sum_within_range store 0 for i store method_call_start range load start_index load binop end_index load add 1 method_call_end range load start_index load binop end_index load add 1 augassign sum_within_range store add subscript nums_list load i load load return sum_within_range load End",2
1653,464,,2
201,388,module functiondef sort_by_dnf arguments arg arg assign low store 0 assign mid store 0 assign high store binop n load sub 1 while compare mid load lte high load if compare subscript arr load mid load load eq 0 assign tuple subscript arr load low load store subscript arr load mid load store store tuple subscript arr load mid load load subscript arr load low load load load assign low store binop low load add 1 assign mid store binop mid load add 1 if compare subscript arr load mid load load eq 1 assign mid store binop mid load add 1 assign tuple subscript arr load mid load store subscript arr load high load store store tuple subscript arr load high load load subscript arr load mid load load load assign high store binop high load sub 1 return arr load End,1
121,110,"module functiondef is_isosceles_triangle arguments arg arg arg expr 
    check if a triangle is isosceles or not.
    
    args:
        side1 (float): length of the first side of the triangle.
        side2 (float): length of the second side of the triangle.
        side3 (float): length of the third side of the triangle.
        
    returns:
        str: ""the triangle is isosceles."" if the triangle is isosceles,
             ""the triangle is not isosceles."" otherwise.
     if boolop or compare side1 load eq side2 load compare side2 load eq side3 load compare side1 load eq side3 load return the triangle is isosceles. return the triangle is not isosceles. End",1
1933,661,,1
1179,425,,2
727,191,module import re alias functiondef remove_spaces arguments arg return method_call_start attribute_access sub re load load  +   text load method_call_end attribute_access sub re load load  +   text load End,1
179,18,module functiondef remove_empty_tuples arguments arg return listcomp_start tup load comprehension tup store lst load tup load listcomp_end tup load comprehension tup store lst load tup load End,2
1755,425,,1
1889,446,,1
1835,332,,2
316,333,module functiondef add_string arguments arg arg assign add_string store listcomp_start method_call_start attribute_access format string load load i load method_call_end attribute_access format string load load i load comprehension i store list load listcomp_end method_call_start attribute_access format string load load i load method_call_end attribute_access format string load load i load comprehension i store list load return add_string load End,2
1518,942,,2
801,523,module functiondef all_bits_set_in_the_given_range arguments arg arg arg assign num store binop binop binop 1 lshift r load sub 1 bitxor binop binop 1 lshift binop l load sub 1 sub 1 assign new_num store binop n load bitand num load if compare new_num load eq 0 return true return false End,1
1767,479,,1
11,494,module functiondef parallelogram_perimeter arguments arg arg assign perimeter store binop 2 mult binop b load mult h load return perimeter load End,2
473,430,module import math alias functiondef lateralsurface_cone arguments arg arg assign l store method_call_start attribute_access sqrt math load load binop binop r load mult r load add binop h load mult h load method_call_end attribute_access sqrt math load load binop binop r load mult r load add binop h load mult h load assign lsa store binop binop attribute_access pi math load load mult r load mult l load return lsa load End,1
1502,359,,1
1675,541,,2
108,49,module functiondef mul_consecutive_nums arguments arg assign result store listcomp_start binop b load mult a load comprehension tuple a store b store store method_call_start zip load subscript nums load slice unaryop usub 1 load subscript nums load slice 1 load method_call_end zip load subscript nums load slice unaryop usub 1 load subscript nums load slice 1 load listcomp_end binop b load mult a load comprehension tuple a store b store store method_call_start zip load subscript nums load slice unaryop usub 1 load subscript nums load slice 1 load method_call_end zip load subscript nums load slice unaryop usub 1 load subscript nums load slice 1 load return result load End,1
1474,67,,2
1303,306,,2
488,801,module functiondef prod_square arguments arg for i store method_call_start range load 2 binop n load add 1 method_call_end range load 2 binop n load add 1 if compare binop i load mult i load lt binop n load add 1 for j store method_call_start range load 2 binop n load add 1 method_call_end range load 2 binop n load add 1 if compare binop binop binop i load mult i load mult j load mult j load eq n load return true return false End,2
1328,412,,2
993,69,module functiondef add_str arguments arg arg assign res store listcomp_start ele load comprehension sub store test_tup load comprehension ele store tuple sub load k load load listcomp_end ele load comprehension sub store test_tup load comprehension ele store tuple sub load k load load return res load End,2
1007,196,module functiondef find_parity arguments arg assign y store binop x load bitxor binop x load rshift 1 assign y store binop y load bitxor binop y load rshift 2 assign y store binop y load bitxor binop y load rshift 4 assign y store binop y load bitxor binop y load rshift 8 assign y store binop y load bitxor binop y load rshift 16 if binop y load bitand 1 return odd parity return even parity End,2
1350,35,,2
1200,945,,2
183,685,"module functiondef sum_range arguments arg arg arg expr 
    calculate the sum of the numbers in a list between the given start and end indices (inclusive).

    parameters:
    numbers (list): the list of numbers to calculate the sum from.
    start_index (int): the starting index of the range.
    end_index (int): the ending index of the range.

    returns:
    int: the sum of the numbers between the specified range.

    example:
    numbers = [1, 2, 3, 4, 5]
    start_index = 1
    end_index = 3
    sum_range(numbers, start_index, end_index) -> 9

    numbers = [10, 20, 30, 40, 50]
    start_index = 2
    end_index = 4
    sum_range(numbers, start_index, end_index) -> 120
     return method_call_start sum load subscript numbers load slice start_index load binop end_index load add 1 load method_call_end sum load subscript numbers load slice start_index load binop end_index load add 1 load End",2
869,388,module functiondef find_min_swaps arguments arg arg assign noofzeroes store binop list 0 load mult n load assign count store 0 assign subscript noofzeroes load binop n load sub 1 store binop 1 sub subscript arr load binop n load sub 1 load for i store method_call_start range load binop n load sub 2 unaryop usub 1 unaryop usub 1 method_call_end range load binop n load sub 2 unaryop usub 1 unaryop usub 1 assign subscript noofzeroes load i load store subscript noofzeroes load binop i load add 1 load if compare subscript arr load i load load eq 0 assign subscript noofzeroes load i load store binop subscript noofzeroes load i load load add 1 for i store method_call_start range load 0 n load method_call_end range load 0 n load if compare subscript arr load i load load eq 1 assign count store binop count load add subscript noofzeroes load i load load return count load End,2
752,623,module functiondef dig_let arguments arg assign d store l store 0 for c store s load if method_call_start attribute_access isdigit c load load method_call_end attribute_access isdigit c load load assign d store binop d load add 1 if method_call_start attribute_access isalpha c load load method_call_end attribute_access isalpha c load load assign l store binop l load add 1 pass return tuple l load d load load End,1
1417,833,,2
413,362,"module functiondef find_dissimilar_elements arguments arg arg expr 
    find dissimilar elements in two tuples.

    parameters:
    tuple1 (tuple): first tuple.
    tuple2 (tuple): second tuple.

    returns:
    list: list of dissimilar elements between the two tuples.
     return method_call_start list load binop method_call_start set load tuple1 load method_call_end set load tuple1 load bitxor method_call_start set load tuple2 load method_call_end set load tuple2 load method_call_end list load binop method_call_start set load tuple1 load method_call_end set load tuple1 load bitxor method_call_start set load tuple2 load method_call_end set load tuple2 load End",1
19,925,module functiondef listify_list arguments arg assign result store method_call_start list load method_call_start map load list load list1 load method_call_end map load list load list1 load method_call_end list load method_call_start map load list load list1 load method_call_end map load list load list1 load return result load End,1
309,9,module functiondef sum_of_absolute_differences arguments arg assign n store method_call_start len load arr load method_call_end len load arr load assign sum_diff store 0 for i store method_call_start range load n load method_call_end range load n load for j store method_call_start range load binop i load add 1 n load method_call_end range load binop i load add 1 n load assign diff store method_call_start abs load binop subscript arr load i load load sub subscript arr load j load load method_call_end abs load binop subscript arr load i load load sub subscript arr load j load load augassign sum_diff store add diff load return sum_diff load End,1
1125,955,module functiondef cube_volume arguments arg return binop side_length load pow 3 End,2
892,214,module functiondef binary_tuple_to_integer arguments arg assign binary_string store method_call_start attribute_access join  load generatorexp_start method_call_start str load bit load method_call_end str load bit load comprehension bit store binary_tuple load generatorexp_end method_call_start str load bit load method_call_end str load bit load comprehension bit store binary_tuple load method_call_end attribute_access join  load generatorexp_start method_call_start str load bit load method_call_end str load bit load comprehension bit store binary_tuple load generatorexp_end method_call_start str load bit load method_call_end str load bit load comprehension bit store binary_tuple load return method_call_start int load binary_string load 2 method_call_end int load binary_string load 2 End,1
691,859,module functiondef average_of_even_numbers arguments arg assign total store 0 assign count store 0 for i store method_call_start range load 2 binop n load add 1 2 method_call_end range load 2 binop n load add 1 2 augassign total store add i load augassign count store add 1 if compare count load eq 0 return 0 return binop total load div count load End,2
1925,852,,2
1909,868,,1
1691,738,,1
1599,182,,2
82,416,module functiondef find_common_first_element arguments arg assign first_elements store list load for tup store lst load expr method_call_start attribute_access append first_elements load load subscript tup load 0 load method_call_end attribute_access append first_elements load load subscript tup load 0 load assign common_first_element store none for element store first_elements load if compare method_call_start attribute_access count first_elements load load element load method_call_end attribute_access count first_elements load load element load eq method_call_start len load lst load method_call_end len load lst load assign common_first_element store element load break return common_first_element load End,2
1504,215,,1
1864,36,,2
478,722,module functiondef find_nth_hexagonal_number arguments arg return binop n load mult binop binop 2 mult n load sub 1 End,1
502,626,module functiondef find_area_of_rhombus arguments arg arg return binop binop diagonal1 load mult diagonal2 load div 2 End,2
1839,575,,2
1535,851,,2
760,711,"module import re alias functiondef is_valid_url arguments arg assign regex store binop binop binop binop ((http|https)://)(www.)? add [a-za-z0-9@:%._\+~#?&//=] add {2,256}\.[a-z] add {2,6}\b([-a-za-z0-9@:% add ._\+~#?&//=]*) assign p store method_call_start attribute_access compile re load load regex load method_call_end attribute_access compile re load load regex load if compare str load eq none return false if method_call_start attribute_access search re load load p load str load method_call_end attribute_access search re load load p load str load return true return false End",2
723,39,module from math import tan from math import pi alias alias functiondef perimeter_polygon arguments arg arg assign perimeter store binop s load mult l load return perimeter load End,2
888,227,module functiondef sort_list_by_second_element arguments arg expr method_call_start attribute_access sort sublist load load method_call_end attribute_access sort sublist load load keyword lambda arguments arg subscript x load 1 load return sublist load End,2
469,226,"module functiondef find_nth_term arguments arg arg arg expr 
    find t-nth term of arithmetic progression.

    parameters:
    a (int): the first term of the arithmetic progression.
    d (int): the common difference of the arithmetic progression.
    n (int): the term number to find.

    returns:
    int: the t-nth term of the arithmetic progression.

    example:
    >>> find_nth_term(2, 5, 4)
    17
     return binop a load add binop binop n load sub 1 mult d load End",1
1232,734,,2
1479,318,,1
1603,760,,2
1622,907,,2
904,322,module functiondef convert_to_set arguments arg return method_call_start set load tuples load method_call_end set load tuples load End,1
1627,774,,1
1441,889,,2
585,426,module functiondef topbottom_surfacearea arguments arg assign toporbottomarea store binop binop 3.1415 mult r load mult r load return toporbottomarea load End,2
1750,142,,1
1663,534,,1
382,471,module functiondef find_longest_repeating_subseq arguments arg assign n store method_call_start len load str load method_call_end len load str load assign dp store listcomp_start listcomp_start 0 comprehension k store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end 0 comprehension k store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 comprehension l store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end listcomp_start 0 comprehension k store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 listcomp_end 0 comprehension k store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 comprehension l store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 for i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 for j store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 if boolop and compare subscript str load binop i load sub 1 load eq subscript str load binop j load sub 1 load compare i load noteq j load assign subscript subscript dp load i load load j load store binop 1 add subscript subscript dp load binop i load sub 1 load binop j load sub 1 load assign subscript subscript dp load i load load j load store method_call_start max load subscript subscript dp load i load load binop j load sub 1 load subscript subscript dp load binop i load sub 1 load j load load method_call_end max load subscript subscript dp load i load load binop j load sub 1 load subscript subscript dp load binop i load sub 1 load j load load return subscript subscript dp load n load load n load load End,1
376,970,module import heapq alias functiondef heap_queue_smallest arguments arg arg assign smallest_nums store method_call_start attribute_access nsmallest hq load load n load nums load method_call_end attribute_access nsmallest hq load load n load nums load return smallest_nums load End,2
1162,302,,1
1730,44,,2
1281,728,,2
1255,681,,2
1426,95,,1
765,138,module from collections import counter alias functiondef sort_counter arguments arg assign x store method_call_start counter load dict1 load method_call_end counter load dict1 load assign sort_counter store method_call_start attribute_access most_common x load load method_call_end attribute_access most_common x load load return sort_counter load End,2
173,148,module functiondef remove_tuples arguments arg arg assign res store listcomp_start ele load comprehension ele store test_list load compare method_call_start len load ele load method_call_end len load ele load noteq k load listcomp_end ele load comprehension ele store test_list load compare method_call_start len load ele load method_call_end len load ele load noteq k load return res load End,2
341,294,module import sys alias functiondef min_coins arguments arg arg arg if compare v load eq 0 return 0 assign res store attribute_access maxsize sys load load for i store method_call_start range load 0 m load method_call_end range load 0 m load if compare subscript coins load i load load lte v load assign sub_res store method_call_start min_coins load coins load m load binop v load sub subscript coins load i load load method_call_end min_coins load coins load m load binop v load sub subscript coins load i load load if boolop and compare sub_res load noteq attribute_access maxsize sys load load compare binop sub_res load add 1 lt res load assign res store binop sub_res load add 1 return res load End,1
389,64,module functiondef find_odd_occurrence arguments arg assign count store dict for num store arr load assign subscript count load num load store binop method_call_start attribute_access get count load load num load 0 method_call_end attribute_access get count load load num load 0 add 1 for tuple num store freq store store method_call_start attribute_access items count load load method_call_end attribute_access items count load load if compare binop freq load mod 2 noteq 0 return num load End,2
871,345,module functiondef sum_of_digits arguments arg arg assign result store binop base load pow power load assign result_string store method_call_start str load result load method_call_end str load result load assign digit_sum store 0 for digit store result_string load assign digit_int store method_call_start int load digit load method_call_end int load digit load augassign digit_sum store add digit_int load return digit_sum load End,1
717,794,module functiondef minimum_total arguments arg if unaryop not triangle load return 0 assign dp store subscript triangle load unaryop usub 1 load for i store method_call_start range load binop method_call_start len load triangle load method_call_end len load triangle load sub 2 unaryop usub 1 unaryop usub 1 method_call_end range load binop method_call_start len load triangle load method_call_end len load triangle load sub 2 unaryop usub 1 unaryop usub 1 for j store method_call_start range load method_call_start len load subscript triangle load i load load method_call_end len load subscript triangle load i load load method_call_end range load method_call_start len load subscript triangle load i load load method_call_end len load subscript triangle load i load load assign subscript dp load j load store binop subscript subscript triangle load i load load j load load add method_call_start min load subscript dp load j load load subscript dp load binop j load add 1 load method_call_end min load subscript dp load j load load subscript dp load binop j load add 1 load return subscript dp load 0 load End,1
1109,561,module functiondef multiply_adjacent_elements arguments arg assign result store list load for i store method_call_start range load binop method_call_start len load t load method_call_end len load t load sub 1 method_call_end range load binop method_call_start len load t load method_call_end len load t load sub 1 expr method_call_start attribute_access append result load load binop subscript t load i load load mult subscript t load binop i load add 1 load method_call_end attribute_access append result load load binop subscript t load i load load mult subscript t load binop i load add 1 load return result load End,2
146,555,module functiondef find_difference arguments arg return binop method_call_start max load arr load method_call_end max load arr load sub method_call_start min load arr load method_call_end min load arr load End,2
964,628,module import math alias functiondef tn_gp arguments arg arg arg assign tn store binop a load mult method_call_start attribute_access pow math load load r load binop n load sub 1 method_call_end attribute_access pow math load load r load binop n load sub 1 return tn load End,1
915,947,"module functiondef remove_negative_numbers arguments arg expr 
    remove negative numbers from a list.

    parameters:
    lst (list): a list of numbers.

    returns:
    list: a new list without negative numbers.
     return listcomp_start num load comprehension num store lst load compare num load gte 0 listcomp_end num load comprehension num store lst load compare num load gte 0 End",1
1789,42,,1
1122,148,module functiondef remove_odd arguments arg for i store l load if compare binop i load mod 2 noteq 0 expr method_call_start attribute_access remove l load load i load method_call_end attribute_access remove l load load i load return l load End,1
836,749,module functiondef max_run_uppercase arguments arg assign cnt store 0 assign res store 0 for idx store method_call_start range load 0 method_call_start len load test_str load method_call_end len load test_str load method_call_end range load 0 method_call_start len load test_str load method_call_end len load test_str load if method_call_start attribute_access isupper subscript test_str load idx load load load method_call_end attribute_access isupper subscript test_str load idx load load load augassign cnt store add 1 assign res store cnt load assign cnt store 0 if method_call_start attribute_access isupper subscript test_str load binop method_call_start len load test_str load method_call_end len load test_str load sub 1 load load method_call_end attribute_access isupper subscript test_str load binop method_call_start len load test_str load method_call_end len load test_str load sub 1 load load assign res store cnt load return res load End,2
566,349,module functiondef common_prefix_util arguments arg arg assign result store  assign n1 store method_call_start len load str1 load method_call_end len load str1 load assign n2 store method_call_start len load str2 load method_call_end len load str2 load assign i store 0 assign j store 0 while boolop and compare i load lte binop n1 load sub 1 compare j load lte binop n2 load sub 1 if compare subscript str1 load i load load noteq subscript str2 load j load load break augassign result store add subscript str1 load i load load augassign i store add 1 augassign j store add 1 return result load End functiondef common_prefix arguments arg arg assign prefix store subscript arr load 0 load for i store method_call_start range load 1 n load method_call_end range load 1 n load assign prefix store method_call_start common_prefix_util load prefix load subscript arr load i load load method_call_end common_prefix_util load prefix load subscript arr load i load load return prefix load End,1
522,6,"module expr python load functiondef find_max_nth_column arguments arg arg expr 
    find the maximum value of the nth column from the given tuple list.

    parameters:
    tuple_list (list): a list of tuples where each tuple represents a row.
    n (int): the column number (starting from 0) to find the maximum value.

    returns:
    int or float: the maximum value from the specified column.
     assign max_value store method_call_start float load -inf method_call_end float load -inf for row store tuple_list load if compare n load lt method_call_start len load row load method_call_end len load row load assign column_value store subscript row load n load load if compare column_value load gt max_value load assign max_value store column_value load return max_value load End",1
274,202,module functiondef toggle_bits arguments arg return binop binop num load bitxor 1 bitor binop num load bitxor binop 1 lshift binop method_call_start attribute_access bit_length num load load method_call_end attribute_access bit_length num load load sub 1 End,1
1268,960,,2
300,55,module functiondef flatten_tuple arguments arg assign res store method_call_start attribute_access join   load listcomp_start idx load comprehension tup store test_list load comprehension idx store tup load listcomp_end idx load comprehension tup store test_list load comprehension idx store tup load method_call_end attribute_access join   load listcomp_start idx load comprehension tup store test_list load comprehension idx store tup load listcomp_end idx load comprehension tup store test_list load comprehension idx store tup load return res load End,1
1220,478,,1
909,757,module functiondef max_occurrences arguments arg assign max_val store 0 assign result store subscript nums load 0 load for i store nums load assign occu store method_call_start attribute_access count nums load load i load method_call_end attribute_access count nums load load i load if compare occu load gt max_val load assign max_val store occu load assign result store i load return result load End,1
873,635,module functiondef is_subset arguments arg arg arg arg assign hashset store method_call_start set load method_call_end set load for i store method_call_start range load 0 m load method_call_end range load 0 m load expr method_call_start attribute_access add hashset load load subscript arr1 load i load load method_call_end attribute_access add hashset load load subscript arr1 load i load load for i store method_call_start range load 0 n load method_call_end range load 0 n load if compare subscript arr2 load i load load in hashset load continue return false return true End,2
1795,841,,1
296,582,module functiondef is_prime arguments arg if compare number load lte 1 return false for i store method_call_start range load 2 binop method_call_start int load binop number load pow 0.5 method_call_end int load binop number load pow 0.5 add 1 method_call_end range load 2 binop method_call_start int load binop number load pow 0.5 method_call_end int load binop number load pow 0.5 add 1 if compare binop number load mod i load eq 0 return false return true End,2
1662,477,,1
1020,813,module functiondef find_max_frequency arguments arg assign frequency_counter store dict for item store lst load if compare item load in frequency_counter load augassign subscript frequency_counter load item load store add 1 assign subscript frequency_counter load item load store 1 assign max_frequency store 0 assign max_item store none for tuple item store frequency store store method_call_start attribute_access items frequency_counter load load method_call_end attribute_access items frequency_counter load load if compare frequency load gt max_frequency load assign max_frequency store frequency load assign max_item store item load return max_item load End,2
960,816,module functiondef check arguments arg assign p store method_call_start set load string load method_call_end set load string load assign s store set 0 1 if boolop or compare s load eq p load compare p load eq set 0 compare p load eq set 1 return yes return no End,2
1217,7,,1
1011,753,module functiondef snake_to_camel arguments arg assign words store method_call_start attribute_access split snake_case_string load load _ method_call_end attribute_access split snake_case_string load load _ assign camel_case_string store subscript words load 0 load for word store subscript words load slice 1 load augassign camel_case_string store add method_call_start attribute_access capitalize word load load method_call_end attribute_access capitalize word load load return camel_case_string load End,1
1026,909,module functiondef swap_list arguments arg assign size store method_call_start len load newlist load method_call_end len load newlist load assign temp store subscript newlist load 0 load assign subscript newlist load 0 store subscript newlist load binop size load sub 1 load assign subscript newlist load binop size load sub 1 store temp load return newlist load End,2
1222,547,,2
1138,569,module functiondef adjacent_num_product arguments arg return method_call_start max load generatorexp_start binop a load mult b load comprehension tuple a store b store store method_call_start zip load list_nums load subscript list_nums load slice 1 load method_call_end zip load list_nums load subscript list_nums load slice 1 load generatorexp_end binop a load mult b load comprehension tuple a store b store store method_call_start zip load list_nums load subscript list_nums load slice 1 load method_call_end zip load list_nums load subscript list_nums load slice 1 load method_call_end max load generatorexp_start binop a load mult b load comprehension tuple a store b store store method_call_start zip load list_nums load subscript list_nums load slice 1 load method_call_end zip load list_nums load subscript list_nums load slice 1 load generatorexp_end binop a load mult b load comprehension tuple a store b store store method_call_start zip load list_nums load subscript list_nums load slice 1 load method_call_end zip load list_nums load subscript list_nums load slice 1 load End,1
1466,429,,1
650,34,module functiondef find_string arguments arg arg assign matches store list load for i store method_call_start range load method_call_start len load string load method_call_end len load string load method_call_end range load method_call_start len load string load method_call_end len load string load if compare subscript string load slice i load binop i load add method_call_start len load pattern load method_call_end len load pattern load load eq pattern load expr method_call_start attribute_access append matches load load i load method_call_end attribute_access append matches load load i load return matches load End,1
1820,58,,1
109,607,module functiondef sort_dict_item arguments arg assign res store dictcomp_start key load subscript test_dict load key load load comprehension key store method_call_start sorted load method_call_start attribute_access keys test_dict load load method_call_end attribute_access keys test_dict load load method_call_end sorted load method_call_start attribute_access keys test_dict load load method_call_end attribute_access keys test_dict load load keyword lambda arguments arg binop subscript ele load 1 load mult subscript ele load 0 load dictcomp_end key load subscript test_dict load key load load comprehension key store method_call_start sorted load method_call_start attribute_access keys test_dict load load method_call_end attribute_access keys test_dict load load method_call_end sorted load method_call_start attribute_access keys test_dict load load method_call_end attribute_access keys test_dict load load keyword lambda arguments arg binop subscript ele load 1 load mult subscript ele load 0 load return res load End,2
862,84,module functiondef find_minimum_product arguments arg assign min_product store method_call_start float load inf method_call_end float load inf for i store method_call_start range load method_call_start len load lst load method_call_end len load lst load method_call_end range load method_call_start len load lst load method_call_end len load lst load for j store method_call_start range load binop i load add 1 method_call_start len load lst load method_call_end len load lst load method_call_end range load binop i load add 1 method_call_start len load lst load method_call_end len load lst load assign product store binop binop binop subscript subscript lst load i load load 0 load mult subscript subscript lst load j load load 0 load mult subscript subscript lst load i load load 1 load mult subscript subscript lst load j load load 1 load assign min_product store method_call_start min load min_product load product load method_call_end min load min_product load product load return min_product load End,1
704,372,module functiondef snake_to_camel arguments arg import re alias return method_call_start attribute_access join  load generatorexp_start boolop or method_call_start attribute_access capitalize x load load method_call_end attribute_access capitalize x load load _ comprehension x store method_call_start attribute_access split word load load _ method_call_end attribute_access split word load load _ generatorexp_end boolop or method_call_start attribute_access capitalize x load load method_call_end attribute_access capitalize x load load _ comprehension x store method_call_start attribute_access split word load load _ method_call_end attribute_access split word load load _ method_call_end attribute_access join  load generatorexp_start boolop or method_call_start attribute_access capitalize x load load method_call_end attribute_access capitalize x load load _ comprehension x store method_call_start attribute_access split word load load _ method_call_end attribute_access split word load load _ generatorexp_end boolop or method_call_start attribute_access capitalize x load load method_call_end attribute_access capitalize x load load _ comprehension x store method_call_start attribute_access split word load load _ method_call_end attribute_access split word load load _ End,1
3,520,module functiondef remove_lowercase_substrings arguments arg assign result store  assign i store 0 while compare i load lt method_call_start len load string load method_call_end len load string load if method_call_start attribute_access islower subscript string load i load load load method_call_end attribute_access islower subscript string load i load load load assign j store binop i load add 1 while boolop and compare j load lt method_call_start len load string load method_call_end len load string load method_call_start attribute_access islower subscript string load j load load load method_call_end attribute_access islower subscript string load j load load load augassign j store add 1 assign i store j load augassign result store add subscript string load i load load augassign i store add 1 return result load End,2
607,353,module functiondef check_last arguments arg arg arg assign _sum store 0 for i store method_call_start range load n load method_call_end range load n load assign _sum store binop _sum load add subscript arr load i load load if compare p load eq 1 if compare binop _sum load mod 2 eq 0 return odd return even return even End,1
1087,571,module functiondef check_opposite_signs arguments arg arg if boolop or boolop and compare a load lt 0 compare b load gt 0 boolop and compare a load gt 0 compare b load lt 0 return true return false End,2
434,794,module functiondef count_duplic arguments arg assign element store list load assign frequency store list load if unaryop not lists load return element load assign running_count store 1 for i store method_call_start range load binop method_call_start len load lists load method_call_end len load lists load sub 1 method_call_end range load binop method_call_start len load lists load method_call_end len load lists load sub 1 if compare subscript lists load i load load eq subscript lists load binop i load add 1 load augassign running_count store add 1 expr method_call_start attribute_access append frequency load load running_count load method_call_end attribute_access append frequency load load running_count load expr method_call_start attribute_access append element load load subscript lists load i load load method_call_end attribute_access append element load load subscript lists load i load load assign running_count store 1 expr method_call_start attribute_access append frequency load load running_count load method_call_end attribute_access append frequency load load running_count load expr method_call_start attribute_access append element load load subscript lists load binop i load add 1 load method_call_end attribute_access append element load load subscript lists load binop i load add 1 load return tuple element load frequency load load End,2
643,155,module functiondef camel_to_snake arguments arg import re alias assign str1 store method_call_start attribute_access sub re load load (.)([a-z][a-z]+) \1_\2 text load method_call_end attribute_access sub re load load (.)([a-z][a-z]+) \1_\2 text load return method_call_start attribute_access lower method_call_start attribute_access sub re load load ([a-z0-9])([a-z]) \1_\2 str1 load method_call_end attribute_access sub re load load ([a-z0-9])([a-z]) \1_\2 str1 load load method_call_end attribute_access lower method_call_start attribute_access sub re load load ([a-z0-9])([a-z]) \1_\2 str1 load method_call_end attribute_access sub re load load ([a-z0-9])([a-z]) \1_\2 str1 load load End,1
942,152,module functiondef set_bit_number arguments arg if compare n load eq 0 return 0 assign msb store 0 assign n store method_call_start int load binop n load div 2 method_call_end int load binop n load div 2 while compare n load gt 0 assign n store method_call_start int load binop n load div 2 method_call_end int load binop n load div 2 augassign msb store add 1 return binop 1 lshift msb load End,2
1161,312,,1
1292,663,,2
1749,805,,1
419,513,module functiondef alternate_elements arguments arg assign result store list load for item store subscript list1 load slice 2 load expr method_call_start attribute_access append result load load item load method_call_end attribute_access append result load load item load return result load End,1
1487,324,,1
1688,108,,2
430,548,"module functiondef sum_of_fifth_power arguments arg expr 
    calculate the sum of the fifth power of n natural numbers.

    parameters:
    n (int): the number of natural numbers to calculate the sum for.

    returns:
    int: the sum of the fifth power of n natural numbers.
     return method_call_start sum load generatorexp_start binop i load pow 5 comprehension i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 generatorexp_end binop i load pow 5 comprehension i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 method_call_end sum load generatorexp_start binop i load pow 5 comprehension i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 generatorexp_end binop i load pow 5 comprehension i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 End",1
539,488,"module functiondef is_sorted arguments arg expr 
    check if a specified list is sorted or not.
    
    parameters:
    lst (list): the list to be checked.
    
    returns:
    bool: true if the list is sorted, false otherwise.
     return compare lst load eq method_call_start sorted load lst load method_call_end sorted load lst load End",1
1928,937,,1
1019,223,module functiondef month_season arguments arg arg if compare month load in tuple january february march load assign season store winter if compare month load in tuple april may june load assign season store spring if compare month load in tuple july august september load assign season store summer assign season store autumn if boolop and compare month load eq march compare days load gt 19 assign season store spring if boolop and compare month load eq june compare days load gt 20 assign season store summer if boolop and compare month load eq september compare days load gt 21 assign season store autumn if boolop and compare month load eq october compare days load gt 21 assign season store autumn if boolop and compare month load eq november compare days load gt 21 assign season store autumn if boolop and compare month load eq december compare days load gt 20 assign season store winter return season load End,2
36,97,module from collections import defaultdict alias functiondef max_occurrences arguments arg assign dict store method_call_start defaultdict load int load method_call_end defaultdict load int load for i store nums load augassign subscript dict load i load store add 1 assign result store method_call_start max load method_call_start attribute_access items dict load load method_call_end attribute_access items dict load load method_call_end max load method_call_start attribute_access items dict load load method_call_end attribute_access items dict load load keyword lambda arguments arg subscript x load 1 load return result load End,1
673,715,module functiondef count_odd_factors arguments arg arg assign count store 0 for num store method_call_start range load start load binop end load add 1 method_call_end range load start load binop end load add 1 assign factors store 0 for i store method_call_start range load 1 binop num load add 1 method_call_end range load 1 binop num load add 1 if compare binop num load mod i load eq 0 augassign factors store add 1 if compare binop factors load mod 2 noteq 0 augassign count store add 1 return count load End,1
739,608,module functiondef permutations arguments arg if compare method_call_start len load string load method_call_end len load string load eq 0 return list load if compare method_call_start len load string load method_call_end len load string load eq 1 return list string load load assign perms store list load for i store method_call_start range load method_call_start len load string load method_call_end len load string load method_call_end range load method_call_start len load string load method_call_end len load string load assign char store subscript string load i load load assign remaining_chars store binop subscript string load slice i load load add subscript string load slice binop i load add 1 load for perm store method_call_start permutations load remaining_chars load method_call_end permutations load remaining_chars load expr method_call_start attribute_access append perms load load binop char load add perm load method_call_end attribute_access append perms load load binop char load add perm load return perms load End,1
83,555,module functiondef interchange_first_last arguments arg assign tuple subscript lst load 0 store subscript lst load unaryop usub 1 store store tuple subscript lst load unaryop usub 1 load subscript lst load 0 load load return lst load End,1
736,80,module functiondef add_pairwise arguments arg assign res store method_call_start tuple load generatorexp_start binop i load add j load comprehension tuple i store j store store method_call_start zip load test_tup load subscript test_tup load slice 1 load method_call_end zip load test_tup load subscript test_tup load slice 1 load generatorexp_end binop i load add j load comprehension tuple i store j store store method_call_start zip load test_tup load subscript test_tup load slice 1 load method_call_end zip load test_tup load subscript test_tup load slice 1 load method_call_end tuple load generatorexp_start binop i load add j load comprehension tuple i store j store store method_call_start zip load test_tup load subscript test_tup load slice 1 load method_call_end zip load test_tup load subscript test_tup load slice 1 load generatorexp_end binop i load add j load comprehension tuple i store j store store method_call_start zip load test_tup load subscript test_tup load slice 1 load method_call_end zip load test_tup load subscript test_tup load slice 1 load return res load End,2
1419,173,,1
919,405,module functiondef maximum_sum arguments arg int load if compare number load lt 0 return 0 if compare number load lt 10 return number load assign max_sum store 0 for i store method_call_start range load 1 number load method_call_end range load 1 number load assign current_sum store binop method_call_start maximum_sum load binop number load sub i load method_call_end maximum_sum load binop number load sub i load add method_call_start maximum_sum load i load method_call_end maximum_sum load i load assign max_sum store method_call_start max load max_sum load current_sum load method_call_end max load max_sum load current_sum load return max_sum load int load End,1
1433,406,,1
1064,725,module functiondef is_even arguments arg if compare binop num load bitand 1 eq 0 return true return false End,1
922,590,module functiondef filter_data arguments arg arg arg assign result store dictcomp_start k load s load comprehension tuple k store s store store method_call_start attribute_access items students load load method_call_end attribute_access items students load load boolop and compare subscript s load 0 load gte h load compare subscript s load 1 load gte w load dictcomp_end k load s load comprehension tuple k store s store store method_call_start attribute_access items students load load method_call_end attribute_access items students load load boolop and compare subscript s load 0 load gte h load compare subscript s load 1 load gte w load return result load End,2
233,710,module functiondef calculate_average arguments arg assign total_sum store 0 assign total_count store 0 for num_tuple store numbers load for num store num_tuple load augassign total_sum store add num load augassign total_count store add 1 if compare total_count load eq 0 return 0 assign average store binop total_sum load div total_count load return average load End,2
640,102,module functiondef jacobsthal_num arguments arg assign dp store binop list 0 load mult binop n load add 1 assign subscript dp load 0 store 0 assign subscript dp load 1 store 1 for i store method_call_start range load 2 binop n load add 1 method_call_end range load 2 binop n load add 1 assign subscript dp load i load store binop subscript dp load binop i load sub 1 load add binop 2 mult subscript dp load binop i load sub 2 load return subscript dp load n load load End,2
1634,269,,2
1847,291,,2
1540,799,,1
1084,529,module functiondef set_odd_bits arguments arg assign mask store 170 assign result store binop num load bitor mask load return result load End,2
1037,411,module functiondef filter_dict_by_value arguments arg arg assign filtered_dict store dict for tuple key store val store store method_call_start attribute_access items dictionary load load method_call_end attribute_access items dictionary load load if compare val load eq value load assign subscript filtered_dict load key load store val load return filtered_dict load End,2
198,714,module classdef node functiondef __init__ arguments arg arg assign attribute_access data self load store data load assign attribute_access left self load store none assign attribute_access right self load store none End End functiondef get_height arguments arg if compare root load is none return 0 return binop method_call_start max load method_call_start get_height load attribute_access left root load load method_call_end get_height load attribute_access left root load load method_call_start get_height load attribute_access right root load load method_call_end get_height load attribute_access right root load load method_call_end max load method_call_start get_height load attribute_access left root load load method_call_end get_height load attribute_access left root load load method_call_start get_height load attribute_access right root load load method_call_end get_height load attribute_access right root load load add 1 End functiondef is_tree_balanced arguments arg if compare root load is none return true assign lh store method_call_start get_height load attribute_access left root load load method_call_end get_height load attribute_access left root load load assign rh store method_call_start get_height load attribute_access right root load load method_call_end get_height load attribute_access right root load load if boolop and compare method_call_start abs load binop lh load sub rh load method_call_end abs load binop lh load sub rh load lte 1 compare method_call_start is_tree_balanced load attribute_access left root load load method_call_end is_tree_balanced load attribute_access left root load load is true compare method_call_start is_tree_balanced load attribute_access right root load load method_call_end is_tree_balanced load attribute_access right root load load is true return true return false End,2
1851,243,,1
1452,159,,1
392,130,module functiondef most_common_elements arguments arg assign words store method_call_start attribute_access split text load load method_call_end attribute_access split text load load assign word_counts store dict for word store words load if compare word load in word_counts load augassign subscript word_counts load word load store add 1 assign subscript word_counts load word load store 1 assign max_count store method_call_start max load method_call_start attribute_access values word_counts load load method_call_end attribute_access values word_counts load load method_call_end max load method_call_start attribute_access values word_counts load load method_call_end attribute_access values word_counts load load assign most_common store list load for tuple word store count store store method_call_start attribute_access items word_counts load load method_call_end attribute_access items word_counts load load if compare count load eq max_count load expr method_call_start attribute_access append most_common load load tuple word load count load load method_call_end attribute_access append most_common load load tuple word load count load load return most_common load End,2
955,100,module assign max store 1000 functiondef replace_spaces arguments arg assign string store method_call_start attribute_access strip string load load method_call_end attribute_access strip string load load assign i store method_call_start len load string load method_call_end len load string load assign space_count store method_call_start attribute_access count string load load   method_call_end attribute_access count string load load   assign new_length store binop i load add binop space_count load mult 2 if compare new_length load gt max load return unaryop usub 1 assign index store binop new_length load sub 1 assign string store method_call_start list load string load method_call_end list load string load for f store method_call_start range load binop i load sub 2 binop new_length load sub 2 method_call_end range load binop i load sub 2 binop new_length load sub 2 expr method_call_start attribute_access append string load load 0 method_call_end attribute_access append string load load 0 for j store method_call_start range load binop i load sub 1 0 unaryop usub 1 method_call_end range load binop i load sub 1 0 unaryop usub 1 if compare subscript string load j load load eq   assign subscript string load index load store 0 assign subscript string load binop index load sub 1 store 2 assign subscript string load binop index load sub 2 store % assign index store binop index load sub 3 assign subscript string load index load store subscript string load j load load augassign index store sub 1 return method_call_start attribute_access join  load string load method_call_end attribute_access join  load string load End,1
625,365,module functiondef nth_smart_number arguments arg assign smart_numbers store list 1 load assign i store 1 while compare method_call_start len load smart_numbers load method_call_end len load smart_numbers load lt n load augassign i store add 1 if method_call_start is_smart_number load i load method_call_end is_smart_number load i load expr method_call_start attribute_access append smart_numbers load load i load method_call_end attribute_access append smart_numbers load load i load return subscript smart_numbers load binop n load sub 1 load End functiondef is_smart_number arguments arg assign divisors store list load for i store method_call_start range load 1 binop num load add 1 method_call_end range load 1 binop num load add 1 if compare binop num load mod i load eq 0 expr method_call_start attribute_access append divisors load load i load method_call_end attribute_access append divisors load load i load return compare binop method_call_start len load divisors load method_call_end len load divisors load mod 2 eq 0 End,2
684,668,module functiondef heap_sort arguments arg functiondef heapify arguments arg arg arg assign largest store i load assign l store binop binop 2 mult i load add 1 assign r store binop binop 2 mult i load add 2 if boolop and compare l load lt n load compare subscript arr load i load load lt subscript arr load l load load assign largest store l load if boolop and compare r load lt n load compare subscript arr load largest load load lt subscript arr load r load load assign largest store r load if compare largest load noteq i load assign tuple subscript arr load i load store subscript arr load largest load store store tuple subscript arr load largest load load subscript arr load i load load load expr method_call_start heapify load arr load n load largest load method_call_end heapify load arr load n load largest load End assign n store method_call_start len load arr load method_call_end len load arr load for i store method_call_start range load binop binop n load floordiv 2 sub 1 unaryop usub 1 unaryop usub 1 method_call_end range load binop binop n load floordiv 2 sub 1 unaryop usub 1 unaryop usub 1 expr method_call_start heapify load arr load n load i load method_call_end heapify load arr load n load i load for i store method_call_start range load binop n load sub 1 0 unaryop usub 1 method_call_end range load binop n load sub 1 0 unaryop usub 1 assign tuple subscript arr load i load store subscript arr load 0 store store tuple subscript arr load 0 load subscript arr load i load load load expr method_call_start heapify load arr load i load 0 method_call_end heapify load arr load i load 0 return arr load End,2
1766,190,,1
379,973,module functiondef add_consecutive_nums arguments arg assign result store listcomp_start binop b load add a load comprehension tuple a store b store store method_call_start zip load subscript nums load slice unaryop usub 1 load subscript nums load slice 1 load method_call_end zip load subscript nums load slice unaryop usub 1 load subscript nums load slice 1 load listcomp_end binop b load add a load comprehension tuple a store b store store method_call_start zip load subscript nums load slice unaryop usub 1 load subscript nums load slice 1 load method_call_end zip load subscript nums load slice unaryop usub 1 load subscript nums load slice 1 load return result load End,1
1211,625,,1
1176,920,,2
503,250,module functiondef count_occurance arguments arg assign count store 0 for i store method_call_start range load method_call_start len load s load method_call_end len load s load method_call_end range load method_call_start len load s load method_call_end len load s load if boolop and compare subscript s load i load load eq s compare subscript s load binop i load add 1 load eq t compare subscript s load binop i load add 2 load eq d assign count store binop count load add 1 return count load End,2
1423,793,,2
194,537,module functiondef moddiv_list arguments arg arg assign result store method_call_start map load lambda arguments arg arg binop x load mod y load nums1 load nums2 load method_call_end map load lambda arguments arg arg binop x load mod y load nums1 load nums2 load return method_call_start list load result load method_call_end list load result load End,1
1100,78,module functiondef multiply arguments arg arg assign result store 0 for _ store method_call_start range load method_call_start abs load y load method_call_end abs load y load method_call_end range load method_call_start abs load y load method_call_end abs load y load augassign result store add method_call_start abs load x load method_call_end abs load x load if boolop or boolop and compare x load lt 0 compare y load lt 0 boolop and compare x load gt 0 compare y load gt 0 return result load return unaryop usub result load End,2
92,756,"module functiondef count_rotations arguments arg expr 
    count the number of rotations required to generate a sorted array.

    args:
    - arr: a list of integers

    returns:
    - count: an integer representing the number of rotations required
     assign count store 0 for i store method_call_start range load binop method_call_start len load arr load method_call_end len load arr load sub 1 method_call_end range load binop method_call_start len load arr load method_call_end len load arr load sub 1 if compare subscript arr load i load load gt subscript arr load binop i load add 1 load augassign count store add 1 return count load End",2
23,218,module functiondef smallest_range arguments arg assign min_range store method_call_start float load inf method_call_end float load inf assign max_range store method_call_start float load -inf method_call_end float load -inf for array store arrays load assign min_value store method_call_start min load array load method_call_end min load array load assign max_value store method_call_start max load array load method_call_end max load array load assign min_range store method_call_start min load min_range load min_value load method_call_end min load min_range load min_value load assign max_range store method_call_start max load max_range load max_value load method_call_end max load max_range load max_value load assign range_value store binop max_range load sub min_range load return range_value load End,2
1275,864,,2
788,831,module functiondef check_triangle arguments arg arg arg arg arg arg assign a store binop binop binop x1 load mult binop y2 load sub y3 load add binop x2 load mult binop y3 load sub y1 load add binop x3 load mult binop y1 load sub y2 load if compare a load eq 0 return no return yes End,1
410,56,module functiondef sum arguments arg assign sumofprimedivisors store binop list 0 load mult binop n load add 1 for i store method_call_start range load 2 binop n load add 1 method_call_end range load 2 binop n load add 1 if compare subscript sumofprimedivisors load i load load eq 0 for j store method_call_start range load i load binop n load add 1 i load method_call_end range load i load binop n load add 1 i load augassign subscript sumofprimedivisors load j load store add i load return subscript sumofprimedivisors load n load load End,2
1387,277,,2
921,648,"module functiondef find_nth_digit arguments arg arg arg expr 
    find the nth digit in the proper fraction numerator/denominator

    parameters:
    numerator (int): the numerator of the proper fraction.
    denominator (int): the denominator of the proper fraction.
    n (int): the position of the digit to find (1-indexed).

    returns:
    str: the nth digit in the proper fraction numerator/denominator.
     assign decimal store binop numerator load div denominator load assign decimal_str store method_call_start str load decimal load method_call_end str load decimal load assign decimal_str store method_call_start attribute_access replace decimal_str load load .  method_call_end attribute_access replace decimal_str load load .  return subscript decimal_str load binop n load sub 1 load End",2
330,198,module functiondef generate_spiral_matrix arguments arg assign matrix store listcomp_start binop list 0 load mult n load comprehension _ store method_call_start range load n load method_call_end range load n load listcomp_end binop list 0 load mult n load comprehension _ store method_call_start range load n load method_call_end range load n load assign num store 1 assign row_start store 0 assign row_end store binop n load sub 1 assign col_start store 0 assign col_end store binop n load sub 1 while compare num load lte binop n load mult n load for i store method_call_start range load col_start load binop col_end load add 1 method_call_end range load col_start load binop col_end load add 1 assign subscript subscript matrix load row_start load load i load store num load augassign num store add 1 augassign row_start store add 1 for i store method_call_start range load row_start load binop row_end load add 1 method_call_end range load row_start load binop row_end load add 1 assign subscript subscript matrix load i load load col_end load store num load augassign num store add 1 augassign col_end store sub 1 for i store method_call_start range load col_end load binop col_start load sub 1 unaryop usub 1 method_call_end range load col_end load binop col_start load sub 1 unaryop usub 1 assign subscript subscript matrix load row_end load load i load store num load augassign num store add 1 augassign row_end store sub 1 for i store method_call_start range load row_end load binop row_start load sub 1 unaryop usub 1 method_call_end range load row_end load binop row_start load sub 1 unaryop usub 1 assign subscript subscript matrix load i load load col_start load store num load augassign num store add 1 augassign col_start store add 1 return matrix load End,1
14,146,module import math alias functiondef count_divisors arguments arg assign count store 0 for i store method_call_start range load 1 binop method_call_start int load method_call_start attribute_access sqrt math load load n load method_call_end attribute_access sqrt math load load n load method_call_end int load method_call_start attribute_access sqrt math load load n load method_call_end attribute_access sqrt math load load n load add 2 method_call_end range load 1 binop method_call_start int load method_call_start attribute_access sqrt math load load n load method_call_end attribute_access sqrt math load load n load method_call_end int load method_call_start attribute_access sqrt math load load n load method_call_end attribute_access sqrt math load load n load add 2 if compare binop n load mod i load eq 0 if compare binop n load floordiv i load eq i load assign count store binop count load add 1 assign count store binop count load add 2 if compare binop count load mod 2 eq 0 return even return odd End,1
1548,861,,2
1445,747,,2
1259,131,,1
192,69,module import heapq alias functiondef heap_replace arguments arg arg expr method_call_start attribute_access heapify hq load load heap load method_call_end attribute_access heapify hq load load heap load expr method_call_start attribute_access heapreplace hq load load heap load a load method_call_end attribute_access heapreplace hq load load heap load a load return heap load End,1
1936,268,,2
124,727,"module functiondef convert_tuple_string_to_integer_tuple arguments arg assign integer_tuple store method_call_start tuple load method_call_start map load int load method_call_start attribute_access split method_call_start attribute_access strip tuple_string load load () method_call_end attribute_access strip tuple_string load load () load , method_call_end attribute_access split method_call_start attribute_access strip tuple_string load load () method_call_end attribute_access strip tuple_string load load () load , method_call_end map load int load method_call_start attribute_access split method_call_start attribute_access strip tuple_string load load () method_call_end attribute_access strip tuple_string load load () load , method_call_end attribute_access split method_call_start attribute_access strip tuple_string load load () method_call_end attribute_access strip tuple_string load load () load , method_call_end tuple load method_call_start map load int load method_call_start attribute_access split method_call_start attribute_access strip tuple_string load load () method_call_end attribute_access strip tuple_string load load () load , method_call_end attribute_access split method_call_start attribute_access strip tuple_string load load () method_call_end attribute_access strip tuple_string load load () load , method_call_end map load int load method_call_start attribute_access split method_call_start attribute_access strip tuple_string load load () method_call_end attribute_access strip tuple_string load load () load , method_call_end attribute_access split method_call_start attribute_access strip tuple_string load load () method_call_end attribute_access strip tuple_string load load () load , return integer_tuple load End",2
1810,231,,2
423,441,module functiondef find_average_of_cube arguments arg assign sum store 0 for i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 augassign sum store add binop binop i load mult i load mult i load return method_call_start round load binop sum load div n load 6 method_call_end round load binop sum load div n load 6 End,1
132,392,module functiondef check_elements_same arguments arg return compare method_call_start len load method_call_start set load lst load method_call_end set load lst load method_call_end len load method_call_start set load lst load method_call_end set load lst load eq 1 End,2
1872,835,,2
1706,755,,1
1236,933,,2
1639,169,,2
1868,614,,2
1676,264,,2
111,507,module from itertools import groupby alias functiondef extract_elements arguments arg arg assign result store listcomp_start i load comprehension tuple i store j store store method_call_start groupby load numbers load method_call_end groupby load numbers load compare method_call_start len load method_call_start list load j load method_call_end list load j load method_call_end len load method_call_start list load j load method_call_end list load j load eq n load listcomp_end i load comprehension tuple i store j store store method_call_start groupby load numbers load method_call_end groupby load numbers load compare method_call_start len load method_call_start list load j load method_call_end list load j load method_call_end len load method_call_start list load j load method_call_end list load j load eq n load return result load End,2
122,924,"module functiondef find_kth_element arguments arg arg expr 
    find the kth element in an array containing odd elements first and then even elements.

    parameters:
    arr (list): the input list containing odd and even elements.
    k (int): the kth element to find.

    returns:
    int: the kth element in the array.

     assign odd_elements store listcomp_start x load comprehension x store arr load compare binop x load mod 2 noteq 0 listcomp_end x load comprehension x store arr load compare binop x load mod 2 noteq 0 assign even_elements store listcomp_start x load comprehension x store arr load compare binop x load mod 2 eq 0 listcomp_end x load comprehension x store arr load compare binop x load mod 2 eq 0 assign merged_list store binop odd_elements load add even_elements load assign kth_element store ifexp compare k load lte method_call_start len load merged_list load method_call_end len load merged_list load subscript merged_list load binop k load sub 1 load unaryop usub 1 return kth_element load End",2
156,714,module functiondef is_subset arguments arg arg return method_call_start attribute_access issubset method_call_start set load array1 load method_call_end set load array1 load load method_call_start set load array2 load method_call_end set load array2 load method_call_end attribute_access issubset method_call_start set load array1 load method_call_end set load array1 load load method_call_start set load array2 load method_call_end set load array2 load End,1
900,187,module functiondef remove_odd_numbers arguments arg return listcomp_start x load comprehension x store lst load compare binop x load mod 2 eq 0 listcomp_end x load comprehension x store lst load compare binop x load mod 2 eq 0 End,1
713,209,module functiondef min_length arguments arg assign min_length store method_call_start min load generatorexp_start method_call_start len load x load method_call_end len load x load comprehension x store list1 load generatorexp_end method_call_start len load x load method_call_end len load x load comprehension x store list1 load method_call_end min load generatorexp_start method_call_start len load x load method_call_end len load x load comprehension x store list1 load generatorexp_end method_call_start len load x load method_call_end len load x load comprehension x store list1 load assign min_list store method_call_start min load generatorexp_start x load comprehension x store list1 load generatorexp_end x load comprehension x store list1 load method_call_end min load generatorexp_start x load comprehension x store list1 load generatorexp_end x load comprehension x store list1 load return tuple min_length load min_list load load End,2
468,685,module functiondef remove_replica arguments arg assign temp store method_call_start set load method_call_end set load assign res store method_call_start tuple load generatorexp_start ifexp boolop and compare ele load notin temp load unaryop not method_call_start attribute_access add temp load load ele load method_call_end attribute_access add temp load load ele load ele load msp comprehension ele store test_tup load generatorexp_end ifexp boolop and compare ele load notin temp load unaryop not method_call_start attribute_access add temp load load ele load method_call_end attribute_access add temp load load ele load ele load msp comprehension ele store test_tup load method_call_end tuple load generatorexp_start ifexp boolop and compare ele load notin temp load unaryop not method_call_start attribute_access add temp load load ele load method_call_end attribute_access add temp load load ele load ele load msp comprehension ele store test_tup load generatorexp_end ifexp boolop and compare ele load notin temp load unaryop not method_call_start attribute_access add temp load load ele load method_call_end attribute_access add temp load load ele load ele load msp comprehension ele store test_tup load return res load End,1
906,528,module functiondef find_highest_power_of_two arguments arg assign power store 0 while compare binop 2 pow power load lte n load augassign power store add 1 return binop 2 pow binop power load sub 1 End,2
984,340,module functiondef find_lcm arguments arg if compare method_call_start len load arr load method_call_end len load arr load eq 0 return none assign lcm store subscript arr load 0 load for i store method_call_start range load 1 method_call_start len load arr load method_call_end len load arr load method_call_end range load 1 method_call_start len load arr load method_call_end len load arr load assign num1 store lcm load assign num2 store subscript arr load i load load while true if compare binop num1 load mod num2 load eq 0 assign lcm store num1 load break augassign num1 store add lcm load return lcm load End,1
1060,600,module functiondef delete_and_insert arguments arg arg expr method_call_start attribute_access remove heap load load method_call_start min load heap load method_call_end min load heap load method_call_end attribute_access remove heap load load method_call_start min load heap load method_call_end min load heap load expr method_call_start attribute_access append heap load load item load method_call_end attribute_access append heap load load item load return heap load End,2
1088,54,module functiondef merge arguments arg return listcomp_start method_call_start list load ele load method_call_end list load ele load comprehension ele store method_call_start list load method_call_start zip load starred lst load load method_call_end zip load starred lst load load method_call_end list load method_call_start zip load starred lst load load method_call_end zip load starred lst load load listcomp_end method_call_start list load ele load method_call_end list load ele load comprehension ele store method_call_start list load method_call_start zip load starred lst load load method_call_end zip load starred lst load load method_call_end list load method_call_start zip load starred lst load load method_call_end zip load starred lst load load End,2
1642,30,,1
595,119,module functiondef bitwise_xor_tuple arguments arg return method_call_start tuple load method_call_start map load lambda arguments arg method_call_start reduce load lambda arguments arg arg binop a load bitxor b load x load method_call_end reduce load lambda arguments arg arg binop a load bitxor b load x load method_call_start zip load starred tuples load load method_call_end zip load starred tuples load load method_call_end map load lambda arguments arg method_call_start reduce load lambda arguments arg arg binop a load bitxor b load x load method_call_end reduce load lambda arguments arg arg binop a load bitxor b load x load method_call_start zip load starred tuples load load method_call_end zip load starred tuples load load method_call_end tuple load method_call_start map load lambda arguments arg method_call_start reduce load lambda arguments arg arg binop a load bitxor b load x load method_call_end reduce load lambda arguments arg arg binop a load bitxor b load x load method_call_start zip load starred tuples load load method_call_end zip load starred tuples load load method_call_end map load lambda arguments arg method_call_start reduce load lambda arguments arg arg binop a load bitxor b load x load method_call_end reduce load lambda arguments arg arg binop a load bitxor b load x load method_call_start zip load starred tuples load load method_call_end zip load starred tuples load load End,1
1707,738,,2
572,282,module functiondef list_tuple arguments arg assign tuplex store method_call_start tuple load listx load method_call_end tuple load listx load return tuplex load End,2
370,913,module functiondef find_median_sorted_arrays arguments arg arg assign merged store binop arr1 load add arr2 load expr method_call_start attribute_access sort merged load load method_call_end attribute_access sort merged load load if compare binop method_call_start len load merged load method_call_end len load merged load mod 2 eq 0 assign mid store binop method_call_start len load merged load method_call_end len load merged load floordiv 2 return binop binop subscript merged load binop mid load sub 1 load add subscript merged load mid load load div 2 assign mid store binop method_call_start len load merged load method_call_end len load merged load floordiv 2 return subscript merged load mid load load End,2
1334,603,,1
1838,247,,1
1526,336,,2
564,774,"module functiondef has_28_days arguments arg expr 
    check whether the given month number contains 28 days or not.

    parameters:
    month (int): the month number.

    returns:
    bool: true if the month has 28 days, false otherwise.
     return compare month load eq 2 End expr method_call_start print load method_call_start has_28_days load 2 method_call_end has_28_days load 2 method_call_end print load method_call_start has_28_days load 2 method_call_end has_28_days load 2 expr method_call_start print load method_call_start has_28_days load 3 method_call_end has_28_days load 3 method_call_end print load method_call_start has_28_days load 3 method_call_end has_28_days load 3",2
1463,709,,2
590,390,module functiondef remove_list_range arguments arg arg arg assign result store listcomp_start i load comprehension i store list1 load boolop and compare method_call_start min load i load method_call_end min load i load gte leftrange load compare method_call_start max load i load method_call_end max load i load lte rigthrange load listcomp_end i load comprehension i store list1 load boolop and compare method_call_start min load i load method_call_end min load i load gte leftrange load compare method_call_start max load i load method_call_end max load i load lte rigthrange load return result load End,2
131,604,module functiondef check_bits_unset arguments arg arg for i store method_call_start range load start load binop end load add 1 method_call_end range load start load binop end load add 1 if binop i load bitand 1 return false return true End,2
1272,165,,2
798,609,module functiondef check_product_even arguments arg assign product store 1 for num store numbers load augassign product store mult num load if compare binop product load mod 2 eq 0 return true return false End,1
54,124,module functiondef check_first_last_characters arguments arg return compare subscript string load 0 load eq subscript string load unaryop usub 1 load End,2
952,43,module import re alias functiondef text_starta_endb arguments arg assign patterns store a.*?b$ if method_call_start attribute_access search re load load patterns load text load method_call_end attribute_access search re load load patterns load text load return found a match! return not matched! End,1
1190,161,,1
1772,246,,1
577,48,module import math alias functiondef next_perfect_square arguments arg assign nextn store binop method_call_start attribute_access floor math load load method_call_start attribute_access sqrt math load load n load method_call_end attribute_access sqrt math load load n load method_call_end attribute_access floor math load load method_call_start attribute_access sqrt math load load n load method_call_end attribute_access sqrt math load load n load add 1 return binop nextn load mult nextn load End,2
393,836,module functiondef count_unique_lists arguments arg assign unique_lists store method_call_start set load generatorexp_start method_call_start tuple load x load method_call_end tuple load x load comprehension x store lst load generatorexp_end method_call_start tuple load x load method_call_end tuple load x load comprehension x store lst load method_call_end set load generatorexp_start method_call_start tuple load x load method_call_end tuple load x load comprehension x store lst load generatorexp_end method_call_start tuple load x load method_call_end tuple load x load comprehension x store lst load return method_call_start len load unique_lists load method_call_end len load unique_lists load End,1
1309,731,,2
426,58,module functiondef find_perimeter_of_pentagon arguments arg return binop side_length load mult 5 End,2
481,612,module import re alias functiondef find_adverbs arguments arg assign adverbs store list load assign regex store \b\w+ly\b assign matches store method_call_start attribute_access finditer re load load regex load sentence load method_call_end attribute_access finditer re load load regex load sentence load for match store matches load expr method_call_start attribute_access append adverbs load load tuple method_call_start attribute_access group match load load 0 method_call_end attribute_access group match load load 0 method_call_start attribute_access start match load load method_call_end attribute_access start match load load load method_call_end attribute_access append adverbs load load tuple method_call_start attribute_access group match load load 0 method_call_end attribute_access group match load load 0 method_call_start attribute_access start match load load method_call_end attribute_access start match load load load return adverbs load End,1
811,427,"module functiondef xor_sum arguments arg expr 
    calculates the sum of xor of all pairs of numbers in the given array.
    
    parameters:
    numbers (list): a list of numbers.
    
    returns:
    int: the sum of xor of all pairs of numbers.
     assign xor_sum store 0 for i store method_call_start range load method_call_start len load numbers load method_call_end len load numbers load method_call_end range load method_call_start len load numbers load method_call_end len load numbers load for j store method_call_start range load binop i load add 1 method_call_start len load numbers load method_call_end len load numbers load method_call_end range load binop i load add 1 method_call_start len load numbers load method_call_end len load numbers load augassign xor_sum store add binop subscript numbers load i load load bitxor subscript numbers load j load load return xor_sum load End",2
1101,382,module functiondef odd_position arguments arg return method_call_start all load generatorexp_start compare binop subscript nums load i load load mod 2 eq binop i load mod 2 comprehension i store method_call_start range load method_call_start len load nums load method_call_end len load nums load method_call_end range load method_call_start len load nums load method_call_end len load nums load generatorexp_end compare binop subscript nums load i load load mod 2 eq binop i load mod 2 comprehension i store method_call_start range load method_call_start len load nums load method_call_end len load nums load method_call_end range load method_call_start len load nums load method_call_end len load nums load method_call_end all load generatorexp_start compare binop subscript nums load i load load mod 2 eq binop i load mod 2 comprehension i store method_call_start range load method_call_start len load nums load method_call_end len load nums load method_call_end range load method_call_start len load nums load method_call_end len load nums load generatorexp_end compare binop subscript nums load i load load mod 2 eq binop i load mod 2 comprehension i store method_call_start range load method_call_start len load nums load method_call_end len load nums load method_call_end range load method_call_start len load nums load method_call_end len load nums load End,1
1718,553,,1
294,293,module functiondef find_largest_divisible_subset arguments arg if boolop or unaryop not nums load compare method_call_start len load nums load method_call_end len load nums load eq 1 return nums load expr method_call_start attribute_access sort nums load load method_call_end attribute_access sort nums load load assign dp store binop list 1 load mult method_call_start len load nums load method_call_end len load nums load assign prev store binop list unaryop usub 1 load mult method_call_start len load nums load method_call_end len load nums load assign max_idx store 0 assign max_size store method_call_start float load -inf method_call_end float load -inf for i store method_call_start range load method_call_start len load nums load method_call_end len load nums load method_call_end range load method_call_start len load nums load method_call_end len load nums load for j store method_call_start range load i load method_call_end range load i load if boolop and compare binop subscript nums load i load load mod subscript nums load j load load eq 0 compare binop subscript dp load j load load add 1 gt subscript dp load i load load assign subscript dp load i load store binop subscript dp load j load load add 1 assign subscript prev load i load store j load if compare subscript dp load i load load gt max_size load assign max_size store subscript dp load i load load assign max_idx store i load assign subset store list load while compare max_idx load noteq unaryop usub 1 expr method_call_start attribute_access append subset load load subscript nums load max_idx load load method_call_end attribute_access append subset load load subscript nums load max_idx load load assign max_idx store subscript prev load max_idx load load return subscript subset load slice unaryop usub 1 load End,2
398,141,module functiondef profit_amount arguments arg arg if compare actual_cost load gt sale_amount load assign amount store binop actual_cost load sub sale_amount load return amount load return none End,1
1635,142,,2
1344,415,,2
1694,943,,1
1349,68,,2
721,289,module functiondef remove_similar_rows arguments arg return method_call_start list load method_call_start set load matrix load method_call_end set load matrix load method_call_end list load method_call_start set load matrix load method_call_end set load matrix load End,2
73,598,module import heapq alias functiondef k_smallest_pairs arguments arg arg arg assign queue store list load functiondef push arguments arg arg if boolop and compare i load lt method_call_start len load nums1 load method_call_end len load nums1 load compare j load lt method_call_start len load nums2 load method_call_end len load nums2 load expr method_call_start attribute_access heappush heapq load load queue load list binop subscript nums1 load i load load add subscript nums2 load j load load i load j load load method_call_end attribute_access heappush heapq load load queue load list binop subscript nums1 load i load load add subscript nums2 load j load load i load j load load End expr method_call_start push load 0 0 method_call_end push load 0 0 assign pairs store list load while boolop and queue load compare method_call_start len load pairs load method_call_end len load pairs load lt k load assign tuple _ store i store j store store method_call_start attribute_access heappop heapq load load queue load method_call_end attribute_access heappop heapq load load queue load expr method_call_start attribute_access append pairs load load list subscript nums1 load i load load subscript nums2 load j load load load method_call_end attribute_access append pairs load load list subscript nums1 load i load load subscript nums2 load j load load load expr method_call_start push load i load binop j load add 1 method_call_end push load i load binop j load add 1 if compare j load eq 0 expr method_call_start push load binop i load add 1 0 method_call_end push load binop i load add 1 0 return pairs load End,2
983,127,module import heapq alias functiondef heap_assending arguments arg expr method_call_start attribute_access heapify hq load load nums load method_call_end attribute_access heapify hq load load nums load assign s_result store listcomp_start method_call_start attribute_access heappop hq load load nums load method_call_end attribute_access heappop hq load load nums load comprehension i store method_call_start range load method_call_start len load nums load method_call_end len load nums load method_call_end range load method_call_start len load nums load method_call_end len load nums load listcomp_end method_call_start attribute_access heappop hq load load nums load method_call_end attribute_access heappop hq load load nums load comprehension i store method_call_start range load method_call_start len load nums load method_call_end len load nums load method_call_end range load method_call_start len load nums load method_call_end len load nums load return s_result load End,2
1522,775,,1
470,822,module functiondef check arguments arg if compare method_call_start len load method_call_start attribute_access intersection method_call_start set load string load method_call_end set load string load load aeiouaeiou method_call_end attribute_access intersection method_call_start set load string load method_call_end set load string load load aeiouaeiou method_call_end len load method_call_start attribute_access intersection method_call_start set load string load method_call_end set load string load load aeiouaeiou method_call_end attribute_access intersection method_call_start set load string load method_call_end set load string load load aeiouaeiou gte 5 return accepted return not accepted End,2
1641,66,,2
772,231,"module functiondef sum_even_index_binomial_coefficients arguments arg expr 
    calculates the sum of even index binomial coefficients.

    args:
    - n: the number of binomial coefficients to consider.

    returns:
    - sum_of_coefficients: the sum of even index binomial coefficients.

    example:
    >>> sum_even_index_binomial_coefficients(4)
    3

    explanation: the binomial coefficients of index 0, 2, and 4 are 1, 6, and 15 respectively. 
    so the sum of even index binomial coefficients is 1 + 6 + 15 = 22.
     assign sum_of_coefficients store 0 for i store method_call_start range load binop n load add 1 method_call_end range load binop n load add 1 assign coefficient store 1 for j store method_call_start range load binop i load add 1 method_call_end range load binop i load add 1 if compare j load lt binop i load sub j load augassign coefficient store mult binop i load sub j load augassign coefficient store floordiv binop j load add 1 augassign coefficient store mult binop binop i load sub j load add 1 augassign coefficient store floordiv binop i load sub j load if compare binop i load mod 2 eq 0 augassign sum_of_coefficients store add coefficient load return sum_of_coefficients load End",1
761,114,module functiondef check_parallel arguments arg arg return boolop and compare subscript line1 load 0 load eq subscript line2 load 0 load compare subscript line1 load 1 load eq subscript line2 load 1 load End,1
1076,474,module functiondef prepend_string_to_list arguments arg arg return listcomp_start binop string load add item load comprehension item store lst load listcomp_end binop string load add item load comprehension item store lst load End,1
775,652,module functiondef find arguments arg arg assign r store binop n load mod m load return r load End,1
1041,428,module functiondef find_anagrams arguments arg arg return method_call_start list load method_call_start filter load lambda arguments arg compare method_call_start sorted load s load method_call_end sorted load s load eq method_call_start sorted load target load method_call_end sorted load target load strings load method_call_end filter load lambda arguments arg compare method_call_start sorted load s load method_call_end sorted load s load eq method_call_start sorted load target load method_call_end sorted load target load strings load method_call_end list load method_call_start filter load lambda arguments arg compare method_call_start sorted load s load method_call_end sorted load s load eq method_call_start sorted load target load method_call_end sorted load target load strings load method_call_end filter load lambda arguments arg compare method_call_start sorted load s load method_call_end sorted load s load eq method_call_start sorted load target load method_call_end sorted load target load strings load End,2
1836,726,,2
1071,8,module functiondef get_ludic arguments arg assign ludics store list load for i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 expr method_call_start attribute_access append ludics load load i load method_call_end attribute_access append ludics load load i load assign index store 1 while compare index load noteq method_call_start len load ludics load method_call_end len load ludics load assign first_ludic store subscript ludics load index load load assign remove_index store binop index load add first_ludic load while compare remove_index load lt method_call_start len load ludics load method_call_end len load ludics load expr method_call_start attribute_access remove ludics load load subscript ludics load remove_index load load method_call_end attribute_access remove ludics load load subscript ludics load remove_index load load assign remove_index store binop binop remove_index load add first_ludic load sub 1 augassign index store add 1 return ludics load End,1
244,262,module functiondef check_min_heap arguments arg arg if compare binop binop 2 mult i load add 2 gt method_call_start len load arr load method_call_end len load arr load return true assign left_child store boolop and compare subscript arr load i load load lte subscript arr load binop binop 2 mult i load add 1 load method_call_start check_min_heap load arr load binop binop 2 mult i load add 1 method_call_end check_min_heap load arr load binop binop 2 mult i load add 1 assign right_child store boolop or compare binop binop 2 mult i load add 2 eq method_call_start len load arr load method_call_end len load arr load boolop and compare subscript arr load i load load lte subscript arr load binop binop 2 mult i load add 2 load method_call_start check_min_heap load arr load binop binop 2 mult i load add 2 method_call_end check_min_heap load arr load binop binop 2 mult i load add 2 return boolop and left_child load right_child load End,1
591,962,module functiondef min_sum_of_abs_diff arguments arg arg expr method_call_start attribute_access sort arr1 load load method_call_end attribute_access sort arr1 load load expr method_call_start attribute_access sort arr2 load load method_call_end attribute_access sort arr2 load load assign sum_diff store 0 for i store method_call_start range load method_call_start len load arr1 load method_call_end len load arr1 load method_call_end range load method_call_start len load arr1 load method_call_end len load arr1 load augassign sum_diff store add method_call_start abs load binop subscript arr1 load i load load sub subscript arr2 load i load load method_call_end abs load binop subscript arr1 load i load load sub subscript arr2 load i load load return sum_diff load End,2
1121,368,module functiondef tuple_to_dict arguments arg return dictcomp_start subscript t load i load load subscript t load binop i load add 1 load comprehension i store method_call_start range load 0 method_call_start len load t load method_call_end len load t load 2 method_call_end range load 0 method_call_start len load t load method_call_end len load t load 2 dictcomp_end subscript t load i load load subscript t load binop i load add 1 load comprehension i store method_call_start range load 0 method_call_start len load t load method_call_end len load t load 2 method_call_end range load 0 method_call_start len load t load method_call_end len load t load 2 End,1
404,818,module functiondef sum_of_three_lowest arguments arg assign positive_nums store listcomp_start num load comprehension num store nums load compare num load gt 0 listcomp_end num load comprehension num store nums load compare num load gt 0 assign sorted_nums store method_call_start sorted load positive_nums load method_call_end sorted load positive_nums load assign sum_of_three store method_call_start sum load subscript sorted_nums load slice 3 load method_call_end sum load subscript sorted_nums load slice 3 load return sum_of_three load End,1
141,264,module functiondef match_word_with_z arguments arg if compare z in word load return true return false End,1
1428,225,,2
1515,752,,2
264,646,module functiondef triangle_area arguments arg if compare r load lt 0 return unaryop usub 1 return binop r load mult r load End,2
253,586,module functiondef get_first_elements arguments arg assign first_elements store list load for sublist store sublists load if compare method_call_start len load sublist load method_call_end len load sublist load gt 0 expr method_call_start attribute_access append first_elements load load subscript sublist load 0 load method_call_end attribute_access append first_elements load load subscript sublist load 0 load return first_elements load End,2
982,480,module functiondef sequence arguments arg if boolop or compare n load eq 1 compare n load eq 2 return 1 return binop method_call_start sequence load method_call_start sequence load binop n load sub 1 method_call_end sequence load binop n load sub 1 method_call_end sequence load method_call_start sequence load binop n load sub 1 method_call_end sequence load binop n load sub 1 add method_call_start sequence load binop n load sub method_call_start sequence load binop n load sub 1 method_call_end sequence load binop n load sub 1 method_call_end sequence load binop n load sub method_call_start sequence load binop n load sub 1 method_call_end sequence load binop n load sub 1 End,2
1254,740,,2
689,412,module functiondef string_to_list arguments arg return method_call_start list load input_string load method_call_end list load input_string load End,1
1045,469,module functiondef find_star_number arguments arg return binop binop n load pow 2 add n load End,2
20,859,module functiondef sort_dict_by_tuple_product arguments arg return method_call_start dict load method_call_start sorted load method_call_start attribute_access items dictionary load load method_call_end attribute_access items dictionary load load method_call_end sorted load method_call_start attribute_access items dictionary load load method_call_end attribute_access items dictionary load load keyword lambda arguments arg binop subscript subscript x load 0 load 0 load mult subscript subscript x load 0 load 1 load method_call_end dict load method_call_start sorted load method_call_start attribute_access items dictionary load load method_call_end attribute_access items dictionary load load method_call_end sorted load method_call_start attribute_access items dictionary load load method_call_end attribute_access items dictionary load load keyword lambda arguments arg binop subscript subscript x load 0 load 0 load mult subscript subscript x load 0 load 1 load End,1
613,234,"module functiondef extract_even_elements arguments arg expr 
    extracts the even elements in the nested mixed tuple.
    
    parameters:
        nested_tuple (tuple): a nested mixed tuple.
        
    returns:
        tuple: a tuple containing the even elements from the nested_tuple.
     assign even_elements store tuple load for element store nested_tuple load if method_call_start isinstance load element load tuple load method_call_end isinstance load element load tuple load augassign even_elements store add method_call_start extract_even_elements load element load method_call_end extract_even_elements load element load if boolop and method_call_start isinstance load element load int load method_call_end isinstance load element load int load compare binop element load mod 2 eq 0 augassign even_elements store add tuple element load load return even_elements load End",2
954,62,module functiondef difference_of_sums arguments arg assign sum_of_squares store binop binop binop n load mult binop n load add 1 floordiv 2 pow 2 assign sum_of_cubes store binop binop binop binop n load mult binop n load add 1 floordiv 2 mult binop binop binop n load mult binop n load add 1 floordiv 2 add 1 floordiv 2 return binop sum_of_cubes load sub sum_of_squares load End,2
1882,304,,1
1320,673,,1
1598,562,,2
1888,223,,1
1493,568,,1
448,690,module functiondef make_flip arguments arg return ifexp compare ch load eq 0 1 0 End functiondef get_flip_with_starting_charcter arguments arg arg assign flip_count store 0 for i store method_call_start range load method_call_start len load str load method_call_end len load str load method_call_end range load method_call_start len load str load method_call_end len load str load if compare subscript str load i load load noteq expected load augassign flip_count store add 1 assign expected store method_call_start make_flip load expected load method_call_end make_flip load expected load return flip_count load End functiondef min_flip_to_make_string_alternate arguments arg return method_call_start min load method_call_start get_flip_with_starting_charcter load str load 0 method_call_end get_flip_with_starting_charcter load str load 0 method_call_start get_flip_with_starting_charcter load str load 1 method_call_end get_flip_with_starting_charcter load str load 1 method_call_end min load method_call_start get_flip_with_starting_charcter load str load 0 method_call_end get_flip_with_starting_charcter load str load 0 method_call_start get_flip_with_starting_charcter load str load 1 method_call_end get_flip_with_starting_charcter load str load 1 End,2
911,168,module functiondef find_rotations arguments arg assign tmp store binop str load add str load assign n store method_call_start len load str load method_call_end len load str load for i store method_call_start range load 1 binop n load add 1 method_call_end range load 1 binop n load add 1 assign substring store subscript tmp load slice i load binop i load add n load load if compare str load eq substring load return i load return n load End,1
1649,533,,2
6,527,module functiondef remove_empty_lists arguments arg return listcomp_start sublist load comprehension sublist store lst load sublist load listcomp_end sublist load comprehension sublist store lst load sublist load End,2
188,402,module functiondef union_elements arguments arg arg assign res store method_call_start tuple load method_call_start set load binop test_tup1 load add test_tup2 load method_call_end set load binop test_tup1 load add test_tup2 load method_call_end tuple load method_call_start set load binop test_tup1 load add test_tup2 load method_call_end set load binop test_tup1 load add test_tup2 load return res load End,2
1834,217,,1
1318,366,,1
1401,338,,1
865,213,module functiondef group_tuple_elements arguments arg assign result store dict for tpl store tuple_list load if compare subscript tpl load 1 load in result load expr method_call_start attribute_access append subscript result load subscript tpl load 1 load load load subscript tpl load 0 load method_call_end attribute_access append subscript result load subscript tpl load 1 load load load subscript tpl load 0 load assign subscript result load subscript tpl load 1 load store list subscript tpl load 0 load load return result load End,1
248,491,module functiondef find_equal_tuple arguments arg arg assign flag store 1 for tuple store input load if compare method_call_start len load tuple load method_call_end len load tuple load noteq k load assign flag store 0 break return flag load End functiondef get_equal arguments arg arg if compare method_call_start find_equal_tuple load input load k load method_call_end find_equal_tuple load input load k load eq 1 return all tuples have same length return all tuples do not have same length End,1
1680,95,,2
854,812,module import re alias functiondef remove_lowercase arguments arg assign remove_lower store lambda arguments arg method_call_start attribute_access sub re load load [a-z]  text load method_call_end attribute_access sub re load load [a-z]  text load assign result store method_call_start remove_lower load str1 load method_call_end remove_lower load str1 load return result load End,1
208,682,module functiondef toggle_string arguments arg assign string1 store method_call_start attribute_access swapcase string load load method_call_end attribute_access swapcase string load load return string1 load End,2
1586,31,,2
1874,163,,2
17,234,module functiondef validity_triangle arguments arg arg arg assign total store binop binop a load add b load add c load if compare total load eq 180 return true return false End,1
1906,902,,1
1577,796,,1
1207,323,,2
1893,414,,2
819,307,module functiondef remove_nested arguments arg assign res store method_call_start tuple load method_call_end tuple load for tuple count store ele store store method_call_start enumerate load test_tup load method_call_end enumerate load test_tup load if unaryop not method_call_start isinstance load ele load tuple load method_call_end isinstance load ele load tuple load assign res store binop res load add tuple ele load load return res load End,1
597,178,module functiondef longest_subsequence arguments arg assign longest_length store 0 assign longest_subseq store list load for num store array load assign current_length store 1 assign current_subseq store list num load load while compare binop num load add 1 in array load augassign num store add 1 augassign current_length store add 1 expr method_call_start attribute_access append current_subseq load load num load method_call_end attribute_access append current_subseq load load num load if compare current_length load gt longest_length load assign longest_length store current_length load assign longest_subseq store current_subseq load return longest_subseq load End,1
580,682,module functiondef check_k_elements arguments arg arg assign res store true for tup store test_list load for ele store tup load if compare ele load noteq k load assign res store false return res load End,1
72,301,module functiondef sample_nam arguments arg assign sample_names store method_call_start list load method_call_start filter load lambda arguments arg boolop and method_call_start attribute_access isupper subscript el load 0 load load method_call_end attribute_access isupper subscript el load 0 load load method_call_start attribute_access islower subscript el load slice 1 load load method_call_end attribute_access islower subscript el load slice 1 load load sample_names load method_call_end filter load lambda arguments arg boolop and method_call_start attribute_access isupper subscript el load 0 load load method_call_end attribute_access isupper subscript el load 0 load load method_call_start attribute_access islower subscript el load slice 1 load load method_call_end attribute_access islower subscript el load slice 1 load load sample_names load method_call_end list load method_call_start filter load lambda arguments arg boolop and method_call_start attribute_access isupper subscript el load 0 load load method_call_end attribute_access isupper subscript el load 0 load load method_call_start attribute_access islower subscript el load slice 1 load load method_call_end attribute_access islower subscript el load slice 1 load load sample_names load method_call_end filter load lambda arguments arg boolop and method_call_start attribute_access isupper subscript el load 0 load load method_call_end attribute_access isupper subscript el load 0 load load method_call_start attribute_access islower subscript el load slice 1 load load method_call_end attribute_access islower subscript el load slice 1 load load sample_names load return method_call_start len load method_call_start attribute_access join  load sample_names load method_call_end attribute_access join  load sample_names load method_call_end len load method_call_start attribute_access join  load sample_names load method_call_end attribute_access join  load sample_names load End,2
846,210,module functiondef min_ops arguments arg arg arg assign max1 store method_call_start max load arr load method_call_end max load arr load assign res store 0 for i store method_call_start range load 0 n load method_call_end range load 0 n load if compare binop binop max1 load sub subscript arr load i load load mod k load noteq 0 return unaryop usub 1 augassign res store add binop binop max1 load sub subscript arr load i load load div k load return method_call_start int load res load method_call_end int load res load End,1
559,874,module functiondef sorted_models arguments arg assign sorted_models store method_call_start sorted load models load method_call_end sorted load models load keyword lambda arguments arg subscript x load color load return sorted_models load End,2
1880,761,,2
